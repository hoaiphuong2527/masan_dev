!function (e) {
  function t(t) {
    for (var n, o, r = t[0], a = t[1], s = 0, l = []; s < r.length; s++)
      o = r[s],
        Object.prototype.hasOwnProperty.call(i, o) && i[o] && l.push(i[o][0]),
        i[o] = 0;
    for (n in a)
      Object.prototype.hasOwnProperty.call(a, n) && (e[n] = a[n]);
    for (c && c(t); l.length;)
      l.shift()()
  }
  var n = {}
    , o = {
      0: 0
    }
    , i = (o = {
      0: 0
    },
    {
      0: 0
    });
  function r(t) {
    if (n[t])
      return n[t].exports;
    var o = n[t] = {
      i: t,
      l: !1,
      exports: {}
    };
    return e[t].call(o.exports, o, o.exports, r),
      o.l = !0,
      o.exports
  }
  r.e = function (e) {
    var t = []
      , n = {
        1: 1
      };
    o[e] ? t.push(o[e]) : 0 !== o[e] && n[e] && t.push(o[e] = new Promise((function (t, n) {
      for (var i = e + "." + {
        1: "7e70b70c5b8f673d4767"
      }[e] + ".style.css", a = r.p + i, s = document.getElementsByTagName("link"), l = 0; l < s.length; l++) {
        var c = (p = s[l]).getAttribute("data-href") || p.getAttribute("href");
        if ("stylesheet" === p.rel && (c === i || c === a))
          return t()
      }
      var u = document.getElementsByTagName("style");
      for (l = 0; l < u.length; l++) {
        var p;
        if ((c = (p = u[l]).getAttribute("data-href")) === i || c === a)
          return t()
      }
      var d = document.createElement("link");
      d.rel = "stylesheet",
        d.type = "text/css",
        d.onload = t,
        d.onerror = function (t) {
          var i = t && t.target && t.target.src || a
            , r = new Error("Loading CSS chunk " + e + " failed.\n(" + i + ")");
          r.code = "CSS_CHUNK_LOAD_FAILED",
            r.request = i,
            delete o[e],
            d.parentNode.removeChild(d),
            n(r)
        }
        ,
        d.href = a,
        document.getElementsByTagName("head")[0].appendChild(d)
    }
    )).then((function () {
      o[e] = 0
    }
    )));
    n = {
      1: 1
    };
    o[e] ? t.push(o[e]) : 0 !== o[e] && n[e] && t.push(o[e] = new Promise((function (t, n) {
      for (var i = e + "." + {
        1: "7e70b70c5b8f673d4767"
      }[e] + ".style.css", a = r.p + i, s = document.getElementsByTagName("link"), l = 0; l < s.length; l++) {
        var c = (p = s[l]).getAttribute("data-href") || p.getAttribute("href");
        if ("stylesheet" === p.rel && (c === i || c === a))
          return t()
      }
      var u = document.getElementsByTagName("style");
      for (l = 0; l < u.length; l++) {
        var p;
        if ((c = (p = u[l]).getAttribute("data-href")) === i || c === a)
          return t()
      }
      var d = document.createElement("link");
      d.rel = "stylesheet",
        d.type = "text/css",
        d.onload = t,
        d.onerror = function (t) {
          var i = t && t.target && t.target.src || a
            , r = new Error("Loading CSS chunk " + e + " failed.\n(" + i + ")");
          r.code = "CSS_CHUNK_LOAD_FAILED",
            r.request = i,
            delete o[e],
            d.parentNode.removeChild(d),
            n(r)
        }
        ,
        d.href = a,
        document.getElementsByTagName("head")[0].appendChild(d)
    }
    )).then((function () {
      o[e] = 0
    }
    )));
    var a = i[e];
    if (0 !== a)
      if (a)
        t.push(a[2]);
      else {
        var s = new Promise((function (t, n) {
          a = i[e] = [t, n]
        }
        ));
        t.push(a[2] = s);
        var l, c = document.createElement("script");
        c.charset = "utf-8",
          c.timeout = 120,
          r.nc && c.setAttribute("nonce", r.nc),
          c.src = function (e) {
            return r.p + "" + e + ".bundle." + {
              1: "c878e1c8015bea7743c4"
            }[e] + ".js"
          }(e);
        var u = new Error;
        l = function (t) {
          c.onerror = c.onload = null,
            clearTimeout(p);
          var n = i[e];
          if (0 !== n) {
            if (n) {
              var o = t && ("load" === t.type ? "missing" : t.type)
                , r = t && t.target && t.target.src;
              u.message = "Loading chunk " + e + " failed.\n(" + o + ": " + r + ")",
                u.name = "ChunkLoadError",
                u.type = o,
                u.request = r,
                n[1](u)
            }
            i[e] = void 0
          }
        }
          ;
        var p = setTimeout((function () {
          l({
            type: "timeout",
            target: c
          })
        }
        ), 12e4);
        c.onerror = c.onload = l,
          document.head.appendChild(c)
      }
    return Promise.all(t)
  }
    ,
    r.m = e,
    r.c = n,
    r.d = function (e, t, n) {
      r.o(e, t) || Object.defineProperty(e, t, {
        enumerable: !0,
        get: n
      })
    }
    ,
    r.r = function (e) {
      "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
        value: "Module"
      }),
        Object.defineProperty(e, "__esModule", {
          value: !0
        })
    }
    ,
    r.t = function (e, t) {
      if (1 & t && (e = r(e)),
        8 & t)
        return e;
      if (4 & t && "object" == typeof e && e && e.__esModule)
        return e;
      var n = Object.create(null);
      if (r.r(n),
        Object.defineProperty(n, "default", {
          enumerable: !0,
          value: e
        }),
        2 & t && "string" != typeof e)
        for (var o in e)
          r.d(n, o, function (t) {
            return e[t]
          }
            .bind(null, o));
      return n
    }
    ,
    r.n = function (e) {
      var t = e && e.__esModule ? function () {
        return e.default
      }
        : function () {
          return e
        }
        ;
      return r.d(t, "a", t),
        t
    }
    ,
    r.o = function (e, t) {
      return Object.prototype.hasOwnProperty.call(e, t)
    }
    ,
    r.p = "dist/",
    r.oe = function (e) {
      throw console.error(e),
      e
    }
    ;
  var a = window.webpackJsonp = window.webpackJsonp || []
    , s = a.push.bind(a);
  a.push = t,
    a = a.slice();
  for (var l = 0; l < a.length; l++)
    t(a[l]);
  var c = s;
  r(r.s = 2)
}([function (e, t, n) {
  "use strict";
  n.d(t, "a", (function () {
    return o
  }
  ));
  const o = {
    MP3_OVERVIEW: {
      viewDisplayText: "IP View"
    },
    MP3_TER_E: {
      viewDisplayText: "TERRACE / ENTRANCE"
    },
    MP3_TER_CENTER: {
      viewDisplayText: "TERRACE / FACTORY CENTER",
      videoId: "gKb-TJUpf78",
      videoTitle: "TERRACE / 360 VIDEO (1 min)"
    },
    MP3_TER_C1: {
      viewDisplayText: "TERRACE / CORNER 1"
    },
    MP3_TER_C2: {
      viewDisplayText: "TERRACE / CORNER 2"
    },
    MP3_TER_O1: {
      viewDisplayText: "TERRACE / OFFICE 1"
    },
    MP3_TER_O2: {
      viewDisplayText: "TERRACE / OFFICE 2"
    },
    MP3_SEMI_E: {
      viewDisplayText: "SEMI - DETACHED / ENTRANCE"
    },
    MP3_SEMI_CENTER: {
      viewDisplayText: "SEMI - DETACHED / FACTORY CENTER",
      videoId: "2E8sAGIvxrY",
      videoTitle: "SEMI - DETACHED / 360 VIDEO (1 min)"
    },
    MP3_SEMI_C1: {
      viewDisplayText: "SEMI - DETACHED / CORNER 1"
    },
    MP3_SEMI_C2: {
      viewDisplayText: "SEMI - DETACHED / CORNER 2"
    },
    MP3_SEMI_O1: {
      viewDisplayText: "SEMI - DETACHED / OFFICE 1"
    },
    MP3_SEMI_O2: {
      viewDisplayText: "SEMI - DETACHED / OFFICE 2"
    },
    MP3_DET_E: {
      viewDisplayText: "DETACHED / ENTRANCE"
    },
    MP3_DET_CENTER: {
      viewDisplayText: "DETACHED / FACTORY CENTER",
      videoId: "mEZgDTyZ654",
      videoTitle: "DETACHED / 360 VIDEO (1 min)"
    },
    MP3_DET_O1: {
      viewDisplayText: "DETACHED / OFFICE 1"
    },
    MP3_DET_O2: {
      viewDisplayText: "DETACHED / OFFICE 2"
    },
    MP3_OUTDOOR_1: {
      viewDisplayText: "OUTDOOR VIEW 1"
    },
    MP3_OUTDOOR_2: {
      viewDisplayText: "OUTDOOR VIEW 2"
    },
    MP3_OUTDOOR_3: {
      viewDisplayText: "OUTDOOR VIEW 3"
    },
    MP3_OUTDOOR_4: {
      viewDisplayText: "OUTDOOR VIEW 4"
    },
    MP3_OUTDOOR_5: {
      viewDisplayText: "OUTDOOR VIEW 5"
    },
    MP3_OUTDOOR_6: {
      viewDisplayText: "OUTDOOR VIEW 6"
    },
    MP3_OUTDOOR_7: {
      viewDisplayText: "OUTDOOR VIEW 7"
    },
    MP3_OUTDOOR_8: {
      viewDisplayText: "OUTDOOR VIEW 8"
    },
    MP3_OUTDOOR_9: {
      viewDisplayText: "OUTDOOR VIEW 9"
    },
    ...{
      BB_OVERVIEW: {
        viewDisplayText: "IP View"
      },
      BB_TER_E1: {
        viewDisplayText: "TERRACE / ENTRANCE 1"
      },
      BB_TER_E2: {
        viewDisplayText: "TERRACE / ENTRANCE 2"
      },
      BB_TER_CENTER: {
        viewDisplayText: "TERRACE / FACTORY CENTER",
        videoId: "BlH4HdrKNdM",
        videoTitle: "TERRACE / 360 VIDEO (1 min)"
      },
      BB_TER_C1: {
        viewDisplayText: "TERRACE / CORNER 1"
      },
      BB_TER_C2: {
        viewDisplayText: "TERRACE / CORNER 2"
      },
      BB_TER_C3: {
        viewDisplayText: "TERRACE / CORNER 3"
      },
      BB_TER_O1: {
        viewDisplayText: "TERRACE / OFFICE 1"
      },
      BB_TER_O2: {
        viewDisplayText: "TERRACE / OFFICE 2"
      },
      BB_SEMI_E1: {
        viewDisplayText: "SEMI - DETACHED / ENTRANCE 1"
      },
      BB_SEMI_E2: {
        viewDisplayText: "SEMI - DETACHED / ENTRANCE 2"
      },
      BB_SEMI_CENTER: {
        viewDisplayText: "SEMI - DETACHED / FACTORY CENTER",
        videoId: "6bDs-avkXrg",
        videoTitle: "SEMI - DETACHED / 360 VIDEO (1 min)"
      },
      BB_SEMI_C1: {
        viewDisplayText: "SEMI - DETACHED / CORNER 1"
      },
      BB_SEMI_C2: {
        viewDisplayText: "SEMI - DETACHED / CORNER 2"
      },
      BB_SEMI_C3: {
        viewDisplayText: "SEMI - DETACHED / CORNER 3"
      },
      BB_SEMI_O1: {
        viewDisplayText: "SEMI - DETACHED / OFFICE 1"
      },
      BB_SEMI_O2: {
        viewDisplayText: "SEMI - DETACHED / OFFICE 2"
      },
      BB_DET_E: {
        viewDisplayText: "DETACHED / ENTRANCE"
      },
      BB_DET_CENTER: {
        viewDisplayText: "DETACHED / FACTORY CENTER",
        videoId: "p6H768rSqJQ",
        videoTitle: "DETACHED / 360 VIDEO (1 min)"
      },
      BB_DET_O: {
        viewDisplayText: "DETACHED / OFFICE"
      },
      BB_OUTDOOR_1: {
        viewDisplayText: "OUTDOOR VIEW 1"
      },
      BB_OUTDOOR_2: {
        viewDisplayText: "OUTDOOR VIEW 2"
      },
      BB_OUTDOOR_3: {
        viewDisplayText: "OUTDOOR VIEW 3"
      },
      BB_OUTDOOR_4: {
        viewDisplayText: "OUTDOOR VIEW 4"
      },
      BB_OUTDOOR_5: {
        viewDisplayText: "OUTDOOR VIEW 5"
      },
      BB_OUTDOOR_6: {
        viewDisplayText: "OUTDOOR VIEW 6"
      }
    }
  }
}
  , function (e, t, n) {
    var o;
    /*!
  * jQuery JavaScript Library v3.5.1
  * https://jquery.com/
  *
  * Includes Sizzle.js
  * https://sizzlejs.com/
  *
  * Copyright JS Foundation and other contributors
  * Released under the MIT license
  * https://jquery.org/license
  *
  * Date: 2020-05-04T22:49Z
  */
    !function (t, n) {
      "use strict";
      "object" == typeof e.exports ? e.exports = t.document ? n(t, !0) : function (e) {
        if (!e.document)
          throw new Error("jQuery requires a window with a document");
        return n(e)
      }
        : n(t)
    }("undefined" != typeof window ? window : this, (function (n, i) {
      "use strict";
      var r = []
        , a = Object.getPrototypeOf
        , s = r.slice
        , l = r.flat ? function (e) {
          return r.flat.call(e)
        }
          : function (e) {
            return r.concat.apply([], e)
          }
        , c = r.push
        , u = r.indexOf
        , p = {}
        , d = p.toString
        , h = p.hasOwnProperty
        , f = h.toString
        , y = f.call(Object)
        , m = {}
        , g = function (e) {
          return "function" == typeof e && "number" != typeof e.nodeType
        }
        , v = function (e) {
          return null != e && e === e.window
        }
        , x = n.document
        , _ = {
          type: !0,
          src: !0,
          nonce: !0,
          noModule: !0
        };
      function E(e, t, n) {
        var o, i, r = (n = n || x).createElement("script");
        if (r.text = e,
          t)
          for (o in _)
            (i = t[o] || t.getAttribute && t.getAttribute(o)) && r.setAttribute(o, i);
        n.head.appendChild(r).parentNode.removeChild(r)
      }
      function b(e) {
        return null == e ? e + "" : "object" == typeof e || "function" == typeof e ? p[d.call(e)] || "object" : typeof e
      }
      var T = function (e, t) {
        return new T.fn.init(e, t)
      };
      function w(e) {
        var t = !!e && "length" in e && e.length
          , n = b(e);
        return !g(e) && !v(e) && ("array" === n || 0 === t || "number" == typeof t && t > 0 && t - 1 in e)
      }
      T.fn = T.prototype = {
        jquery: "3.5.1",
        constructor: T,
        length: 0,
        toArray: function () {
          return s.call(this)
        },
        get: function (e) {
          return null == e ? s.call(this) : e < 0 ? this[e + this.length] : this[e]
        },
        pushStack: function (e) {
          var t = T.merge(this.constructor(), e);
          return t.prevObject = this,
            t
        },
        each: function (e) {
          return T.each(this, e)
        },
        map: function (e) {
          return this.pushStack(T.map(this, (function (t, n) {
            return e.call(t, n, t)
          }
          )))
        },
        slice: function () {
          return this.pushStack(s.apply(this, arguments))
        },
        first: function () {
          return this.eq(0)
        },
        last: function () {
          return this.eq(-1)
        },
        even: function () {
          return this.pushStack(T.grep(this, (function (e, t) {
            return (t + 1) % 2
          }
          )))
        },
        odd: function () {
          return this.pushStack(T.grep(this, (function (e, t) {
            return t % 2
          }
          )))
        },
        eq: function (e) {
          var t = this.length
            , n = +e + (e < 0 ? t : 0);
          return this.pushStack(n >= 0 && n < t ? [this[n]] : [])
        },
        end: function () {
          return this.prevObject || this.constructor()
        },
        push: c,
        sort: r.sort,
        splice: r.splice
      },
        T.extend = T.fn.extend = function () {
          var e, t, n, o, i, r, a = arguments[0] || {}, s = 1, l = arguments.length, c = !1;
          for ("boolean" == typeof a && (c = a,
            a = arguments[s] || {},
            s++),
            "object" == typeof a || g(a) || (a = {}),
            s === l && (a = this,
              s--); s < l; s++)
            if (null != (e = arguments[s]))
              for (t in e)
                o = e[t],
                  "__proto__" !== t && a !== o && (c && o && (T.isPlainObject(o) || (i = Array.isArray(o))) ? (n = a[t],
                    r = i && !Array.isArray(n) ? [] : i || T.isPlainObject(n) ? n : {},
                    i = !1,
                    a[t] = T.extend(c, r, o)) : void 0 !== o && (a[t] = o));
          return a
        }
        ,
        T.extend({
          expando: "jQuery" + ("3.5.1" + Math.random()).replace(/\D/g, ""),
          isReady: !0,
          error: function (e) {
            throw new Error(e)
          },
          noop: function () { },
          isPlainObject: function (e) {
            var t, n;
            return !(!e || "[object Object]" !== d.call(e)) && (!(t = a(e)) || "function" == typeof (n = h.call(t, "constructor") && t.constructor) && f.call(n) === y)
          },
          isEmptyObject: function (e) {
            var t;
            for (t in e)
              return !1;
            return !0
          },
          globalEval: function (e, t, n) {
            E(e, {
              nonce: t && t.nonce
            }, n)
          },
          each: function (e, t) {
            var n, o = 0;
            if (w(e))
              for (n = e.length; o < n && !1 !== t.call(e[o], o, e[o]); o++)
                ;
            else
              for (o in e)
                if (!1 === t.call(e[o], o, e[o]))
                  break;
            return e
          },
          makeArray: function (e, t) {
            var n = t || [];
            return null != e && (w(Object(e)) ? T.merge(n, "string" == typeof e ? [e] : e) : c.call(n, e)),
              n
          },
          inArray: function (e, t, n) {
            return null == t ? -1 : u.call(t, e, n)
          },
          merge: function (e, t) {
            for (var n = +t.length, o = 0, i = e.length; o < n; o++)
              e[i++] = t[o];
            return e.length = i,
              e
          },
          grep: function (e, t, n) {
            for (var o = [], i = 0, r = e.length, a = !n; i < r; i++)
              !t(e[i], i) !== a && o.push(e[i]);
            return o
          },
          map: function (e, t, n) {
            var o, i, r = 0, a = [];
            if (w(e))
              for (o = e.length; r < o; r++)
                null != (i = t(e[r], r, n)) && a.push(i);
            else
              for (r in e)
                null != (i = t(e[r], r, n)) && a.push(i);
            return l(a)
          },
          guid: 1,
          support: m
        }),
        "function" == typeof Symbol && (T.fn[Symbol.iterator] = r[Symbol.iterator]),
        T.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), (function (e, t) {
          p["[object " + t + "]"] = t.toLowerCase()
        }
        ));
      var O = /*!
* Sizzle CSS Selector Engine v2.3.5
* https://sizzlejs.com/
*
* Copyright JS Foundation and other contributors
* Released under the MIT license
* https://js.foundation/
*
* Date: 2020-03-14
*/
        function (e) {
          var t, n, o, i, r, a, s, l, c, u, p, d, h, f, y, m, g, v, x, _ = "sizzle" + 1 * new Date, E = e.document, b = 0, T = 0, w = le(), O = le(), j = le(), M = le(), C = function (e, t) {
            return e === t && (p = !0),
              0
          }, R = {}.hasOwnProperty, B = [], D = B.pop, k = B.push, S = B.push, I = B.slice, P = function (e, t) {
            for (var n = 0, o = e.length; n < o; n++)
              if (e[n] === t)
                return n;
            return -1
          }, A = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", N = "[\\x20\\t\\r\\n\\f]", H = "(?:\\\\[\\da-fA-F]{1,6}" + N + "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+", L = "\\[" + N + "*(" + H + ")(?:" + N + "*([*^$|!~]?=)" + N + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + H + "))|)" + N + "*\\]", V = ":(" + H + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + L + ")*)|.*)\\)|)", F = new RegExp(N + "+", "g"), U = new RegExp("^" + N + "+|((?:^|[^\\\\])(?:\\\\.)*)" + N + "+$", "g"), q = new RegExp("^" + N + "*," + N + "*"), z = new RegExp("^" + N + "*([>+~]|" + N + ")" + N + "*"), $ = new RegExp(N + "|>"), W = new RegExp(V), X = new RegExp("^" + H + "$"), G = {
            ID: new RegExp("^#(" + H + ")"),
            CLASS: new RegExp("^\\.(" + H + ")"),
            TAG: new RegExp("^(" + H + "|[*])"),
            ATTR: new RegExp("^" + L),
            PSEUDO: new RegExp("^" + V),
            CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + N + "*(even|odd|(([+-]|)(\\d*)n|)" + N + "*(?:([+-]|)" + N + "*(\\d+)|))" + N + "*\\)|)", "i"),
            bool: new RegExp("^(?:" + A + ")$", "i"),
            needsContext: new RegExp("^" + N + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + N + "*((?:-\\d)?\\d*)" + N + "*\\)|)(?=[^-]|$)", "i")
          }, Q = /HTML$/i, Y = /^(?:input|select|textarea|button)$/i, J = /^h\d$/i, K = /^[^{]+\{\s*\[native \w/, Z = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, ee = /[+~]/, te = new RegExp("\\\\[\\da-fA-F]{1,6}" + N + "?|\\\\([^\\r\\n\\f])", "g"), ne = function (e, t) {
            var n = "0x" + e.slice(1) - 65536;
            return t || (n < 0 ? String.fromCharCode(n + 65536) : String.fromCharCode(n >> 10 | 55296, 1023 & n | 56320))
          }, oe = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g, ie = function (e, t) {
            return t ? "\0" === e ? "�" : e.slice(0, -1) + "\\" + e.charCodeAt(e.length - 1).toString(16) + " " : "\\" + e
          }, re = function () {
            d()
          }, ae = _e((function (e) {
            return !0 === e.disabled && "fieldset" === e.nodeName.toLowerCase()
          }
          ), {
            dir: "parentNode",
            next: "legend"
          });
          try {
            S.apply(B = I.call(E.childNodes), E.childNodes),
              B[E.childNodes.length].nodeType
          } catch (e) {
            S = {
              apply: B.length ? function (e, t) {
                k.apply(e, I.call(t))
              }
                : function (e, t) {
                  for (var n = e.length, o = 0; e[n++] = t[o++];)
                    ;
                  e.length = n - 1
                }
            }
          }
          function se(e, t, o, i) {
            var r, s, c, u, p, f, g, v = t && t.ownerDocument, E = t ? t.nodeType : 9;
            if (o = o || [],
              "string" != typeof e || !e || 1 !== E && 9 !== E && 11 !== E)
              return o;
            if (!i && (d(t),
              t = t || h,
              y)) {
              if (11 !== E && (p = Z.exec(e)))
                if (r = p[1]) {
                  if (9 === E) {
                    if (!(c = t.getElementById(r)))
                      return o;
                    if (c.id === r)
                      return o.push(c),
                        o
                  } else if (v && (c = v.getElementById(r)) && x(t, c) && c.id === r)
                    return o.push(c),
                      o
                } else {
                  if (p[2])
                    return S.apply(o, t.getElementsByTagName(e)),
                      o;
                  if ((r = p[3]) && n.getElementsByClassName && t.getElementsByClassName)
                    return S.apply(o, t.getElementsByClassName(r)),
                      o
                }
              if (n.qsa && !M[e + " "] && (!m || !m.test(e)) && (1 !== E || "object" !== t.nodeName.toLowerCase())) {
                if (g = e,
                  v = t,
                  1 === E && ($.test(e) || z.test(e))) {
                  for ((v = ee.test(e) && ge(t.parentNode) || t) === t && n.scope || ((u = t.getAttribute("id")) ? u = u.replace(oe, ie) : t.setAttribute("id", u = _)),
                    s = (f = a(e)).length; s--;)
                    f[s] = (u ? "#" + u : ":scope") + " " + xe(f[s]);
                  g = f.join(",")
                }
                try {
                  return S.apply(o, v.querySelectorAll(g)),
                    o
                } catch (t) {
                  M(e, !0)
                } finally {
                  u === _ && t.removeAttribute("id")
                }
              }
            }
            return l(e.replace(U, "$1"), t, o, i)
          }
          function le() {
            var e = [];
            return function t(n, i) {
              return e.push(n + " ") > o.cacheLength && delete t[e.shift()],
                t[n + " "] = i
            }
          }
          function ce(e) {
            return e[_] = !0,
              e
          }
          function ue(e) {
            var t = h.createElement("fieldset");
            try {
              return !!e(t)
            } catch (e) {
              return !1
            } finally {
              t.parentNode && t.parentNode.removeChild(t),
                t = null
            }
          }
          function pe(e, t) {
            for (var n = e.split("|"), i = n.length; i--;)
              o.attrHandle[n[i]] = t
          }
          function de(e, t) {
            var n = t && e
              , o = n && 1 === e.nodeType && 1 === t.nodeType && e.sourceIndex - t.sourceIndex;
            if (o)
              return o;
            if (n)
              for (; n = n.nextSibling;)
                if (n === t)
                  return -1;
            return e ? 1 : -1
          }
          function he(e) {
            return function (t) {
              return "input" === t.nodeName.toLowerCase() && t.type === e
            }
          }
          function fe(e) {
            return function (t) {
              var n = t.nodeName.toLowerCase();
              return ("input" === n || "button" === n) && t.type === e
            }
          }
          function ye(e) {
            return function (t) {
              return "form" in t ? t.parentNode && !1 === t.disabled ? "label" in t ? "label" in t.parentNode ? t.parentNode.disabled === e : t.disabled === e : t.isDisabled === e || t.isDisabled !== !e && ae(t) === e : t.disabled === e : "label" in t && t.disabled === e
            }
          }
          function me(e) {
            return ce((function (t) {
              return t = +t,
                ce((function (n, o) {
                  for (var i, r = e([], n.length, t), a = r.length; a--;)
                    n[i = r[a]] && (n[i] = !(o[i] = n[i]))
                }
                ))
            }
            ))
          }
          function ge(e) {
            return e && void 0 !== e.getElementsByTagName && e
          }
          for (t in n = se.support = {},
            r = se.isXML = function (e) {
              var t = e.namespaceURI
                , n = (e.ownerDocument || e).documentElement;
              return !Q.test(t || n && n.nodeName || "HTML")
            }
            ,
            d = se.setDocument = function (e) {
              var t, i, a = e ? e.ownerDocument || e : E;
              return a != h && 9 === a.nodeType && a.documentElement ? (f = (h = a).documentElement,
                y = !r(h),
                E != h && (i = h.defaultView) && i.top !== i && (i.addEventListener ? i.addEventListener("unload", re, !1) : i.attachEvent && i.attachEvent("onunload", re)),
                n.scope = ue((function (e) {
                  return f.appendChild(e).appendChild(h.createElement("div")),
                    void 0 !== e.querySelectorAll && !e.querySelectorAll(":scope fieldset div").length
                }
                )),
                n.attributes = ue((function (e) {
                  return e.className = "i",
                    !e.getAttribute("className")
                }
                )),
                n.getElementsByTagName = ue((function (e) {
                  return e.appendChild(h.createComment("")),
                    !e.getElementsByTagName("*").length
                }
                )),
                n.getElementsByClassName = K.test(h.getElementsByClassName),
                n.getById = ue((function (e) {
                  return f.appendChild(e).id = _,
                    !h.getElementsByName || !h.getElementsByName(_).length
                }
                )),
                n.getById ? (o.filter.ID = function (e) {
                  var t = e.replace(te, ne);
                  return function (e) {
                    return e.getAttribute("id") === t
                  }
                }
                  ,
                  o.find.ID = function (e, t) {
                    if (void 0 !== t.getElementById && y) {
                      var n = t.getElementById(e);
                      return n ? [n] : []
                    }
                  }
                ) : (o.filter.ID = function (e) {
                  var t = e.replace(te, ne);
                  return function (e) {
                    var n = void 0 !== e.getAttributeNode && e.getAttributeNode("id");
                    return n && n.value === t
                  }
                }
                  ,
                  o.find.ID = function (e, t) {
                    if (void 0 !== t.getElementById && y) {
                      var n, o, i, r = t.getElementById(e);
                      if (r) {
                        if ((n = r.getAttributeNode("id")) && n.value === e)
                          return [r];
                        for (i = t.getElementsByName(e),
                          o = 0; r = i[o++];)
                          if ((n = r.getAttributeNode("id")) && n.value === e)
                            return [r]
                      }
                      return []
                    }
                  }
                  ),
                o.find.TAG = n.getElementsByTagName ? function (e, t) {
                  return void 0 !== t.getElementsByTagName ? t.getElementsByTagName(e) : n.qsa ? t.querySelectorAll(e) : void 0
                }
                  : function (e, t) {
                    var n, o = [], i = 0, r = t.getElementsByTagName(e);
                    if ("*" === e) {
                      for (; n = r[i++];)
                        1 === n.nodeType && o.push(n);
                      return o
                    }
                    return r
                  }
                ,
                o.find.CLASS = n.getElementsByClassName && function (e, t) {
                  if (void 0 !== t.getElementsByClassName && y)
                    return t.getElementsByClassName(e)
                }
                ,
                g = [],
                m = [],
                (n.qsa = K.test(h.querySelectorAll)) && (ue((function (e) {
                  var t;
                  f.appendChild(e).innerHTML = "<a id='" + _ + "'></a><select id='" + _ + "-\r\\' msallowcapture=''><option selected=''></option></select>",
                    e.querySelectorAll("[msallowcapture^='']").length && m.push("[*^$]=" + N + "*(?:''|\"\")"),
                    e.querySelectorAll("[selected]").length || m.push("\\[" + N + "*(?:value|" + A + ")"),
                    e.querySelectorAll("[id~=" + _ + "-]").length || m.push("~="),
                    (t = h.createElement("input")).setAttribute("name", ""),
                    e.appendChild(t),
                    e.querySelectorAll("[name='']").length || m.push("\\[" + N + "*name" + N + "*=" + N + "*(?:''|\"\")"),
                    e.querySelectorAll(":checked").length || m.push(":checked"),
                    e.querySelectorAll("a#" + _ + "+*").length || m.push(".#.+[+~]"),
                    e.querySelectorAll("\\\f"),
                    m.push("[\\r\\n\\f]")
                }
                )),
                  ue((function (e) {
                    e.innerHTML = "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";
                    var t = h.createElement("input");
                    t.setAttribute("type", "hidden"),
                      e.appendChild(t).setAttribute("name", "D"),
                      e.querySelectorAll("[name=d]").length && m.push("name" + N + "*[*^$|!~]?="),
                      2 !== e.querySelectorAll(":enabled").length && m.push(":enabled", ":disabled"),
                      f.appendChild(e).disabled = !0,
                      2 !== e.querySelectorAll(":disabled").length && m.push(":enabled", ":disabled"),
                      e.querySelectorAll("*,:x"),
                      m.push(",.*:")
                  }
                  ))),
                (n.matchesSelector = K.test(v = f.matches || f.webkitMatchesSelector || f.mozMatchesSelector || f.oMatchesSelector || f.msMatchesSelector)) && ue((function (e) {
                  n.disconnectedMatch = v.call(e, "*"),
                    v.call(e, "[s!='']:x"),
                    g.push("!=", V)
                }
                )),
                m = m.length && new RegExp(m.join("|")),
                g = g.length && new RegExp(g.join("|")),
                t = K.test(f.compareDocumentPosition),
                x = t || K.test(f.contains) ? function (e, t) {
                  var n = 9 === e.nodeType ? e.documentElement : e
                    , o = t && t.parentNode;
                  return e === o || !(!o || 1 !== o.nodeType || !(n.contains ? n.contains(o) : e.compareDocumentPosition && 16 & e.compareDocumentPosition(o)))
                }
                  : function (e, t) {
                    if (t)
                      for (; t = t.parentNode;)
                        if (t === e)
                          return !0;
                    return !1
                  }
                ,
                C = t ? function (e, t) {
                  if (e === t)
                    return p = !0,
                      0;
                  var o = !e.compareDocumentPosition - !t.compareDocumentPosition;
                  return o || (1 & (o = (e.ownerDocument || e) == (t.ownerDocument || t) ? e.compareDocumentPosition(t) : 1) || !n.sortDetached && t.compareDocumentPosition(e) === o ? e == h || e.ownerDocument == E && x(E, e) ? -1 : t == h || t.ownerDocument == E && x(E, t) ? 1 : u ? P(u, e) - P(u, t) : 0 : 4 & o ? -1 : 1)
                }
                  : function (e, t) {
                    if (e === t)
                      return p = !0,
                        0;
                    var n, o = 0, i = e.parentNode, r = t.parentNode, a = [e], s = [t];
                    if (!i || !r)
                      return e == h ? -1 : t == h ? 1 : i ? -1 : r ? 1 : u ? P(u, e) - P(u, t) : 0;
                    if (i === r)
                      return de(e, t);
                    for (n = e; n = n.parentNode;)
                      a.unshift(n);
                    for (n = t; n = n.parentNode;)
                      s.unshift(n);
                    for (; a[o] === s[o];)
                      o++;
                    return o ? de(a[o], s[o]) : a[o] == E ? -1 : s[o] == E ? 1 : 0
                  }
                ,
                h) : h
            }
            ,
            se.matches = function (e, t) {
              return se(e, null, null, t)
            }
            ,
            se.matchesSelector = function (e, t) {
              if (d(e),
                n.matchesSelector && y && !M[t + " "] && (!g || !g.test(t)) && (!m || !m.test(t)))
                try {
                  var o = v.call(e, t);
                  if (o || n.disconnectedMatch || e.document && 11 !== e.document.nodeType)
                    return o
                } catch (e) {
                  M(t, !0)
                }
              return se(t, h, null, [e]).length > 0
            }
            ,
            se.contains = function (e, t) {
              return (e.ownerDocument || e) != h && d(e),
                x(e, t)
            }
            ,
            se.attr = function (e, t) {
              (e.ownerDocument || e) != h && d(e);
              var i = o.attrHandle[t.toLowerCase()]
                , r = i && R.call(o.attrHandle, t.toLowerCase()) ? i(e, t, !y) : void 0;
              return void 0 !== r ? r : n.attributes || !y ? e.getAttribute(t) : (r = e.getAttributeNode(t)) && r.specified ? r.value : null
            }
            ,
            se.escape = function (e) {
              return (e + "").replace(oe, ie)
            }
            ,
            se.error = function (e) {
              throw new Error("Syntax error, unrecognized expression: " + e)
            }
            ,
            se.uniqueSort = function (e) {
              var t, o = [], i = 0, r = 0;
              if (p = !n.detectDuplicates,
                u = !n.sortStable && e.slice(0),
                e.sort(C),
                p) {
                for (; t = e[r++];)
                  t === e[r] && (i = o.push(r));
                for (; i--;)
                  e.splice(o[i], 1)
              }
              return u = null,
                e
            }
            ,
            i = se.getText = function (e) {
              var t, n = "", o = 0, r = e.nodeType;
              if (r) {
                if (1 === r || 9 === r || 11 === r) {
                  if ("string" == typeof e.textContent)
                    return e.textContent;
                  for (e = e.firstChild; e; e = e.nextSibling)
                    n += i(e)
                } else if (3 === r || 4 === r)
                  return e.nodeValue
              } else
                for (; t = e[o++];)
                  n += i(t);
              return n
            }
            ,
            (o = se.selectors = {
              cacheLength: 50,
              createPseudo: ce,
              match: G,
              attrHandle: {},
              find: {},
              relative: {
                ">": {
                  dir: "parentNode",
                  first: !0
                },
                " ": {
                  dir: "parentNode"
                },
                "+": {
                  dir: "previousSibling",
                  first: !0
                },
                "~": {
                  dir: "previousSibling"
                }
              },
              preFilter: {
                ATTR: function (e) {
                  return e[1] = e[1].replace(te, ne),
                    e[3] = (e[3] || e[4] || e[5] || "").replace(te, ne),
                    "~=" === e[2] && (e[3] = " " + e[3] + " "),
                    e.slice(0, 4)
                },
                CHILD: function (e) {
                  return e[1] = e[1].toLowerCase(),
                    "nth" === e[1].slice(0, 3) ? (e[3] || se.error(e[0]),
                      e[4] = +(e[4] ? e[5] + (e[6] || 1) : 2 * ("even" === e[3] || "odd" === e[3])),
                      e[5] = +(e[7] + e[8] || "odd" === e[3])) : e[3] && se.error(e[0]),
                    e
                },
                PSEUDO: function (e) {
                  var t, n = !e[6] && e[2];
                  return G.CHILD.test(e[0]) ? null : (e[3] ? e[2] = e[4] || e[5] || "" : n && W.test(n) && (t = a(n, !0)) && (t = n.indexOf(")", n.length - t) - n.length) && (e[0] = e[0].slice(0, t),
                    e[2] = n.slice(0, t)),
                    e.slice(0, 3))
                }
              },
              filter: {
                TAG: function (e) {
                  var t = e.replace(te, ne).toLowerCase();
                  return "*" === e ? function () {
                    return !0
                  }
                    : function (e) {
                      return e.nodeName && e.nodeName.toLowerCase() === t
                    }
                },
                CLASS: function (e) {
                  var t = w[e + " "];
                  return t || (t = new RegExp("(^|" + N + ")" + e + "(" + N + "|$)")) && w(e, (function (e) {
                    return t.test("string" == typeof e.className && e.className || void 0 !== e.getAttribute && e.getAttribute("class") || "")
                  }
                  ))
                },
                ATTR: function (e, t, n) {
                  return function (o) {
                    var i = se.attr(o, e);
                    return null == i ? "!=" === t : !t || (i += "",
                      "=" === t ? i === n : "!=" === t ? i !== n : "^=" === t ? n && 0 === i.indexOf(n) : "*=" === t ? n && i.indexOf(n) > -1 : "$=" === t ? n && i.slice(-n.length) === n : "~=" === t ? (" " + i.replace(F, " ") + " ").indexOf(n) > -1 : "|=" === t && (i === n || i.slice(0, n.length + 1) === n + "-"))
                  }
                },
                CHILD: function (e, t, n, o, i) {
                  var r = "nth" !== e.slice(0, 3)
                    , a = "last" !== e.slice(-4)
                    , s = "of-type" === t;
                  return 1 === o && 0 === i ? function (e) {
                    return !!e.parentNode
                  }
                    : function (t, n, l) {
                      var c, u, p, d, h, f, y = r !== a ? "nextSibling" : "previousSibling", m = t.parentNode, g = s && t.nodeName.toLowerCase(), v = !l && !s, x = !1;
                      if (m) {
                        if (r) {
                          for (; y;) {
                            for (d = t; d = d[y];)
                              if (s ? d.nodeName.toLowerCase() === g : 1 === d.nodeType)
                                return !1;
                            f = y = "only" === e && !f && "nextSibling"
                          }
                          return !0
                        }
                        if (f = [a ? m.firstChild : m.lastChild],
                          a && v) {
                          for (x = (h = (c = (u = (p = (d = m)[_] || (d[_] = {}))[d.uniqueID] || (p[d.uniqueID] = {}))[e] || [])[0] === b && c[1]) && c[2],
                            d = h && m.childNodes[h]; d = ++h && d && d[y] || (x = h = 0) || f.pop();)
                            if (1 === d.nodeType && ++x && d === t) {
                              u[e] = [b, h, x];
                              break
                            }
                        } else if (v && (x = h = (c = (u = (p = (d = t)[_] || (d[_] = {}))[d.uniqueID] || (p[d.uniqueID] = {}))[e] || [])[0] === b && c[1]),
                          !1 === x)
                          for (; (d = ++h && d && d[y] || (x = h = 0) || f.pop()) && ((s ? d.nodeName.toLowerCase() !== g : 1 !== d.nodeType) || !++x || (v && ((u = (p = d[_] || (d[_] = {}))[d.uniqueID] || (p[d.uniqueID] = {}))[e] = [b, x]),
                            d !== t));)
                            ;
                        return (x -= i) === o || x % o == 0 && x / o >= 0
                      }
                    }
                },
                PSEUDO: function (e, t) {
                  var n, i = o.pseudos[e] || o.setFilters[e.toLowerCase()] || se.error("unsupported pseudo: " + e);
                  return i[_] ? i(t) : i.length > 1 ? (n = [e, e, "", t],
                    o.setFilters.hasOwnProperty(e.toLowerCase()) ? ce((function (e, n) {
                      for (var o, r = i(e, t), a = r.length; a--;)
                        e[o = P(e, r[a])] = !(n[o] = r[a])
                    }
                    )) : function (e) {
                      return i(e, 0, n)
                    }
                  ) : i
                }
              },
              pseudos: {
                not: ce((function (e) {
                  var t = []
                    , n = []
                    , o = s(e.replace(U, "$1"));
                  return o[_] ? ce((function (e, t, n, i) {
                    for (var r, a = o(e, null, i, []), s = e.length; s--;)
                      (r = a[s]) && (e[s] = !(t[s] = r))
                  }
                  )) : function (e, i, r) {
                    return t[0] = e,
                      o(t, null, r, n),
                      t[0] = null,
                      !n.pop()
                  }
                }
                )),
                has: ce((function (e) {
                  return function (t) {
                    return se(e, t).length > 0
                  }
                }
                )),
                contains: ce((function (e) {
                  return e = e.replace(te, ne),
                    function (t) {
                      return (t.textContent || i(t)).indexOf(e) > -1
                    }
                }
                )),
                lang: ce((function (e) {
                  return X.test(e || "") || se.error("unsupported lang: " + e),
                    e = e.replace(te, ne).toLowerCase(),
                    function (t) {
                      var n;
                      do {
                        if (n = y ? t.lang : t.getAttribute("xml:lang") || t.getAttribute("lang"))
                          return (n = n.toLowerCase()) === e || 0 === n.indexOf(e + "-")
                      } while ((t = t.parentNode) && 1 === t.nodeType); return !1
                    }
                }
                )),
                target: function (t) {
                  var n = e.location && e.location.hash;
                  return n && n.slice(1) === t.id
                },
                root: function (e) {
                  return e === f
                },
                focus: function (e) {
                  return e === h.activeElement && (!h.hasFocus || h.hasFocus()) && !!(e.type || e.href || ~e.tabIndex)
                },
                enabled: ye(!1),
                disabled: ye(!0),
                checked: function (e) {
                  var t = e.nodeName.toLowerCase();
                  return "input" === t && !!e.checked || "option" === t && !!e.selected
                },
                selected: function (e) {
                  return e.parentNode && e.parentNode.selectedIndex,
                    !0 === e.selected
                },
                empty: function (e) {
                  for (e = e.firstChild; e; e = e.nextSibling)
                    if (e.nodeType < 6)
                      return !1;
                  return !0
                },
                parent: function (e) {
                  return !o.pseudos.empty(e)
                },
                header: function (e) {
                  return J.test(e.nodeName)
                },
                input: function (e) {
                  return Y.test(e.nodeName)
                },
                button: function (e) {
                  var t = e.nodeName.toLowerCase();
                  return "input" === t && "button" === e.type || "button" === t
                },
                text: function (e) {
                  var t;
                  return "input" === e.nodeName.toLowerCase() && "text" === e.type && (null == (t = e.getAttribute("type")) || "text" === t.toLowerCase())
                },
                first: me((function () {
                  return [0]
                }
                )),
                last: me((function (e, t) {
                  return [t - 1]
                }
                )),
                eq: me((function (e, t, n) {
                  return [n < 0 ? n + t : n]
                }
                )),
                even: me((function (e, t) {
                  for (var n = 0; n < t; n += 2)
                    e.push(n);
                  return e
                }
                )),
                odd: me((function (e, t) {
                  for (var n = 1; n < t; n += 2)
                    e.push(n);
                  return e
                }
                )),
                lt: me((function (e, t, n) {
                  for (var o = n < 0 ? n + t : n > t ? t : n; --o >= 0;)
                    e.push(o);
                  return e
                }
                )),
                gt: me((function (e, t, n) {
                  for (var o = n < 0 ? n + t : n; ++o < t;)
                    e.push(o);
                  return e
                }
                ))
              }
            }).pseudos.nth = o.pseudos.eq,
          {
            radio: !0,
            checkbox: !0,
            file: !0,
            password: !0,
            image: !0
          })
            o.pseudos[t] = he(t);
          for (t in {
            submit: !0,
            reset: !0
          })
            o.pseudos[t] = fe(t);
          function ve() { }
          function xe(e) {
            for (var t = 0, n = e.length, o = ""; t < n; t++)
              o += e[t].value;
            return o
          }
          function _e(e, t, n) {
            var o = t.dir
              , i = t.next
              , r = i || o
              , a = n && "parentNode" === r
              , s = T++;
            return t.first ? function (t, n, i) {
              for (; t = t[o];)
                if (1 === t.nodeType || a)
                  return e(t, n, i);
              return !1
            }
              : function (t, n, l) {
                var c, u, p, d = [b, s];
                if (l) {
                  for (; t = t[o];)
                    if ((1 === t.nodeType || a) && e(t, n, l))
                      return !0
                } else
                  for (; t = t[o];)
                    if (1 === t.nodeType || a)
                      if (u = (p = t[_] || (t[_] = {}))[t.uniqueID] || (p[t.uniqueID] = {}),
                        i && i === t.nodeName.toLowerCase())
                        t = t[o] || t;
                      else {
                        if ((c = u[r]) && c[0] === b && c[1] === s)
                          return d[2] = c[2];
                        if (u[r] = d,
                          d[2] = e(t, n, l))
                          return !0
                      }
                return !1
              }
          }
          function Ee(e) {
            return e.length > 1 ? function (t, n, o) {
              for (var i = e.length; i--;)
                if (!e[i](t, n, o))
                  return !1;
              return !0
            }
              : e[0]
          }
          function be(e, t, n, o, i) {
            for (var r, a = [], s = 0, l = e.length, c = null != t; s < l; s++)
              (r = e[s]) && (n && !n(r, o, i) || (a.push(r),
                c && t.push(s)));
            return a
          }
          function Te(e, t, n, o, i, r) {
            return o && !o[_] && (o = Te(o)),
              i && !i[_] && (i = Te(i, r)),
              ce((function (r, a, s, l) {
                var c, u, p, d = [], h = [], f = a.length, y = r || function (e, t, n) {
                  for (var o = 0, i = t.length; o < i; o++)
                    se(e, t[o], n);
                  return n
                }(t || "*", s.nodeType ? [s] : s, []), m = !e || !r && t ? y : be(y, d, e, s, l), g = n ? i || (r ? e : f || o) ? [] : a : m;
                if (n && n(m, g, s, l),
                  o)
                  for (c = be(g, h),
                    o(c, [], s, l),
                    u = c.length; u--;)
                    (p = c[u]) && (g[h[u]] = !(m[h[u]] = p));
                if (r) {
                  if (i || e) {
                    if (i) {
                      for (c = [],
                        u = g.length; u--;)
                        (p = g[u]) && c.push(m[u] = p);
                      i(null, g = [], c, l)
                    }
                    for (u = g.length; u--;)
                      (p = g[u]) && (c = i ? P(r, p) : d[u]) > -1 && (r[c] = !(a[c] = p))
                  }
                } else
                  g = be(g === a ? g.splice(f, g.length) : g),
                    i ? i(null, a, g, l) : S.apply(a, g)
              }
              ))
          }
          function we(e) {
            for (var t, n, i, r = e.length, a = o.relative[e[0].type], s = a || o.relative[" "], l = a ? 1 : 0, u = _e((function (e) {
              return e === t
            }
            ), s, !0), p = _e((function (e) {
              return P(t, e) > -1
            }
            ), s, !0), d = [function (e, n, o) {
              var i = !a && (o || n !== c) || ((t = n).nodeType ? u(e, n, o) : p(e, n, o));
              return t = null,
                i
            }
            ]; l < r; l++)
              if (n = o.relative[e[l].type])
                d = [_e(Ee(d), n)];
              else {
                if ((n = o.filter[e[l].type].apply(null, e[l].matches))[_]) {
                  for (i = ++l; i < r && !o.relative[e[i].type]; i++)
                    ;
                  return Te(l > 1 && Ee(d), l > 1 && xe(e.slice(0, l - 1).concat({
                    value: " " === e[l - 2].type ? "*" : ""
                  })).replace(U, "$1"), n, l < i && we(e.slice(l, i)), i < r && we(e = e.slice(i)), i < r && xe(e))
                }
                d.push(n)
              }
            return Ee(d)
          }
          return ve.prototype = o.filters = o.pseudos,
            o.setFilters = new ve,
            a = se.tokenize = function (e, t) {
              var n, i, r, a, s, l, c, u = O[e + " "];
              if (u)
                return t ? 0 : u.slice(0);
              for (s = e,
                l = [],
                c = o.preFilter; s;) {
                for (a in n && !(i = q.exec(s)) || (i && (s = s.slice(i[0].length) || s),
                  l.push(r = [])),
                  n = !1,
                  (i = z.exec(s)) && (n = i.shift(),
                    r.push({
                      value: n,
                      type: i[0].replace(U, " ")
                    }),
                    s = s.slice(n.length)),
                  o.filter)
                  !(i = G[a].exec(s)) || c[a] && !(i = c[a](i)) || (n = i.shift(),
                    r.push({
                      value: n,
                      type: a,
                      matches: i
                    }),
                    s = s.slice(n.length));
                if (!n)
                  break
              }
              return t ? s.length : s ? se.error(e) : O(e, l).slice(0)
            }
            ,
            s = se.compile = function (e, t) {
              var n, i = [], r = [], s = j[e + " "];
              if (!s) {
                for (t || (t = a(e)),
                  n = t.length; n--;)
                  (s = we(t[n]))[_] ? i.push(s) : r.push(s);
                (s = j(e, function (e, t) {
                  var n = t.length > 0
                    , i = e.length > 0
                    , r = function (r, a, s, l, u) {
                      var p, f, m, g = 0, v = "0", x = r && [], _ = [], E = c, T = r || i && o.find.TAG("*", u), w = b += null == E ? 1 : Math.random() || .1, O = T.length;
                      for (u && (c = a == h || a || u); v !== O && null != (p = T[v]); v++) {
                        if (i && p) {
                          for (f = 0,
                            a || p.ownerDocument == h || (d(p),
                              s = !y); m = e[f++];)
                            if (m(p, a || h, s)) {
                              l.push(p);
                              break
                            }
                          u && (b = w)
                        }
                        n && ((p = !m && p) && g--,
                          r && x.push(p))
                      }
                      if (g += v,
                        n && v !== g) {
                        for (f = 0; m = t[f++];)
                          m(x, _, a, s);
                        if (r) {
                          if (g > 0)
                            for (; v--;)
                              x[v] || _[v] || (_[v] = D.call(l));
                          _ = be(_)
                        }
                        S.apply(l, _),
                          u && !r && _.length > 0 && g + t.length > 1 && se.uniqueSort(l)
                      }
                      return u && (b = w,
                        c = E),
                        x
                    };
                  return n ? ce(r) : r
                }(r, i))).selector = e
              }
              return s
            }
            ,
            l = se.select = function (e, t, n, i) {
              var r, l, c, u, p, d = "function" == typeof e && e, h = !i && a(e = d.selector || e);
              if (n = n || [],
                1 === h.length) {
                if ((l = h[0] = h[0].slice(0)).length > 2 && "ID" === (c = l[0]).type && 9 === t.nodeType && y && o.relative[l[1].type]) {
                  if (!(t = (o.find.ID(c.matches[0].replace(te, ne), t) || [])[0]))
                    return n;
                  d && (t = t.parentNode),
                    e = e.slice(l.shift().value.length)
                }
                for (r = G.needsContext.test(e) ? 0 : l.length; r-- && (c = l[r],
                  !o.relative[u = c.type]);)
                  if ((p = o.find[u]) && (i = p(c.matches[0].replace(te, ne), ee.test(l[0].type) && ge(t.parentNode) || t))) {
                    if (l.splice(r, 1),
                      !(e = i.length && xe(l)))
                      return S.apply(n, i),
                        n;
                    break
                  }
              }
              return (d || s(e, h))(i, t, !y, n, !t || ee.test(e) && ge(t.parentNode) || t),
                n
            }
            ,
            n.sortStable = _.split("").sort(C).join("") === _,
            n.detectDuplicates = !!p,
            d(),
            n.sortDetached = ue((function (e) {
              return 1 & e.compareDocumentPosition(h.createElement("fieldset"))
            }
            )),
            ue((function (e) {
              return e.innerHTML = "<a href='#'></a>",
                "#" === e.firstChild.getAttribute("href")
            }
            )) || pe("type|href|height|width", (function (e, t, n) {
              if (!n)
                return e.getAttribute(t, "type" === t.toLowerCase() ? 1 : 2)
            }
            )),
            n.attributes && ue((function (e) {
              return e.innerHTML = "<input/>",
                e.firstChild.setAttribute("value", ""),
                "" === e.firstChild.getAttribute("value")
            }
            )) || pe("value", (function (e, t, n) {
              if (!n && "input" === e.nodeName.toLowerCase())
                return e.defaultValue
            }
            )),
            ue((function (e) {
              return null == e.getAttribute("disabled")
            }
            )) || pe(A, (function (e, t, n) {
              var o;
              if (!n)
                return !0 === e[t] ? t.toLowerCase() : (o = e.getAttributeNode(t)) && o.specified ? o.value : null
            }
            )),
            se
        }(n);
      T.find = O,
        T.expr = O.selectors,
        T.expr[":"] = T.expr.pseudos,
        T.uniqueSort = T.unique = O.uniqueSort,
        T.text = O.getText,
        T.isXMLDoc = O.isXML,
        T.contains = O.contains,
        T.escapeSelector = O.escape;
      var j = function (e, t, n) {
        for (var o = [], i = void 0 !== n; (e = e[t]) && 9 !== e.nodeType;)
          if (1 === e.nodeType) {
            if (i && T(e).is(n))
              break;
            o.push(e)
          }
        return o
      }
        , M = function (e, t) {
          for (var n = []; e; e = e.nextSibling)
            1 === e.nodeType && e !== t && n.push(e);
          return n
        }
        , C = T.expr.match.needsContext;
      function R(e, t) {
        return e.nodeName && e.nodeName.toLowerCase() === t.toLowerCase()
      }
      var B = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
      function D(e, t, n) {
        return g(t) ? T.grep(e, (function (e, o) {
          return !!t.call(e, o, e) !== n
        }
        )) : t.nodeType ? T.grep(e, (function (e) {
          return e === t !== n
        }
        )) : "string" != typeof t ? T.grep(e, (function (e) {
          return u.call(t, e) > -1 !== n
        }
        )) : T.filter(t, e, n)
      }
      T.filter = function (e, t, n) {
        var o = t[0];
        return n && (e = ":not(" + e + ")"),
          1 === t.length && 1 === o.nodeType ? T.find.matchesSelector(o, e) ? [o] : [] : T.find.matches(e, T.grep(t, (function (e) {
            return 1 === e.nodeType
          }
          )))
      }
        ,
        T.fn.extend({
          find: function (e) {
            var t, n, o = this.length, i = this;
            if ("string" != typeof e)
              return this.pushStack(T(e).filter((function () {
                for (t = 0; t < o; t++)
                  if (T.contains(i[t], this))
                    return !0
              }
              )));
            for (n = this.pushStack([]),
              t = 0; t < o; t++)
              T.find(e, i[t], n);
            return o > 1 ? T.uniqueSort(n) : n
          },
          filter: function (e) {
            return this.pushStack(D(this, e || [], !1))
          },
          not: function (e) {
            return this.pushStack(D(this, e || [], !0))
          },
          is: function (e) {
            return !!D(this, "string" == typeof e && C.test(e) ? T(e) : e || [], !1).length
          }
        });
      var k, S = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;
      (T.fn.init = function (e, t, n) {
        var o, i;
        if (!e)
          return this;
        if (n = n || k,
          "string" == typeof e) {
          if (!(o = "<" === e[0] && ">" === e[e.length - 1] && e.length >= 3 ? [null, e, null] : S.exec(e)) || !o[1] && t)
            return !t || t.jquery ? (t || n).find(e) : this.constructor(t).find(e);
          if (o[1]) {
            if (t = t instanceof T ? t[0] : t,
              T.merge(this, T.parseHTML(o[1], t && t.nodeType ? t.ownerDocument || t : x, !0)),
              B.test(o[1]) && T.isPlainObject(t))
              for (o in t)
                g(this[o]) ? this[o](t[o]) : this.attr(o, t[o]);
            return this
          }
          return (i = x.getElementById(o[2])) && (this[0] = i,
            this.length = 1),
            this
        }
        return e.nodeType ? (this[0] = e,
          this.length = 1,
          this) : g(e) ? void 0 !== n.ready ? n.ready(e) : e(T) : T.makeArray(e, this)
      }
      ).prototype = T.fn,
        k = T(x);
      var I = /^(?:parents|prev(?:Until|All))/
        , P = {
          children: !0,
          contents: !0,
          next: !0,
          prev: !0
        };
      function A(e, t) {
        for (; (e = e[t]) && 1 !== e.nodeType;)
          ;
        return e
      }
      T.fn.extend({
        has: function (e) {
          var t = T(e, this)
            , n = t.length;
          return this.filter((function () {
            for (var e = 0; e < n; e++)
              if (T.contains(this, t[e]))
                return !0
          }
          ))
        },
        closest: function (e, t) {
          var n, o = 0, i = this.length, r = [], a = "string" != typeof e && T(e);
          if (!C.test(e))
            for (; o < i; o++)
              for (n = this[o]; n && n !== t; n = n.parentNode)
                if (n.nodeType < 11 && (a ? a.index(n) > -1 : 1 === n.nodeType && T.find.matchesSelector(n, e))) {
                  r.push(n);
                  break
                }
          return this.pushStack(r.length > 1 ? T.uniqueSort(r) : r)
        },
        index: function (e) {
          return e ? "string" == typeof e ? u.call(T(e), this[0]) : u.call(this, e.jquery ? e[0] : e) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1
        },
        add: function (e, t) {
          return this.pushStack(T.uniqueSort(T.merge(this.get(), T(e, t))))
        },
        addBack: function (e) {
          return this.add(null == e ? this.prevObject : this.prevObject.filter(e))
        }
      }),
        T.each({
          parent: function (e) {
            var t = e.parentNode;
            return t && 11 !== t.nodeType ? t : null
          },
          parents: function (e) {
            return j(e, "parentNode")
          },
          parentsUntil: function (e, t, n) {
            return j(e, "parentNode", n)
          },
          next: function (e) {
            return A(e, "nextSibling")
          },
          prev: function (e) {
            return A(e, "previousSibling")
          },
          nextAll: function (e) {
            return j(e, "nextSibling")
          },
          prevAll: function (e) {
            return j(e, "previousSibling")
          },
          nextUntil: function (e, t, n) {
            return j(e, "nextSibling", n)
          },
          prevUntil: function (e, t, n) {
            return j(e, "previousSibling", n)
          },
          siblings: function (e) {
            return M((e.parentNode || {}).firstChild, e)
          },
          children: function (e) {
            return M(e.firstChild)
          },
          contents: function (e) {
            return null != e.contentDocument && a(e.contentDocument) ? e.contentDocument : (R(e, "template") && (e = e.content || e),
              T.merge([], e.childNodes))
          }
        }, (function (e, t) {
          T.fn[e] = function (n, o) {
            var i = T.map(this, t, n);
            return "Until" !== e.slice(-5) && (o = n),
              o && "string" == typeof o && (i = T.filter(o, i)),
              this.length > 1 && (P[e] || T.uniqueSort(i),
                I.test(e) && i.reverse()),
              this.pushStack(i)
          }
        }
        ));
      var N = /[^\x20\t\r\n\f]+/g;
      function H(e) {
        return e
      }
      function L(e) {
        throw e
      }
      function V(e, t, n, o) {
        var i;
        try {
          e && g(i = e.promise) ? i.call(e).done(t).fail(n) : e && g(i = e.then) ? i.call(e, t, n) : t.apply(void 0, [e].slice(o))
        } catch (e) {
          n.apply(void 0, [e])
        }
      }
      T.Callbacks = function (e) {
        e = "string" == typeof e ? function (e) {
          var t = {};
          return T.each(e.match(N) || [], (function (e, n) {
            t[n] = !0
          }
          )),
            t
        }(e) : T.extend({}, e);
        var t, n, o, i, r = [], a = [], s = -1, l = function () {
          for (i = i || e.once,
            o = t = !0; a.length; s = -1)
            for (n = a.shift(); ++s < r.length;)
              !1 === r[s].apply(n[0], n[1]) && e.stopOnFalse && (s = r.length,
                n = !1);
          e.memory || (n = !1),
            t = !1,
            i && (r = n ? [] : "")
        }, c = {
          add: function () {
            return r && (n && !t && (s = r.length - 1,
              a.push(n)),
              function t(n) {
                T.each(n, (function (n, o) {
                  g(o) ? e.unique && c.has(o) || r.push(o) : o && o.length && "string" !== b(o) && t(o)
                }
                ))
              }(arguments),
              n && !t && l()),
              this
          },
          remove: function () {
            return T.each(arguments, (function (e, t) {
              for (var n; (n = T.inArray(t, r, n)) > -1;)
                r.splice(n, 1),
                  n <= s && s--
            }
            )),
              this
          },
          has: function (e) {
            return e ? T.inArray(e, r) > -1 : r.length > 0
          },
          empty: function () {
            return r && (r = []),
              this
          },
          disable: function () {
            return i = a = [],
              r = n = "",
              this
          },
          disabled: function () {
            return !r
          },
          lock: function () {
            return i = a = [],
              n || t || (r = n = ""),
              this
          },
          locked: function () {
            return !!i
          },
          fireWith: function (e, n) {
            return i || (n = [e, (n = n || []).slice ? n.slice() : n],
              a.push(n),
              t || l()),
              this
          },
          fire: function () {
            return c.fireWith(this, arguments),
              this
          },
          fired: function () {
            return !!o
          }
        };
        return c
      }
        ,
        T.extend({
          Deferred: function (e) {
            var t = [["notify", "progress", T.Callbacks("memory"), T.Callbacks("memory"), 2], ["resolve", "done", T.Callbacks("once memory"), T.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", T.Callbacks("once memory"), T.Callbacks("once memory"), 1, "rejected"]]
              , o = "pending"
              , i = {
                state: function () {
                  return o
                },
                always: function () {
                  return r.done(arguments).fail(arguments),
                    this
                },
                catch: function (e) {
                  return i.then(null, e)
                },
                pipe: function () {
                  var e = arguments;
                  return T.Deferred((function (n) {
                    T.each(t, (function (t, o) {
                      var i = g(e[o[4]]) && e[o[4]];
                      r[o[1]]((function () {
                        var e = i && i.apply(this, arguments);
                        e && g(e.promise) ? e.promise().progress(n.notify).done(n.resolve).fail(n.reject) : n[o[0] + "With"](this, i ? [e] : arguments)
                      }
                      ))
                    }
                    )),
                      e = null
                  }
                  )).promise()
                },
                then: function (e, o, i) {
                  var r = 0;
                  function a(e, t, o, i) {
                    return function () {
                      var s = this
                        , l = arguments
                        , c = function () {
                          var n, c;
                          if (!(e < r)) {
                            if ((n = o.apply(s, l)) === t.promise())
                              throw new TypeError("Thenable self-resolution");
                            c = n && ("object" == typeof n || "function" == typeof n) && n.then,
                              g(c) ? i ? c.call(n, a(r, t, H, i), a(r, t, L, i)) : (r++,
                                c.call(n, a(r, t, H, i), a(r, t, L, i), a(r, t, H, t.notifyWith))) : (o !== H && (s = void 0,
                                  l = [n]),
                                  (i || t.resolveWith)(s, l))
                          }
                        }
                        , u = i ? c : function () {
                          try {
                            c()
                          } catch (n) {
                            T.Deferred.exceptionHook && T.Deferred.exceptionHook(n, u.stackTrace),
                              e + 1 >= r && (o !== L && (s = void 0,
                                l = [n]),
                                t.rejectWith(s, l))
                          }
                        }
                        ;
                      e ? u() : (T.Deferred.getStackHook && (u.stackTrace = T.Deferred.getStackHook()),
                        n.setTimeout(u))
                    }
                  }
                  return T.Deferred((function (n) {
                    t[0][3].add(a(0, n, g(i) ? i : H, n.notifyWith)),
                      t[1][3].add(a(0, n, g(e) ? e : H)),
                      t[2][3].add(a(0, n, g(o) ? o : L))
                  }
                  )).promise()
                },
                promise: function (e) {
                  return null != e ? T.extend(e, i) : i
                }
              }
              , r = {};
            return T.each(t, (function (e, n) {
              var a = n[2]
                , s = n[5];
              i[n[1]] = a.add,
                s && a.add((function () {
                  o = s
                }
                ), t[3 - e][2].disable, t[3 - e][3].disable, t[0][2].lock, t[0][3].lock),
                a.add(n[3].fire),
                r[n[0]] = function () {
                  return r[n[0] + "With"](this === r ? void 0 : this, arguments),
                    this
                }
                ,
                r[n[0] + "With"] = a.fireWith
            }
            )),
              i.promise(r),
              e && e.call(r, r),
              r
          },
          when: function (e) {
            var t = arguments.length
              , n = t
              , o = Array(n)
              , i = s.call(arguments)
              , r = T.Deferred()
              , a = function (e) {
                return function (n) {
                  o[e] = this,
                    i[e] = arguments.length > 1 ? s.call(arguments) : n,
                    --t || r.resolveWith(o, i)
                }
              };
            if (t <= 1 && (V(e, r.done(a(n)).resolve, r.reject, !t),
              "pending" === r.state() || g(i[n] && i[n].then)))
              return r.then();
            for (; n--;)
              V(i[n], a(n), r.reject);
            return r.promise()
          }
        });
      var F = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
      T.Deferred.exceptionHook = function (e, t) {
        n.console && n.console.warn && e && F.test(e.name) && n.console.warn("jQuery.Deferred exception: " + e.message, e.stack, t)
      }
        ,
        T.readyException = function (e) {
          n.setTimeout((function () {
            throw e
          }
          ))
        }
        ;
      var U = T.Deferred();
      function q() {
        x.removeEventListener("DOMContentLoaded", q),
          n.removeEventListener("load", q),
          T.ready()
      }
      T.fn.ready = function (e) {
        return U.then(e).catch((function (e) {
          T.readyException(e)
        }
        )),
          this
      }
        ,
        T.extend({
          isReady: !1,
          readyWait: 1,
          ready: function (e) {
            (!0 === e ? --T.readyWait : T.isReady) || (T.isReady = !0,
              !0 !== e && --T.readyWait > 0 || U.resolveWith(x, [T]))
          }
        }),
        T.ready.then = U.then,
        "complete" === x.readyState || "loading" !== x.readyState && !x.documentElement.doScroll ? n.setTimeout(T.ready) : (x.addEventListener("DOMContentLoaded", q),
          n.addEventListener("load", q));
      var z = function (e, t, n, o, i, r, a) {
        var s = 0
          , l = e.length
          , c = null == n;
        if ("object" === b(n))
          for (s in i = !0,
            n)
            z(e, t, s, n[s], !0, r, a);
        else if (void 0 !== o && (i = !0,
          g(o) || (a = !0),
          c && (a ? (t.call(e, o),
            t = null) : (c = t,
              t = function (e, t, n) {
                return c.call(T(e), n)
              }
            )),
          t))
          for (; s < l; s++)
            t(e[s], n, a ? o : o.call(e[s], s, t(e[s], n)));
        return i ? e : c ? t.call(e) : l ? t(e[0], n) : r
      }
        , $ = /^-ms-/
        , W = /-([a-z])/g;
      function X(e, t) {
        return t.toUpperCase()
      }
      function G(e) {
        return e.replace($, "ms-").replace(W, X)
      }
      var Q = function (e) {
        return 1 === e.nodeType || 9 === e.nodeType || !+e.nodeType
      };
      function Y() {
        this.expando = T.expando + Y.uid++
      }
      Y.uid = 1,
        Y.prototype = {
          cache: function (e) {
            var t = e[this.expando];
            return t || (t = {},
              Q(e) && (e.nodeType ? e[this.expando] = t : Object.defineProperty(e, this.expando, {
                value: t,
                configurable: !0
              }))),
              t
          },
          set: function (e, t, n) {
            var o, i = this.cache(e);
            if ("string" == typeof t)
              i[G(t)] = n;
            else
              for (o in t)
                i[G(o)] = t[o];
            return i
          },
          get: function (e, t) {
            return void 0 === t ? this.cache(e) : e[this.expando] && e[this.expando][G(t)]
          },
          access: function (e, t, n) {
            return void 0 === t || t && "string" == typeof t && void 0 === n ? this.get(e, t) : (this.set(e, t, n),
              void 0 !== n ? n : t)
          },
          remove: function (e, t) {
            var n, o = e[this.expando];
            if (void 0 !== o) {
              if (void 0 !== t) {
                n = (t = Array.isArray(t) ? t.map(G) : (t = G(t)) in o ? [t] : t.match(N) || []).length;
                for (; n--;)
                  delete o[t[n]]
              }
              (void 0 === t || T.isEmptyObject(o)) && (e.nodeType ? e[this.expando] = void 0 : delete e[this.expando])
            }
          },
          hasData: function (e) {
            var t = e[this.expando];
            return void 0 !== t && !T.isEmptyObject(t)
          }
        };
      var J = new Y
        , K = new Y
        , Z = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/
        , ee = /[A-Z]/g;
      function te(e, t, n) {
        var o;
        if (void 0 === n && 1 === e.nodeType)
          if (o = "data-" + t.replace(ee, "-$&").toLowerCase(),
            "string" == typeof (n = e.getAttribute(o))) {
            try {
              n = function (e) {
                return "true" === e || "false" !== e && ("null" === e ? null : e === +e + "" ? +e : Z.test(e) ? JSON.parse(e) : e)
              }(n)
            } catch (e) { }
            K.set(e, t, n)
          } else
            n = void 0;
        return n
      }
      T.extend({
        hasData: function (e) {
          return K.hasData(e) || J.hasData(e)
        },
        data: function (e, t, n) {
          return K.access(e, t, n)
        },
        removeData: function (e, t) {
          K.remove(e, t)
        },
        _data: function (e, t, n) {
          return J.access(e, t, n)
        },
        _removeData: function (e, t) {
          J.remove(e, t)
        }
      }),
        T.fn.extend({
          data: function (e, t) {
            var n, o, i, r = this[0], a = r && r.attributes;
            if (void 0 === e) {
              if (this.length && (i = K.get(r),
                1 === r.nodeType && !J.get(r, "hasDataAttrs"))) {
                for (n = a.length; n--;)
                  a[n] && 0 === (o = a[n].name).indexOf("data-") && (o = G(o.slice(5)),
                    te(r, o, i[o]));
                J.set(r, "hasDataAttrs", !0)
              }
              return i
            }
            return "object" == typeof e ? this.each((function () {
              K.set(this, e)
            }
            )) : z(this, (function (t) {
              var n;
              if (r && void 0 === t)
                return void 0 !== (n = K.get(r, e)) || void 0 !== (n = te(r, e)) ? n : void 0;
              this.each((function () {
                K.set(this, e, t)
              }
              ))
            }
            ), null, t, arguments.length > 1, null, !0)
          },
          removeData: function (e) {
            return this.each((function () {
              K.remove(this, e)
            }
            ))
          }
        }),
        T.extend({
          queue: function (e, t, n) {
            var o;
            if (e)
              return t = (t || "fx") + "queue",
                o = J.get(e, t),
                n && (!o || Array.isArray(n) ? o = J.access(e, t, T.makeArray(n)) : o.push(n)),
                o || []
          },
          dequeue: function (e, t) {
            t = t || "fx";
            var n = T.queue(e, t)
              , o = n.length
              , i = n.shift()
              , r = T._queueHooks(e, t);
            "inprogress" === i && (i = n.shift(),
              o--),
              i && ("fx" === t && n.unshift("inprogress"),
                delete r.stop,
                i.call(e, (function () {
                  T.dequeue(e, t)
                }
                ), r)),
              !o && r && r.empty.fire()
          },
          _queueHooks: function (e, t) {
            var n = t + "queueHooks";
            return J.get(e, n) || J.access(e, n, {
              empty: T.Callbacks("once memory").add((function () {
                J.remove(e, [t + "queue", n])
              }
              ))
            })
          }
        }),
        T.fn.extend({
          queue: function (e, t) {
            var n = 2;
            return "string" != typeof e && (t = e,
              e = "fx",
              n--),
              arguments.length < n ? T.queue(this[0], e) : void 0 === t ? this : this.each((function () {
                var n = T.queue(this, e, t);
                T._queueHooks(this, e),
                  "fx" === e && "inprogress" !== n[0] && T.dequeue(this, e)
              }
              ))
          },
          dequeue: function (e) {
            return this.each((function () {
              T.dequeue(this, e)
            }
            ))
          },
          clearQueue: function (e) {
            return this.queue(e || "fx", [])
          },
          promise: function (e, t) {
            var n, o = 1, i = T.Deferred(), r = this, a = this.length, s = function () {
              --o || i.resolveWith(r, [r])
            };
            for ("string" != typeof e && (t = e,
              e = void 0),
              e = e || "fx"; a--;)
              (n = J.get(r[a], e + "queueHooks")) && n.empty && (o++,
                n.empty.add(s));
            return s(),
              i.promise(t)
          }
        });
      var ne = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source
        , oe = new RegExp("^(?:([+-])=|)(" + ne + ")([a-z%]*)$", "i")
        , ie = ["Top", "Right", "Bottom", "Left"]
        , re = x.documentElement
        , ae = function (e) {
          return T.contains(e.ownerDocument, e)
        }
        , se = {
          composed: !0
        };
      re.getRootNode && (ae = function (e) {
        return T.contains(e.ownerDocument, e) || e.getRootNode(se) === e.ownerDocument
      }
      );
      var le = function (e, t) {
        return "none" === (e = t || e).style.display || "" === e.style.display && ae(e) && "none" === T.css(e, "display")
      };
      function ce(e, t, n, o) {
        var i, r, a = 20, s = o ? function () {
          return o.cur()
        }
          : function () {
            return T.css(e, t, "")
          }
          , l = s(), c = n && n[3] || (T.cssNumber[t] ? "" : "px"), u = e.nodeType && (T.cssNumber[t] || "px" !== c && +l) && oe.exec(T.css(e, t));
        if (u && u[3] !== c) {
          for (l /= 2,
            c = c || u[3],
            u = +l || 1; a--;)
            T.style(e, t, u + c),
              (1 - r) * (1 - (r = s() / l || .5)) <= 0 && (a = 0),
              u /= r;
          u *= 2,
            T.style(e, t, u + c),
            n = n || []
        }
        return n && (u = +u || +l || 0,
          i = n[1] ? u + (n[1] + 1) * n[2] : +n[2],
          o && (o.unit = c,
            o.start = u,
            o.end = i)),
          i
      }
      var ue = {};
      function pe(e) {
        var t, n = e.ownerDocument, o = e.nodeName, i = ue[o];
        return i || (t = n.body.appendChild(n.createElement(o)),
          i = T.css(t, "display"),
          t.parentNode.removeChild(t),
          "none" === i && (i = "block"),
          ue[o] = i,
          i)
      }
      function de(e, t) {
        for (var n, o, i = [], r = 0, a = e.length; r < a; r++)
          (o = e[r]).style && (n = o.style.display,
            t ? ("none" === n && (i[r] = J.get(o, "display") || null,
              i[r] || (o.style.display = "")),
              "" === o.style.display && le(o) && (i[r] = pe(o))) : "none" !== n && (i[r] = "none",
                J.set(o, "display", n)));
        for (r = 0; r < a; r++)
          null != i[r] && (e[r].style.display = i[r]);
        return e
      }
      T.fn.extend({
        show: function () {
          return de(this, !0)
        },
        hide: function () {
          return de(this)
        },
        toggle: function (e) {
          return "boolean" == typeof e ? e ? this.show() : this.hide() : this.each((function () {
            le(this) ? T(this).show() : T(this).hide()
          }
          ))
        }
      });
      var he, fe, ye = /^(?:checkbox|radio)$/i, me = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i, ge = /^$|^module$|\/(?:java|ecma)script/i;
      he = x.createDocumentFragment().appendChild(x.createElement("div")),
        (fe = x.createElement("input")).setAttribute("type", "radio"),
        fe.setAttribute("checked", "checked"),
        fe.setAttribute("name", "t"),
        he.appendChild(fe),
        m.checkClone = he.cloneNode(!0).cloneNode(!0).lastChild.checked,
        he.innerHTML = "<textarea>x</textarea>",
        m.noCloneChecked = !!he.cloneNode(!0).lastChild.defaultValue,
        he.innerHTML = "<option></option>",
        m.option = !!he.lastChild;
      var ve = {
        thead: [1, "<table>", "</table>"],
        col: [2, "<table><colgroup>", "</colgroup></table>"],
        tr: [2, "<table><tbody>", "</tbody></table>"],
        td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
        _default: [0, "", ""]
      };
      function xe(e, t) {
        var n;
        return n = void 0 !== e.getElementsByTagName ? e.getElementsByTagName(t || "*") : void 0 !== e.querySelectorAll ? e.querySelectorAll(t || "*") : [],
          void 0 === t || t && R(e, t) ? T.merge([e], n) : n
      }
      function _e(e, t) {
        for (var n = 0, o = e.length; n < o; n++)
          J.set(e[n], "globalEval", !t || J.get(t[n], "globalEval"))
      }
      ve.tbody = ve.tfoot = ve.colgroup = ve.caption = ve.thead,
        ve.th = ve.td,
        m.option || (ve.optgroup = ve.option = [1, "<select multiple='multiple'>", "</select>"]);
      var Ee = /<|&#?\w+;/;
      function be(e, t, n, o, i) {
        for (var r, a, s, l, c, u, p = t.createDocumentFragment(), d = [], h = 0, f = e.length; h < f; h++)
          if ((r = e[h]) || 0 === r)
            if ("object" === b(r))
              T.merge(d, r.nodeType ? [r] : r);
            else if (Ee.test(r)) {
              for (a = a || p.appendChild(t.createElement("div")),
                s = (me.exec(r) || ["", ""])[1].toLowerCase(),
                l = ve[s] || ve._default,
                a.innerHTML = l[1] + T.htmlPrefilter(r) + l[2],
                u = l[0]; u--;)
                a = a.lastChild;
              T.merge(d, a.childNodes),
                (a = p.firstChild).textContent = ""
            } else
              d.push(t.createTextNode(r));
        for (p.textContent = "",
          h = 0; r = d[h++];)
          if (o && T.inArray(r, o) > -1)
            i && i.push(r);
          else if (c = ae(r),
            a = xe(p.appendChild(r), "script"),
            c && _e(a),
            n)
            for (u = 0; r = a[u++];)
              ge.test(r.type || "") && n.push(r);
        return p
      }
      var Te = /^key/
        , we = /^(?:mouse|pointer|contextmenu|drag|drop)|click/
        , Oe = /^([^.]*)(?:\.(.+)|)/;
      function je() {
        return !0
      }
      function Me() {
        return !1
      }
      function Ce(e, t) {
        return e === function () {
          try {
            return x.activeElement
          } catch (e) { }
        }() == ("focus" === t)
      }
      function Re(e, t, n, o, i, r) {
        var a, s;
        if ("object" == typeof t) {
          for (s in "string" != typeof n && (o = o || n,
            n = void 0),
            t)
            Re(e, s, n, o, t[s], r);
          return e
        }
        if (null == o && null == i ? (i = n,
          o = n = void 0) : null == i && ("string" == typeof n ? (i = o,
            o = void 0) : (i = o,
              o = n,
              n = void 0)),
          !1 === i)
          i = Me;
        else if (!i)
          return e;
        return 1 === r && (a = i,
          (i = function (e) {
            return T().off(e),
              a.apply(this, arguments)
          }
          ).guid = a.guid || (a.guid = T.guid++)),
          e.each((function () {
            T.event.add(this, t, i, o, n)
          }
          ))
      }
      function Be(e, t, n) {
        n ? (J.set(e, t, !1),
          T.event.add(e, t, {
            namespace: !1,
            handler: function (e) {
              var o, i, r = J.get(this, t);
              if (1 & e.isTrigger && this[t]) {
                if (r.length)
                  (T.event.special[t] || {}).delegateType && e.stopPropagation();
                else if (r = s.call(arguments),
                  J.set(this, t, r),
                  o = n(this, t),
                  this[t](),
                  r !== (i = J.get(this, t)) || o ? J.set(this, t, !1) : i = {},
                  r !== i)
                  return e.stopImmediatePropagation(),
                    e.preventDefault(),
                    i.value
              } else
                r.length && (J.set(this, t, {
                  value: T.event.trigger(T.extend(r[0], T.Event.prototype), r.slice(1), this)
                }),
                  e.stopImmediatePropagation())
            }
          })) : void 0 === J.get(e, t) && T.event.add(e, t, je)
      }
      T.event = {
        global: {},
        add: function (e, t, n, o, i) {
          var r, a, s, l, c, u, p, d, h, f, y, m = J.get(e);
          if (Q(e))
            for (n.handler && (n = (r = n).handler,
              i = r.selector),
              i && T.find.matchesSelector(re, i),
              n.guid || (n.guid = T.guid++),
              (l = m.events) || (l = m.events = Object.create(null)),
              (a = m.handle) || (a = m.handle = function (t) {
                return void 0 !== T && T.event.triggered !== t.type ? T.event.dispatch.apply(e, arguments) : void 0
              }
              ),
              c = (t = (t || "").match(N) || [""]).length; c--;)
              h = y = (s = Oe.exec(t[c]) || [])[1],
                f = (s[2] || "").split(".").sort(),
                h && (p = T.event.special[h] || {},
                  h = (i ? p.delegateType : p.bindType) || h,
                  p = T.event.special[h] || {},
                  u = T.extend({
                    type: h,
                    origType: y,
                    data: o,
                    handler: n,
                    guid: n.guid,
                    selector: i,
                    needsContext: i && T.expr.match.needsContext.test(i),
                    namespace: f.join(".")
                  }, r),
                  (d = l[h]) || ((d = l[h] = []).delegateCount = 0,
                    p.setup && !1 !== p.setup.call(e, o, f, a) || e.addEventListener && e.addEventListener(h, a)),
                  p.add && (p.add.call(e, u),
                    u.handler.guid || (u.handler.guid = n.guid)),
                  i ? d.splice(d.delegateCount++, 0, u) : d.push(u),
                  T.event.global[h] = !0)
        },
        remove: function (e, t, n, o, i) {
          var r, a, s, l, c, u, p, d, h, f, y, m = J.hasData(e) && J.get(e);
          if (m && (l = m.events)) {
            for (c = (t = (t || "").match(N) || [""]).length; c--;)
              if (h = y = (s = Oe.exec(t[c]) || [])[1],
                f = (s[2] || "").split(".").sort(),
                h) {
                for (p = T.event.special[h] || {},
                  d = l[h = (o ? p.delegateType : p.bindType) || h] || [],
                  s = s[2] && new RegExp("(^|\\.)" + f.join("\\.(?:.*\\.|)") + "(\\.|$)"),
                  a = r = d.length; r--;)
                  u = d[r],
                    !i && y !== u.origType || n && n.guid !== u.guid || s && !s.test(u.namespace) || o && o !== u.selector && ("**" !== o || !u.selector) || (d.splice(r, 1),
                      u.selector && d.delegateCount--,
                      p.remove && p.remove.call(e, u));
                a && !d.length && (p.teardown && !1 !== p.teardown.call(e, f, m.handle) || T.removeEvent(e, h, m.handle),
                  delete l[h])
              } else
                for (h in l)
                  T.event.remove(e, h + t[c], n, o, !0);
            T.isEmptyObject(l) && J.remove(e, "handle events")
          }
        },
        dispatch: function (e) {
          var t, n, o, i, r, a, s = new Array(arguments.length), l = T.event.fix(e), c = (J.get(this, "events") || Object.create(null))[l.type] || [], u = T.event.special[l.type] || {};
          for (s[0] = l,
            t = 1; t < arguments.length; t++)
            s[t] = arguments[t];
          if (l.delegateTarget = this,
            !u.preDispatch || !1 !== u.preDispatch.call(this, l)) {
            for (a = T.event.handlers.call(this, l, c),
              t = 0; (i = a[t++]) && !l.isPropagationStopped();)
              for (l.currentTarget = i.elem,
                n = 0; (r = i.handlers[n++]) && !l.isImmediatePropagationStopped();)
                l.rnamespace && !1 !== r.namespace && !l.rnamespace.test(r.namespace) || (l.handleObj = r,
                  l.data = r.data,
                  void 0 !== (o = ((T.event.special[r.origType] || {}).handle || r.handler).apply(i.elem, s)) && !1 === (l.result = o) && (l.preventDefault(),
                    l.stopPropagation()));
            return u.postDispatch && u.postDispatch.call(this, l),
              l.result
          }
        },
        handlers: function (e, t) {
          var n, o, i, r, a, s = [], l = t.delegateCount, c = e.target;
          if (l && c.nodeType && !("click" === e.type && e.button >= 1))
            for (; c !== this; c = c.parentNode || this)
              if (1 === c.nodeType && ("click" !== e.type || !0 !== c.disabled)) {
                for (r = [],
                  a = {},
                  n = 0; n < l; n++)
                  void 0 === a[i = (o = t[n]).selector + " "] && (a[i] = o.needsContext ? T(i, this).index(c) > -1 : T.find(i, this, null, [c]).length),
                    a[i] && r.push(o);
                r.length && s.push({
                  elem: c,
                  handlers: r
                })
              }
          return c = this,
            l < t.length && s.push({
              elem: c,
              handlers: t.slice(l)
            }),
            s
        },
        addProp: function (e, t) {
          Object.defineProperty(T.Event.prototype, e, {
            enumerable: !0,
            configurable: !0,
            get: g(t) ? function () {
              if (this.originalEvent)
                return t(this.originalEvent)
            }
              : function () {
                if (this.originalEvent)
                  return this.originalEvent[e]
              }
            ,
            set: function (t) {
              Object.defineProperty(this, e, {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: t
              })
            }
          })
        },
        fix: function (e) {
          return e[T.expando] ? e : new T.Event(e)
        },
        special: {
          load: {
            noBubble: !0
          },
          click: {
            setup: function (e) {
              var t = this || e;
              return ye.test(t.type) && t.click && R(t, "input") && Be(t, "click", je),
                !1
            },
            trigger: function (e) {
              var t = this || e;
              return ye.test(t.type) && t.click && R(t, "input") && Be(t, "click"),
                !0
            },
            _default: function (e) {
              var t = e.target;
              return ye.test(t.type) && t.click && R(t, "input") && J.get(t, "click") || R(t, "a")
            }
          },
          beforeunload: {
            postDispatch: function (e) {
              void 0 !== e.result && e.originalEvent && (e.originalEvent.returnValue = e.result)
            }
          }
        }
      },
        T.removeEvent = function (e, t, n) {
          e.removeEventListener && e.removeEventListener(t, n)
        }
        ,
        T.Event = function (e, t) {
          if (!(this instanceof T.Event))
            return new T.Event(e, t);
          e && e.type ? (this.originalEvent = e,
            this.type = e.type,
            this.isDefaultPrevented = e.defaultPrevented || void 0 === e.defaultPrevented && !1 === e.returnValue ? je : Me,
            this.target = e.target && 3 === e.target.nodeType ? e.target.parentNode : e.target,
            this.currentTarget = e.currentTarget,
            this.relatedTarget = e.relatedTarget) : this.type = e,
            t && T.extend(this, t),
            this.timeStamp = e && e.timeStamp || Date.now(),
            this[T.expando] = !0
        }
        ,
        T.Event.prototype = {
          constructor: T.Event,
          isDefaultPrevented: Me,
          isPropagationStopped: Me,
          isImmediatePropagationStopped: Me,
          isSimulated: !1,
          preventDefault: function () {
            var e = this.originalEvent;
            this.isDefaultPrevented = je,
              e && !this.isSimulated && e.preventDefault()
          },
          stopPropagation: function () {
            var e = this.originalEvent;
            this.isPropagationStopped = je,
              e && !this.isSimulated && e.stopPropagation()
          },
          stopImmediatePropagation: function () {
            var e = this.originalEvent;
            this.isImmediatePropagationStopped = je,
              e && !this.isSimulated && e.stopImmediatePropagation(),
              this.stopPropagation()
          }
        },
        T.each({
          altKey: !0,
          bubbles: !0,
          cancelable: !0,
          changedTouches: !0,
          ctrlKey: !0,
          detail: !0,
          eventPhase: !0,
          metaKey: !0,
          pageX: !0,
          pageY: !0,
          shiftKey: !0,
          view: !0,
          char: !0,
          code: !0,
          charCode: !0,
          key: !0,
          keyCode: !0,
          button: !0,
          buttons: !0,
          clientX: !0,
          clientY: !0,
          offsetX: !0,
          offsetY: !0,
          pointerId: !0,
          pointerType: !0,
          screenX: !0,
          screenY: !0,
          targetTouches: !0,
          toElement: !0,
          touches: !0,
          which: function (e) {
            var t = e.button;
            return null == e.which && Te.test(e.type) ? null != e.charCode ? e.charCode : e.keyCode : !e.which && void 0 !== t && we.test(e.type) ? 1 & t ? 1 : 2 & t ? 3 : 4 & t ? 2 : 0 : e.which
          }
        }, T.event.addProp),
        T.each({
          focus: "focusin",
          blur: "focusout"
        }, (function (e, t) {
          T.event.special[e] = {
            setup: function () {
              return Be(this, e, Ce),
                !1
            },
            trigger: function () {
              return Be(this, e),
                !0
            },
            delegateType: t
          }
        }
        )),
        T.each({
          mouseenter: "mouseover",
          mouseleave: "mouseout",
          pointerenter: "pointerover",
          pointerleave: "pointerout"
        }, (function (e, t) {
          T.event.special[e] = {
            delegateType: t,
            bindType: t,
            handle: function (e) {
              var n, o = this, i = e.relatedTarget, r = e.handleObj;
              return i && (i === o || T.contains(o, i)) || (e.type = r.origType,
                n = r.handler.apply(this, arguments),
                e.type = t),
                n
            }
          }
        }
        )),
        T.fn.extend({
          on: function (e, t, n, o) {
            return Re(this, e, t, n, o)
          },
          one: function (e, t, n, o) {
            return Re(this, e, t, n, o, 1)
          },
          off: function (e, t, n) {
            var o, i;
            if (e && e.preventDefault && e.handleObj)
              return o = e.handleObj,
                T(e.delegateTarget).off(o.namespace ? o.origType + "." + o.namespace : o.origType, o.selector, o.handler),
                this;
            if ("object" == typeof e) {
              for (i in e)
                this.off(i, t, e[i]);
              return this
            }
            return !1 !== t && "function" != typeof t || (n = t,
              t = void 0),
              !1 === n && (n = Me),
              this.each((function () {
                T.event.remove(this, e, n, t)
              }
              ))
          }
        });
      var De = /<script|<style|<link/i
        , ke = /checked\s*(?:[^=]|=\s*.checked.)/i
        , Se = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
      function Ie(e, t) {
        return R(e, "table") && R(11 !== t.nodeType ? t : t.firstChild, "tr") && T(e).children("tbody")[0] || e
      }
      function Pe(e) {
        return e.type = (null !== e.getAttribute("type")) + "/" + e.type,
          e
      }
      function Ae(e) {
        return "true/" === (e.type || "").slice(0, 5) ? e.type = e.type.slice(5) : e.removeAttribute("type"),
          e
      }
      function Ne(e, t) {
        var n, o, i, r, a, s;
        if (1 === t.nodeType) {
          if (J.hasData(e) && (s = J.get(e).events))
            for (i in J.remove(t, "handle events"),
              s)
              for (n = 0,
                o = s[i].length; n < o; n++)
                T.event.add(t, i, s[i][n]);
          K.hasData(e) && (r = K.access(e),
            a = T.extend({}, r),
            K.set(t, a))
        }
      }
      function He(e, t) {
        var n = t.nodeName.toLowerCase();
        "input" === n && ye.test(e.type) ? t.checked = e.checked : "input" !== n && "textarea" !== n || (t.defaultValue = e.defaultValue)
      }
      function Le(e, t, n, o) {
        t = l(t);
        var i, r, a, s, c, u, p = 0, d = e.length, h = d - 1, f = t[0], y = g(f);
        if (y || d > 1 && "string" == typeof f && !m.checkClone && ke.test(f))
          return e.each((function (i) {
            var r = e.eq(i);
            y && (t[0] = f.call(this, i, r.html())),
              Le(r, t, n, o)
          }
          ));
        if (d && (r = (i = be(t, e[0].ownerDocument, !1, e, o)).firstChild,
          1 === i.childNodes.length && (i = r),
          r || o)) {
          for (s = (a = T.map(xe(i, "script"), Pe)).length; p < d; p++)
            c = i,
              p !== h && (c = T.clone(c, !0, !0),
                s && T.merge(a, xe(c, "script"))),
              n.call(e[p], c, p);
          if (s)
            for (u = a[a.length - 1].ownerDocument,
              T.map(a, Ae),
              p = 0; p < s; p++)
              c = a[p],
                ge.test(c.type || "") && !J.access(c, "globalEval") && T.contains(u, c) && (c.src && "module" !== (c.type || "").toLowerCase() ? T._evalUrl && !c.noModule && T._evalUrl(c.src, {
                  nonce: c.nonce || c.getAttribute("nonce")
                }, u) : E(c.textContent.replace(Se, ""), c, u))
        }
        return e
      }
      function Ve(e, t, n) {
        for (var o, i = t ? T.filter(t, e) : e, r = 0; null != (o = i[r]); r++)
          n || 1 !== o.nodeType || T.cleanData(xe(o)),
            o.parentNode && (n && ae(o) && _e(xe(o, "script")),
              o.parentNode.removeChild(o));
        return e
      }
      T.extend({
        htmlPrefilter: function (e) {
          return e
        },
        clone: function (e, t, n) {
          var o, i, r, a, s = e.cloneNode(!0), l = ae(e);
          if (!(m.noCloneChecked || 1 !== e.nodeType && 11 !== e.nodeType || T.isXMLDoc(e)))
            for (a = xe(s),
              o = 0,
              i = (r = xe(e)).length; o < i; o++)
              He(r[o], a[o]);
          if (t)
            if (n)
              for (r = r || xe(e),
                a = a || xe(s),
                o = 0,
                i = r.length; o < i; o++)
                Ne(r[o], a[o]);
            else
              Ne(e, s);
          return (a = xe(s, "script")).length > 0 && _e(a, !l && xe(e, "script")),
            s
        },
        cleanData: function (e) {
          for (var t, n, o, i = T.event.special, r = 0; void 0 !== (n = e[r]); r++)
            if (Q(n)) {
              if (t = n[J.expando]) {
                if (t.events)
                  for (o in t.events)
                    i[o] ? T.event.remove(n, o) : T.removeEvent(n, o, t.handle);
                n[J.expando] = void 0
              }
              n[K.expando] && (n[K.expando] = void 0)
            }
        }
      }),
        T.fn.extend({
          detach: function (e) {
            return Ve(this, e, !0)
          },
          remove: function (e) {
            return Ve(this, e)
          },
          text: function (e) {
            return z(this, (function (e) {
              return void 0 === e ? T.text(this) : this.empty().each((function () {
                1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || (this.textContent = e)
              }
              ))
            }
            ), null, e, arguments.length)
          },
          append: function () {
            return Le(this, arguments, (function (e) {
              1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || Ie(this, e).appendChild(e)
            }
            ))
          },
          prepend: function () {
            return Le(this, arguments, (function (e) {
              if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                var t = Ie(this, e);
                t.insertBefore(e, t.firstChild)
              }
            }
            ))
          },
          before: function () {
            return Le(this, arguments, (function (e) {
              this.parentNode && this.parentNode.insertBefore(e, this)
            }
            ))
          },
          after: function () {
            return Le(this, arguments, (function (e) {
              this.parentNode && this.parentNode.insertBefore(e, this.nextSibling)
            }
            ))
          },
          empty: function () {
            for (var e, t = 0; null != (e = this[t]); t++)
              1 === e.nodeType && (T.cleanData(xe(e, !1)),
                e.textContent = "");
            return this
          },
          clone: function (e, t) {
            return e = null != e && e,
              t = null == t ? e : t,
              this.map((function () {
                return T.clone(this, e, t)
              }
              ))
          },
          html: function (e) {
            return z(this, (function (e) {
              var t = this[0] || {}
                , n = 0
                , o = this.length;
              if (void 0 === e && 1 === t.nodeType)
                return t.innerHTML;
              if ("string" == typeof e && !De.test(e) && !ve[(me.exec(e) || ["", ""])[1].toLowerCase()]) {
                e = T.htmlPrefilter(e);
                try {
                  for (; n < o; n++)
                    1 === (t = this[n] || {}).nodeType && (T.cleanData(xe(t, !1)),
                      t.innerHTML = e);
                  t = 0
                } catch (e) { }
              }
              t && this.empty().append(e)
            }
            ), null, e, arguments.length)
          },
          replaceWith: function () {
            var e = [];
            return Le(this, arguments, (function (t) {
              var n = this.parentNode;
              T.inArray(this, e) < 0 && (T.cleanData(xe(this)),
                n && n.replaceChild(t, this))
            }
            ), e)
          }
        }),
        T.each({
          appendTo: "append",
          prependTo: "prepend",
          insertBefore: "before",
          insertAfter: "after",
          replaceAll: "replaceWith"
        }, (function (e, t) {
          T.fn[e] = function (e) {
            for (var n, o = [], i = T(e), r = i.length - 1, a = 0; a <= r; a++)
              n = a === r ? this : this.clone(!0),
                T(i[a])[t](n),
                c.apply(o, n.get());
            return this.pushStack(o)
          }
        }
        ));
      var Fe = new RegExp("^(" + ne + ")(?!px)[a-z%]+$", "i")
        , Ue = function (e) {
          var t = e.ownerDocument.defaultView;
          return t && t.opener || (t = n),
            t.getComputedStyle(e)
        }
        , qe = function (e, t, n) {
          var o, i, r = {};
          for (i in t)
            r[i] = e.style[i],
              e.style[i] = t[i];
          for (i in o = n.call(e),
            t)
            e.style[i] = r[i];
          return o
        }
        , ze = new RegExp(ie.join("|"), "i");
      function $e(e, t, n) {
        var o, i, r, a, s = e.style;
        return (n = n || Ue(e)) && ("" !== (a = n.getPropertyValue(t) || n[t]) || ae(e) || (a = T.style(e, t)),
          !m.pixelBoxStyles() && Fe.test(a) && ze.test(t) && (o = s.width,
            i = s.minWidth,
            r = s.maxWidth,
            s.minWidth = s.maxWidth = s.width = a,
            a = n.width,
            s.width = o,
            s.minWidth = i,
            s.maxWidth = r)),
          void 0 !== a ? a + "" : a
      }
      function We(e, t) {
        return {
          get: function () {
            if (!e())
              return (this.get = t).apply(this, arguments);
            delete this.get
          }
        }
      }
      !function () {
        function e() {
          if (u) {
            c.style.cssText = "position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",
              u.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",
              re.appendChild(c).appendChild(u);
            var e = n.getComputedStyle(u);
            o = "1%" !== e.top,
              l = 12 === t(e.marginLeft),
              u.style.right = "60%",
              a = 36 === t(e.right),
              i = 36 === t(e.width),
              u.style.position = "absolute",
              r = 12 === t(u.offsetWidth / 3),
              re.removeChild(c),
              u = null
          }
        }
        function t(e) {
          return Math.round(parseFloat(e))
        }
        var o, i, r, a, s, l, c = x.createElement("div"), u = x.createElement("div");
        u.style && (u.style.backgroundClip = "content-box",
          u.cloneNode(!0).style.backgroundClip = "",
          m.clearCloneStyle = "content-box" === u.style.backgroundClip,
          T.extend(m, {
            boxSizingReliable: function () {
              return e(),
                i
            },
            pixelBoxStyles: function () {
              return e(),
                a
            },
            pixelPosition: function () {
              return e(),
                o
            },
            reliableMarginLeft: function () {
              return e(),
                l
            },
            scrollboxSize: function () {
              return e(),
                r
            },
            reliableTrDimensions: function () {
              var e, t, o, i;
              return null == s && (e = x.createElement("table"),
                t = x.createElement("tr"),
                o = x.createElement("div"),
                e.style.cssText = "position:absolute;left:-11111px",
                t.style.height = "1px",
                o.style.height = "9px",
                re.appendChild(e).appendChild(t).appendChild(o),
                i = n.getComputedStyle(t),
                s = parseInt(i.height) > 3,
                re.removeChild(e)),
                s
            }
          }))
      }();
      var Xe = ["Webkit", "Moz", "ms"]
        , Ge = x.createElement("div").style
        , Qe = {};
      function Ye(e) {
        var t = T.cssProps[e] || Qe[e];
        return t || (e in Ge ? e : Qe[e] = function (e) {
          for (var t = e[0].toUpperCase() + e.slice(1), n = Xe.length; n--;)
            if ((e = Xe[n] + t) in Ge)
              return e
        }(e) || e)
      }
      var Je = /^(none|table(?!-c[ea]).+)/
        , Ke = /^--/
        , Ze = {
          position: "absolute",
          visibility: "hidden",
          display: "block"
        }
        , et = {
          letterSpacing: "0",
          fontWeight: "400"
        };
      function tt(e, t, n) {
        var o = oe.exec(t);
        return o ? Math.max(0, o[2] - (n || 0)) + (o[3] || "px") : t
      }
      function nt(e, t, n, o, i, r) {
        var a = "width" === t ? 1 : 0
          , s = 0
          , l = 0;
        if (n === (o ? "border" : "content"))
          return 0;
        for (; a < 4; a += 2)
          "margin" === n && (l += T.css(e, n + ie[a], !0, i)),
            o ? ("content" === n && (l -= T.css(e, "padding" + ie[a], !0, i)),
              "margin" !== n && (l -= T.css(e, "border" + ie[a] + "Width", !0, i))) : (l += T.css(e, "padding" + ie[a], !0, i),
                "padding" !== n ? l += T.css(e, "border" + ie[a] + "Width", !0, i) : s += T.css(e, "border" + ie[a] + "Width", !0, i));
        return !o && r >= 0 && (l += Math.max(0, Math.ceil(e["offset" + t[0].toUpperCase() + t.slice(1)] - r - l - s - .5)) || 0),
          l
      }
      function ot(e, t, n) {
        var o = Ue(e)
          , i = (!m.boxSizingReliable() || n) && "border-box" === T.css(e, "boxSizing", !1, o)
          , r = i
          , a = $e(e, t, o)
          , s = "offset" + t[0].toUpperCase() + t.slice(1);
        if (Fe.test(a)) {
          if (!n)
            return a;
          a = "auto"
        }
        return (!m.boxSizingReliable() && i || !m.reliableTrDimensions() && R(e, "tr") || "auto" === a || !parseFloat(a) && "inline" === T.css(e, "display", !1, o)) && e.getClientRects().length && (i = "border-box" === T.css(e, "boxSizing", !1, o),
          (r = s in e) && (a = e[s])),
          (a = parseFloat(a) || 0) + nt(e, t, n || (i ? "border" : "content"), r, o, a) + "px"
      }
      function it(e, t, n, o, i) {
        return new it.prototype.init(e, t, n, o, i)
      }
      T.extend({
        cssHooks: {
          opacity: {
            get: function (e, t) {
              if (t) {
                var n = $e(e, "opacity");
                return "" === n ? "1" : n
              }
            }
          }
        },
        cssNumber: {
          animationIterationCount: !0,
          columnCount: !0,
          fillOpacity: !0,
          flexGrow: !0,
          flexShrink: !0,
          fontWeight: !0,
          gridArea: !0,
          gridColumn: !0,
          gridColumnEnd: !0,
          gridColumnStart: !0,
          gridRow: !0,
          gridRowEnd: !0,
          gridRowStart: !0,
          lineHeight: !0,
          opacity: !0,
          order: !0,
          orphans: !0,
          widows: !0,
          zIndex: !0,
          zoom: !0
        },
        cssProps: {},
        style: function (e, t, n, o) {
          if (e && 3 !== e.nodeType && 8 !== e.nodeType && e.style) {
            var i, r, a, s = G(t), l = Ke.test(t), c = e.style;
            if (l || (t = Ye(s)),
              a = T.cssHooks[t] || T.cssHooks[s],
              void 0 === n)
              return a && "get" in a && void 0 !== (i = a.get(e, !1, o)) ? i : c[t];
            "string" === (r = typeof n) && (i = oe.exec(n)) && i[1] && (n = ce(e, t, i),
              r = "number"),
              null != n && n == n && ("number" !== r || l || (n += i && i[3] || (T.cssNumber[s] ? "" : "px")),
                m.clearCloneStyle || "" !== n || 0 !== t.indexOf("background") || (c[t] = "inherit"),
                a && "set" in a && void 0 === (n = a.set(e, n, o)) || (l ? c.setProperty(t, n) : c[t] = n))
          }
        },
        css: function (e, t, n, o) {
          var i, r, a, s = G(t);
          return Ke.test(t) || (t = Ye(s)),
            (a = T.cssHooks[t] || T.cssHooks[s]) && "get" in a && (i = a.get(e, !0, n)),
            void 0 === i && (i = $e(e, t, o)),
            "normal" === i && t in et && (i = et[t]),
            "" === n || n ? (r = parseFloat(i),
              !0 === n || isFinite(r) ? r || 0 : i) : i
        }
      }),
        T.each(["height", "width"], (function (e, t) {
          T.cssHooks[t] = {
            get: function (e, n, o) {
              if (n)
                return !Je.test(T.css(e, "display")) || e.getClientRects().length && e.getBoundingClientRect().width ? ot(e, t, o) : qe(e, Ze, (function () {
                  return ot(e, t, o)
                }
                ))
            },
            set: function (e, n, o) {
              var i, r = Ue(e), a = !m.scrollboxSize() && "absolute" === r.position, s = (a || o) && "border-box" === T.css(e, "boxSizing", !1, r), l = o ? nt(e, t, o, s, r) : 0;
              return s && a && (l -= Math.ceil(e["offset" + t[0].toUpperCase() + t.slice(1)] - parseFloat(r[t]) - nt(e, t, "border", !1, r) - .5)),
                l && (i = oe.exec(n)) && "px" !== (i[3] || "px") && (e.style[t] = n,
                  n = T.css(e, t)),
                tt(0, n, l)
            }
          }
        }
        )),
        T.cssHooks.marginLeft = We(m.reliableMarginLeft, (function (e, t) {
          if (t)
            return (parseFloat($e(e, "marginLeft")) || e.getBoundingClientRect().left - qe(e, {
              marginLeft: 0
            }, (function () {
              return e.getBoundingClientRect().left
            }
            ))) + "px"
        }
        )),
        T.each({
          margin: "",
          padding: "",
          border: "Width"
        }, (function (e, t) {
          T.cssHooks[e + t] = {
            expand: function (n) {
              for (var o = 0, i = {}, r = "string" == typeof n ? n.split(" ") : [n]; o < 4; o++)
                i[e + ie[o] + t] = r[o] || r[o - 2] || r[0];
              return i
            }
          },
            "margin" !== e && (T.cssHooks[e + t].set = tt)
        }
        )),
        T.fn.extend({
          css: function (e, t) {
            return z(this, (function (e, t, n) {
              var o, i, r = {}, a = 0;
              if (Array.isArray(t)) {
                for (o = Ue(e),
                  i = t.length; a < i; a++)
                  r[t[a]] = T.css(e, t[a], !1, o);
                return r
              }
              return void 0 !== n ? T.style(e, t, n) : T.css(e, t)
            }
            ), e, t, arguments.length > 1)
          }
        }),
        T.Tween = it,
        it.prototype = {
          constructor: it,
          init: function (e, t, n, o, i, r) {
            this.elem = e,
              this.prop = n,
              this.easing = i || T.easing._default,
              this.options = t,
              this.start = this.now = this.cur(),
              this.end = o,
              this.unit = r || (T.cssNumber[n] ? "" : "px")
          },
          cur: function () {
            var e = it.propHooks[this.prop];
            return e && e.get ? e.get(this) : it.propHooks._default.get(this)
          },
          run: function (e) {
            var t, n = it.propHooks[this.prop];
            return this.options.duration ? this.pos = t = T.easing[this.easing](e, this.options.duration * e, 0, 1, this.options.duration) : this.pos = t = e,
              this.now = (this.end - this.start) * t + this.start,
              this.options.step && this.options.step.call(this.elem, this.now, this),
              n && n.set ? n.set(this) : it.propHooks._default.set(this),
              this
          }
        },
        it.prototype.init.prototype = it.prototype,
        it.propHooks = {
          _default: {
            get: function (e) {
              var t;
              return 1 !== e.elem.nodeType || null != e.elem[e.prop] && null == e.elem.style[e.prop] ? e.elem[e.prop] : (t = T.css(e.elem, e.prop, "")) && "auto" !== t ? t : 0
            },
            set: function (e) {
              T.fx.step[e.prop] ? T.fx.step[e.prop](e) : 1 !== e.elem.nodeType || !T.cssHooks[e.prop] && null == e.elem.style[Ye(e.prop)] ? e.elem[e.prop] = e.now : T.style(e.elem, e.prop, e.now + e.unit)
            }
          }
        },
        it.propHooks.scrollTop = it.propHooks.scrollLeft = {
          set: function (e) {
            e.elem.nodeType && e.elem.parentNode && (e.elem[e.prop] = e.now)
          }
        },
        T.easing = {
          linear: function (e) {
            return e
          },
          swing: function (e) {
            return .5 - Math.cos(e * Math.PI) / 2
          },
          _default: "swing"
        },
        T.fx = it.prototype.init,
        T.fx.step = {};
      var rt, at, st = /^(?:toggle|show|hide)$/, lt = /queueHooks$/;
      function ct() {
        at && (!1 === x.hidden && n.requestAnimationFrame ? n.requestAnimationFrame(ct) : n.setTimeout(ct, T.fx.interval),
          T.fx.tick())
      }
      function ut() {
        return n.setTimeout((function () {
          rt = void 0
        }
        )),
          rt = Date.now()
      }
      function pt(e, t) {
        var n, o = 0, i = {
          height: e
        };
        for (t = t ? 1 : 0; o < 4; o += 2 - t)
          i["margin" + (n = ie[o])] = i["padding" + n] = e;
        return t && (i.opacity = i.width = e),
          i
      }
      function dt(e, t, n) {
        for (var o, i = (ht.tweeners[t] || []).concat(ht.tweeners["*"]), r = 0, a = i.length; r < a; r++)
          if (o = i[r].call(n, t, e))
            return o
      }
      function ht(e, t, n) {
        var o, i, r = 0, a = ht.prefilters.length, s = T.Deferred().always((function () {
          delete l.elem
        }
        )), l = function () {
          if (i)
            return !1;
          for (var t = rt || ut(), n = Math.max(0, c.startTime + c.duration - t), o = 1 - (n / c.duration || 0), r = 0, a = c.tweens.length; r < a; r++)
            c.tweens[r].run(o);
          return s.notifyWith(e, [c, o, n]),
            o < 1 && a ? n : (a || s.notifyWith(e, [c, 1, 0]),
              s.resolveWith(e, [c]),
              !1)
        }, c = s.promise({
          elem: e,
          props: T.extend({}, t),
          opts: T.extend(!0, {
            specialEasing: {},
            easing: T.easing._default
          }, n),
          originalProperties: t,
          originalOptions: n,
          startTime: rt || ut(),
          duration: n.duration,
          tweens: [],
          createTween: function (t, n) {
            var o = T.Tween(e, c.opts, t, n, c.opts.specialEasing[t] || c.opts.easing);
            return c.tweens.push(o),
              o
          },
          stop: function (t) {
            var n = 0
              , o = t ? c.tweens.length : 0;
            if (i)
              return this;
            for (i = !0; n < o; n++)
              c.tweens[n].run(1);
            return t ? (s.notifyWith(e, [c, 1, 0]),
              s.resolveWith(e, [c, t])) : s.rejectWith(e, [c, t]),
              this
          }
        }), u = c.props;
        for (!function (e, t) {
          var n, o, i, r, a;
          for (n in e)
            if (i = t[o = G(n)],
              r = e[n],
              Array.isArray(r) && (i = r[1],
                r = e[n] = r[0]),
              n !== o && (e[o] = r,
                delete e[n]),
              (a = T.cssHooks[o]) && "expand" in a)
              for (n in r = a.expand(r),
                delete e[o],
                r)
                n in e || (e[n] = r[n],
                  t[n] = i);
            else
              t[o] = i
        }(u, c.opts.specialEasing); r < a; r++)
          if (o = ht.prefilters[r].call(c, e, u, c.opts))
            return g(o.stop) && (T._queueHooks(c.elem, c.opts.queue).stop = o.stop.bind(o)),
              o;
        return T.map(u, dt, c),
          g(c.opts.start) && c.opts.start.call(e, c),
          c.progress(c.opts.progress).done(c.opts.done, c.opts.complete).fail(c.opts.fail).always(c.opts.always),
          T.fx.timer(T.extend(l, {
            elem: e,
            anim: c,
            queue: c.opts.queue
          })),
          c
      }
      T.Animation = T.extend(ht, {
        tweeners: {
          "*": [function (e, t) {
            var n = this.createTween(e, t);
            return ce(n.elem, e, oe.exec(t), n),
              n
          }
          ]
        },
        tweener: function (e, t) {
          g(e) ? (t = e,
            e = ["*"]) : e = e.match(N);
          for (var n, o = 0, i = e.length; o < i; o++)
            n = e[o],
              ht.tweeners[n] = ht.tweeners[n] || [],
              ht.tweeners[n].unshift(t)
        },
        prefilters: [function (e, t, n) {
          var o, i, r, a, s, l, c, u, p = "width" in t || "height" in t, d = this, h = {}, f = e.style, y = e.nodeType && le(e), m = J.get(e, "fxshow");
          for (o in n.queue || (null == (a = T._queueHooks(e, "fx")).unqueued && (a.unqueued = 0,
            s = a.empty.fire,
            a.empty.fire = function () {
              a.unqueued || s()
            }
          ),
            a.unqueued++,
            d.always((function () {
              d.always((function () {
                a.unqueued--,
                  T.queue(e, "fx").length || a.empty.fire()
              }
              ))
            }
            ))),
            t)
            if (i = t[o],
              st.test(i)) {
              if (delete t[o],
                r = r || "toggle" === i,
                i === (y ? "hide" : "show")) {
                if ("show" !== i || !m || void 0 === m[o])
                  continue;
                y = !0
              }
              h[o] = m && m[o] || T.style(e, o)
            }
          if ((l = !T.isEmptyObject(t)) || !T.isEmptyObject(h))
            for (o in p && 1 === e.nodeType && (n.overflow = [f.overflow, f.overflowX, f.overflowY],
              null == (c = m && m.display) && (c = J.get(e, "display")),
              "none" === (u = T.css(e, "display")) && (c ? u = c : (de([e], !0),
                c = e.style.display || c,
                u = T.css(e, "display"),
                de([e]))),
              ("inline" === u || "inline-block" === u && null != c) && "none" === T.css(e, "float") && (l || (d.done((function () {
                f.display = c
              }
              )),
                null == c && (u = f.display,
                  c = "none" === u ? "" : u)),
                f.display = "inline-block")),
              n.overflow && (f.overflow = "hidden",
                d.always((function () {
                  f.overflow = n.overflow[0],
                    f.overflowX = n.overflow[1],
                    f.overflowY = n.overflow[2]
                }
                ))),
              l = !1,
              h)
              l || (m ? "hidden" in m && (y = m.hidden) : m = J.access(e, "fxshow", {
                display: c
              }),
                r && (m.hidden = !y),
                y && de([e], !0),
                d.done((function () {
                  for (o in y || de([e]),
                    J.remove(e, "fxshow"),
                    h)
                    T.style(e, o, h[o])
                }
                ))),
                l = dt(y ? m[o] : 0, o, d),
                o in m || (m[o] = l.start,
                  y && (l.end = l.start,
                    l.start = 0))
        }
        ],
        prefilter: function (e, t) {
          t ? ht.prefilters.unshift(e) : ht.prefilters.push(e)
        }
      }),
        T.speed = function (e, t, n) {
          var o = e && "object" == typeof e ? T.extend({}, e) : {
            complete: n || !n && t || g(e) && e,
            duration: e,
            easing: n && t || t && !g(t) && t
          };
          return T.fx.off ? o.duration = 0 : "number" != typeof o.duration && (o.duration in T.fx.speeds ? o.duration = T.fx.speeds[o.duration] : o.duration = T.fx.speeds._default),
            null != o.queue && !0 !== o.queue || (o.queue = "fx"),
            o.old = o.complete,
            o.complete = function () {
              g(o.old) && o.old.call(this),
                o.queue && T.dequeue(this, o.queue)
            }
            ,
            o
        }
        ,
        T.fn.extend({
          fadeTo: function (e, t, n, o) {
            return this.filter(le).css("opacity", 0).show().end().animate({
              opacity: t
            }, e, n, o)
          },
          animate: function (e, t, n, o) {
            var i = T.isEmptyObject(e)
              , r = T.speed(t, n, o)
              , a = function () {
                var t = ht(this, T.extend({}, e), r);
                (i || J.get(this, "finish")) && t.stop(!0)
              };
            return a.finish = a,
              i || !1 === r.queue ? this.each(a) : this.queue(r.queue, a)
          },
          stop: function (e, t, n) {
            var o = function (e) {
              var t = e.stop;
              delete e.stop,
                t(n)
            };
            return "string" != typeof e && (n = t,
              t = e,
              e = void 0),
              t && this.queue(e || "fx", []),
              this.each((function () {
                var t = !0
                  , i = null != e && e + "queueHooks"
                  , r = T.timers
                  , a = J.get(this);
                if (i)
                  a[i] && a[i].stop && o(a[i]);
                else
                  for (i in a)
                    a[i] && a[i].stop && lt.test(i) && o(a[i]);
                for (i = r.length; i--;)
                  r[i].elem !== this || null != e && r[i].queue !== e || (r[i].anim.stop(n),
                    t = !1,
                    r.splice(i, 1));
                !t && n || T.dequeue(this, e)
              }
              ))
          },
          finish: function (e) {
            return !1 !== e && (e = e || "fx"),
              this.each((function () {
                var t, n = J.get(this), o = n[e + "queue"], i = n[e + "queueHooks"], r = T.timers, a = o ? o.length : 0;
                for (n.finish = !0,
                  T.queue(this, e, []),
                  i && i.stop && i.stop.call(this, !0),
                  t = r.length; t--;)
                  r[t].elem === this && r[t].queue === e && (r[t].anim.stop(!0),
                    r.splice(t, 1));
                for (t = 0; t < a; t++)
                  o[t] && o[t].finish && o[t].finish.call(this);
                delete n.finish
              }
              ))
          }
        }),
        T.each(["toggle", "show", "hide"], (function (e, t) {
          var n = T.fn[t];
          T.fn[t] = function (e, o, i) {
            return null == e || "boolean" == typeof e ? n.apply(this, arguments) : this.animate(pt(t, !0), e, o, i)
          }
        }
        )),
        T.each({
          slideDown: pt("show"),
          slideUp: pt("hide"),
          slideToggle: pt("toggle"),
          fadeIn: {
            opacity: "show"
          },
          fadeOut: {
            opacity: "hide"
          },
          fadeToggle: {
            opacity: "toggle"
          }
        }, (function (e, t) {
          T.fn[e] = function (e, n, o) {
            return this.animate(t, e, n, o)
          }
        }
        )),
        T.timers = [],
        T.fx.tick = function () {
          var e, t = 0, n = T.timers;
          for (rt = Date.now(); t < n.length; t++)
            (e = n[t])() || n[t] !== e || n.splice(t--, 1);
          n.length || T.fx.stop(),
            rt = void 0
        }
        ,
        T.fx.timer = function (e) {
          T.timers.push(e),
            T.fx.start()
        }
        ,
        T.fx.interval = 13,
        T.fx.start = function () {
          at || (at = !0,
            ct())
        }
        ,
        T.fx.stop = function () {
          at = null
        }
        ,
        T.fx.speeds = {
          slow: 600,
          fast: 200,
          _default: 400
        },
        T.fn.delay = function (e, t) {
          return e = T.fx && T.fx.speeds[e] || e,
            t = t || "fx",
            this.queue(t, (function (t, o) {
              var i = n.setTimeout(t, e);
              o.stop = function () {
                n.clearTimeout(i)
              }
            }
            ))
        }
        ,
        function () {
          var e = x.createElement("input")
            , t = x.createElement("select").appendChild(x.createElement("option"));
          e.type = "checkbox",
            m.checkOn = "" !== e.value,
            m.optSelected = t.selected,
            (e = x.createElement("input")).value = "t",
            e.type = "radio",
            m.radioValue = "t" === e.value
        }();
      var ft, yt = T.expr.attrHandle;
      T.fn.extend({
        attr: function (e, t) {
          return z(this, T.attr, e, t, arguments.length > 1)
        },
        removeAttr: function (e) {
          return this.each((function () {
            T.removeAttr(this, e)
          }
          ))
        }
      }),
        T.extend({
          attr: function (e, t, n) {
            var o, i, r = e.nodeType;
            if (3 !== r && 8 !== r && 2 !== r)
              return void 0 === e.getAttribute ? T.prop(e, t, n) : (1 === r && T.isXMLDoc(e) || (i = T.attrHooks[t.toLowerCase()] || (T.expr.match.bool.test(t) ? ft : void 0)),
                void 0 !== n ? null === n ? void T.removeAttr(e, t) : i && "set" in i && void 0 !== (o = i.set(e, n, t)) ? o : (e.setAttribute(t, n + ""),
                  n) : i && "get" in i && null !== (o = i.get(e, t)) ? o : null == (o = T.find.attr(e, t)) ? void 0 : o)
          },
          attrHooks: {
            type: {
              set: function (e, t) {
                if (!m.radioValue && "radio" === t && R(e, "input")) {
                  var n = e.value;
                  return e.setAttribute("type", t),
                    n && (e.value = n),
                    t
                }
              }
            }
          },
          removeAttr: function (e, t) {
            var n, o = 0, i = t && t.match(N);
            if (i && 1 === e.nodeType)
              for (; n = i[o++];)
                e.removeAttribute(n)
          }
        }),
        ft = {
          set: function (e, t, n) {
            return !1 === t ? T.removeAttr(e, n) : e.setAttribute(n, n),
              n
          }
        },
        T.each(T.expr.match.bool.source.match(/\w+/g), (function (e, t) {
          var n = yt[t] || T.find.attr;
          yt[t] = function (e, t, o) {
            var i, r, a = t.toLowerCase();
            return o || (r = yt[a],
              yt[a] = i,
              i = null != n(e, t, o) ? a : null,
              yt[a] = r),
              i
          }
        }
        ));
      var mt = /^(?:input|select|textarea|button)$/i
        , gt = /^(?:a|area)$/i;
      function vt(e) {
        return (e.match(N) || []).join(" ")
      }
      function xt(e) {
        return e.getAttribute && e.getAttribute("class") || ""
      }
      function _t(e) {
        return Array.isArray(e) ? e : "string" == typeof e && e.match(N) || []
      }
      T.fn.extend({
        prop: function (e, t) {
          return z(this, T.prop, e, t, arguments.length > 1)
        },
        removeProp: function (e) {
          return this.each((function () {
            delete this[T.propFix[e] || e]
          }
          ))
        }
      }),
        T.extend({
          prop: function (e, t, n) {
            var o, i, r = e.nodeType;
            if (3 !== r && 8 !== r && 2 !== r)
              return 1 === r && T.isXMLDoc(e) || (t = T.propFix[t] || t,
                i = T.propHooks[t]),
                void 0 !== n ? i && "set" in i && void 0 !== (o = i.set(e, n, t)) ? o : e[t] = n : i && "get" in i && null !== (o = i.get(e, t)) ? o : e[t]
          },
          propHooks: {
            tabIndex: {
              get: function (e) {
                var t = T.find.attr(e, "tabindex");
                return t ? parseInt(t, 10) : mt.test(e.nodeName) || gt.test(e.nodeName) && e.href ? 0 : -1
              }
            }
          },
          propFix: {
            for: "htmlFor",
            class: "className"
          }
        }),
        m.optSelected || (T.propHooks.selected = {
          get: function (e) {
            var t = e.parentNode;
            return t && t.parentNode && t.parentNode.selectedIndex,
              null
          },
          set: function (e) {
            var t = e.parentNode;
            t && (t.selectedIndex,
              t.parentNode && t.parentNode.selectedIndex)
          }
        }),
        T.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], (function () {
          T.propFix[this.toLowerCase()] = this
        }
        )),
        T.fn.extend({
          addClass: function (e) {
            var t, n, o, i, r, a, s, l = 0;
            if (g(e))
              return this.each((function (t) {
                T(this).addClass(e.call(this, t, xt(this)))
              }
              ));
            if ((t = _t(e)).length)
              for (; n = this[l++];)
                if (i = xt(n),
                  o = 1 === n.nodeType && " " + vt(i) + " ") {
                  for (a = 0; r = t[a++];)
                    o.indexOf(" " + r + " ") < 0 && (o += r + " ");
                  i !== (s = vt(o)) && n.setAttribute("class", s)
                }
            return this
          },
          removeClass: function (e) {
            var t, n, o, i, r, a, s, l = 0;
            if (g(e))
              return this.each((function (t) {
                T(this).removeClass(e.call(this, t, xt(this)))
              }
              ));
            if (!arguments.length)
              return this.attr("class", "");
            if ((t = _t(e)).length)
              for (; n = this[l++];)
                if (i = xt(n),
                  o = 1 === n.nodeType && " " + vt(i) + " ") {
                  for (a = 0; r = t[a++];)
                    for (; o.indexOf(" " + r + " ") > -1;)
                      o = o.replace(" " + r + " ", " ");
                  i !== (s = vt(o)) && n.setAttribute("class", s)
                }
            return this
          },
          toggleClass: function (e, t) {
            var n = typeof e
              , o = "string" === n || Array.isArray(e);
            return "boolean" == typeof t && o ? t ? this.addClass(e) : this.removeClass(e) : g(e) ? this.each((function (n) {
              T(this).toggleClass(e.call(this, n, xt(this), t), t)
            }
            )) : this.each((function () {
              var t, i, r, a;
              if (o)
                for (i = 0,
                  r = T(this),
                  a = _t(e); t = a[i++];)
                  r.hasClass(t) ? r.removeClass(t) : r.addClass(t);
              else
                void 0 !== e && "boolean" !== n || ((t = xt(this)) && J.set(this, "__className__", t),
                  this.setAttribute && this.setAttribute("class", t || !1 === e ? "" : J.get(this, "__className__") || ""))
            }
            ))
          },
          hasClass: function (e) {
            var t, n, o = 0;
            for (t = " " + e + " "; n = this[o++];)
              if (1 === n.nodeType && (" " + vt(xt(n)) + " ").indexOf(t) > -1)
                return !0;
            return !1
          }
        });
      var Et = /\r/g;
      T.fn.extend({
        val: function (e) {
          var t, n, o, i = this[0];
          return arguments.length ? (o = g(e),
            this.each((function (n) {
              var i;
              1 === this.nodeType && (null == (i = o ? e.call(this, n, T(this).val()) : e) ? i = "" : "number" == typeof i ? i += "" : Array.isArray(i) && (i = T.map(i, (function (e) {
                return null == e ? "" : e + ""
              }
              ))),
                (t = T.valHooks[this.type] || T.valHooks[this.nodeName.toLowerCase()]) && "set" in t && void 0 !== t.set(this, i, "value") || (this.value = i))
            }
            ))) : i ? (t = T.valHooks[i.type] || T.valHooks[i.nodeName.toLowerCase()]) && "get" in t && void 0 !== (n = t.get(i, "value")) ? n : "string" == typeof (n = i.value) ? n.replace(Et, "") : null == n ? "" : n : void 0
        }
      }),
        T.extend({
          valHooks: {
            option: {
              get: function (e) {
                var t = T.find.attr(e, "value");
                return null != t ? t : vt(T.text(e))
              }
            },
            select: {
              get: function (e) {
                var t, n, o, i = e.options, r = e.selectedIndex, a = "select-one" === e.type, s = a ? null : [], l = a ? r + 1 : i.length;
                for (o = r < 0 ? l : a ? r : 0; o < l; o++)
                  if (((n = i[o]).selected || o === r) && !n.disabled && (!n.parentNode.disabled || !R(n.parentNode, "optgroup"))) {
                    if (t = T(n).val(),
                      a)
                      return t;
                    s.push(t)
                  }
                return s
              },
              set: function (e, t) {
                for (var n, o, i = e.options, r = T.makeArray(t), a = i.length; a--;)
                  ((o = i[a]).selected = T.inArray(T.valHooks.option.get(o), r) > -1) && (n = !0);
                return n || (e.selectedIndex = -1),
                  r
              }
            }
          }
        }),
        T.each(["radio", "checkbox"], (function () {
          T.valHooks[this] = {
            set: function (e, t) {
              if (Array.isArray(t))
                return e.checked = T.inArray(T(e).val(), t) > -1
            }
          },
            m.checkOn || (T.valHooks[this].get = function (e) {
              return null === e.getAttribute("value") ? "on" : e.value
            }
            )
        }
        )),
        m.focusin = "onfocusin" in n;
      var bt = /^(?:focusinfocus|focusoutblur)$/
        , Tt = function (e) {
          e.stopPropagation()
        };
      T.extend(T.event, {
        trigger: function (e, t, o, i) {
          var r, a, s, l, c, u, p, d, f = [o || x], y = h.call(e, "type") ? e.type : e, m = h.call(e, "namespace") ? e.namespace.split(".") : [];
          if (a = d = s = o = o || x,
            3 !== o.nodeType && 8 !== o.nodeType && !bt.test(y + T.event.triggered) && (y.indexOf(".") > -1 && (m = y.split("."),
              y = m.shift(),
              m.sort()),
              c = y.indexOf(":") < 0 && "on" + y,
              (e = e[T.expando] ? e : new T.Event(y, "object" == typeof e && e)).isTrigger = i ? 2 : 3,
              e.namespace = m.join("."),
              e.rnamespace = e.namespace ? new RegExp("(^|\\.)" + m.join("\\.(?:.*\\.|)") + "(\\.|$)") : null,
              e.result = void 0,
              e.target || (e.target = o),
              t = null == t ? [e] : T.makeArray(t, [e]),
              p = T.event.special[y] || {},
              i || !p.trigger || !1 !== p.trigger.apply(o, t))) {
            if (!i && !p.noBubble && !v(o)) {
              for (l = p.delegateType || y,
                bt.test(l + y) || (a = a.parentNode); a; a = a.parentNode)
                f.push(a),
                  s = a;
              s === (o.ownerDocument || x) && f.push(s.defaultView || s.parentWindow || n)
            }
            for (r = 0; (a = f[r++]) && !e.isPropagationStopped();)
              d = a,
                e.type = r > 1 ? l : p.bindType || y,
                (u = (J.get(a, "events") || Object.create(null))[e.type] && J.get(a, "handle")) && u.apply(a, t),
                (u = c && a[c]) && u.apply && Q(a) && (e.result = u.apply(a, t),
                  !1 === e.result && e.preventDefault());
            return e.type = y,
              i || e.isDefaultPrevented() || p._default && !1 !== p._default.apply(f.pop(), t) || !Q(o) || c && g(o[y]) && !v(o) && ((s = o[c]) && (o[c] = null),
                T.event.triggered = y,
                e.isPropagationStopped() && d.addEventListener(y, Tt),
                o[y](),
                e.isPropagationStopped() && d.removeEventListener(y, Tt),
                T.event.triggered = void 0,
                s && (o[c] = s)),
              e.result
          }
        },
        simulate: function (e, t, n) {
          var o = T.extend(new T.Event, n, {
            type: e,
            isSimulated: !0
          });
          T.event.trigger(o, null, t)
        }
      }),
        T.fn.extend({
          trigger: function (e, t) {
            return this.each((function () {
              T.event.trigger(e, t, this)
            }
            ))
          },
          triggerHandler: function (e, t) {
            var n = this[0];
            if (n)
              return T.event.trigger(e, t, n, !0)
          }
        }),
        m.focusin || T.each({
          focus: "focusin",
          blur: "focusout"
        }, (function (e, t) {
          var n = function (e) {
            T.event.simulate(t, e.target, T.event.fix(e))
          };
          T.event.special[t] = {
            setup: function () {
              var o = this.ownerDocument || this.document || this
                , i = J.access(o, t);
              i || o.addEventListener(e, n, !0),
                J.access(o, t, (i || 0) + 1)
            },
            teardown: function () {
              var o = this.ownerDocument || this.document || this
                , i = J.access(o, t) - 1;
              i ? J.access(o, t, i) : (o.removeEventListener(e, n, !0),
                J.remove(o, t))
            }
          }
        }
        ));
      var wt = n.location
        , Ot = {
          guid: Date.now()
        }
        , jt = /\?/;
      T.parseXML = function (e) {
        var t;
        if (!e || "string" != typeof e)
          return null;
        try {
          t = (new n.DOMParser).parseFromString(e, "text/xml")
        } catch (e) {
          t = void 0
        }
        return t && !t.getElementsByTagName("parsererror").length || T.error("Invalid XML: " + e),
          t
      }
        ;
      var Mt = /\[\]$/
        , Ct = /\r?\n/g
        , Rt = /^(?:submit|button|image|reset|file)$/i
        , Bt = /^(?:input|select|textarea|keygen)/i;
      function Dt(e, t, n, o) {
        var i;
        if (Array.isArray(t))
          T.each(t, (function (t, i) {
            n || Mt.test(e) ? o(e, i) : Dt(e + "[" + ("object" == typeof i && null != i ? t : "") + "]", i, n, o)
          }
          ));
        else if (n || "object" !== b(t))
          o(e, t);
        else
          for (i in t)
            Dt(e + "[" + i + "]", t[i], n, o)
      }
      T.param = function (e, t) {
        var n, o = [], i = function (e, t) {
          var n = g(t) ? t() : t;
          o[o.length] = encodeURIComponent(e) + "=" + encodeURIComponent(null == n ? "" : n)
        };
        if (null == e)
          return "";
        if (Array.isArray(e) || e.jquery && !T.isPlainObject(e))
          T.each(e, (function () {
            i(this.name, this.value)
          }
          ));
        else
          for (n in e)
            Dt(n, e[n], t, i);
        return o.join("&")
      }
        ,
        T.fn.extend({
          serialize: function () {
            return T.param(this.serializeArray())
          },
          serializeArray: function () {
            return this.map((function () {
              var e = T.prop(this, "elements");
              return e ? T.makeArray(e) : this
            }
            )).filter((function () {
              var e = this.type;
              return this.name && !T(this).is(":disabled") && Bt.test(this.nodeName) && !Rt.test(e) && (this.checked || !ye.test(e))
            }
            )).map((function (e, t) {
              var n = T(this).val();
              return null == n ? null : Array.isArray(n) ? T.map(n, (function (e) {
                return {
                  name: t.name,
                  value: e.replace(Ct, "\r\n")
                }
              }
              )) : {
                  name: t.name,
                  value: n.replace(Ct, "\r\n")
                }
            }
            )).get()
          }
        });
      var kt = /%20/g
        , St = /#.*$/
        , It = /([?&])_=[^&]*/
        , Pt = /^(.*?):[ \t]*([^\r\n]*)$/gm
        , At = /^(?:GET|HEAD)$/
        , Nt = /^\/\//
        , Ht = {}
        , Lt = {}
        , Vt = "*/".concat("*")
        , Ft = x.createElement("a");
      function Ut(e) {
        return function (t, n) {
          "string" != typeof t && (n = t,
            t = "*");
          var o, i = 0, r = t.toLowerCase().match(N) || [];
          if (g(n))
            for (; o = r[i++];)
              "+" === o[0] ? (o = o.slice(1) || "*",
                (e[o] = e[o] || []).unshift(n)) : (e[o] = e[o] || []).push(n)
        }
      }
      function qt(e, t, n, o) {
        var i = {}
          , r = e === Lt;
        function a(s) {
          var l;
          return i[s] = !0,
            T.each(e[s] || [], (function (e, s) {
              var c = s(t, n, o);
              return "string" != typeof c || r || i[c] ? r ? !(l = c) : void 0 : (t.dataTypes.unshift(c),
                a(c),
                !1)
            }
            )),
            l
        }
        return a(t.dataTypes[0]) || !i["*"] && a("*")
      }
      function zt(e, t) {
        var n, o, i = T.ajaxSettings.flatOptions || {};
        for (n in t)
          void 0 !== t[n] && ((i[n] ? e : o || (o = {}))[n] = t[n]);
        return o && T.extend(!0, e, o),
          e
      }
      Ft.href = wt.href,
        T.extend({
          active: 0,
          lastModified: {},
          etag: {},
          ajaxSettings: {
            url: wt.href,
            type: "GET",
            isLocal: /^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(wt.protocol),
            global: !0,
            processData: !0,
            async: !0,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            accepts: {
              "*": Vt,
              text: "text/plain",
              html: "text/html",
              xml: "application/xml, text/xml",
              json: "application/json, text/javascript"
            },
            contents: {
              xml: /\bxml\b/,
              html: /\bhtml/,
              json: /\bjson\b/
            },
            responseFields: {
              xml: "responseXML",
              text: "responseText",
              json: "responseJSON"
            },
            converters: {
              "* text": String,
              "text html": !0,
              "text json": JSON.parse,
              "text xml": T.parseXML
            },
            flatOptions: {
              url: !0,
              context: !0
            }
          },
          ajaxSetup: function (e, t) {
            return t ? zt(zt(e, T.ajaxSettings), t) : zt(T.ajaxSettings, e)
          },
          ajaxPrefilter: Ut(Ht),
          ajaxTransport: Ut(Lt),
          ajax: function (e, t) {
            "object" == typeof e && (t = e,
              e = void 0),
              t = t || {};
            var o, i, r, a, s, l, c, u, p, d, h = T.ajaxSetup({}, t), f = h.context || h, y = h.context && (f.nodeType || f.jquery) ? T(f) : T.event, m = T.Deferred(), g = T.Callbacks("once memory"), v = h.statusCode || {}, _ = {}, E = {}, b = "canceled", w = {
              readyState: 0,
              getResponseHeader: function (e) {
                var t;
                if (c) {
                  if (!a)
                    for (a = {}; t = Pt.exec(r);)
                      a[t[1].toLowerCase() + " "] = (a[t[1].toLowerCase() + " "] || []).concat(t[2]);
                  t = a[e.toLowerCase() + " "]
                }
                return null == t ? null : t.join(", ")
              },
              getAllResponseHeaders: function () {
                return c ? r : null
              },
              setRequestHeader: function (e, t) {
                return null == c && (e = E[e.toLowerCase()] = E[e.toLowerCase()] || e,
                  _[e] = t),
                  this
              },
              overrideMimeType: function (e) {
                return null == c && (h.mimeType = e),
                  this
              },
              statusCode: function (e) {
                var t;
                if (e)
                  if (c)
                    w.always(e[w.status]);
                  else
                    for (t in e)
                      v[t] = [v[t], e[t]];
                return this
              },
              abort: function (e) {
                var t = e || b;
                return o && o.abort(t),
                  O(0, t),
                  this
              }
            };
            if (m.promise(w),
              h.url = ((e || h.url || wt.href) + "").replace(Nt, wt.protocol + "//"),
              h.type = t.method || t.type || h.method || h.type,
              h.dataTypes = (h.dataType || "*").toLowerCase().match(N) || [""],
              null == h.crossDomain) {
              l = x.createElement("a");
              try {
                l.href = h.url,
                  l.href = l.href,
                  h.crossDomain = Ft.protocol + "//" + Ft.host != l.protocol + "//" + l.host
              } catch (e) {
                h.crossDomain = !0
              }
            }
            if (h.data && h.processData && "string" != typeof h.data && (h.data = T.param(h.data, h.traditional)),
              qt(Ht, h, t, w),
              c)
              return w;
            for (p in (u = T.event && h.global) && 0 == T.active++ && T.event.trigger("ajaxStart"),
              h.type = h.type.toUpperCase(),
              h.hasContent = !At.test(h.type),
              i = h.url.replace(St, ""),
              h.hasContent ? h.data && h.processData && 0 === (h.contentType || "").indexOf("application/x-www-form-urlencoded") && (h.data = h.data.replace(kt, "+")) : (d = h.url.slice(i.length),
                h.data && (h.processData || "string" == typeof h.data) && (i += (jt.test(i) ? "&" : "?") + h.data,
                  delete h.data),
                !1 === h.cache && (i = i.replace(It, "$1"),
                  d = (jt.test(i) ? "&" : "?") + "_=" + Ot.guid++ + d),
                h.url = i + d),
              h.ifModified && (T.lastModified[i] && w.setRequestHeader("If-Modified-Since", T.lastModified[i]),
                T.etag[i] && w.setRequestHeader("If-None-Match", T.etag[i])),
              (h.data && h.hasContent && !1 !== h.contentType || t.contentType) && w.setRequestHeader("Content-Type", h.contentType),
              w.setRequestHeader("Accept", h.dataTypes[0] && h.accepts[h.dataTypes[0]] ? h.accepts[h.dataTypes[0]] + ("*" !== h.dataTypes[0] ? ", " + Vt + "; q=0.01" : "") : h.accepts["*"]),
              h.headers)
              w.setRequestHeader(p, h.headers[p]);
            if (h.beforeSend && (!1 === h.beforeSend.call(f, w, h) || c))
              return w.abort();
            if (b = "abort",
              g.add(h.complete),
              w.done(h.success),
              w.fail(h.error),
              o = qt(Lt, h, t, w)) {
              if (w.readyState = 1,
                u && y.trigger("ajaxSend", [w, h]),
                c)
                return w;
              h.async && h.timeout > 0 && (s = n.setTimeout((function () {
                w.abort("timeout")
              }
              ), h.timeout));
              try {
                c = !1,
                  o.send(_, O)
              } catch (e) {
                if (c)
                  throw e;
                O(-1, e)
              }
            } else
              O(-1, "No Transport");
            function O(e, t, a, l) {
              var p, d, x, _, E, b = t;
              c || (c = !0,
                s && n.clearTimeout(s),
                o = void 0,
                r = l || "",
                w.readyState = e > 0 ? 4 : 0,
                p = e >= 200 && e < 300 || 304 === e,
                a && (_ = function (e, t, n) {
                  for (var o, i, r, a, s = e.contents, l = e.dataTypes; "*" === l[0];)
                    l.shift(),
                      void 0 === o && (o = e.mimeType || t.getResponseHeader("Content-Type"));
                  if (o)
                    for (i in s)
                      if (s[i] && s[i].test(o)) {
                        l.unshift(i);
                        break
                      }
                  if (l[0] in n)
                    r = l[0];
                  else {
                    for (i in n) {
                      if (!l[0] || e.converters[i + " " + l[0]]) {
                        r = i;
                        break
                      }
                      a || (a = i)
                    }
                    r = r || a
                  }
                  if (r)
                    return r !== l[0] && l.unshift(r),
                      n[r]
                }(h, w, a)),
                !p && T.inArray("script", h.dataTypes) > -1 && (h.converters["text script"] = function () { }
                ),
                _ = function (e, t, n, o) {
                  var i, r, a, s, l, c = {}, u = e.dataTypes.slice();
                  if (u[1])
                    for (a in e.converters)
                      c[a.toLowerCase()] = e.converters[a];
                  for (r = u.shift(); r;)
                    if (e.responseFields[r] && (n[e.responseFields[r]] = t),
                      !l && o && e.dataFilter && (t = e.dataFilter(t, e.dataType)),
                      l = r,
                      r = u.shift())
                      if ("*" === r)
                        r = l;
                      else if ("*" !== l && l !== r) {
                        if (!(a = c[l + " " + r] || c["* " + r]))
                          for (i in c)
                            if ((s = i.split(" "))[1] === r && (a = c[l + " " + s[0]] || c["* " + s[0]])) {
                              !0 === a ? a = c[i] : !0 !== c[i] && (r = s[0],
                                u.unshift(s[1]));
                              break
                            }
                        if (!0 !== a)
                          if (a && e.throws)
                            t = a(t);
                          else
                            try {
                              t = a(t)
                            } catch (e) {
                              return {
                                state: "parsererror",
                                error: a ? e : "No conversion from " + l + " to " + r
                              }
                            }
                      }
                  return {
                    state: "success",
                    data: t
                  }
                }(h, _, w, p),
                p ? (h.ifModified && ((E = w.getResponseHeader("Last-Modified")) && (T.lastModified[i] = E),
                  (E = w.getResponseHeader("etag")) && (T.etag[i] = E)),
                  204 === e || "HEAD" === h.type ? b = "nocontent" : 304 === e ? b = "notmodified" : (b = _.state,
                    d = _.data,
                    p = !(x = _.error))) : (x = b,
                      !e && b || (b = "error",
                        e < 0 && (e = 0))),
                w.status = e,
                w.statusText = (t || b) + "",
                p ? m.resolveWith(f, [d, b, w]) : m.rejectWith(f, [w, b, x]),
                w.statusCode(v),
                v = void 0,
                u && y.trigger(p ? "ajaxSuccess" : "ajaxError", [w, h, p ? d : x]),
                g.fireWith(f, [w, b]),
                u && (y.trigger("ajaxComplete", [w, h]),
                  --T.active || T.event.trigger("ajaxStop")))
            }
            return w
          },
          getJSON: function (e, t, n) {
            return T.get(e, t, n, "json")
          },
          getScript: function (e, t) {
            return T.get(e, void 0, t, "script")
          }
        }),
        T.each(["get", "post"], (function (e, t) {
          T[t] = function (e, n, o, i) {
            return g(n) && (i = i || o,
              o = n,
              n = void 0),
              T.ajax(T.extend({
                url: e,
                type: t,
                dataType: i,
                data: n,
                success: o
              }, T.isPlainObject(e) && e))
          }
        }
        )),
        T.ajaxPrefilter((function (e) {
          var t;
          for (t in e.headers)
            "content-type" === t.toLowerCase() && (e.contentType = e.headers[t] || "")
        }
        )),
        T._evalUrl = function (e, t, n) {
          return T.ajax({
            url: e,
            type: "GET",
            dataType: "script",
            cache: !0,
            async: !1,
            global: !1,
            converters: {
              "text script": function () { }
            },
            dataFilter: function (e) {
              T.globalEval(e, t, n)
            }
          })
        }
        ,
        T.fn.extend({
          wrapAll: function (e) {
            var t;
            return this[0] && (g(e) && (e = e.call(this[0])),
              t = T(e, this[0].ownerDocument).eq(0).clone(!0),
              this[0].parentNode && t.insertBefore(this[0]),
              t.map((function () {
                for (var e = this; e.firstElementChild;)
                  e = e.firstElementChild;
                return e
              }
              )).append(this)),
              this
          },
          wrapInner: function (e) {
            return g(e) ? this.each((function (t) {
              T(this).wrapInner(e.call(this, t))
            }
            )) : this.each((function () {
              var t = T(this)
                , n = t.contents();
              n.length ? n.wrapAll(e) : t.append(e)
            }
            ))
          },
          wrap: function (e) {
            var t = g(e);
            return this.each((function (n) {
              T(this).wrapAll(t ? e.call(this, n) : e)
            }
            ))
          },
          unwrap: function (e) {
            return this.parent(e).not("body").each((function () {
              T(this).replaceWith(this.childNodes)
            }
            )),
              this
          }
        }),
        T.expr.pseudos.hidden = function (e) {
          return !T.expr.pseudos.visible(e)
        }
        ,
        T.expr.pseudos.visible = function (e) {
          return !!(e.offsetWidth || e.offsetHeight || e.getClientRects().length)
        }
        ,
        T.ajaxSettings.xhr = function () {
          try {
            return new n.XMLHttpRequest
          } catch (e) { }
        }
        ;
      var $t = {
        0: 200,
        1223: 204
      }
        , Wt = T.ajaxSettings.xhr();
      m.cors = !!Wt && "withCredentials" in Wt,
        m.ajax = Wt = !!Wt,
        T.ajaxTransport((function (e) {
          var t, o;
          if (m.cors || Wt && !e.crossDomain)
            return {
              send: function (i, r) {
                var a, s = e.xhr();
                if (s.open(e.type, e.url, e.async, e.username, e.password),
                  e.xhrFields)
                  for (a in e.xhrFields)
                    s[a] = e.xhrFields[a];
                for (a in e.mimeType && s.overrideMimeType && s.overrideMimeType(e.mimeType),
                  e.crossDomain || i["X-Requested-With"] || (i["X-Requested-With"] = "XMLHttpRequest"),
                  i)
                  s.setRequestHeader(a, i[a]);
                t = function (e) {
                  return function () {
                    t && (t = o = s.onload = s.onerror = s.onabort = s.ontimeout = s.onreadystatechange = null,
                      "abort" === e ? s.abort() : "error" === e ? "number" != typeof s.status ? r(0, "error") : r(s.status, s.statusText) : r($t[s.status] || s.status, s.statusText, "text" !== (s.responseType || "text") || "string" != typeof s.responseText ? {
                        binary: s.response
                      } : {
                          text: s.responseText
                        }, s.getAllResponseHeaders()))
                  }
                }
                  ,
                  s.onload = t(),
                  o = s.onerror = s.ontimeout = t("error"),
                  void 0 !== s.onabort ? s.onabort = o : s.onreadystatechange = function () {
                    4 === s.readyState && n.setTimeout((function () {
                      t && o()
                    }
                    ))
                  }
                  ,
                  t = t("abort");
                try {
                  s.send(e.hasContent && e.data || null)
                } catch (e) {
                  if (t)
                    throw e
                }
              },
              abort: function () {
                t && t()
              }
            }
        }
        )),
        T.ajaxPrefilter((function (e) {
          e.crossDomain && (e.contents.script = !1)
        }
        )),
        T.ajaxSetup({
          accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
          },
          contents: {
            script: /\b(?:java|ecma)script\b/
          },
          converters: {
            "text script": function (e) {
              return T.globalEval(e),
                e
            }
          }
        }),
        T.ajaxPrefilter("script", (function (e) {
          void 0 === e.cache && (e.cache = !1),
            e.crossDomain && (e.type = "GET")
        }
        )),
        T.ajaxTransport("script", (function (e) {
          var t, n;
          if (e.crossDomain || e.scriptAttrs)
            return {
              send: function (o, i) {
                t = T("<script>").attr(e.scriptAttrs || {}).prop({
                  charset: e.scriptCharset,
                  src: e.url
                }).on("load error", n = function (e) {
                  t.remove(),
                    n = null,
                    e && i("error" === e.type ? 404 : 200, e.type)
                }
                ),
                  x.head.appendChild(t[0])
              },
              abort: function () {
                n && n()
              }
            }
        }
        ));
      var Xt, Gt = [], Qt = /(=)\?(?=&|$)|\?\?/;
      T.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function () {
          var e = Gt.pop() || T.expando + "_" + Ot.guid++;
          return this[e] = !0,
            e
        }
      }),
        T.ajaxPrefilter("json jsonp", (function (e, t, o) {
          var i, r, a, s = !1 !== e.jsonp && (Qt.test(e.url) ? "url" : "string" == typeof e.data && 0 === (e.contentType || "").indexOf("application/x-www-form-urlencoded") && Qt.test(e.data) && "data");
          if (s || "jsonp" === e.dataTypes[0])
            return i = e.jsonpCallback = g(e.jsonpCallback) ? e.jsonpCallback() : e.jsonpCallback,
              s ? e[s] = e[s].replace(Qt, "$1" + i) : !1 !== e.jsonp && (e.url += (jt.test(e.url) ? "&" : "?") + e.jsonp + "=" + i),
              e.converters["script json"] = function () {
                return a || T.error(i + " was not called"),
                  a[0]
              }
              ,
              e.dataTypes[0] = "json",
              r = n[i],
              n[i] = function () {
                a = arguments
              }
              ,
              o.always((function () {
                void 0 === r ? T(n).removeProp(i) : n[i] = r,
                  e[i] && (e.jsonpCallback = t.jsonpCallback,
                    Gt.push(i)),
                  a && g(r) && r(a[0]),
                  a = r = void 0
              }
              )),
              "script"
        }
        )),
        m.createHTMLDocument = ((Xt = x.implementation.createHTMLDocument("").body).innerHTML = "<form></form><form></form>",
          2 === Xt.childNodes.length),
        T.parseHTML = function (e, t, n) {
          return "string" != typeof e ? [] : ("boolean" == typeof t && (n = t,
            t = !1),
            t || (m.createHTMLDocument ? ((o = (t = x.implementation.createHTMLDocument("")).createElement("base")).href = x.location.href,
              t.head.appendChild(o)) : t = x),
            r = !n && [],
            (i = B.exec(e)) ? [t.createElement(i[1])] : (i = be([e], t, r),
              r && r.length && T(r).remove(),
              T.merge([], i.childNodes)));
          var o, i, r
        }
        ,
        T.fn.load = function (e, t, n) {
          var o, i, r, a = this, s = e.indexOf(" ");
          return s > -1 && (o = vt(e.slice(s)),
            e = e.slice(0, s)),
            g(t) ? (n = t,
              t = void 0) : t && "object" == typeof t && (i = "POST"),
            a.length > 0 && T.ajax({
              url: e,
              type: i || "GET",
              dataType: "html",
              data: t
            }).done((function (e) {
              r = arguments,
                a.html(o ? T("<div>").append(T.parseHTML(e)).find(o) : e)
            }
            )).always(n && function (e, t) {
              a.each((function () {
                n.apply(this, r || [e.responseText, t, e])
              }
              ))
            }
            ),
            this
        }
        ,
        T.expr.pseudos.animated = function (e) {
          return T.grep(T.timers, (function (t) {
            return e === t.elem
          }
          )).length
        }
        ,
        T.offset = {
          setOffset: function (e, t, n) {
            var o, i, r, a, s, l, c = T.css(e, "position"), u = T(e), p = {};
            "static" === c && (e.style.position = "relative"),
              s = u.offset(),
              r = T.css(e, "top"),
              l = T.css(e, "left"),
              ("absolute" === c || "fixed" === c) && (r + l).indexOf("auto") > -1 ? (a = (o = u.position()).top,
                i = o.left) : (a = parseFloat(r) || 0,
                  i = parseFloat(l) || 0),
              g(t) && (t = t.call(e, n, T.extend({}, s))),
              null != t.top && (p.top = t.top - s.top + a),
              null != t.left && (p.left = t.left - s.left + i),
              "using" in t ? t.using.call(e, p) : ("number" == typeof p.top && (p.top += "px"),
                "number" == typeof p.left && (p.left += "px"),
                u.css(p))
          }
        },
        T.fn.extend({
          offset: function (e) {
            if (arguments.length)
              return void 0 === e ? this : this.each((function (t) {
                T.offset.setOffset(this, e, t)
              }
              ));
            var t, n, o = this[0];
            return o ? o.getClientRects().length ? (t = o.getBoundingClientRect(),
              n = o.ownerDocument.defaultView,
            {
              top: t.top + n.pageYOffset,
              left: t.left + n.pageXOffset
            }) : {
                top: 0,
                left: 0
              } : void 0
          },
          position: function () {
            if (this[0]) {
              var e, t, n, o = this[0], i = {
                top: 0,
                left: 0
              };
              if ("fixed" === T.css(o, "position"))
                t = o.getBoundingClientRect();
              else {
                for (t = this.offset(),
                  n = o.ownerDocument,
                  e = o.offsetParent || n.documentElement; e && (e === n.body || e === n.documentElement) && "static" === T.css(e, "position");)
                  e = e.parentNode;
                e && e !== o && 1 === e.nodeType && ((i = T(e).offset()).top += T.css(e, "borderTopWidth", !0),
                  i.left += T.css(e, "borderLeftWidth", !0))
              }
              return {
                top: t.top - i.top - T.css(o, "marginTop", !0),
                left: t.left - i.left - T.css(o, "marginLeft", !0)
              }
            }
          },
          offsetParent: function () {
            return this.map((function () {
              for (var e = this.offsetParent; e && "static" === T.css(e, "position");)
                e = e.offsetParent;
              return e || re
            }
            ))
          }
        }),
        T.each({
          scrollLeft: "pageXOffset",
          scrollTop: "pageYOffset"
        }, (function (e, t) {
          var n = "pageYOffset" === t;
          T.fn[e] = function (o) {
            return z(this, (function (e, o, i) {
              var r;
              if (v(e) ? r = e : 9 === e.nodeType && (r = e.defaultView),
                void 0 === i)
                return r ? r[t] : e[o];
              r ? r.scrollTo(n ? r.pageXOffset : i, n ? i : r.pageYOffset) : e[o] = i
            }
            ), e, o, arguments.length)
          }
        }
        )),
        T.each(["top", "left"], (function (e, t) {
          T.cssHooks[t] = We(m.pixelPosition, (function (e, n) {
            if (n)
              return n = $e(e, t),
                Fe.test(n) ? T(e).position()[t] + "px" : n
          }
          ))
        }
        )),
        T.each({
          Height: "height",
          Width: "width"
        }, (function (e, t) {
          T.each({
            padding: "inner" + e,
            content: t,
            "": "outer" + e
          }, (function (n, o) {
            T.fn[o] = function (i, r) {
              var a = arguments.length && (n || "boolean" != typeof i)
                , s = n || (!0 === i || !0 === r ? "margin" : "border");
              return z(this, (function (t, n, i) {
                var r;
                return v(t) ? 0 === o.indexOf("outer") ? t["inner" + e] : t.document.documentElement["client" + e] : 9 === t.nodeType ? (r = t.documentElement,
                  Math.max(t.body["scroll" + e], r["scroll" + e], t.body["offset" + e], r["offset" + e], r["client" + e])) : void 0 === i ? T.css(t, n, s) : T.style(t, n, i, s)
              }
              ), t, a ? i : void 0, a)
            }
          }
          ))
        }
        )),
        T.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], (function (e, t) {
          T.fn[t] = function (e) {
            return this.on(t, e)
          }
        }
        )),
        T.fn.extend({
          bind: function (e, t, n) {
            return this.on(e, null, t, n)
          },
          unbind: function (e, t) {
            return this.off(e, null, t)
          },
          delegate: function (e, t, n, o) {
            return this.on(t, e, n, o)
          },
          undelegate: function (e, t, n) {
            return 1 === arguments.length ? this.off(e, "**") : this.off(t, e || "**", n)
          },
          hover: function (e, t) {
            return this.mouseenter(e).mouseleave(t || e)
          }
        }),
        T.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "), (function (e, t) {
          T.fn[t] = function (e, n) {
            return arguments.length > 0 ? this.on(t, null, e, n) : this.trigger(t)
          }
        }
        ));
      var Yt = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
      T.proxy = function (e, t) {
        var n, o, i;
        if ("string" == typeof t && (n = e[t],
          t = e,
          e = n),
          g(e))
          return o = s.call(arguments, 2),
            (i = function () {
              return e.apply(t || this, o.concat(s.call(arguments)))
            }
            ).guid = e.guid = e.guid || T.guid++,
            i
      }
        ,
        T.holdReady = function (e) {
          e ? T.readyWait++ : T.ready(!0)
        }
        ,
        T.isArray = Array.isArray,
        T.parseJSON = JSON.parse,
        T.nodeName = R,
        T.isFunction = g,
        T.isWindow = v,
        T.camelCase = G,
        T.type = b,
        T.now = Date.now,
        T.isNumeric = function (e) {
          var t = T.type(e);
          return ("number" === t || "string" === t) && !isNaN(e - parseFloat(e))
        }
        ,
        T.trim = function (e) {
          return null == e ? "" : (e + "").replace(Yt, "")
        }
        ,
        void 0 === (o = function () {
          return T
        }
          .apply(t, [])) || (e.exports = o);
      var Jt = n.jQuery
        , Kt = n.$;
      return T.noConflict = function (e) {
        return n.$ === T && (n.$ = Kt),
          e && n.jQuery === T && (n.jQuery = Jt),
          T
      }
        ,
        void 0 === i && (n.jQuery = n.$ = T),
        T
    }
    ))
  }
  , function (e, t, n) {
    n(3),
      n(7),
      n(5),
      n(6),
      n.e(1).then(n.t.bind(null, 8, 7))
  }
  , function (e, t) {
    AFRAME.components["look-controls"].Component.prototype.onTouchMove = function (e) {
      var t, n, o = this.el.sceneEl.canvas, i = this.yawObject;
      if (this.touchStarted && this.data.touchEnabled) {
        n = 2 * Math.PI * (e.touches[0].pageX - this.touchStart.x) / o.clientWidth;
        var r = 2 * Math.PI * (e.touches[0].pageY - this.touchStart.y) / o.clientHeight;
        t = this.data.reverseTouchDrag ? 1 : -1,
          i.rotation.y -= .5 * n * t,
          this.pitchObject.rotation.x -= .5 * r * t,
          this.touchStart = {
            x: e.touches[0].pageX,
            y: e.touches[0].pageY
          }
      }
    }
  }
  , function (e, t, n) {
    var o;
    "undefined" != typeof self && self,
      o = function () {
        return function (e) {
          var t = {};
          function n(o) {
            if (t[o])
              return t[o].exports;
            var i = t[o] = {
              i: o,
              l: !1,
              exports: {}
            };
            return e[o].call(i.exports, i, i.exports, n),
              i.l = !0,
              i.exports
          }
          return n.m = e,
            n.c = t,
            n.d = function (e, t, o) {
              n.o(e, t) || Object.defineProperty(e, t, {
                configurable: !1,
                enumerable: !0,
                get: o
              })
            }
            ,
            n.r = function (e) {
              Object.defineProperty(e, "__esModule", {
                value: !0
              })
            }
            ,
            n.n = function (e) {
              var t = e && e.__esModule ? function () {
                return e.default
              }
                : function () {
                  return e
                }
                ;
              return n.d(t, "a", t),
                t
            }
            ,
            n.o = function (e, t) {
              return Object.prototype.hasOwnProperty.call(e, t)
            }
            ,
            n.p = "",
            n(n.s = 0)
        }({
          "./dist/icons.json": /*!*************************!*\
!*** ./dist/icons.json ***!
\*************************/
            /*! exports provided: activity, airplay, alert-circle, alert-octagon, alert-triangle, align-center, align-justify, align-left, align-right, anchor, aperture, archive, arrow-down-circle, arrow-down-left, arrow-down-right, arrow-down, arrow-left-circle, arrow-left, arrow-right-circle, arrow-right, arrow-up-circle, arrow-up-left, arrow-up-right, arrow-up, at-sign, award, bar-chart-2, bar-chart, battery-charging, battery, bell-off, bell, bluetooth, bold, book-open, book, bookmark, box, briefcase, calendar, camera-off, camera, cast, check-circle, check-square, check, chevron-down, chevron-left, chevron-right, chevron-up, chevrons-down, chevrons-left, chevrons-right, chevrons-up, chrome, circle, clipboard, clock, cloud-drizzle, cloud-lightning, cloud-off, cloud-rain, cloud-snow, cloud, code, codepen, codesandbox, coffee, columns, command, compass, copy, corner-down-left, corner-down-right, corner-left-down, corner-left-up, corner-right-down, corner-right-up, corner-up-left, corner-up-right, cpu, credit-card, crop, crosshair, database, delete, disc, divide-circle, divide-square, divide, dollar-sign, download-cloud, download, dribbble, droplet, edit-2, edit-3, edit, external-link, eye-off, eye, facebook, fast-forward, feather, figma, file-minus, file-plus, file-text, file, film, filter, flag, folder-minus, folder-plus, folder, framer, frown, gift, git-branch, git-commit, git-merge, git-pull-request, github, gitlab, globe, grid, hard-drive, hash, headphones, heart, help-circle, hexagon, home, image, inbox, info, instagram, italic, key, layers, layout, life-buoy, link-2, link, linkedin, list, loader, lock, log-in, log-out, mail, map-pin, map, maximize-2, maximize, meh, menu, message-circle, message-square, mic-off, mic, minimize-2, minimize, minus-circle, minus-square, minus, monitor, moon, more-horizontal, more-vertical, mouse-pointer, move, music, navigation-2, navigation, octagon, package, paperclip, pause-circle, pause, pen-tool, percent, phone-call, phone-forwarded, phone-incoming, phone-missed, phone-off, phone-outgoing, phone, pie-chart, play-circle, play, plus-circle, plus-square, plus, pocket, power, printer, radio, refresh-ccw, refresh-cw, repeat, rewind, rotate-ccw, rotate-cw, rss, save, scissors, search, send, server, settings, share-2, share, shield-off, shield, shopping-bag, shopping-cart, shuffle, sidebar, skip-back, skip-forward, slack, slash, sliders, smartphone, smile, speaker, square, star, stop-circle, sun, sunrise, sunset, tablet, tag, target, terminal, thermometer, thumbs-down, thumbs-up, toggle-left, toggle-right, tool, trash-2, trash, trello, trending-down, trending-up, triangle, truck, tv, twitch, twitter, type, umbrella, underline, unlock, upload-cloud, upload, user-check, user-minus, user-plus, user-x, user, users, video-off, video, voicemail, volume-1, volume-2, volume-x, volume, watch, wifi-off, wifi, wind, x-circle, x-octagon, x-square, x, youtube, zap-off, zap, zoom-in, zoom-out, default */
            function (e) {
              e.exports = {
                activity: '<polyline points="22 12 18 12 15 21 9 3 6 12 2 12"></polyline>',
                airplay: '<path d="M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1"></path><polygon points="12 15 17 21 7 21 12 15"></polygon>',
                "alert-circle": '<circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line>',
                "alert-octagon": '<polygon points="7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"></polygon><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line>',
                "alert-triangle": '<path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"></path><line x1="12" y1="9" x2="12" y2="13"></line><line x1="12" y1="17" x2="12.01" y2="17"></line>',
                "align-center": '<line x1="18" y1="10" x2="6" y2="10"></line><line x1="21" y1="6" x2="3" y2="6"></line><line x1="21" y1="14" x2="3" y2="14"></line><line x1="18" y1="18" x2="6" y2="18"></line>',
                "align-justify": '<line x1="21" y1="10" x2="3" y2="10"></line><line x1="21" y1="6" x2="3" y2="6"></line><line x1="21" y1="14" x2="3" y2="14"></line><line x1="21" y1="18" x2="3" y2="18"></line>',
                "align-left": '<line x1="17" y1="10" x2="3" y2="10"></line><line x1="21" y1="6" x2="3" y2="6"></line><line x1="21" y1="14" x2="3" y2="14"></line><line x1="17" y1="18" x2="3" y2="18"></line>',
                "align-right": '<line x1="21" y1="10" x2="7" y2="10"></line><line x1="21" y1="6" x2="3" y2="6"></line><line x1="21" y1="14" x2="3" y2="14"></line><line x1="21" y1="18" x2="7" y2="18"></line>',
                anchor: '<circle cx="12" cy="5" r="3"></circle><line x1="12" y1="22" x2="12" y2="8"></line><path d="M5 12H2a10 10 0 0 0 20 0h-3"></path>',
                aperture: '<circle cx="12" cy="12" r="10"></circle><line x1="14.31" y1="8" x2="20.05" y2="17.94"></line><line x1="9.69" y1="8" x2="21.17" y2="8"></line><line x1="7.38" y1="12" x2="13.12" y2="2.06"></line><line x1="9.69" y1="16" x2="3.95" y2="6.06"></line><line x1="14.31" y1="16" x2="2.83" y2="16"></line><line x1="16.62" y1="12" x2="10.88" y2="21.94"></line>',
                archive: '<polyline points="21 8 21 21 3 21 3 8"></polyline><rect x="1" y="3" width="22" height="5"></rect><line x1="10" y1="12" x2="14" y2="12"></line>',
                "arrow-down-circle": '<circle cx="12" cy="12" r="10"></circle><polyline points="8 12 12 16 16 12"></polyline><line x1="12" y1="8" x2="12" y2="16"></line>',
                "arrow-down-left": '<line x1="17" y1="7" x2="7" y2="17"></line><polyline points="17 17 7 17 7 7"></polyline>',
                "arrow-down-right": '<line x1="7" y1="7" x2="17" y2="17"></line><polyline points="17 7 17 17 7 17"></polyline>',
                "arrow-down": '<line x1="12" y1="5" x2="12" y2="19"></line><polyline points="19 12 12 19 5 12"></polyline>',
                "arrow-left-circle": '<circle cx="12" cy="12" r="10"></circle><polyline points="12 8 8 12 12 16"></polyline><line x1="16" y1="12" x2="8" y2="12"></line>',
                "arrow-left": '<line x1="19" y1="12" x2="5" y2="12"></line><polyline points="12 19 5 12 12 5"></polyline>',
                "arrow-right-circle": '<circle cx="12" cy="12" r="10"></circle><polyline points="12 16 16 12 12 8"></polyline><line x1="8" y1="12" x2="16" y2="12"></line>',
                "arrow-right": '<line x1="5" y1="12" x2="19" y2="12"></line><polyline points="12 5 19 12 12 19"></polyline>',
                "arrow-up-circle": '<circle cx="12" cy="12" r="10"></circle><polyline points="16 12 12 8 8 12"></polyline><line x1="12" y1="16" x2="12" y2="8"></line>',
                "arrow-up-left": '<line x1="17" y1="17" x2="7" y2="7"></line><polyline points="7 17 7 7 17 7"></polyline>',
                "arrow-up-right": '<line x1="7" y1="17" x2="17" y2="7"></line><polyline points="7 7 17 7 17 17"></polyline>',
                "arrow-up": '<line x1="12" y1="19" x2="12" y2="5"></line><polyline points="5 12 12 5 19 12"></polyline>',
                "at-sign": '<circle cx="12" cy="12" r="4"></circle><path d="M16 8v5a3 3 0 0 0 6 0v-1a10 10 0 1 0-3.92 7.94"></path>',
                award: '<circle cx="12" cy="8" r="7"></circle><polyline points="8.21 13.89 7 23 12 20 17 23 15.79 13.88"></polyline>',
                "bar-chart-2": '<line x1="18" y1="20" x2="18" y2="10"></line><line x1="12" y1="20" x2="12" y2="4"></line><line x1="6" y1="20" x2="6" y2="14"></line>',
                "bar-chart": '<line x1="12" y1="20" x2="12" y2="10"></line><line x1="18" y1="20" x2="18" y2="4"></line><line x1="6" y1="20" x2="6" y2="16"></line>',
                "battery-charging": '<path d="M5 18H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3.19M15 6h2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-3.19"></path><line x1="23" y1="13" x2="23" y2="11"></line><polyline points="11 6 7 12 13 12 9 18"></polyline>',
                battery: '<rect x="1" y="6" width="18" height="12" rx="2" ry="2"></rect><line x1="23" y1="13" x2="23" y2="11"></line>',
                "bell-off": '<path d="M13.73 21a2 2 0 0 1-3.46 0"></path><path d="M18.63 13A17.89 17.89 0 0 1 18 8"></path><path d="M6.26 6.26A5.86 5.86 0 0 0 6 8c0 7-3 9-3 9h14"></path><path d="M18 8a6 6 0 0 0-9.33-5"></path><line x1="1" y1="1" x2="23" y2="23"></line>',
                bell: '<path d="M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9"></path><path d="M13.73 21a2 2 0 0 1-3.46 0"></path>',
                bluetooth: '<polyline points="6.5 6.5 17.5 17.5 12 23 12 1 17.5 6.5 6.5 17.5"></polyline>',
                bold: '<path d="M6 4h8a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"></path><path d="M6 12h9a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"></path>',
                "book-open": '<path d="M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"></path><path d="M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"></path>',
                book: '<path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"></path><path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"></path>',
                bookmark: '<path d="M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"></path>',
                box: '<path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"></path><polyline points="3.27 6.96 12 12.01 20.73 6.96"></polyline><line x1="12" y1="22.08" x2="12" y2="12"></line>',
                briefcase: '<rect x="2" y="7" width="20" height="14" rx="2" ry="2"></rect><path d="M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"></path>',
                calendar: '<rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect><line x1="16" y1="2" x2="16" y2="6"></line><line x1="8" y1="2" x2="8" y2="6"></line><line x1="3" y1="10" x2="21" y2="10"></line>',
                "camera-off": '<line x1="1" y1="1" x2="23" y2="23"></line><path d="M21 21H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3m3-3h6l2 3h4a2 2 0 0 1 2 2v9.34m-7.72-2.06a4 4 0 1 1-5.56-5.56"></path>',
                camera: '<path d="M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"></path><circle cx="12" cy="13" r="4"></circle>',
                cast: '<path d="M2 16.1A5 5 0 0 1 5.9 20M2 12.05A9 9 0 0 1 9.95 20M2 8V6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2h-6"></path><line x1="2" y1="20" x2="2.01" y2="20"></line>',
                "check-circle": '<path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="22 4 12 14.01 9 11.01"></polyline>',
                "check-square": '<polyline points="9 11 12 14 22 4"></polyline><path d="M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"></path>',
                check: '<polyline points="20 6 9 17 4 12"></polyline>',
                "chevron-down": '<polyline points="6 9 12 15 18 9"></polyline>',
                "chevron-left": '<polyline points="15 18 9 12 15 6"></polyline>',
                "chevron-right": '<polyline points="9 18 15 12 9 6"></polyline>',
                "chevron-up": '<polyline points="18 15 12 9 6 15"></polyline>',
                "chevrons-down": '<polyline points="7 13 12 18 17 13"></polyline><polyline points="7 6 12 11 17 6"></polyline>',
                "chevrons-left": '<polyline points="11 17 6 12 11 7"></polyline><polyline points="18 17 13 12 18 7"></polyline>',
                "chevrons-right": '<polyline points="13 17 18 12 13 7"></polyline><polyline points="6 17 11 12 6 7"></polyline>',
                "chevrons-up": '<polyline points="17 11 12 6 7 11"></polyline><polyline points="17 18 12 13 7 18"></polyline>',
                chrome: '<circle cx="12" cy="12" r="10"></circle><circle cx="12" cy="12" r="4"></circle><line x1="21.17" y1="8" x2="12" y2="8"></line><line x1="3.95" y1="6.06" x2="8.54" y2="14"></line><line x1="10.88" y1="21.94" x2="15.46" y2="14"></line>',
                circle: '<circle cx="12" cy="12" r="10"></circle>',
                clipboard: '<path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"></path><rect x="8" y="2" width="8" height="4" rx="1" ry="1"></rect>',
                clock: '<circle cx="12" cy="12" r="10"></circle><polyline points="12 6 12 12 16 14"></polyline>',
                "cloud-drizzle": '<line x1="8" y1="19" x2="8" y2="21"></line><line x1="8" y1="13" x2="8" y2="15"></line><line x1="16" y1="19" x2="16" y2="21"></line><line x1="16" y1="13" x2="16" y2="15"></line><line x1="12" y1="21" x2="12" y2="23"></line><line x1="12" y1="15" x2="12" y2="17"></line><path d="M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"></path>',
                "cloud-lightning": '<path d="M19 16.9A5 5 0 0 0 18 7h-1.26a8 8 0 1 0-11.62 9"></path><polyline points="13 11 9 17 15 17 11 23"></polyline>',
                "cloud-off": '<path d="M22.61 16.95A5 5 0 0 0 18 10h-1.26a8 8 0 0 0-7.05-6M5 5a8 8 0 0 0 4 15h9a5 5 0 0 0 1.7-.3"></path><line x1="1" y1="1" x2="23" y2="23"></line>',
                "cloud-rain": '<line x1="16" y1="13" x2="16" y2="21"></line><line x1="8" y1="13" x2="8" y2="21"></line><line x1="12" y1="15" x2="12" y2="23"></line><path d="M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"></path>',
                "cloud-snow": '<path d="M20 17.58A5 5 0 0 0 18 8h-1.26A8 8 0 1 0 4 16.25"></path><line x1="8" y1="16" x2="8.01" y2="16"></line><line x1="8" y1="20" x2="8.01" y2="20"></line><line x1="12" y1="18" x2="12.01" y2="18"></line><line x1="12" y1="22" x2="12.01" y2="22"></line><line x1="16" y1="16" x2="16.01" y2="16"></line><line x1="16" y1="20" x2="16.01" y2="20"></line>',
                cloud: '<path d="M18 10h-1.26A8 8 0 1 0 9 20h9a5 5 0 0 0 0-10z"></path>',
                code: '<polyline points="16 18 22 12 16 6"></polyline><polyline points="8 6 2 12 8 18"></polyline>',
                codepen: '<polygon points="12 2 22 8.5 22 15.5 12 22 2 15.5 2 8.5 12 2"></polygon><line x1="12" y1="22" x2="12" y2="15.5"></line><polyline points="22 8.5 12 15.5 2 8.5"></polyline><polyline points="2 15.5 12 8.5 22 15.5"></polyline><line x1="12" y1="2" x2="12" y2="8.5"></line>',
                codesandbox: '<path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"></path><polyline points="7.5 4.21 12 6.81 16.5 4.21"></polyline><polyline points="7.5 19.79 7.5 14.6 3 12"></polyline><polyline points="21 12 16.5 14.6 16.5 19.79"></polyline><polyline points="3.27 6.96 12 12.01 20.73 6.96"></polyline><line x1="12" y1="22.08" x2="12" y2="12"></line>',
                coffee: '<path d="M18 8h1a4 4 0 0 1 0 8h-1"></path><path d="M2 8h16v9a4 4 0 0 1-4 4H6a4 4 0 0 1-4-4V8z"></path><line x1="6" y1="1" x2="6" y2="4"></line><line x1="10" y1="1" x2="10" y2="4"></line><line x1="14" y1="1" x2="14" y2="4"></line>',
                columns: '<path d="M12 3h7a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-7m0-18H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h7m0-18v18"></path>',
                command: '<path d="M18 3a3 3 0 0 0-3 3v12a3 3 0 0 0 3 3 3 3 0 0 0 3-3 3 3 0 0 0-3-3H6a3 3 0 0 0-3 3 3 3 0 0 0 3 3 3 3 0 0 0 3-3V6a3 3 0 0 0-3-3 3 3 0 0 0-3 3 3 3 0 0 0 3 3h12a3 3 0 0 0 3-3 3 3 0 0 0-3-3z"></path>',
                compass: '<circle cx="12" cy="12" r="10"></circle><polygon points="16.24 7.76 14.12 14.12 7.76 16.24 9.88 9.88 16.24 7.76"></polygon>',
                copy: '<rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>',
                "corner-down-left": '<polyline points="9 10 4 15 9 20"></polyline><path d="M20 4v7a4 4 0 0 1-4 4H4"></path>',
                "corner-down-right": '<polyline points="15 10 20 15 15 20"></polyline><path d="M4 4v7a4 4 0 0 0 4 4h12"></path>',
                "corner-left-down": '<polyline points="14 15 9 20 4 15"></polyline><path d="M20 4h-7a4 4 0 0 0-4 4v12"></path>',
                "corner-left-up": '<polyline points="14 9 9 4 4 9"></polyline><path d="M20 20h-7a4 4 0 0 1-4-4V4"></path>',
                "corner-right-down": '<polyline points="10 15 15 20 20 15"></polyline><path d="M4 4h7a4 4 0 0 1 4 4v12"></path>',
                "corner-right-up": '<polyline points="10 9 15 4 20 9"></polyline><path d="M4 20h7a4 4 0 0 0 4-4V4"></path>',
                "corner-up-left": '<polyline points="9 14 4 9 9 4"></polyline><path d="M20 20v-7a4 4 0 0 0-4-4H4"></path>',
                "corner-up-right": '<polyline points="15 14 20 9 15 4"></polyline><path d="M4 20v-7a4 4 0 0 1 4-4h12"></path>',
                cpu: '<rect x="4" y="4" width="16" height="16" rx="2" ry="2"></rect><rect x="9" y="9" width="6" height="6"></rect><line x1="9" y1="1" x2="9" y2="4"></line><line x1="15" y1="1" x2="15" y2="4"></line><line x1="9" y1="20" x2="9" y2="23"></line><line x1="15" y1="20" x2="15" y2="23"></line><line x1="20" y1="9" x2="23" y2="9"></line><line x1="20" y1="14" x2="23" y2="14"></line><line x1="1" y1="9" x2="4" y2="9"></line><line x1="1" y1="14" x2="4" y2="14"></line>',
                "credit-card": '<rect x="1" y="4" width="22" height="16" rx="2" ry="2"></rect><line x1="1" y1="10" x2="23" y2="10"></line>',
                crop: '<path d="M6.13 1L6 16a2 2 0 0 0 2 2h15"></path><path d="M1 6.13L16 6a2 2 0 0 1 2 2v15"></path>',
                crosshair: '<circle cx="12" cy="12" r="10"></circle><line x1="22" y1="12" x2="18" y2="12"></line><line x1="6" y1="12" x2="2" y2="12"></line><line x1="12" y1="6" x2="12" y2="2"></line><line x1="12" y1="22" x2="12" y2="18"></line>',
                database: '<ellipse cx="12" cy="5" rx="9" ry="3"></ellipse><path d="M21 12c0 1.66-4 3-9 3s-9-1.34-9-3"></path><path d="M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5"></path>',
                delete: '<path d="M21 4H8l-7 8 7 8h13a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2z"></path><line x1="18" y1="9" x2="12" y2="15"></line><line x1="12" y1="9" x2="18" y2="15"></line>',
                disc: '<circle cx="12" cy="12" r="10"></circle><circle cx="12" cy="12" r="3"></circle>',
                "divide-circle": '<line x1="8" y1="12" x2="16" y2="12"></line><line x1="12" y1="16" x2="12" y2="16"></line><line x1="12" y1="8" x2="12" y2="8"></line><circle cx="12" cy="12" r="10"></circle>',
                "divide-square": '<rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="8" y1="12" x2="16" y2="12"></line><line x1="12" y1="16" x2="12" y2="16"></line><line x1="12" y1="8" x2="12" y2="8"></line>',
                divide: '<circle cx="12" cy="6" r="2"></circle><line x1="5" y1="12" x2="19" y2="12"></line><circle cx="12" cy="18" r="2"></circle>',
                "dollar-sign": '<line x1="12" y1="1" x2="12" y2="23"></line><path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path>',
                "download-cloud": '<polyline points="8 17 12 21 16 17"></polyline><line x1="12" y1="12" x2="12" y2="21"></line><path d="M20.88 18.09A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.29"></path>',
                download: '<path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="7 10 12 15 17 10"></polyline><line x1="12" y1="15" x2="12" y2="3"></line>',
                dribbble: '<circle cx="12" cy="12" r="10"></circle><path d="M8.56 2.75c4.37 6.03 6.02 9.42 8.03 17.72m2.54-15.38c-3.72 4.35-8.94 5.66-16.88 5.85m19.5 1.9c-3.5-.93-6.63-.82-8.94 0-2.58.92-5.01 2.86-7.44 6.32"></path>',
                droplet: '<path d="M12 2.69l5.66 5.66a8 8 0 1 1-11.31 0z"></path>',
                "edit-2": '<path d="M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"></path>',
                "edit-3": '<path d="M12 20h9"></path><path d="M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4L16.5 3.5z"></path>',
                edit: '<path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path><path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>',
                "external-link": '<path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path><polyline points="15 3 21 3 21 9"></polyline><line x1="10" y1="14" x2="21" y2="3"></line>',
                "eye-off": '<path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path><line x1="1" y1="1" x2="23" y2="23"></line>',
                eye: '<path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle>',
                facebook: '<path d="M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"></path>',
                "fast-forward": '<polygon points="13 19 22 12 13 5 13 19"></polygon><polygon points="2 19 11 12 2 5 2 19"></polygon>',
                feather: '<path d="M20.24 12.24a6 6 0 0 0-8.49-8.49L5 10.5V19h8.5z"></path><line x1="16" y1="8" x2="2" y2="22"></line><line x1="17.5" y1="15" x2="9" y2="15"></line>',
                figma: '<path d="M5 5.5A3.5 3.5 0 0 1 8.5 2H12v7H8.5A3.5 3.5 0 0 1 5 5.5z"></path><path d="M12 2h3.5a3.5 3.5 0 1 1 0 7H12V2z"></path><path d="M12 12.5a3.5 3.5 0 1 1 7 0 3.5 3.5 0 1 1-7 0z"></path><path d="M5 19.5A3.5 3.5 0 0 1 8.5 16H12v3.5a3.5 3.5 0 1 1-7 0z"></path><path d="M5 12.5A3.5 3.5 0 0 1 8.5 9H12v7H8.5A3.5 3.5 0 0 1 5 12.5z"></path>',
                "file-minus": '<path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="9" y1="15" x2="15" y2="15"></line>',
                "file-plus": '<path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="12" y1="18" x2="12" y2="12"></line><line x1="9" y1="15" x2="15" y2="15"></line>',
                "file-text": '<path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><polyline points="10 9 9 9 8 9"></polyline>',
                file: '<path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path><polyline points="13 2 13 9 20 9"></polyline>',
                film: '<rect x="2" y="2" width="20" height="20" rx="2.18" ry="2.18"></rect><line x1="7" y1="2" x2="7" y2="22"></line><line x1="17" y1="2" x2="17" y2="22"></line><line x1="2" y1="12" x2="22" y2="12"></line><line x1="2" y1="7" x2="7" y2="7"></line><line x1="2" y1="17" x2="7" y2="17"></line><line x1="17" y1="17" x2="22" y2="17"></line><line x1="17" y1="7" x2="22" y2="7"></line>',
                filter: '<polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3"></polygon>',
                flag: '<path d="M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z"></path><line x1="4" y1="22" x2="4" y2="15"></line>',
                "folder-minus": '<path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"></path><line x1="9" y1="14" x2="15" y2="14"></line>',
                "folder-plus": '<path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"></path><line x1="12" y1="11" x2="12" y2="17"></line><line x1="9" y1="14" x2="15" y2="14"></line>',
                folder: '<path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"></path>',
                framer: '<path d="M5 16V9h14V2H5l14 14h-7m-7 0l7 7v-7m-7 0h7"></path>',
                frown: '<circle cx="12" cy="12" r="10"></circle><path d="M16 16s-1.5-2-4-2-4 2-4 2"></path><line x1="9" y1="9" x2="9.01" y2="9"></line><line x1="15" y1="9" x2="15.01" y2="9"></line>',
                gift: '<polyline points="20 12 20 22 4 22 4 12"></polyline><rect x="2" y="7" width="20" height="5"></rect><line x1="12" y1="22" x2="12" y2="7"></line><path d="M12 7H7.5a2.5 2.5 0 0 1 0-5C11 2 12 7 12 7z"></path><path d="M12 7h4.5a2.5 2.5 0 0 0 0-5C13 2 12 7 12 7z"></path>',
                "git-branch": '<line x1="6" y1="3" x2="6" y2="15"></line><circle cx="18" cy="6" r="3"></circle><circle cx="6" cy="18" r="3"></circle><path d="M18 9a9 9 0 0 1-9 9"></path>',
                "git-commit": '<circle cx="12" cy="12" r="4"></circle><line x1="1.05" y1="12" x2="7" y2="12"></line><line x1="17.01" y1="12" x2="22.96" y2="12"></line>',
                "git-merge": '<circle cx="18" cy="18" r="3"></circle><circle cx="6" cy="6" r="3"></circle><path d="M6 21V9a9 9 0 0 0 9 9"></path>',
                "git-pull-request": '<circle cx="18" cy="18" r="3"></circle><circle cx="6" cy="6" r="3"></circle><path d="M13 6h3a2 2 0 0 1 2 2v7"></path><line x1="6" y1="9" x2="6" y2="21"></line>',
                github: '<path d="M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"></path>',
                gitlab: '<path d="M22.65 14.39L12 22.13 1.35 14.39a.84.84 0 0 1-.3-.94l1.22-3.78 2.44-7.51A.42.42 0 0 1 4.82 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.49h8.1l2.44-7.51A.42.42 0 0 1 18.6 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.51L23 13.45a.84.84 0 0 1-.35.94z"></path>',
                globe: '<circle cx="12" cy="12" r="10"></circle><line x1="2" y1="12" x2="22" y2="12"></line><path d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"></path>',
                grid: '<rect x="3" y="3" width="7" height="7"></rect><rect x="14" y="3" width="7" height="7"></rect><rect x="14" y="14" width="7" height="7"></rect><rect x="3" y="14" width="7" height="7"></rect>',
                "hard-drive": '<line x1="22" y1="12" x2="2" y2="12"></line><path d="M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"></path><line x1="6" y1="16" x2="6.01" y2="16"></line><line x1="10" y1="16" x2="10.01" y2="16"></line>',
                hash: '<line x1="4" y1="9" x2="20" y2="9"></line><line x1="4" y1="15" x2="20" y2="15"></line><line x1="10" y1="3" x2="8" y2="21"></line><line x1="16" y1="3" x2="14" y2="21"></line>',
                headphones: '<path d="M3 18v-6a9 9 0 0 1 18 0v6"></path><path d="M21 19a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3zM3 19a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2H3z"></path>',
                heart: '<path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path>',
                "help-circle": '<circle cx="12" cy="12" r="10"></circle><path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"></path><line x1="12" y1="17" x2="12.01" y2="17"></line>',
                hexagon: '<path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"></path>',
                home: '<path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path><polyline points="9 22 9 12 15 12 15 22"></polyline>',
                image: '<rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><circle cx="8.5" cy="8.5" r="1.5"></circle><polyline points="21 15 16 10 5 21"></polyline>',
                inbox: '<polyline points="22 12 16 12 14 15 10 15 8 12 2 12"></polyline><path d="M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"></path>',
                info: '<circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line>',
                instagram: '<rect x="2" y="2" width="20" height="20" rx="5" ry="5"></rect><path d="M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"></path><line x1="17.5" y1="6.5" x2="17.51" y2="6.5"></line>',
                italic: '<line x1="19" y1="4" x2="10" y2="4"></line><line x1="14" y1="20" x2="5" y2="20"></line><line x1="15" y1="4" x2="9" y2="20"></line>',
                key: '<path d="M21 2l-2 2m-7.61 7.61a5.5 5.5 0 1 1-7.778 7.778 5.5 5.5 0 0 1 7.777-7.777zm0 0L15.5 7.5m0 0l3 3L22 7l-3-3m-3.5 3.5L19 4"></path>',
                layers: '<polygon points="12 2 2 7 12 12 22 7 12 2"></polygon><polyline points="2 17 12 22 22 17"></polyline><polyline points="2 12 12 17 22 12"></polyline>',
                layout: '<rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="3" y1="9" x2="21" y2="9"></line><line x1="9" y1="21" x2="9" y2="9"></line>',
                "life-buoy": '<circle cx="12" cy="12" r="10"></circle><circle cx="12" cy="12" r="4"></circle><line x1="4.93" y1="4.93" x2="9.17" y2="9.17"></line><line x1="14.83" y1="14.83" x2="19.07" y2="19.07"></line><line x1="14.83" y1="9.17" x2="19.07" y2="4.93"></line><line x1="14.83" y1="9.17" x2="18.36" y2="5.64"></line><line x1="4.93" y1="19.07" x2="9.17" y2="14.83"></line>',
                "link-2": '<path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path><line x1="8" y1="12" x2="16" y2="12"></line>',
                link: '<path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path><path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path>',
                linkedin: '<path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"></path><rect x="2" y="9" width="4" height="12"></rect><circle cx="4" cy="4" r="2"></circle>',
                list: '<line x1="8" y1="6" x2="21" y2="6"></line><line x1="8" y1="12" x2="21" y2="12"></line><line x1="8" y1="18" x2="21" y2="18"></line><line x1="3" y1="6" x2="3.01" y2="6"></line><line x1="3" y1="12" x2="3.01" y2="12"></line><line x1="3" y1="18" x2="3.01" y2="18"></line>',
                loader: '<line x1="12" y1="2" x2="12" y2="6"></line><line x1="12" y1="18" x2="12" y2="22"></line><line x1="4.93" y1="4.93" x2="7.76" y2="7.76"></line><line x1="16.24" y1="16.24" x2="19.07" y2="19.07"></line><line x1="2" y1="12" x2="6" y2="12"></line><line x1="18" y1="12" x2="22" y2="12"></line><line x1="4.93" y1="19.07" x2="7.76" y2="16.24"></line><line x1="16.24" y1="7.76" x2="19.07" y2="4.93"></line>',
                lock: '<rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect><path d="M7 11V7a5 5 0 0 1 10 0v4"></path>',
                "log-in": '<path d="M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"></path><polyline points="10 17 15 12 10 7"></polyline><line x1="15" y1="12" x2="3" y2="12"></line>',
                "log-out": '<path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path><polyline points="16 17 21 12 16 7"></polyline><line x1="21" y1="12" x2="9" y2="12"></line>',
                mail: '<path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path><polyline points="22,6 12,13 2,6"></polyline>',
                "map-pin": '<path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path><circle cx="12" cy="10" r="3"></circle>',
                map: '<polygon points="1 6 1 22 8 18 16 22 23 18 23 2 16 6 8 2 1 6"></polygon><line x1="8" y1="2" x2="8" y2="18"></line><line x1="16" y1="6" x2="16" y2="22"></line>',
                "maximize-2": '<polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" y1="3" x2="14" y2="10"></line><line x1="3" y1="21" x2="10" y2="14"></line>',
                maximize: '<path d="M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"></path>',
                meh: '<circle cx="12" cy="12" r="10"></circle><line x1="8" y1="15" x2="16" y2="15"></line><line x1="9" y1="9" x2="9.01" y2="9"></line><line x1="15" y1="9" x2="15.01" y2="9"></line>',
                menu: '<line x1="3" y1="12" x2="21" y2="12"></line><line x1="3" y1="6" x2="21" y2="6"></line><line x1="3" y1="18" x2="21" y2="18"></line>',
                "message-circle": '<path d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"></path>',
                "message-square": '<path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>',
                "mic-off": '<line x1="1" y1="1" x2="23" y2="23"></line><path d="M9 9v3a3 3 0 0 0 5.12 2.12M15 9.34V4a3 3 0 0 0-5.94-.6"></path><path d="M17 16.95A7 7 0 0 1 5 12v-2m14 0v2a7 7 0 0 1-.11 1.23"></path><line x1="12" y1="19" x2="12" y2="23"></line><line x1="8" y1="23" x2="16" y2="23"></line>',
                mic: '<path d="M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"></path><path d="M19 10v2a7 7 0 0 1-14 0v-2"></path><line x1="12" y1="19" x2="12" y2="23"></line><line x1="8" y1="23" x2="16" y2="23"></line>',
                "minimize-2": '<polyline points="4 14 10 14 10 20"></polyline><polyline points="20 10 14 10 14 4"></polyline><line x1="14" y1="10" x2="21" y2="3"></line><line x1="3" y1="21" x2="10" y2="14"></line>',
                minimize: '<path d="M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3"></path>',
                "minus-circle": '<circle cx="12" cy="12" r="10"></circle><line x1="8" y1="12" x2="16" y2="12"></line>',
                "minus-square": '<rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="8" y1="12" x2="16" y2="12"></line>',
                minus: '<line x1="5" y1="12" x2="19" y2="12"></line>',
                monitor: '<rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect><line x1="8" y1="21" x2="16" y2="21"></line><line x1="12" y1="17" x2="12" y2="21"></line>',
                moon: '<path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>',
                "more-horizontal": '<circle cx="12" cy="12" r="1"></circle><circle cx="19" cy="12" r="1"></circle><circle cx="5" cy="12" r="1"></circle>',
                "more-vertical": '<circle cx="12" cy="12" r="1"></circle><circle cx="12" cy="5" r="1"></circle><circle cx="12" cy="19" r="1"></circle>',
                "mouse-pointer": '<path d="M3 3l7.07 16.97 2.51-7.39 7.39-2.51L3 3z"></path><path d="M13 13l6 6"></path>',
                move: '<polyline points="5 9 2 12 5 15"></polyline><polyline points="9 5 12 2 15 5"></polyline><polyline points="15 19 12 22 9 19"></polyline><polyline points="19 9 22 12 19 15"></polyline><line x1="2" y1="12" x2="22" y2="12"></line><line x1="12" y1="2" x2="12" y2="22"></line>',
                music: '<path d="M9 18V5l12-2v13"></path><circle cx="6" cy="18" r="3"></circle><circle cx="18" cy="16" r="3"></circle>',
                "navigation-2": '<polygon points="12 2 19 21 12 17 5 21 12 2"></polygon>',
                navigation: '<polygon points="3 11 22 2 13 21 11 13 3 11"></polygon>',
                octagon: '<polygon points="7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"></polygon>',
                package: '<line x1="16.5" y1="9.4" x2="7.5" y2="4.21"></line><path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"></path><polyline points="3.27 6.96 12 12.01 20.73 6.96"></polyline><line x1="12" y1="22.08" x2="12" y2="12"></line>',
                paperclip: '<path d="M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48"></path>',
                "pause-circle": '<circle cx="12" cy="12" r="10"></circle><line x1="10" y1="15" x2="10" y2="9"></line><line x1="14" y1="15" x2="14" y2="9"></line>',
                pause: '<rect x="6" y="4" width="4" height="16"></rect><rect x="14" y="4" width="4" height="16"></rect>',
                "pen-tool": '<path d="M12 19l7-7 3 3-7 7-3-3z"></path><path d="M18 13l-1.5-7.5L2 2l3.5 14.5L13 18l5-5z"></path><path d="M2 2l7.586 7.586"></path><circle cx="11" cy="11" r="2"></circle>',
                percent: '<line x1="19" y1="5" x2="5" y2="19"></line><circle cx="6.5" cy="6.5" r="2.5"></circle><circle cx="17.5" cy="17.5" r="2.5"></circle>',
                "phone-call": '<path d="M15.05 5A5 5 0 0 1 19 8.95M15.05 1A9 9 0 0 1 23 8.94m-1 7.98v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>',
                "phone-forwarded": '<polyline points="19 1 23 5 19 9"></polyline><line x1="15" y1="5" x2="23" y2="5"></line><path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>',
                "phone-incoming": '<polyline points="16 2 16 8 22 8"></polyline><line x1="23" y1="1" x2="16" y2="8"></line><path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>',
                "phone-missed": '<line x1="23" y1="1" x2="17" y2="7"></line><line x1="17" y1="1" x2="23" y2="7"></line><path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>',
                "phone-off": '<path d="M10.68 13.31a16 16 0 0 0 3.41 2.6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7 2 2 0 0 1 1.72 2v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.42 19.42 0 0 1-3.33-2.67m-2.67-3.34a19.79 19.79 0 0 1-3.07-8.63A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91"></path><line x1="23" y1="1" x2="1" y2="23"></line>',
                "phone-outgoing": '<polyline points="23 7 23 1 17 1"></polyline><line x1="16" y1="8" x2="23" y2="1"></line><path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>',
                phone: '<path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>',
                "pie-chart": '<path d="M21.21 15.89A10 10 0 1 1 8 2.83"></path><path d="M22 12A10 10 0 0 0 12 2v10z"></path>',
                "play-circle": '<circle cx="12" cy="12" r="10"></circle><polygon points="10 8 16 12 10 16 10 8"></polygon>',
                play: '<polygon points="5 3 19 12 5 21 5 3"></polygon>',
                "plus-circle": '<circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="16"></line><line x1="8" y1="12" x2="16" y2="12"></line>',
                "plus-square": '<rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="12" y1="8" x2="12" y2="16"></line><line x1="8" y1="12" x2="16" y2="12"></line>',
                plus: '<line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line>',
                pocket: '<path d="M4 3h16a2 2 0 0 1 2 2v6a10 10 0 0 1-10 10A10 10 0 0 1 2 11V5a2 2 0 0 1 2-2z"></path><polyline points="8 10 12 14 16 10"></polyline>',
                power: '<path d="M18.36 6.64a9 9 0 1 1-12.73 0"></path><line x1="12" y1="2" x2="12" y2="12"></line>',
                printer: '<polyline points="6 9 6 2 18 2 18 9"></polyline><path d="M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2"></path><rect x="6" y="14" width="12" height="8"></rect>',
                radio: '<circle cx="12" cy="12" r="2"></circle><path d="M16.24 7.76a6 6 0 0 1 0 8.49m-8.48-.01a6 6 0 0 1 0-8.49m11.31-2.82a10 10 0 0 1 0 14.14m-14.14 0a10 10 0 0 1 0-14.14"></path>',
                "refresh-ccw": '<polyline points="1 4 1 10 7 10"></polyline><polyline points="23 20 23 14 17 14"></polyline><path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"></path>',
                "refresh-cw": '<polyline points="23 4 23 10 17 10"></polyline><polyline points="1 20 1 14 7 14"></polyline><path d="M3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15"></path>',
                repeat: '<polyline points="17 1 21 5 17 9"></polyline><path d="M3 11V9a4 4 0 0 1 4-4h14"></path><polyline points="7 23 3 19 7 15"></polyline><path d="M21 13v2a4 4 0 0 1-4 4H3"></path>',
                rewind: '<polygon points="11 19 2 12 11 5 11 19"></polygon><polygon points="22 19 13 12 22 5 22 19"></polygon>',
                "rotate-ccw": '<polyline points="1 4 1 10 7 10"></polyline><path d="M3.51 15a9 9 0 1 0 2.13-9.36L1 10"></path>',
                "rotate-cw": '<polyline points="23 4 23 10 17 10"></polyline><path d="M20.49 15a9 9 0 1 1-2.12-9.36L23 10"></path>',
                rss: '<path d="M4 11a9 9 0 0 1 9 9"></path><path d="M4 4a16 16 0 0 1 16 16"></path><circle cx="5" cy="19" r="1"></circle>',
                save: '<path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"></path><polyline points="17 21 17 13 7 13 7 21"></polyline><polyline points="7 3 7 8 15 8"></polyline>',
                scissors: '<circle cx="6" cy="6" r="3"></circle><circle cx="6" cy="18" r="3"></circle><line x1="20" y1="4" x2="8.12" y2="15.88"></line><line x1="14.47" y1="14.48" x2="20" y2="20"></line><line x1="8.12" y1="8.12" x2="12" y2="12"></line>',
                search: '<circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line>',
                send: '<line x1="22" y1="2" x2="11" y2="13"></line><polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>',
                server: '<rect x="2" y="2" width="20" height="8" rx="2" ry="2"></rect><rect x="2" y="14" width="20" height="8" rx="2" ry="2"></rect><line x1="6" y1="6" x2="6.01" y2="6"></line><line x1="6" y1="18" x2="6.01" y2="18"></line>',
                settings: '<circle cx="12" cy="12" r="3"></circle><path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path>',
                "share-2": '<circle cx="18" cy="5" r="3"></circle><circle cx="6" cy="12" r="3"></circle><circle cx="18" cy="19" r="3"></circle><line x1="8.59" y1="13.51" x2="15.42" y2="17.49"></line><line x1="15.41" y1="6.51" x2="8.59" y2="10.49"></line>',
                share: '<path d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"></path><polyline points="16 6 12 2 8 6"></polyline><line x1="12" y1="2" x2="12" y2="15"></line>',
                "shield-off": '<path d="M19.69 14a6.9 6.9 0 0 0 .31-2V5l-8-3-3.16 1.18"></path><path d="M4.73 4.73L4 5v7c0 6 8 10 8 10a20.29 20.29 0 0 0 5.62-4.38"></path><line x1="1" y1="1" x2="23" y2="23"></line>',
                shield: '<path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path>',
                "shopping-bag": '<path d="M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"></path><line x1="3" y1="6" x2="21" y2="6"></line><path d="M16 10a4 4 0 0 1-8 0"></path>',
                "shopping-cart": '<circle cx="9" cy="21" r="1"></circle><circle cx="20" cy="21" r="1"></circle><path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"></path>',
                shuffle: '<polyline points="16 3 21 3 21 8"></polyline><line x1="4" y1="20" x2="21" y2="3"></line><polyline points="21 16 21 21 16 21"></polyline><line x1="15" y1="15" x2="21" y2="21"></line><line x1="4" y1="4" x2="9" y2="9"></line>',
                sidebar: '<rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="9" y1="3" x2="9" y2="21"></line>',
                "skip-back": '<polygon points="19 20 9 12 19 4 19 20"></polygon><line x1="5" y1="19" x2="5" y2="5"></line>',
                "skip-forward": '<polygon points="5 4 15 12 5 20 5 4"></polygon><line x1="19" y1="5" x2="19" y2="19"></line>',
                slack: '<path d="M14.5 10c-.83 0-1.5-.67-1.5-1.5v-5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5z"></path><path d="M20.5 10H19V8.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"></path><path d="M9.5 14c.83 0 1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5S8 21.33 8 20.5v-5c0-.83.67-1.5 1.5-1.5z"></path><path d="M3.5 14H5v1.5c0 .83-.67 1.5-1.5 1.5S2 16.33 2 15.5 2.67 14 3.5 14z"></path><path d="M14 14.5c0-.83.67-1.5 1.5-1.5h5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-5c-.83 0-1.5-.67-1.5-1.5z"></path><path d="M15.5 19H14v1.5c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5-.67-1.5-1.5-1.5z"></path><path d="M10 9.5C10 8.67 9.33 8 8.5 8h-5C2.67 8 2 8.67 2 9.5S2.67 11 3.5 11h5c.83 0 1.5-.67 1.5-1.5z"></path><path d="M8.5 5H10V3.5C10 2.67 9.33 2 8.5 2S7 2.67 7 3.5 7.67 5 8.5 5z"></path>',
                slash: '<circle cx="12" cy="12" r="10"></circle><line x1="4.93" y1="4.93" x2="19.07" y2="19.07"></line>',
                sliders: '<line x1="4" y1="21" x2="4" y2="14"></line><line x1="4" y1="10" x2="4" y2="3"></line><line x1="12" y1="21" x2="12" y2="12"></line><line x1="12" y1="8" x2="12" y2="3"></line><line x1="20" y1="21" x2="20" y2="16"></line><line x1="20" y1="12" x2="20" y2="3"></line><line x1="1" y1="14" x2="7" y2="14"></line><line x1="9" y1="8" x2="15" y2="8"></line><line x1="17" y1="16" x2="23" y2="16"></line>',
                smartphone: '<rect x="5" y="2" width="14" height="20" rx="2" ry="2"></rect><line x1="12" y1="18" x2="12.01" y2="18"></line>',
                smile: '<circle cx="12" cy="12" r="10"></circle><path d="M8 14s1.5 2 4 2 4-2 4-2"></path><line x1="9" y1="9" x2="9.01" y2="9"></line><line x1="15" y1="9" x2="15.01" y2="9"></line>',
                speaker: '<rect x="4" y="2" width="16" height="20" rx="2" ry="2"></rect><circle cx="12" cy="14" r="4"></circle><line x1="12" y1="6" x2="12.01" y2="6"></line>',
                square: '<rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>',
                star: '<polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"></polygon>',
                "stop-circle": '<circle cx="12" cy="12" r="10"></circle><rect x="9" y="9" width="6" height="6"></rect>',
                sun: '<circle cx="12" cy="12" r="5"></circle><line x1="12" y1="1" x2="12" y2="3"></line><line x1="12" y1="21" x2="12" y2="23"></line><line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line><line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line><line x1="1" y1="12" x2="3" y2="12"></line><line x1="21" y1="12" x2="23" y2="12"></line><line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line><line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>',
                sunrise: '<path d="M17 18a5 5 0 0 0-10 0"></path><line x1="12" y1="2" x2="12" y2="9"></line><line x1="4.22" y1="10.22" x2="5.64" y2="11.64"></line><line x1="1" y1="18" x2="3" y2="18"></line><line x1="21" y1="18" x2="23" y2="18"></line><line x1="18.36" y1="11.64" x2="19.78" y2="10.22"></line><line x1="23" y1="22" x2="1" y2="22"></line><polyline points="8 6 12 2 16 6"></polyline>',
                sunset: '<path d="M17 18a5 5 0 0 0-10 0"></path><line x1="12" y1="9" x2="12" y2="2"></line><line x1="4.22" y1="10.22" x2="5.64" y2="11.64"></line><line x1="1" y1="18" x2="3" y2="18"></line><line x1="21" y1="18" x2="23" y2="18"></line><line x1="18.36" y1="11.64" x2="19.78" y2="10.22"></line><line x1="23" y1="22" x2="1" y2="22"></line><polyline points="16 5 12 9 8 5"></polyline>',
                tablet: '<rect x="4" y="2" width="16" height="20" rx="2" ry="2"></rect><line x1="12" y1="18" x2="12.01" y2="18"></line>',
                tag: '<path d="M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"></path><line x1="7" y1="7" x2="7.01" y2="7"></line>',
                target: '<circle cx="12" cy="12" r="10"></circle><circle cx="12" cy="12" r="6"></circle><circle cx="12" cy="12" r="2"></circle>',
                terminal: '<polyline points="4 17 10 11 4 5"></polyline><line x1="12" y1="19" x2="20" y2="19"></line>',
                thermometer: '<path d="M14 14.76V3.5a2.5 2.5 0 0 0-5 0v11.26a4.5 4.5 0 1 0 5 0z"></path>',
                "thumbs-down": '<path d="M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17"></path>',
                "thumbs-up": '<path d="M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3"></path>',
                "toggle-left": '<rect x="1" y="5" width="22" height="14" rx="7" ry="7"></rect><circle cx="8" cy="12" r="3"></circle>',
                "toggle-right": '<rect x="1" y="5" width="22" height="14" rx="7" ry="7"></rect><circle cx="16" cy="12" r="3"></circle>',
                tool: '<path d="M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z"></path>',
                "trash-2": '<polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path><line x1="10" y1="11" x2="10" y2="17"></line><line x1="14" y1="11" x2="14" y2="17"></line>',
                trash: '<polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>',
                trello: '<rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><rect x="7" y="7" width="3" height="9"></rect><rect x="14" y="7" width="3" height="5"></rect>',
                "trending-down": '<polyline points="23 18 13.5 8.5 8.5 13.5 1 6"></polyline><polyline points="17 18 23 18 23 12"></polyline>',
                "trending-up": '<polyline points="23 6 13.5 15.5 8.5 10.5 1 18"></polyline><polyline points="17 6 23 6 23 12"></polyline>',
                triangle: '<path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"></path>',
                truck: '<rect x="1" y="3" width="15" height="13"></rect><polygon points="16 8 20 8 23 11 23 16 16 16 16 8"></polygon><circle cx="5.5" cy="18.5" r="2.5"></circle><circle cx="18.5" cy="18.5" r="2.5"></circle>',
                tv: '<rect x="2" y="7" width="20" height="15" rx="2" ry="2"></rect><polyline points="17 2 12 7 7 2"></polyline>',
                twitch: '<path d="M21 2H3v16h5v4l4-4h5l4-4V2zm-10 9V7m5 4V7"></path>',
                twitter: '<path d="M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"></path>',
                type: '<polyline points="4 7 4 4 20 4 20 7"></polyline><line x1="9" y1="20" x2="15" y2="20"></line><line x1="12" y1="4" x2="12" y2="20"></line>',
                umbrella: '<path d="M23 12a11.05 11.05 0 0 0-22 0zm-5 7a3 3 0 0 1-6 0v-7"></path>',
                underline: '<path d="M6 3v7a6 6 0 0 0 6 6 6 6 0 0 0 6-6V3"></path><line x1="4" y1="21" x2="20" y2="21"></line>',
                unlock: '<rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect><path d="M7 11V7a5 5 0 0 1 9.9-1"></path>',
                "upload-cloud": '<polyline points="16 16 12 12 8 16"></polyline><line x1="12" y1="12" x2="12" y2="21"></line><path d="M20.39 18.39A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.3"></path><polyline points="16 16 12 12 8 16"></polyline>',
                upload: '<path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="17 8 12 3 7 8"></polyline><line x1="12" y1="3" x2="12" y2="15"></line>',
                "user-check": '<path d="M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="8.5" cy="7" r="4"></circle><polyline points="17 11 19 13 23 9"></polyline>',
                "user-minus": '<path d="M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="8.5" cy="7" r="4"></circle><line x1="23" y1="11" x2="17" y2="11"></line>',
                "user-plus": '<path d="M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="8.5" cy="7" r="4"></circle><line x1="20" y1="8" x2="20" y2="14"></line><line x1="23" y1="11" x2="17" y2="11"></line>',
                "user-x": '<path d="M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="8.5" cy="7" r="4"></circle><line x1="18" y1="8" x2="23" y2="13"></line><line x1="23" y1="8" x2="18" y2="13"></line>',
                user: '<path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path><circle cx="12" cy="7" r="4"></circle>',
                users: '<path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="9" cy="7" r="4"></circle><path d="M23 21v-2a4 4 0 0 0-3-3.87"></path><path d="M16 3.13a4 4 0 0 1 0 7.75"></path>',
                "video-off": '<path d="M16 16v1a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h2m5.66 0H14a2 2 0 0 1 2 2v3.34l1 1L23 7v10"></path><line x1="1" y1="1" x2="23" y2="23"></line>',
                video: '<polygon points="23 7 16 12 23 17 23 7"></polygon><rect x="1" y="5" width="15" height="14" rx="2" ry="2"></rect>',
                voicemail: '<circle cx="5.5" cy="11.5" r="4.5"></circle><circle cx="18.5" cy="11.5" r="4.5"></circle><line x1="5.5" y1="16" x2="18.5" y2="16"></line>',
                "volume-1": '<polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon><path d="M15.54 8.46a5 5 0 0 1 0 7.07"></path>',
                "volume-2": '<polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon><path d="M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7.07"></path>',
                "volume-x": '<polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon><line x1="23" y1="9" x2="17" y2="15"></line><line x1="17" y1="9" x2="23" y2="15"></line>',
                volume: '<polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon>',
                watch: '<circle cx="12" cy="12" r="7"></circle><polyline points="12 9 12 12 13.5 13.5"></polyline><path d="M16.51 17.35l-.35 3.83a2 2 0 0 1-2 1.82H9.83a2 2 0 0 1-2-1.82l-.35-3.83m.01-10.7l.35-3.83A2 2 0 0 1 9.83 1h4.35a2 2 0 0 1 2 1.82l.35 3.83"></path>',
                "wifi-off": '<line x1="1" y1="1" x2="23" y2="23"></line><path d="M16.72 11.06A10.94 10.94 0 0 1 19 12.55"></path><path d="M5 12.55a10.94 10.94 0 0 1 5.17-2.39"></path><path d="M10.71 5.05A16 16 0 0 1 22.58 9"></path><path d="M1.42 9a15.91 15.91 0 0 1 4.7-2.88"></path><path d="M8.53 16.11a6 6 0 0 1 6.95 0"></path><line x1="12" y1="20" x2="12.01" y2="20"></line>',
                wifi: '<path d="M5 12.55a11 11 0 0 1 14.08 0"></path><path d="M1.42 9a16 16 0 0 1 21.16 0"></path><path d="M8.53 16.11a6 6 0 0 1 6.95 0"></path><line x1="12" y1="20" x2="12.01" y2="20"></line>',
                wind: '<path d="M9.59 4.59A2 2 0 1 1 11 8H2m10.59 11.41A2 2 0 1 0 14 16H2m15.73-8.27A2.5 2.5 0 1 1 19.5 12H2"></path>',
                "x-circle": '<circle cx="12" cy="12" r="10"></circle><line x1="15" y1="9" x2="9" y2="15"></line><line x1="9" y1="9" x2="15" y2="15"></line>',
                "x-octagon": '<polygon points="7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"></polygon><line x1="15" y1="9" x2="9" y2="15"></line><line x1="9" y1="9" x2="15" y2="15"></line>',
                "x-square": '<rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="9" y1="9" x2="15" y2="15"></line><line x1="15" y1="9" x2="9" y2="15"></line>',
                x: '<line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line>',
                youtube: '<path d="M22.54 6.42a2.78 2.78 0 0 0-1.94-2C18.88 4 12 4 12 4s-6.88 0-8.6.46a2.78 2.78 0 0 0-1.94 2A29 29 0 0 0 1 11.75a29 29 0 0 0 .46 5.33A2.78 2.78 0 0 0 3.4 19c1.72.46 8.6.46 8.6.46s6.88 0 8.6-.46a2.78 2.78 0 0 0 1.94-2 29 29 0 0 0 .46-5.25 29 29 0 0 0-.46-5.33z"></path><polygon points="9.75 15.02 15.5 11.75 9.75 8.48 9.75 15.02"></polygon>',
                "zap-off": '<polyline points="12.41 6.75 13 2 10.57 4.92"></polyline><polyline points="18.57 12.91 21 10 15.66 10"></polyline><polyline points="8 8 3 14 12 14 11 22 16 16"></polyline><line x1="1" y1="1" x2="23" y2="23"></line>',
                zap: '<polygon points="13 2 3 14 12 14 11 22 21 10 12 10 13 2"></polygon>',
                "zoom-in": '<circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line><line x1="11" y1="8" x2="11" y2="14"></line><line x1="8" y1="11" x2="14" y2="11"></line>',
                "zoom-out": '<circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line><line x1="8" y1="11" x2="14" y2="11"></line>'
              }
            },
          "./node_modules/classnames/dedupe.js": /*!*******************************************!*\
!*** ./node_modules/classnames/dedupe.js ***!
\*******************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o;
              /*!
Copyright (c) 2016 Jed Watson.
Licensed under the MIT License (MIT), see
http://jedwatson.github.io/classnames
*/
              !function () {
                "use strict";
                var n = function () {
                  function e() { }
                  function t(e, t) {
                    for (var n = t.length, o = 0; o < n; ++o)
                      i(e, t[o])
                  }
                  e.prototype = Object.create(null);
                  var n = {}.hasOwnProperty
                    , o = /\s+/;
                  function i(e, i) {
                    if (i) {
                      var r = typeof i;
                      "string" === r ? function (e, t) {
                        for (var n = t.split(o), i = n.length, r = 0; r < i; ++r)
                          e[n[r]] = !0
                      }(e, i) : Array.isArray(i) ? t(e, i) : "object" === r ? function (e, t) {
                        for (var o in t)
                          n.call(t, o) && (e[o] = !!t[o])
                      }(e, i) : "number" === r && function (e, t) {
                        e[t] = !0
                      }(e, i)
                    }
                  }
                  return function () {
                    for (var n = arguments.length, o = Array(n), i = 0; i < n; i++)
                      o[i] = arguments[i];
                    var r = new e;
                    t(r, o);
                    var a = [];
                    for (var s in r)
                      r[s] && a.push(s);
                    return a.join(" ")
                  }
                }();
                void 0 !== e && e.exports ? e.exports = n : void 0 === (o = function () {
                  return n
                }
                  .apply(t, [])) || (e.exports = o)
              }()
            },
          "./node_modules/core-js/es/array/from.js": /*!***********************************************!*\
!*** ./node_modules/core-js/es/array/from.js ***!
\***********************************************/
            /*! no static exports found */
            function (e, t, n) {
              n(/*! ../../modules/es.string.iterator */
                "./node_modules/core-js/modules/es.string.iterator.js"),
                n(/*! ../../modules/es.array.from */
                  "./node_modules/core-js/modules/es.array.from.js");
              var o = n(/*! ../../internals/path */
                "./node_modules/core-js/internals/path.js");
              e.exports = o.Array.from
            },
          "./node_modules/core-js/internals/a-function.js": /*!******************************************************!*\
!*** ./node_modules/core-js/internals/a-function.js ***!
\******************************************************/
            /*! no static exports found */
            function (e, t) {
              e.exports = function (e) {
                if ("function" != typeof e)
                  throw TypeError(String(e) + " is not a function");
                return e
              }
            },
          "./node_modules/core-js/internals/an-object.js": /*!*****************************************************!*\
!*** ./node_modules/core-js/internals/an-object.js ***!
\*****************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/is-object */
                "./node_modules/core-js/internals/is-object.js");
              e.exports = function (e) {
                if (!o(e))
                  throw TypeError(String(e) + " is not an object");
                return e
              }
            },
          "./node_modules/core-js/internals/array-from.js": /*!******************************************************!*\
!*** ./node_modules/core-js/internals/array-from.js ***!
\******************************************************/
            /*! no static exports found */
            function (e, t, n) {
              "use strict";
              var o = n(/*! ../internals/bind-context */
                "./node_modules/core-js/internals/bind-context.js")
                , i = n(/*! ../internals/to-object */
                  "./node_modules/core-js/internals/to-object.js")
                , r = n(/*! ../internals/call-with-safe-iteration-closing */
                  "./node_modules/core-js/internals/call-with-safe-iteration-closing.js")
                , a = n(/*! ../internals/is-array-iterator-method */
                  "./node_modules/core-js/internals/is-array-iterator-method.js")
                , s = n(/*! ../internals/to-length */
                  "./node_modules/core-js/internals/to-length.js")
                , l = n(/*! ../internals/create-property */
                  "./node_modules/core-js/internals/create-property.js")
                , c = n(/*! ../internals/get-iterator-method */
                  "./node_modules/core-js/internals/get-iterator-method.js");
              e.exports = function (e) {
                var t, n, u, p, d = i(e), h = "function" == typeof this ? this : Array, f = arguments.length, y = f > 1 ? arguments[1] : void 0, m = void 0 !== y, g = 0, v = c(d);
                if (m && (y = o(y, f > 2 ? arguments[2] : void 0, 2)),
                  null == v || h == Array && a(v))
                  for (n = new h(t = s(d.length)); t > g; g++)
                    l(n, g, m ? y(d[g], g) : d[g]);
                else
                  for (p = v.call(d),
                    n = new h; !(u = p.next()).done; g++)
                    l(n, g, m ? r(p, y, [u.value, g], !0) : u.value);
                return n.length = g,
                  n
              }
            },
          "./node_modules/core-js/internals/array-includes.js": /*!**********************************************************!*\
!*** ./node_modules/core-js/internals/array-includes.js ***!
\**********************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/to-indexed-object */
                "./node_modules/core-js/internals/to-indexed-object.js")
                , i = n(/*! ../internals/to-length */
                  "./node_modules/core-js/internals/to-length.js")
                , r = n(/*! ../internals/to-absolute-index */
                  "./node_modules/core-js/internals/to-absolute-index.js");
              e.exports = function (e) {
                return function (t, n, a) {
                  var s, l = o(t), c = i(l.length), u = r(a, c);
                  if (e && n != n) {
                    for (; c > u;)
                      if ((s = l[u++]) != s)
                        return !0
                  } else
                    for (; c > u; u++)
                      if ((e || u in l) && l[u] === n)
                        return e || u || 0;
                  return !e && -1
                }
              }
            },
          "./node_modules/core-js/internals/bind-context.js": /*!********************************************************!*\
!*** ./node_modules/core-js/internals/bind-context.js ***!
\********************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/a-function */
                "./node_modules/core-js/internals/a-function.js");
              e.exports = function (e, t, n) {
                if (o(e),
                  void 0 === t)
                  return e;
                switch (n) {
                  case 0:
                    return function () {
                      return e.call(t)
                    }
                      ;
                  case 1:
                    return function (n) {
                      return e.call(t, n)
                    }
                      ;
                  case 2:
                    return function (n, o) {
                      return e.call(t, n, o)
                    }
                      ;
                  case 3:
                    return function (n, o, i) {
                      return e.call(t, n, o, i)
                    }
                }
                return function () {
                  return e.apply(t, arguments)
                }
              }
            },
          "./node_modules/core-js/internals/call-with-safe-iteration-closing.js": /*!****************************************************************************!*\
!*** ./node_modules/core-js/internals/call-with-safe-iteration-closing.js ***!
\****************************************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/an-object */
                "./node_modules/core-js/internals/an-object.js");
              e.exports = function (e, t, n, i) {
                try {
                  return i ? t(o(n)[0], n[1]) : t(n)
                } catch (t) {
                  var r = e.return;
                  throw void 0 !== r && o(r.call(e)),
                  t
                }
              }
            },
          "./node_modules/core-js/internals/check-correctness-of-iteration.js": /*!**************************************************************************!*\
!*** ./node_modules/core-js/internals/check-correctness-of-iteration.js ***!
\**************************************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/well-known-symbol */
                "./node_modules/core-js/internals/well-known-symbol.js")("iterator")
                , i = !1;
              try {
                var r = 0
                  , a = {
                    next: function () {
                      return {
                        done: !!r++
                      }
                    },
                    return: function () {
                      i = !0
                    }
                  };
                a[o] = function () {
                  return this
                }
                  ,
                  Array.from(a, (function () {
                    throw 2
                  }
                  ))
              } catch (e) { }
              e.exports = function (e, t) {
                if (!t && !i)
                  return !1;
                var n = !1;
                try {
                  var r = {};
                  r[o] = function () {
                    return {
                      next: function () {
                        return {
                          done: n = !0
                        }
                      }
                    }
                  }
                    ,
                    e(r)
                } catch (e) { }
                return n
              }
            },
          "./node_modules/core-js/internals/classof-raw.js": /*!*******************************************************!*\
!*** ./node_modules/core-js/internals/classof-raw.js ***!
\*******************************************************/
            /*! no static exports found */
            function (e, t) {
              var n = {}.toString;
              e.exports = function (e) {
                return n.call(e).slice(8, -1)
              }
            },
          "./node_modules/core-js/internals/classof.js": /*!***************************************************!*\
!*** ./node_modules/core-js/internals/classof.js ***!
\***************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/classof-raw */
                "./node_modules/core-js/internals/classof-raw.js")
                , i = n(/*! ../internals/well-known-symbol */
                  "./node_modules/core-js/internals/well-known-symbol.js")("toStringTag")
                , r = "Arguments" == o(function () {
                  return arguments
                }());
              e.exports = function (e) {
                var t, n, a;
                return void 0 === e ? "Undefined" : null === e ? "Null" : "string" == typeof (n = function (e, t) {
                  try {
                    return e[t]
                  } catch (e) { }
                }(t = Object(e), i)) ? n : r ? o(t) : "Object" == (a = o(t)) && "function" == typeof t.callee ? "Arguments" : a
              }
            },
          "./node_modules/core-js/internals/copy-constructor-properties.js": /*!***********************************************************************!*\
!*** ./node_modules/core-js/internals/copy-constructor-properties.js ***!
\***********************************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/has */
                "./node_modules/core-js/internals/has.js")
                , i = n(/*! ../internals/own-keys */
                  "./node_modules/core-js/internals/own-keys.js")
                , r = n(/*! ../internals/object-get-own-property-descriptor */
                  "./node_modules/core-js/internals/object-get-own-property-descriptor.js")
                , a = n(/*! ../internals/object-define-property */
                  "./node_modules/core-js/internals/object-define-property.js");
              e.exports = function (e, t) {
                for (var n = i(t), s = a.f, l = r.f, c = 0; c < n.length; c++) {
                  var u = n[c];
                  o(e, u) || s(e, u, l(t, u))
                }
              }
            },
          "./node_modules/core-js/internals/correct-prototype-getter.js": /*!********************************************************************!*\
!*** ./node_modules/core-js/internals/correct-prototype-getter.js ***!
\********************************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/fails */
                "./node_modules/core-js/internals/fails.js");
              e.exports = !o((function () {
                function e() { }
                return e.prototype.constructor = null,
                  Object.getPrototypeOf(new e) !== e.prototype
              }
              ))
            },
          "./node_modules/core-js/internals/create-iterator-constructor.js": /*!***********************************************************************!*\
!*** ./node_modules/core-js/internals/create-iterator-constructor.js ***!
\***********************************************************************/
            /*! no static exports found */
            function (e, t, n) {
              "use strict";
              var o = n(/*! ../internals/iterators-core */
                "./node_modules/core-js/internals/iterators-core.js").IteratorPrototype
                , i = n(/*! ../internals/object-create */
                  "./node_modules/core-js/internals/object-create.js")
                , r = n(/*! ../internals/create-property-descriptor */
                  "./node_modules/core-js/internals/create-property-descriptor.js")
                , a = n(/*! ../internals/set-to-string-tag */
                  "./node_modules/core-js/internals/set-to-string-tag.js")
                , s = n(/*! ../internals/iterators */
                  "./node_modules/core-js/internals/iterators.js")
                , l = function () {
                  return this
                };
              e.exports = function (e, t, n) {
                var c = t + " Iterator";
                return e.prototype = i(o, {
                  next: r(1, n)
                }),
                  a(e, c, !1, !0),
                  s[c] = l,
                  e
              }
            },
          "./node_modules/core-js/internals/create-property-descriptor.js": /*!**********************************************************************!*\
!*** ./node_modules/core-js/internals/create-property-descriptor.js ***!
\**********************************************************************/
            /*! no static exports found */
            function (e, t) {
              e.exports = function (e, t) {
                return {
                  enumerable: !(1 & e),
                  configurable: !(2 & e),
                  writable: !(4 & e),
                  value: t
                }
              }
            },
          "./node_modules/core-js/internals/create-property.js": /*!***********************************************************!*\
!*** ./node_modules/core-js/internals/create-property.js ***!
\***********************************************************/
            /*! no static exports found */
            function (e, t, n) {
              "use strict";
              var o = n(/*! ../internals/to-primitive */
                "./node_modules/core-js/internals/to-primitive.js")
                , i = n(/*! ../internals/object-define-property */
                  "./node_modules/core-js/internals/object-define-property.js")
                , r = n(/*! ../internals/create-property-descriptor */
                  "./node_modules/core-js/internals/create-property-descriptor.js");
              e.exports = function (e, t, n) {
                var a = o(t);
                a in e ? i.f(e, a, r(0, n)) : e[a] = n
              }
            },
          "./node_modules/core-js/internals/define-iterator.js": /*!***********************************************************!*\
!*** ./node_modules/core-js/internals/define-iterator.js ***!
\***********************************************************/
            /*! no static exports found */
            function (e, t, n) {
              "use strict";
              var o = n(/*! ../internals/export */
                "./node_modules/core-js/internals/export.js")
                , i = n(/*! ../internals/create-iterator-constructor */
                  "./node_modules/core-js/internals/create-iterator-constructor.js")
                , r = n(/*! ../internals/object-get-prototype-of */
                  "./node_modules/core-js/internals/object-get-prototype-of.js")
                , a = n(/*! ../internals/object-set-prototype-of */
                  "./node_modules/core-js/internals/object-set-prototype-of.js")
                , s = n(/*! ../internals/set-to-string-tag */
                  "./node_modules/core-js/internals/set-to-string-tag.js")
                , l = n(/*! ../internals/hide */
                  "./node_modules/core-js/internals/hide.js")
                , c = n(/*! ../internals/redefine */
                  "./node_modules/core-js/internals/redefine.js")
                , u = n(/*! ../internals/well-known-symbol */
                  "./node_modules/core-js/internals/well-known-symbol.js")
                , p = n(/*! ../internals/is-pure */
                  "./node_modules/core-js/internals/is-pure.js")
                , d = n(/*! ../internals/iterators */
                  "./node_modules/core-js/internals/iterators.js")
                , h = n(/*! ../internals/iterators-core */
                  "./node_modules/core-js/internals/iterators-core.js")
                , f = h.IteratorPrototype
                , y = h.BUGGY_SAFARI_ITERATORS
                , m = u("iterator")
                , g = function () {
                  return this
                };
              e.exports = function (e, t, n, u, h, v, x) {
                i(n, t, u);
                var _, E, b, T = function (e) {
                  if (e === h && C)
                    return C;
                  if (!y && e in j)
                    return j[e];
                  switch (e) {
                    case "keys":
                    case "values":
                    case "entries":
                      return function () {
                        return new n(this, e)
                      }
                  }
                  return function () {
                    return new n(this)
                  }
                }, w = t + " Iterator", O = !1, j = e.prototype, M = j[m] || j["@@iterator"] || h && j[h], C = !y && M || T(h), R = "Array" == t && j.entries || M;
                if (R && (_ = r(R.call(new e)),
                  f !== Object.prototype && _.next && (p || r(_) === f || (a ? a(_, f) : "function" != typeof _[m] && l(_, m, g)),
                    s(_, w, !0, !0),
                    p && (d[w] = g))),
                  "values" == h && M && "values" !== M.name && (O = !0,
                    C = function () {
                      return M.call(this)
                    }
                  ),
                  p && !x || j[m] === C || l(j, m, C),
                  d[t] = C,
                  h)
                  if (E = {
                    values: T("values"),
                    keys: v ? C : T("keys"),
                    entries: T("entries")
                  },
                    x)
                    for (b in E)
                      (y || O || !(b in j)) && c(j, b, E[b]);
                  else
                    o({
                      target: t,
                      proto: !0,
                      forced: y || O
                    }, E);
                return E
              }
            },
          "./node_modules/core-js/internals/descriptors.js": /*!*******************************************************!*\
!*** ./node_modules/core-js/internals/descriptors.js ***!
\*******************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/fails */
                "./node_modules/core-js/internals/fails.js");
              e.exports = !o((function () {
                return 7 != Object.defineProperty({}, "a", {
                  get: function () {
                    return 7
                  }
                }).a
              }
              ))
            },
          "./node_modules/core-js/internals/document-create-element.js": /*!*******************************************************************!*\
!*** ./node_modules/core-js/internals/document-create-element.js ***!
\*******************************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/global */
                "./node_modules/core-js/internals/global.js")
                , i = n(/*! ../internals/is-object */
                  "./node_modules/core-js/internals/is-object.js")
                , r = o.document
                , a = i(r) && i(r.createElement);
              e.exports = function (e) {
                return a ? r.createElement(e) : {}
              }
            },
          "./node_modules/core-js/internals/enum-bug-keys.js": /*!*********************************************************!*\
!*** ./node_modules/core-js/internals/enum-bug-keys.js ***!
\*********************************************************/
            /*! no static exports found */
            function (e, t) {
              e.exports = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"]
            },
          "./node_modules/core-js/internals/export.js": /*!**************************************************!*\
!*** ./node_modules/core-js/internals/export.js ***!
\**************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/global */
                "./node_modules/core-js/internals/global.js")
                , i = n(/*! ../internals/object-get-own-property-descriptor */
                  "./node_modules/core-js/internals/object-get-own-property-descriptor.js").f
                , r = n(/*! ../internals/hide */
                  "./node_modules/core-js/internals/hide.js")
                , a = n(/*! ../internals/redefine */
                  "./node_modules/core-js/internals/redefine.js")
                , s = n(/*! ../internals/set-global */
                  "./node_modules/core-js/internals/set-global.js")
                , l = n(/*! ../internals/copy-constructor-properties */
                  "./node_modules/core-js/internals/copy-constructor-properties.js")
                , c = n(/*! ../internals/is-forced */
                  "./node_modules/core-js/internals/is-forced.js");
              e.exports = function (e, t) {
                var n, u, p, d, h, f = e.target, y = e.global, m = e.stat;
                if (n = y ? o : m ? o[f] || s(f, {}) : (o[f] || {}).prototype)
                  for (u in t) {
                    if (d = t[u],
                      p = e.noTargetGet ? (h = i(n, u)) && h.value : n[u],
                      !c(y ? u : f + (m ? "." : "#") + u, e.forced) && void 0 !== p) {
                      if (typeof d == typeof p)
                        continue;
                      l(d, p)
                    }
                    (e.sham || p && p.sham) && r(d, "sham", !0),
                      a(n, u, d, e)
                  }
              }
            },
          "./node_modules/core-js/internals/fails.js": /*!*************************************************!*\
!*** ./node_modules/core-js/internals/fails.js ***!
\*************************************************/
            /*! no static exports found */
            function (e, t) {
              e.exports = function (e) {
                try {
                  return !!e()
                } catch (e) {
                  return !0
                }
              }
            },
          "./node_modules/core-js/internals/function-to-string.js": /*!**************************************************************!*\
!*** ./node_modules/core-js/internals/function-to-string.js ***!
\**************************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/shared */
                "./node_modules/core-js/internals/shared.js");
              e.exports = o("native-function-to-string", Function.toString)
            },
          "./node_modules/core-js/internals/get-iterator-method.js": /*!***************************************************************!*\
!*** ./node_modules/core-js/internals/get-iterator-method.js ***!
\***************************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/classof */
                "./node_modules/core-js/internals/classof.js")
                , i = n(/*! ../internals/iterators */
                  "./node_modules/core-js/internals/iterators.js")
                , r = n(/*! ../internals/well-known-symbol */
                  "./node_modules/core-js/internals/well-known-symbol.js")("iterator");
              e.exports = function (e) {
                if (null != e)
                  return e[r] || e["@@iterator"] || i[o(e)]
              }
            },
          "./node_modules/core-js/internals/global.js": /*!**************************************************!*\
!*** ./node_modules/core-js/internals/global.js ***!
\**************************************************/
            /*! no static exports found */
            function (e, t, n) {
              (function (t) {
                var n = "object"
                  , o = function (e) {
                    return e && e.Math == Math && e
                  };
                e.exports = o(typeof globalThis == n && globalThis) || o(typeof window == n && window) || o(typeof self == n && self) || o(typeof t == n && t) || Function("return this")()
              }
              ).call(this, n(/*! ./../../webpack/buildin/global.js */
                "./node_modules/webpack/buildin/global.js"))
            },
          "./node_modules/core-js/internals/has.js": /*!***********************************************!*\
!*** ./node_modules/core-js/internals/has.js ***!
\***********************************************/
            /*! no static exports found */
            function (e, t) {
              var n = {}.hasOwnProperty;
              e.exports = function (e, t) {
                return n.call(e, t)
              }
            },
          "./node_modules/core-js/internals/hidden-keys.js": /*!*******************************************************!*\
!*** ./node_modules/core-js/internals/hidden-keys.js ***!
\*******************************************************/
            /*! no static exports found */
            function (e, t) {
              e.exports = {}
            },
          "./node_modules/core-js/internals/hide.js": /*!************************************************!*\
!*** ./node_modules/core-js/internals/hide.js ***!
\************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/descriptors */
                "./node_modules/core-js/internals/descriptors.js")
                , i = n(/*! ../internals/object-define-property */
                  "./node_modules/core-js/internals/object-define-property.js")
                , r = n(/*! ../internals/create-property-descriptor */
                  "./node_modules/core-js/internals/create-property-descriptor.js");
              e.exports = o ? function (e, t, n) {
                return i.f(e, t, r(1, n))
              }
                : function (e, t, n) {
                  return e[t] = n,
                    e
                }
            },
          "./node_modules/core-js/internals/html.js": /*!************************************************!*\
!*** ./node_modules/core-js/internals/html.js ***!
\************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/global */
                "./node_modules/core-js/internals/global.js").document;
              e.exports = o && o.documentElement
            },
          "./node_modules/core-js/internals/ie8-dom-define.js": /*!**********************************************************!*\
!*** ./node_modules/core-js/internals/ie8-dom-define.js ***!
\**********************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/descriptors */
                "./node_modules/core-js/internals/descriptors.js")
                , i = n(/*! ../internals/fails */
                  "./node_modules/core-js/internals/fails.js")
                , r = n(/*! ../internals/document-create-element */
                  "./node_modules/core-js/internals/document-create-element.js");
              e.exports = !o && !i((function () {
                return 7 != Object.defineProperty(r("div"), "a", {
                  get: function () {
                    return 7
                  }
                }).a
              }
              ))
            },
          "./node_modules/core-js/internals/indexed-object.js": /*!**********************************************************!*\
!*** ./node_modules/core-js/internals/indexed-object.js ***!
\**********************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/fails */
                "./node_modules/core-js/internals/fails.js")
                , i = n(/*! ../internals/classof-raw */
                  "./node_modules/core-js/internals/classof-raw.js")
                , r = "".split;
              e.exports = o((function () {
                return !Object("z").propertyIsEnumerable(0)
              }
              )) ? function (e) {
                return "String" == i(e) ? r.call(e, "") : Object(e)
              }
                : Object
            },
          "./node_modules/core-js/internals/internal-state.js": /*!**********************************************************!*\
!*** ./node_modules/core-js/internals/internal-state.js ***!
\**********************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o, i, r, a = n(/*! ../internals/native-weak-map */
                "./node_modules/core-js/internals/native-weak-map.js"), s = n(/*! ../internals/global */
                  "./node_modules/core-js/internals/global.js"), l = n(/*! ../internals/is-object */
                    "./node_modules/core-js/internals/is-object.js"), c = n(/*! ../internals/hide */
                      "./node_modules/core-js/internals/hide.js"), u = n(/*! ../internals/has */
                        "./node_modules/core-js/internals/has.js"), p = n(/*! ../internals/shared-key */
                          "./node_modules/core-js/internals/shared-key.js"), d = n(/*! ../internals/hidden-keys */
                            "./node_modules/core-js/internals/hidden-keys.js"), h = s.WeakMap;
              if (a) {
                var f = new h
                  , y = f.get
                  , m = f.has
                  , g = f.set;
                o = function (e, t) {
                  return g.call(f, e, t),
                    t
                }
                  ,
                  i = function (e) {
                    return y.call(f, e) || {}
                  }
                  ,
                  r = function (e) {
                    return m.call(f, e)
                  }
              } else {
                var v = p("state");
                d[v] = !0,
                  o = function (e, t) {
                    return c(e, v, t),
                      t
                  }
                  ,
                  i = function (e) {
                    return u(e, v) ? e[v] : {}
                  }
                  ,
                  r = function (e) {
                    return u(e, v)
                  }
              }
              e.exports = {
                set: o,
                get: i,
                has: r,
                enforce: function (e) {
                  return r(e) ? i(e) : o(e, {})
                },
                getterFor: function (e) {
                  return function (t) {
                    var n;
                    if (!l(t) || (n = i(t)).type !== e)
                      throw TypeError("Incompatible receiver, " + e + " required");
                    return n
                  }
                }
              }
            },
          "./node_modules/core-js/internals/is-array-iterator-method.js": /*!********************************************************************!*\
!*** ./node_modules/core-js/internals/is-array-iterator-method.js ***!
\********************************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/well-known-symbol */
                "./node_modules/core-js/internals/well-known-symbol.js")
                , i = n(/*! ../internals/iterators */
                  "./node_modules/core-js/internals/iterators.js")
                , r = o("iterator")
                , a = Array.prototype;
              e.exports = function (e) {
                return void 0 !== e && (i.Array === e || a[r] === e)
              }
            },
          "./node_modules/core-js/internals/is-forced.js": /*!*****************************************************!*\
!*** ./node_modules/core-js/internals/is-forced.js ***!
\*****************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/fails */
                "./node_modules/core-js/internals/fails.js")
                , i = /#|\.prototype\./
                , r = function (e, t) {
                  var n = s[a(e)];
                  return n == c || n != l && ("function" == typeof t ? o(t) : !!t)
                }
                , a = r.normalize = function (e) {
                  return String(e).replace(i, ".").toLowerCase()
                }
                , s = r.data = {}
                , l = r.NATIVE = "N"
                , c = r.POLYFILL = "P";
              e.exports = r
            },
          "./node_modules/core-js/internals/is-object.js": /*!*****************************************************!*\
!*** ./node_modules/core-js/internals/is-object.js ***!
\*****************************************************/
            /*! no static exports found */
            function (e, t) {
              e.exports = function (e) {
                return "object" == typeof e ? null !== e : "function" == typeof e
              }
            },
          "./node_modules/core-js/internals/is-pure.js": /*!***************************************************!*\
!*** ./node_modules/core-js/internals/is-pure.js ***!
\***************************************************/
            /*! no static exports found */
            function (e, t) {
              e.exports = !1
            },
          "./node_modules/core-js/internals/iterators-core.js": /*!**********************************************************!*\
!*** ./node_modules/core-js/internals/iterators-core.js ***!
\**********************************************************/
            /*! no static exports found */
            function (e, t, n) {
              "use strict";
              var o, i, r, a = n(/*! ../internals/object-get-prototype-of */
                "./node_modules/core-js/internals/object-get-prototype-of.js"), s = n(/*! ../internals/hide */
                  "./node_modules/core-js/internals/hide.js"), l = n(/*! ../internals/has */
                    "./node_modules/core-js/internals/has.js"), c = n(/*! ../internals/well-known-symbol */
                      "./node_modules/core-js/internals/well-known-symbol.js"), u = n(/*! ../internals/is-pure */
                        "./node_modules/core-js/internals/is-pure.js"), p = c("iterator"), d = !1;
              [].keys && ("next" in (r = [].keys()) ? (i = a(a(r))) !== Object.prototype && (o = i) : d = !0),
                null == o && (o = {}),
                u || l(o, p) || s(o, p, (function () {
                  return this
                }
                )),
                e.exports = {
                  IteratorPrototype: o,
                  BUGGY_SAFARI_ITERATORS: d
                }
            },
          "./node_modules/core-js/internals/iterators.js": /*!*****************************************************!*\
!*** ./node_modules/core-js/internals/iterators.js ***!
\*****************************************************/
            /*! no static exports found */
            function (e, t) {
              e.exports = {}
            },
          "./node_modules/core-js/internals/native-symbol.js": /*!*********************************************************!*\
!*** ./node_modules/core-js/internals/native-symbol.js ***!
\*********************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/fails */
                "./node_modules/core-js/internals/fails.js");
              e.exports = !!Object.getOwnPropertySymbols && !o((function () {
                return !String(Symbol())
              }
              ))
            },
          "./node_modules/core-js/internals/native-weak-map.js": /*!***********************************************************!*\
!*** ./node_modules/core-js/internals/native-weak-map.js ***!
\***********************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/global */
                "./node_modules/core-js/internals/global.js")
                , i = n(/*! ../internals/function-to-string */
                  "./node_modules/core-js/internals/function-to-string.js")
                , r = o.WeakMap;
              e.exports = "function" == typeof r && /native code/.test(i.call(r))
            },
          "./node_modules/core-js/internals/object-create.js": /*!*********************************************************!*\
!*** ./node_modules/core-js/internals/object-create.js ***!
\*********************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/an-object */
                "./node_modules/core-js/internals/an-object.js")
                , i = n(/*! ../internals/object-define-properties */
                  "./node_modules/core-js/internals/object-define-properties.js")
                , r = n(/*! ../internals/enum-bug-keys */
                  "./node_modules/core-js/internals/enum-bug-keys.js")
                , a = n(/*! ../internals/hidden-keys */
                  "./node_modules/core-js/internals/hidden-keys.js")
                , s = n(/*! ../internals/html */
                  "./node_modules/core-js/internals/html.js")
                , l = n(/*! ../internals/document-create-element */
                  "./node_modules/core-js/internals/document-create-element.js")
                , c = n(/*! ../internals/shared-key */
                  "./node_modules/core-js/internals/shared-key.js")("IE_PROTO")
                , u = function () { }
                , p = function () {
                  var e, t = l("iframe"), n = r.length;
                  for (t.style.display = "none",
                    s.appendChild(t),
                    t.src = String("javascript:"),
                    (e = t.contentWindow.document).open(),
                    e.write("<script>document.F=Object<\/script>"),
                    e.close(),
                    p = e.F; n--;)
                    delete p.prototype[r[n]];
                  return p()
                };
              e.exports = Object.create || function (e, t) {
                var n;
                return null !== e ? (u.prototype = o(e),
                  n = new u,
                  u.prototype = null,
                  n[c] = e) : n = p(),
                  void 0 === t ? n : i(n, t)
              }
                ,
                a[c] = !0
            },
          "./node_modules/core-js/internals/object-define-properties.js": /*!********************************************************************!*\
!*** ./node_modules/core-js/internals/object-define-properties.js ***!
\********************************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/descriptors */
                "./node_modules/core-js/internals/descriptors.js")
                , i = n(/*! ../internals/object-define-property */
                  "./node_modules/core-js/internals/object-define-property.js")
                , r = n(/*! ../internals/an-object */
                  "./node_modules/core-js/internals/an-object.js")
                , a = n(/*! ../internals/object-keys */
                  "./node_modules/core-js/internals/object-keys.js");
              e.exports = o ? Object.defineProperties : function (e, t) {
                r(e);
                for (var n, o = a(t), s = o.length, l = 0; s > l;)
                  i.f(e, n = o[l++], t[n]);
                return e
              }
            },
          "./node_modules/core-js/internals/object-define-property.js": /*!******************************************************************!*\
!*** ./node_modules/core-js/internals/object-define-property.js ***!
\******************************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/descriptors */
                "./node_modules/core-js/internals/descriptors.js")
                , i = n(/*! ../internals/ie8-dom-define */
                  "./node_modules/core-js/internals/ie8-dom-define.js")
                , r = n(/*! ../internals/an-object */
                  "./node_modules/core-js/internals/an-object.js")
                , a = n(/*! ../internals/to-primitive */
                  "./node_modules/core-js/internals/to-primitive.js")
                , s = Object.defineProperty;
              t.f = o ? s : function (e, t, n) {
                if (r(e),
                  t = a(t, !0),
                  r(n),
                  i)
                  try {
                    return s(e, t, n)
                  } catch (e) { }
                if ("get" in n || "set" in n)
                  throw TypeError("Accessors not supported");
                return "value" in n && (e[t] = n.value),
                  e
              }
            },
          "./node_modules/core-js/internals/object-get-own-property-descriptor.js": /*!******************************************************************************!*\
!*** ./node_modules/core-js/internals/object-get-own-property-descriptor.js ***!
\******************************************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/descriptors */
                "./node_modules/core-js/internals/descriptors.js")
                , i = n(/*! ../internals/object-property-is-enumerable */
                  "./node_modules/core-js/internals/object-property-is-enumerable.js")
                , r = n(/*! ../internals/create-property-descriptor */
                  "./node_modules/core-js/internals/create-property-descriptor.js")
                , a = n(/*! ../internals/to-indexed-object */
                  "./node_modules/core-js/internals/to-indexed-object.js")
                , s = n(/*! ../internals/to-primitive */
                  "./node_modules/core-js/internals/to-primitive.js")
                , l = n(/*! ../internals/has */
                  "./node_modules/core-js/internals/has.js")
                , c = n(/*! ../internals/ie8-dom-define */
                  "./node_modules/core-js/internals/ie8-dom-define.js")
                , u = Object.getOwnPropertyDescriptor;
              t.f = o ? u : function (e, t) {
                if (e = a(e),
                  t = s(t, !0),
                  c)
                  try {
                    return u(e, t)
                  } catch (e) { }
                if (l(e, t))
                  return r(!i.f.call(e, t), e[t])
              }
            },
          "./node_modules/core-js/internals/object-get-own-property-names.js": /*!*************************************************************************!*\
!*** ./node_modules/core-js/internals/object-get-own-property-names.js ***!
\*************************************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/object-keys-internal */
                "./node_modules/core-js/internals/object-keys-internal.js")
                , i = n(/*! ../internals/enum-bug-keys */
                  "./node_modules/core-js/internals/enum-bug-keys.js").concat("length", "prototype");
              t.f = Object.getOwnPropertyNames || function (e) {
                return o(e, i)
              }
            },
          "./node_modules/core-js/internals/object-get-own-property-symbols.js": /*!***************************************************************************!*\
!*** ./node_modules/core-js/internals/object-get-own-property-symbols.js ***!
\***************************************************************************/
            /*! no static exports found */
            function (e, t) {
              t.f = Object.getOwnPropertySymbols
            },
          "./node_modules/core-js/internals/object-get-prototype-of.js": /*!*******************************************************************!*\
!*** ./node_modules/core-js/internals/object-get-prototype-of.js ***!
\*******************************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/has */
                "./node_modules/core-js/internals/has.js")
                , i = n(/*! ../internals/to-object */
                  "./node_modules/core-js/internals/to-object.js")
                , r = n(/*! ../internals/shared-key */
                  "./node_modules/core-js/internals/shared-key.js")
                , a = n(/*! ../internals/correct-prototype-getter */
                  "./node_modules/core-js/internals/correct-prototype-getter.js")
                , s = r("IE_PROTO")
                , l = Object.prototype;
              e.exports = a ? Object.getPrototypeOf : function (e) {
                return e = i(e),
                  o(e, s) ? e[s] : "function" == typeof e.constructor && e instanceof e.constructor ? e.constructor.prototype : e instanceof Object ? l : null
              }
            },
          "./node_modules/core-js/internals/object-keys-internal.js": /*!****************************************************************!*\
!*** ./node_modules/core-js/internals/object-keys-internal.js ***!
\****************************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/has */
                "./node_modules/core-js/internals/has.js")
                , i = n(/*! ../internals/to-indexed-object */
                  "./node_modules/core-js/internals/to-indexed-object.js")
                , r = n(/*! ../internals/array-includes */
                  "./node_modules/core-js/internals/array-includes.js")
                , a = n(/*! ../internals/hidden-keys */
                  "./node_modules/core-js/internals/hidden-keys.js")
                , s = r(!1);
              e.exports = function (e, t) {
                var n, r = i(e), l = 0, c = [];
                for (n in r)
                  !o(a, n) && o(r, n) && c.push(n);
                for (; t.length > l;)
                  o(r, n = t[l++]) && (~s(c, n) || c.push(n));
                return c
              }
            },
          "./node_modules/core-js/internals/object-keys.js": /*!*******************************************************!*\
!*** ./node_modules/core-js/internals/object-keys.js ***!
\*******************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/object-keys-internal */
                "./node_modules/core-js/internals/object-keys-internal.js")
                , i = n(/*! ../internals/enum-bug-keys */
                  "./node_modules/core-js/internals/enum-bug-keys.js");
              e.exports = Object.keys || function (e) {
                return o(e, i)
              }
            },
          "./node_modules/core-js/internals/object-property-is-enumerable.js": /*!*************************************************************************!*\
!*** ./node_modules/core-js/internals/object-property-is-enumerable.js ***!
\*************************************************************************/
            /*! no static exports found */
            function (e, t, n) {
              "use strict";
              var o = {}.propertyIsEnumerable
                , i = Object.getOwnPropertyDescriptor
                , r = i && !o.call({
                  1: 2
                }, 1);
              t.f = r ? function (e) {
                var t = i(this, e);
                return !!t && t.enumerable
              }
                : o
            },
          "./node_modules/core-js/internals/object-set-prototype-of.js": /*!*******************************************************************!*\
!*** ./node_modules/core-js/internals/object-set-prototype-of.js ***!
\*******************************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/validate-set-prototype-of-arguments */
                "./node_modules/core-js/internals/validate-set-prototype-of-arguments.js");
              e.exports = Object.setPrototypeOf || ("__proto__" in {} ? function () {
                var e, t = !1, n = {};
                try {
                  (e = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set).call(n, []),
                    t = n instanceof Array
                } catch (e) { }
                return function (n, i) {
                  return o(n, i),
                    t ? e.call(n, i) : n.__proto__ = i,
                    n
                }
              }() : void 0)
            },
          "./node_modules/core-js/internals/own-keys.js": /*!****************************************************!*\
!*** ./node_modules/core-js/internals/own-keys.js ***!
\****************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/global */
                "./node_modules/core-js/internals/global.js")
                , i = n(/*! ../internals/object-get-own-property-names */
                  "./node_modules/core-js/internals/object-get-own-property-names.js")
                , r = n(/*! ../internals/object-get-own-property-symbols */
                  "./node_modules/core-js/internals/object-get-own-property-symbols.js")
                , a = n(/*! ../internals/an-object */
                  "./node_modules/core-js/internals/an-object.js")
                , s = o.Reflect;
              e.exports = s && s.ownKeys || function (e) {
                var t = i.f(a(e))
                  , n = r.f;
                return n ? t.concat(n(e)) : t
              }
            },
          "./node_modules/core-js/internals/path.js": /*!************************************************!*\
!*** ./node_modules/core-js/internals/path.js ***!
\************************************************/
            /*! no static exports found */
            function (e, t, n) {
              e.exports = n(/*! ../internals/global */
                "./node_modules/core-js/internals/global.js")
            },
          "./node_modules/core-js/internals/redefine.js": /*!****************************************************!*\
!*** ./node_modules/core-js/internals/redefine.js ***!
\****************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/global */
                "./node_modules/core-js/internals/global.js")
                , i = n(/*! ../internals/shared */
                  "./node_modules/core-js/internals/shared.js")
                , r = n(/*! ../internals/hide */
                  "./node_modules/core-js/internals/hide.js")
                , a = n(/*! ../internals/has */
                  "./node_modules/core-js/internals/has.js")
                , s = n(/*! ../internals/set-global */
                  "./node_modules/core-js/internals/set-global.js")
                , l = n(/*! ../internals/function-to-string */
                  "./node_modules/core-js/internals/function-to-string.js")
                , c = n(/*! ../internals/internal-state */
                  "./node_modules/core-js/internals/internal-state.js")
                , u = c.get
                , p = c.enforce
                , d = String(l).split("toString");
              i("inspectSource", (function (e) {
                return l.call(e)
              }
              )),
                (e.exports = function (e, t, n, i) {
                  var l = !!i && !!i.unsafe
                    , c = !!i && !!i.enumerable
                    , u = !!i && !!i.noTargetGet;
                  "function" == typeof n && ("string" != typeof t || a(n, "name") || r(n, "name", t),
                    p(n).source = d.join("string" == typeof t ? t : "")),
                    e !== o ? (l ? !u && e[t] && (c = !0) : delete e[t],
                      c ? e[t] = n : r(e, t, n)) : c ? e[t] = n : s(t, n)
                }
                )(Function.prototype, "toString", (function () {
                  return "function" == typeof this && u(this).source || l.call(this)
                }
                ))
            },
          "./node_modules/core-js/internals/require-object-coercible.js": /*!********************************************************************!*\
!*** ./node_modules/core-js/internals/require-object-coercible.js ***!
\********************************************************************/
            /*! no static exports found */
            function (e, t) {
              e.exports = function (e) {
                if (null == e)
                  throw TypeError("Can't call method on " + e);
                return e
              }
            },
          "./node_modules/core-js/internals/set-global.js": /*!******************************************************!*\
!*** ./node_modules/core-js/internals/set-global.js ***!
\******************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/global */
                "./node_modules/core-js/internals/global.js")
                , i = n(/*! ../internals/hide */
                  "./node_modules/core-js/internals/hide.js");
              e.exports = function (e, t) {
                try {
                  i(o, e, t)
                } catch (n) {
                  o[e] = t
                }
                return t
              }
            },
          "./node_modules/core-js/internals/set-to-string-tag.js": /*!*************************************************************!*\
!*** ./node_modules/core-js/internals/set-to-string-tag.js ***!
\*************************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/object-define-property */
                "./node_modules/core-js/internals/object-define-property.js").f
                , i = n(/*! ../internals/has */
                  "./node_modules/core-js/internals/has.js")
                , r = n(/*! ../internals/well-known-symbol */
                  "./node_modules/core-js/internals/well-known-symbol.js")("toStringTag");
              e.exports = function (e, t, n) {
                e && !i(e = n ? e : e.prototype, r) && o(e, r, {
                  configurable: !0,
                  value: t
                })
              }
            },
          "./node_modules/core-js/internals/shared-key.js": /*!******************************************************!*\
!*** ./node_modules/core-js/internals/shared-key.js ***!
\******************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/shared */
                "./node_modules/core-js/internals/shared.js")
                , i = n(/*! ../internals/uid */
                  "./node_modules/core-js/internals/uid.js")
                , r = o("keys");
              e.exports = function (e) {
                return r[e] || (r[e] = i(e))
              }
            },
          "./node_modules/core-js/internals/shared.js": /*!**************************************************!*\
!*** ./node_modules/core-js/internals/shared.js ***!
\**************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/global */
                "./node_modules/core-js/internals/global.js")
                , i = n(/*! ../internals/set-global */
                  "./node_modules/core-js/internals/set-global.js")
                , r = n(/*! ../internals/is-pure */
                  "./node_modules/core-js/internals/is-pure.js")
                , a = o["__core-js_shared__"] || i("__core-js_shared__", {});
              (e.exports = function (e, t) {
                return a[e] || (a[e] = void 0 !== t ? t : {})
              }
              )("versions", []).push({
                version: "3.1.3",
                mode: r ? "pure" : "global",
                copyright: "© 2019 Denis Pushkarev (zloirock.ru)"
              })
            },
          "./node_modules/core-js/internals/string-at.js": /*!*****************************************************!*\
!*** ./node_modules/core-js/internals/string-at.js ***!
\*****************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/to-integer */
                "./node_modules/core-js/internals/to-integer.js")
                , i = n(/*! ../internals/require-object-coercible */
                  "./node_modules/core-js/internals/require-object-coercible.js");
              e.exports = function (e, t, n) {
                var r, a, s = String(i(e)), l = o(t), c = s.length;
                return l < 0 || l >= c ? n ? "" : void 0 : (r = s.charCodeAt(l)) < 55296 || r > 56319 || l + 1 === c || (a = s.charCodeAt(l + 1)) < 56320 || a > 57343 ? n ? s.charAt(l) : r : n ? s.slice(l, l + 2) : a - 56320 + (r - 55296 << 10) + 65536
              }
            },
          "./node_modules/core-js/internals/to-absolute-index.js": /*!*************************************************************!*\
!*** ./node_modules/core-js/internals/to-absolute-index.js ***!
\*************************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/to-integer */
                "./node_modules/core-js/internals/to-integer.js")
                , i = Math.max
                , r = Math.min;
              e.exports = function (e, t) {
                var n = o(e);
                return n < 0 ? i(n + t, 0) : r(n, t)
              }
            },
          "./node_modules/core-js/internals/to-indexed-object.js": /*!*************************************************************!*\
!*** ./node_modules/core-js/internals/to-indexed-object.js ***!
\*************************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/indexed-object */
                "./node_modules/core-js/internals/indexed-object.js")
                , i = n(/*! ../internals/require-object-coercible */
                  "./node_modules/core-js/internals/require-object-coercible.js");
              e.exports = function (e) {
                return o(i(e))
              }
            },
          "./node_modules/core-js/internals/to-integer.js": /*!******************************************************!*\
!*** ./node_modules/core-js/internals/to-integer.js ***!
\******************************************************/
            /*! no static exports found */
            function (e, t) {
              var n = Math.ceil
                , o = Math.floor;
              e.exports = function (e) {
                return isNaN(e = +e) ? 0 : (e > 0 ? o : n)(e)
              }
            },
          "./node_modules/core-js/internals/to-length.js": /*!*****************************************************!*\
!*** ./node_modules/core-js/internals/to-length.js ***!
\*****************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/to-integer */
                "./node_modules/core-js/internals/to-integer.js")
                , i = Math.min;
              e.exports = function (e) {
                return e > 0 ? i(o(e), 9007199254740991) : 0
              }
            },
          "./node_modules/core-js/internals/to-object.js": /*!*****************************************************!*\
!*** ./node_modules/core-js/internals/to-object.js ***!
\*****************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/require-object-coercible */
                "./node_modules/core-js/internals/require-object-coercible.js");
              e.exports = function (e) {
                return Object(o(e))
              }
            },
          "./node_modules/core-js/internals/to-primitive.js": /*!********************************************************!*\
!*** ./node_modules/core-js/internals/to-primitive.js ***!
\********************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/is-object */
                "./node_modules/core-js/internals/is-object.js");
              e.exports = function (e, t) {
                if (!o(e))
                  return e;
                var n, i;
                if (t && "function" == typeof (n = e.toString) && !o(i = n.call(e)))
                  return i;
                if ("function" == typeof (n = e.valueOf) && !o(i = n.call(e)))
                  return i;
                if (!t && "function" == typeof (n = e.toString) && !o(i = n.call(e)))
                  return i;
                throw TypeError("Can't convert object to primitive value")
              }
            },
          "./node_modules/core-js/internals/uid.js": /*!***********************************************!*\
!*** ./node_modules/core-js/internals/uid.js ***!
\***********************************************/
            /*! no static exports found */
            function (e, t) {
              var n = 0
                , o = Math.random();
              e.exports = function (e) {
                return "Symbol(".concat(void 0 === e ? "" : e, ")_", (++n + o).toString(36))
              }
            },
          "./node_modules/core-js/internals/validate-set-prototype-of-arguments.js": /*!*******************************************************************************!*\
!*** ./node_modules/core-js/internals/validate-set-prototype-of-arguments.js ***!
\*******************************************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/is-object */
                "./node_modules/core-js/internals/is-object.js")
                , i = n(/*! ../internals/an-object */
                  "./node_modules/core-js/internals/an-object.js");
              e.exports = function (e, t) {
                if (i(e),
                  !o(t) && null !== t)
                  throw TypeError("Can't set " + String(t) + " as a prototype")
              }
            },
          "./node_modules/core-js/internals/well-known-symbol.js": /*!*************************************************************!*\
!*** ./node_modules/core-js/internals/well-known-symbol.js ***!
\*************************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/global */
                "./node_modules/core-js/internals/global.js")
                , i = n(/*! ../internals/shared */
                  "./node_modules/core-js/internals/shared.js")
                , r = n(/*! ../internals/uid */
                  "./node_modules/core-js/internals/uid.js")
                , a = n(/*! ../internals/native-symbol */
                  "./node_modules/core-js/internals/native-symbol.js")
                , s = o.Symbol
                , l = i("wks");
              e.exports = function (e) {
                return l[e] || (l[e] = a && s[e] || (a ? s : r)("Symbol." + e))
              }
            },
          "./node_modules/core-js/modules/es.array.from.js": /*!*******************************************************!*\
!*** ./node_modules/core-js/modules/es.array.from.js ***!
\*******************************************************/
            /*! no static exports found */
            function (e, t, n) {
              var o = n(/*! ../internals/export */
                "./node_modules/core-js/internals/export.js")
                , i = n(/*! ../internals/array-from */
                  "./node_modules/core-js/internals/array-from.js");
              o({
                target: "Array",
                stat: !0,
                forced: !n(/*! ../internals/check-correctness-of-iteration */
                  "./node_modules/core-js/internals/check-correctness-of-iteration.js")((function (e) {
                    Array.from(e)
                  }
                  ))
              }, {
                from: i
              })
            },
          "./node_modules/core-js/modules/es.string.iterator.js": /*!************************************************************!*\
!*** ./node_modules/core-js/modules/es.string.iterator.js ***!
\************************************************************/
            /*! no static exports found */
            function (e, t, n) {
              "use strict";
              var o = n(/*! ../internals/string-at */
                "./node_modules/core-js/internals/string-at.js")
                , i = n(/*! ../internals/internal-state */
                  "./node_modules/core-js/internals/internal-state.js")
                , r = n(/*! ../internals/define-iterator */
                  "./node_modules/core-js/internals/define-iterator.js")
                , a = i.set
                , s = i.getterFor("String Iterator");
              r(String, "String", (function (e) {
                a(this, {
                  type: "String Iterator",
                  string: String(e),
                  index: 0
                })
              }
              ), (function () {
                var e, t = s(this), n = t.string, i = t.index;
                return i >= n.length ? {
                  value: void 0,
                  done: !0
                } : (e = o(n, i, !0),
                  t.index += e.length,
                {
                  value: e,
                  done: !1
                })
              }
              ))
            },
          "./node_modules/webpack/buildin/global.js": /*!***********************************!*\
!*** (webpack)/buildin/global.js ***!
\***********************************/
            /*! no static exports found */
            function (e, t) {
              var n;
              n = function () {
                return this
              }();
              try {
                n = n || Function("return this")() || (0,
                  eval)("this")
              } catch (e) {
                "object" == typeof window && (n = window)
              }
              e.exports = n
            },
          "./src/default-attrs.json": /*!********************************!*\
!*** ./src/default-attrs.json ***!
\********************************/
            /*! exports provided: xmlns, width, height, viewBox, fill, stroke, stroke-width, stroke-linecap, stroke-linejoin, default */
            function (e) {
              e.exports = {
                xmlns: "http://www.w3.org/2000/svg",
                width: 24,
                height: 24,
                viewBox: "0 0 24 24",
                fill: "none",
                stroke: "currentColor",
                "stroke-width": 2,
                "stroke-linecap": "round",
                "stroke-linejoin": "round"
              }
            },
          "./src/icon.js": /*!*********************!*\
!*** ./src/icon.js ***!
\*********************/
            /*! no static exports found */
            function (e, t, n) {
              "use strict";
              Object.defineProperty(t, "__esModule", {
                value: !0
              });
              var o = Object.assign || function (e) {
                for (var t = 1; t < arguments.length; t++) {
                  var n = arguments[t];
                  for (var o in n)
                    Object.prototype.hasOwnProperty.call(n, o) && (e[o] = n[o])
                }
                return e
              }
                , i = function () {
                  function e(e, t) {
                    for (var n = 0; n < t.length; n++) {
                      var o = t[n];
                      o.enumerable = o.enumerable || !1,
                        o.configurable = !0,
                        "value" in o && (o.writable = !0),
                        Object.defineProperty(e, o.key, o)
                    }
                  }
                  return function (t, n, o) {
                    return n && e(t.prototype, n),
                      o && e(t, o),
                      t
                  }
                }()
                , r = s(n(/*! classnames/dedupe */
                  "./node_modules/classnames/dedupe.js"))
                , a = s(n(/*! ./default-attrs.json */
                  "./src/default-attrs.json"));
              function s(e) {
                return e && e.__esModule ? e : {
                  default: e
                }
              }
              function l(e, t) {
                if (!(e instanceof t))
                  throw new TypeError("Cannot call a class as a function")
              }
              var c = function () {
                function e(t, n) {
                  var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [];
                  l(this, e),
                    this.name = t,
                    this.contents = n,
                    this.tags = i,
                    this.attrs = o({}, a.default, {
                      class: "feather feather-" + t
                    })
                }
                return i(e, [{
                  key: "toSvg",
                  value: function () {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}
                      , t = o({}, this.attrs, e, {
                        class: (0,
                          r.default)(this.attrs.class, e.class)
                      });
                    return "<svg " + u(t) + ">" + this.contents + "</svg>"
                  }
                }, {
                  key: "toString",
                  value: function () {
                    return this.contents
                  }
                }]),
                  e
              }();
              function u(e) {
                return Object.keys(e).map((function (t) {
                  return t + '="' + e[t] + '"'
                }
                )).join(" ")
              }
              t.default = c
            },
          "./src/icons.js": /*!**********************!*\
!*** ./src/icons.js ***!
\**********************/
            /*! no static exports found */
            function (e, t, n) {
              "use strict";
              Object.defineProperty(t, "__esModule", {
                value: !0
              });
              var o = a(n(/*! ./icon */
                "./src/icon.js"))
                , i = a(n(/*! ../dist/icons.json */
                  "./dist/icons.json"))
                , r = a(n(/*! ./tags.json */
                  "./src/tags.json"));
              function a(e) {
                return e && e.__esModule ? e : {
                  default: e
                }
              }
              t.default = Object.keys(i.default).map((function (e) {
                return new o.default(e, i.default[e], r.default[e])
              }
              )).reduce((function (e, t) {
                return e[t.name] = t,
                  e
              }
              ), {})
            },
          "./src/index.js": /*!**********************!*\
!*** ./src/index.js ***!
\**********************/
            /*! no static exports found */
            function (e, t, n) {
              "use strict";
              var o = a(n(/*! ./icons */
                "./src/icons.js"))
                , i = a(n(/*! ./to-svg */
                  "./src/to-svg.js"))
                , r = a(n(/*! ./replace */
                  "./src/replace.js"));
              function a(e) {
                return e && e.__esModule ? e : {
                  default: e
                }
              }
              e.exports = {
                icons: o.default,
                toSvg: i.default,
                replace: r.default
              }
            },
          "./src/replace.js": /*!************************!*\
!*** ./src/replace.js ***!
\************************/
            /*! no static exports found */
            function (e, t, n) {
              "use strict";
              Object.defineProperty(t, "__esModule", {
                value: !0
              });
              var o = Object.assign || function (e) {
                for (var t = 1; t < arguments.length; t++) {
                  var n = arguments[t];
                  for (var o in n)
                    Object.prototype.hasOwnProperty.call(n, o) && (e[o] = n[o])
                }
                return e
              }
                , i = a(n(/*! classnames/dedupe */
                  "./node_modules/classnames/dedupe.js"))
                , r = a(n(/*! ./icons */
                  "./src/icons.js"));
              function a(e) {
                return e && e.__esModule ? e : {
                  default: e
                }
              }
              function s(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}
                  , n = l(e)
                  , a = n["data-feather"];
                delete n["data-feather"];
                var s = r.default[a].toSvg(o({}, t, n, {
                  class: (0,
                    i.default)(t.class, n.class)
                }))
                  , c = (new DOMParser).parseFromString(s, "image/svg+xml")
                  , u = c.querySelector("svg");
                e.parentNode.replaceChild(u, e)
              }
              function l(e) {
                return Array.from(e.attributes).reduce((function (e, t) {
                  return e[t.name] = t.value,
                    e
                }
                ), {})
              }
              t.default = function () {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                if ("undefined" == typeof document)
                  throw new Error("`feather.replace()` only works in a browser environment.");
                var t = document.querySelectorAll("[data-feather]");
                Array.from(t).forEach((function (t) {
                  return s(t, e)
                }
                ))
              }
            },
          "./src/tags.json": /*!***********************!*\
!*** ./src/tags.json ***!
\***********************/
            /*! exports provided: activity, airplay, alert-circle, alert-octagon, alert-triangle, align-center, align-justify, align-left, align-right, anchor, archive, at-sign, award, aperture, bar-chart, bar-chart-2, battery, battery-charging, bell, bell-off, bluetooth, book-open, book, bookmark, box, briefcase, calendar, camera, cast, circle, clipboard, clock, cloud-drizzle, cloud-lightning, cloud-rain, cloud-snow, cloud, codepen, codesandbox, code, coffee, columns, command, compass, copy, corner-down-left, corner-down-right, corner-left-down, corner-left-up, corner-right-down, corner-right-up, corner-up-left, corner-up-right, cpu, credit-card, crop, crosshair, database, delete, disc, dollar-sign, droplet, edit, edit-2, edit-3, eye, eye-off, external-link, facebook, fast-forward, figma, file-minus, file-plus, file-text, film, filter, flag, folder-minus, folder-plus, folder, framer, frown, gift, git-branch, git-commit, git-merge, git-pull-request, github, gitlab, globe, hard-drive, hash, headphones, heart, help-circle, hexagon, home, image, inbox, instagram, key, layers, layout, life-bouy, link, link-2, linkedin, list, lock, log-in, log-out, mail, map-pin, map, maximize, maximize-2, meh, menu, message-circle, message-square, mic-off, mic, minimize, minimize-2, minus, monitor, moon, more-horizontal, more-vertical, mouse-pointer, move, music, navigation, navigation-2, octagon, package, paperclip, pause, pause-circle, pen-tool, percent, phone-call, phone-forwarded, phone-incoming, phone-missed, phone-off, phone-outgoing, phone, play, pie-chart, play-circle, plus, plus-circle, plus-square, pocket, power, printer, radio, refresh-cw, refresh-ccw, repeat, rewind, rotate-ccw, rotate-cw, rss, save, scissors, search, send, settings, share-2, shield, shield-off, shopping-bag, shopping-cart, shuffle, skip-back, skip-forward, slack, slash, sliders, smartphone, smile, speaker, star, stop-circle, sun, sunrise, sunset, tablet, tag, target, terminal, thermometer, thumbs-down, thumbs-up, toggle-left, toggle-right, tool, trash, trash-2, triangle, truck, tv, twitch, twitter, type, umbrella, unlock, user-check, user-minus, user-plus, user-x, user, users, video-off, video, voicemail, volume, volume-1, volume-2, volume-x, watch, wifi-off, wifi, wind, x-circle, x-octagon, x-square, x, youtube, zap-off, zap, zoom-in, zoom-out, default */
            function (e) {
              e.exports = {
                activity: ["pulse", "health", "action", "motion"],
                airplay: ["stream", "cast", "mirroring"],
                "alert-circle": ["warning", "alert", "danger"],
                "alert-octagon": ["warning", "alert", "danger"],
                "alert-triangle": ["warning", "alert", "danger"],
                "align-center": ["text alignment", "center"],
                "align-justify": ["text alignment", "justified"],
                "align-left": ["text alignment", "left"],
                "align-right": ["text alignment", "right"],
                anchor: [],
                archive: ["index", "box"],
                "at-sign": ["mention", "at", "email", "message"],
                award: ["achievement", "badge"],
                aperture: ["camera", "photo"],
                "bar-chart": ["statistics", "diagram", "graph"],
                "bar-chart-2": ["statistics", "diagram", "graph"],
                battery: ["power", "electricity"],
                "battery-charging": ["power", "electricity"],
                bell: ["alarm", "notification", "sound"],
                "bell-off": ["alarm", "notification", "silent"],
                bluetooth: ["wireless"],
                "book-open": ["read", "library"],
                book: ["read", "dictionary", "booklet", "magazine", "library"],
                bookmark: ["read", "clip", "marker", "tag"],
                box: ["cube"],
                briefcase: ["work", "bag", "baggage", "folder"],
                calendar: ["date"],
                camera: ["photo"],
                cast: ["chromecast", "airplay"],
                circle: ["off", "zero", "record"],
                clipboard: ["copy"],
                clock: ["time", "watch", "alarm"],
                "cloud-drizzle": ["weather", "shower"],
                "cloud-lightning": ["weather", "bolt"],
                "cloud-rain": ["weather"],
                "cloud-snow": ["weather", "blizzard"],
                cloud: ["weather"],
                codepen: ["logo"],
                codesandbox: ["logo"],
                code: ["source", "programming"],
                coffee: ["drink", "cup", "mug", "tea", "cafe", "hot", "beverage"],
                columns: ["layout"],
                command: ["keyboard", "cmd", "terminal", "prompt"],
                compass: ["navigation", "safari", "travel", "direction"],
                copy: ["clone", "duplicate"],
                "corner-down-left": ["arrow", "return"],
                "corner-down-right": ["arrow"],
                "corner-left-down": ["arrow"],
                "corner-left-up": ["arrow"],
                "corner-right-down": ["arrow"],
                "corner-right-up": ["arrow"],
                "corner-up-left": ["arrow"],
                "corner-up-right": ["arrow"],
                cpu: ["processor", "technology"],
                "credit-card": ["purchase", "payment", "cc"],
                crop: ["photo", "image"],
                crosshair: ["aim", "target"],
                database: ["storage", "memory"],
                delete: ["remove"],
                disc: ["album", "cd", "dvd", "music"],
                "dollar-sign": ["currency", "money", "payment"],
                droplet: ["water"],
                edit: ["pencil", "change"],
                "edit-2": ["pencil", "change"],
                "edit-3": ["pencil", "change"],
                eye: ["view", "watch"],
                "eye-off": ["view", "watch", "hide", "hidden"],
                "external-link": ["outbound"],
                facebook: ["logo", "social"],
                "fast-forward": ["music"],
                figma: ["logo", "design", "tool"],
                "file-minus": ["delete", "remove", "erase"],
                "file-plus": ["add", "create", "new"],
                "file-text": ["data", "txt", "pdf"],
                film: ["movie", "video"],
                filter: ["funnel", "hopper"],
                flag: ["report"],
                "folder-minus": ["directory"],
                "folder-plus": ["directory"],
                folder: ["directory"],
                framer: ["logo", "design", "tool"],
                frown: ["emoji", "face", "bad", "sad", "emotion"],
                gift: ["present", "box", "birthday", "party"],
                "git-branch": ["code", "version control"],
                "git-commit": ["code", "version control"],
                "git-merge": ["code", "version control"],
                "git-pull-request": ["code", "version control"],
                github: ["logo", "version control"],
                gitlab: ["logo", "version control"],
                globe: ["world", "browser", "language", "translate"],
                "hard-drive": ["computer", "server", "memory", "data"],
                hash: ["hashtag", "number", "pound"],
                headphones: ["music", "audio", "sound"],
                heart: ["like", "love", "emotion"],
                "help-circle": ["question mark"],
                hexagon: ["shape", "node.js", "logo"],
                home: ["house", "living"],
                image: ["picture"],
                inbox: ["email"],
                instagram: ["logo", "camera"],
                key: ["password", "login", "authentication", "secure"],
                layers: ["stack"],
                layout: ["window", "webpage"],
                "life-bouy": ["help", "life ring", "support"],
                link: ["chain", "url"],
                "link-2": ["chain", "url"],
                linkedin: ["logo", "social media"],
                list: ["options"],
                lock: ["security", "password", "secure"],
                "log-in": ["sign in", "arrow", "enter"],
                "log-out": ["sign out", "arrow", "exit"],
                mail: ["email", "message"],
                "map-pin": ["location", "navigation", "travel", "marker"],
                map: ["location", "navigation", "travel"],
                maximize: ["fullscreen"],
                "maximize-2": ["fullscreen", "arrows", "expand"],
                meh: ["emoji", "face", "neutral", "emotion"],
                menu: ["bars", "navigation", "hamburger"],
                "message-circle": ["comment", "chat"],
                "message-square": ["comment", "chat"],
                "mic-off": ["record", "sound", "mute"],
                mic: ["record", "sound", "listen"],
                minimize: ["exit fullscreen", "close"],
                "minimize-2": ["exit fullscreen", "arrows", "close"],
                minus: ["subtract"],
                monitor: ["tv", "screen", "display"],
                moon: ["dark", "night"],
                "more-horizontal": ["ellipsis"],
                "more-vertical": ["ellipsis"],
                "mouse-pointer": ["arrow", "cursor"],
                move: ["arrows"],
                music: ["note"],
                navigation: ["location", "travel"],
                "navigation-2": ["location", "travel"],
                octagon: ["stop"],
                package: ["box", "container"],
                paperclip: ["attachment"],
                pause: ["music", "stop"],
                "pause-circle": ["music", "audio", "stop"],
                "pen-tool": ["vector", "drawing"],
                percent: ["discount"],
                "phone-call": ["ring"],
                "phone-forwarded": ["call"],
                "phone-incoming": ["call"],
                "phone-missed": ["call"],
                "phone-off": ["call", "mute"],
                "phone-outgoing": ["call"],
                phone: ["call"],
                play: ["music", "start"],
                "pie-chart": ["statistics", "diagram"],
                "play-circle": ["music", "start"],
                plus: ["add", "new"],
                "plus-circle": ["add", "new"],
                "plus-square": ["add", "new"],
                pocket: ["logo", "save"],
                power: ["on", "off"],
                printer: ["fax", "office", "device"],
                radio: ["signal"],
                "refresh-cw": ["synchronise", "arrows"],
                "refresh-ccw": ["arrows"],
                repeat: ["loop", "arrows"],
                rewind: ["music"],
                "rotate-ccw": ["arrow"],
                "rotate-cw": ["arrow"],
                rss: ["feed", "subscribe"],
                save: ["floppy disk"],
                scissors: ["cut"],
                search: ["find", "magnifier", "magnifying glass"],
                send: ["message", "mail", "email", "paper airplane", "paper aeroplane"],
                settings: ["cog", "edit", "gear", "preferences"],
                "share-2": ["network", "connections"],
                shield: ["security", "secure"],
                "shield-off": ["security", "insecure"],
                "shopping-bag": ["ecommerce", "cart", "purchase", "store"],
                "shopping-cart": ["ecommerce", "cart", "purchase", "store"],
                shuffle: ["music"],
                "skip-back": ["music"],
                "skip-forward": ["music"],
                slack: ["logo"],
                slash: ["ban", "no"],
                sliders: ["settings", "controls"],
                smartphone: ["cellphone", "device"],
                smile: ["emoji", "face", "happy", "good", "emotion"],
                speaker: ["audio", "music"],
                star: ["bookmark", "favorite", "like"],
                "stop-circle": ["media", "music"],
                sun: ["brightness", "weather", "light"],
                sunrise: ["weather", "time", "morning", "day"],
                sunset: ["weather", "time", "evening", "night"],
                tablet: ["device"],
                tag: ["label"],
                target: ["logo", "bullseye"],
                terminal: ["code", "command line", "prompt"],
                thermometer: ["temperature", "celsius", "fahrenheit", "weather"],
                "thumbs-down": ["dislike", "bad", "emotion"],
                "thumbs-up": ["like", "good", "emotion"],
                "toggle-left": ["on", "off", "switch"],
                "toggle-right": ["on", "off", "switch"],
                tool: ["settings", "spanner"],
                trash: ["garbage", "delete", "remove", "bin"],
                "trash-2": ["garbage", "delete", "remove", "bin"],
                triangle: ["delta"],
                truck: ["delivery", "van", "shipping", "transport", "lorry"],
                tv: ["television", "stream"],
                twitch: ["logo"],
                twitter: ["logo", "social"],
                type: ["text"],
                umbrella: ["rain", "weather"],
                unlock: ["security"],
                "user-check": ["followed", "subscribed"],
                "user-minus": ["delete", "remove", "unfollow", "unsubscribe"],
                "user-plus": ["new", "add", "create", "follow", "subscribe"],
                "user-x": ["delete", "remove", "unfollow", "unsubscribe", "unavailable"],
                user: ["person", "account"],
                users: ["group"],
                "video-off": ["camera", "movie", "film"],
                video: ["camera", "movie", "film"],
                voicemail: ["phone"],
                volume: ["music", "sound", "mute"],
                "volume-1": ["music", "sound"],
                "volume-2": ["music", "sound"],
                "volume-x": ["music", "sound", "mute"],
                watch: ["clock", "time"],
                "wifi-off": ["disabled"],
                wifi: ["connection", "signal", "wireless"],
                wind: ["weather", "air"],
                "x-circle": ["cancel", "close", "delete", "remove", "times", "clear"],
                "x-octagon": ["delete", "stop", "alert", "warning", "times", "clear"],
                "x-square": ["cancel", "close", "delete", "remove", "times", "clear"],
                x: ["cancel", "close", "delete", "remove", "times", "clear"],
                youtube: ["logo", "video", "play"],
                "zap-off": ["flash", "camera", "lightning"],
                zap: ["flash", "camera", "lightning"],
                "zoom-in": ["magnifying glass"],
                "zoom-out": ["magnifying glass"]
              }
            },
          "./src/to-svg.js": /*!***********************!*\
!*** ./src/to-svg.js ***!
\***********************/
            /*! no static exports found */
            function (e, t, n) {
              "use strict";
              Object.defineProperty(t, "__esModule", {
                value: !0
              });
              var o, i = n(/*! ./icons */
                "./src/icons.js"), r = (o = i) && o.__esModule ? o : {
                  default: o
                };
              t.default = function (e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                if (console.warn("feather.toSvg() is deprecated. Please use feather.icons[name].toSvg() instead."),
                  !e)
                  throw new Error("The required `key` (icon name) parameter is missing.");
                if (!r.default[e])
                  throw new Error("No icon matching '" + e + "'. See the complete list of icons at https://feathericons.com");
                return r.default[e].toSvg(t)
              }
            },
          0: /*!**************************************************!*\
!*** multi core-js/es/array/from ./src/index.js ***!
\**************************************************/
            /*! no static exports found */
            function (e, t, n) {
              n(/*! core-js/es/array/from */
                "./node_modules/core-js/es/array/from.js"),
                e.exports = n(/*! /home/travis/build/feathericons/feather/src/index.js */
                  "./src/index.js")
            }
        })
      }
      ,
      e.exports = o()
  }
  , function (e, t, n) {
    "use strict";
    n.r(t);
    var o = n(0);
    document.addEventListener("DOMContentLoaded", (function () {
      let e = 0;
      $("#previous-btn").click(s),
        $("#next-btn").click(a),
        $("#zoom-in-btn").mousedown(() => e = setInterval(() => r("in"), 5)),
        $("#zoom-out-btn").mousedown(() => e = setInterval(() => r("out"), 5)),
        $("#zoom-in-btn, #zoom-out-btn").on("mouseleave mouseup", (function () {
          setTimeout(() => clearTimeout(e), 500)
        }
        )),
        $(".nav-link").on("click", e => {
          0 != $("iframe#yt-player").length && $(".skip-video-button").click();
          $(e.currentTarget).data("enable-video");
          l($(e.currentTarget).data("view-id"))
        }
        ),
        $(".nav-item-group").on("mouseleave", e => {
          window.sr.clean($(".view-selector, .view-selector span")),
            $(".view-selector, .view-selector span").css("visibility", "hidden")
        }
        ),
        $(".nav-item-group").on("click mouseenter", e => {
          let t = $(e.currentTarget).children(".view-selector");
          "hidden" === t.css("visibility") ? (window.sr.clean($(".view-selector, .view-selector span")),
            $(".view-selector, .view-selector span").css("visibility", "hidden"),
            window.sr.reveal(t, {
              origin: "right",
              distance: "50px"
            }),
            window.sr.reveal(t.children("span"), {
              delay: 100,
              interval: 50,
              origin: "right",
              distance: "50px"
            })) : (window.sr.clean(t),
              window.sr.clean(t.children("span")),
              $(".view-selector, .view-selector span").css("visibility", "hidden"))
        }
        ),
        $(".skip-video-button").click((function () {
          $("#yt-video").fadeOut(),
            $("#yt-player").remove(),
            $("#yt-video").append('<div id="yt-player"></div>'),
            $(this).css("visibility", "hidden"),
            $(".controls").fadeIn(),
            $(".logo").fadeIn(),
            window.changeViewName(document.querySelector("a-tour").components.tour.data.current_pano_id)
        }
        )),
        $("#view-name>#title").on("click", () => {
          let e = document.querySelector("a-tour").components.tour
            , t = e.data.current_pano_id
            , n = e.getInitialViewId();
          t && t != n && (0 != $("iframe#yt-player").length && $(".skip-video-button").click(),
            l(n))
        }
        ),
        $("#description-text").on("click", () => {
          if (0 == $("iframe#yt-player").length) {
            let e = document.querySelector("a-tour").components.tour.data.current_pano_id.split("_");
            if ("TER" == e[1] || "SEMI" == e[1] || "DET" == e[1]) {
              if ("CENTER" == e[2])
                return;
              e[2] = "CENTER",
                l(e.join("_"))
            }
          }
        }
        ),
        $(window).on("wheel touchmove", (function () {
          const e = Math.sign(event.deltaY);
          console.log(e),
            1 == e && ($(window).off("wheel touchmove"),
              i())
        }
        )),
        $(".amenities, .intro").one("click", i)
    }
    ), !1);
    let i = () => {
      $(".intro").fadeOut();
      let e = document.querySelector("a-tour").components.tour;
      setTimeout((function () {
        e.setHotspotsVisible()
      }
      ), 100),
        window.sr.reveal(".amenity", {
          delay: 200,
          interval: 100,
          origin: "left",
          distance: "50px"
        }),
        window.sr.reveal(".control", {
          delay: 200,
          interval: 100,
          scale: .85
        }),
        $("#view-name").delay(200).fadeIn(),
        $("html, body").css({
          overflow: "hidden",
          height: "100%"
        }),
        setTimeout(() => {
          $(window).on("wheel", (function () {
            if (0 == $("iframe#yt-player").length) {
              const e = Math.sign(event.deltaY);
              1 == e ? r("in") : -1 == e && r("out")
            }
          }
          ))
        }
          , 1500)
    }
      , r = e => {
        let t = document.querySelector("a-camera")
          , n = t.getAttribute("zoom");
        n = "in" == e ? n < 3 ? parseFloat(n) + .02 : 3 : n > .8 ? parseFloat(n) - .02 : .8,
          t.setAttribute("zoom", n)
      }
      , a = () => {
        let e = document.querySelector("a-panorama#main").components.panorama.data.next;
        e && l(e)
      }
      , s = () => {
        let e = document.querySelector("a-tour").components.tour
          , t = [...e.data.previous_pano_ids]
          , n = t.pop();
        n && (e.el.setAttribute("tour", "previous_pano_ids", t),
          e.loadSceneId(n))
      }
      , l = e => {
        if (e) {
          var t = document.querySelector("a-tour").components.tour;
          t.pushPreviousPanoIds(),
            t.loadSceneId(e, !1)
        }
      }
      ;
    window.displayDimention = e => {
      $("#dimention-info").empty();
      let t = e.split("_")
        , n = e.slice(-2);
      if ("ER" == n || "C1" == n || "C2" == n || "C3" == n) {
        let t = `assets/info/${e.split("_").slice(0, 2).join("_")}.png`;
        $("#dimention-info").append(`<img src="${t}" alt="Dimention" />`)
      }
      let i = $("#video-play-link");
      if ("TER" == t[1] || "SEMI" == t[1] || "DET" == t[1]) {
        let e = document.querySelector("a-tour").components.tour.data.current_pano_id
          , t = `https://www.youtube.com/embed/${o.a[e].videoId}?fs=1&autoplay=1`;
        i.fadeIn(),
          i.parent().attr("href", t)
      } else
        i.fadeOut()
    }
      ,
      window.changeViewName = e => {
        var t = o.a[e].viewDisplayText;
        t && 0 == $("iframe#yt-player").length && $("#description-text").text(t),
          "MP3_OVERVIEW" == e || "BB_OVERVIEW" == e ? ($("#view-name").children().removeClass("effect-underline"),
            $("#view-name h3").removeAttr("data-balloon-pos"),
            $("#view-name p").removeAttr("data-balloon-pos")) : ($("#view-name").children().addClass("effect-underline"),
              $("#view-name h3").attr("data-balloon-pos", "right"),
              $("#view-name p").attr("data-balloon-pos", "right"))
      }
      ,
      window.addEventListener("keypress", (function (e) {
        32 == e.keyCode && 0 != $("iframe#yt-player").length && (1 == window.ytPlayer.getPlayerState() ? window.ytPlayer.pauseVideo() : window.ytPlayer.playVideo())
      }
      ))
  }
  , function (e, t) {
    !function (e) {
      function t(o) {
        if (n[o])
          return n[o].exports;
        var i = n[o] = {
          i: o,
          l: !1,
          exports: {}
        };
        return e[o].call(i.exports, i, i.exports, t),
          i.l = !0,
          i.exports
      }
      var n = {};
      t.m = e,
        t.c = n,
        t.i = function (e) {
          return e
        }
        ,
        t.d = function (e, n, o) {
          t.o(e, n) || Object.defineProperty(e, n, {
            configurable: !1,
            enumerable: !0,
            get: o
          })
        }
        ,
        t.n = function (e) {
          var n = e && e.__esModule ? function () {
            return e.default
          }
            : function () {
              return e
            }
            ;
          return t.d(n, "a", n),
            n
        }
        ,
        t.o = function (e, t) {
          return Object.prototype.hasOwnProperty.call(e, t)
        }
        ,
        t.p = "",
        t(t.s = 46)
    }([function (e, t) {
      var n = e.exports = "undefined" != typeof window && window.Math == Math ? window : "undefined" != typeof self && self.Math == Math ? self : Function("return this")();
      "number" == typeof __g && (__g = n)
    }
      , function (e, t, n) {
        var o = n(37)("wks")
          , i = n(40)
          , r = n(0).Symbol
          , a = "function" == typeof r;
        (e.exports = function (e) {
          return o[e] || (o[e] = a && r[e] || (a ? r : i)("Symbol." + e))
        }
        ).store = o
      }
      , function (e, t) {
        var n = e.exports = {
          version: "2.6.11"
        };
        "number" == typeof __e && (__e = n)
      }
      , function (e, t, n) {
        var o = n(8);
        e.exports = function (e) {
          if (!o(e))
            throw TypeError(e + " is not an object!");
          return e
        }
      }
      , function (e, t, n) {
        e.exports = !n(16)((function () {
          return 7 != Object.defineProperty({}, "a", {
            get: function () {
              return 7
            }
          }).a
        }
        ))
      }
      , function (e, t, n) {
        var o = n(0)
          , i = n(2)
          , r = n(7)
          , a = n(6)
          , s = n(13)
          , l = function (e, t, n) {
            var c, u, p, d = e & l.F, h = e & l.G, f = e & l.S, y = e & l.P, m = e & l.B, g = e & l.W, v = h ? i : i[t] || (i[t] = {}), x = v.prototype, _ = h ? o : f ? o[t] : (o[t] || {}).prototype;
            for (c in h && (n = t),
              n)
              (u = !d && _ && void 0 !== _[c]) && s(v, c) || (p = u ? _[c] : n[c],
                v[c] = h && "function" != typeof _[c] ? n[c] : m && u ? r(p, o) : g && _[c] == p ? function (e) {
                  var t = function (t, n, o) {
                    if (this instanceof e) {
                      switch (arguments.length) {
                        case 0:
                          return new e;
                        case 1:
                          return new e(t);
                        case 2:
                          return new e(t, n)
                      }
                      return new e(t, n, o)
                    }
                    return e.apply(this, arguments)
                  };
                  return t.prototype = e.prototype,
                    t
                }(p) : y && "function" == typeof p ? r(Function.call, p) : p,
                y && ((v.virtual || (v.virtual = {}))[c] = p,
                  e & l.R && x && !x[c] && a(x, c, p)))
          };
        l.F = 1,
          l.G = 2,
          l.S = 4,
          l.P = 8,
          l.B = 16,
          l.W = 32,
          l.U = 64,
          l.R = 128,
          e.exports = l
      }
      , function (e, t, n) {
        var o = n(10)
          , i = n(19);
        e.exports = n(4) ? function (e, t, n) {
          return o.f(e, t, i(1, n))
        }
          : function (e, t, n) {
            return e[t] = n,
              e
          }
      }
      , function (e, t, n) {
        var o = n(11);
        e.exports = function (e, t, n) {
          if (o(e),
            void 0 === t)
            return e;
          switch (n) {
            case 1:
              return function (n) {
                return e.call(t, n)
              }
                ;
            case 2:
              return function (n, o) {
                return e.call(t, n, o)
              }
                ;
            case 3:
              return function (n, o, i) {
                return e.call(t, n, o, i)
              }
          }
          return function () {
            return e.apply(t, arguments)
          }
        }
      }
      , function (e, t) {
        e.exports = function (e) {
          return "object" == typeof e ? null !== e : "function" == typeof e
        }
      }
      , function (e, t) {
        e.exports = {}
      }
      , function (e, t, n) {
        var o = n(3)
          , i = n(60)
          , r = n(77)
          , a = Object.defineProperty;
        t.f = n(4) ? Object.defineProperty : function (e, t, n) {
          if (o(e),
            t = r(t, !0),
            o(n),
            i)
            try {
              return a(e, t, n)
            } catch (e) { }
          if ("get" in n || "set" in n)
            throw TypeError("Accessors not supported!");
          return "value" in n && (e[t] = n.value),
            e
        }
      }
      , function (e, t) {
        e.exports = function (e) {
          if ("function" != typeof e)
            throw TypeError(e + " is not a function!");
          return e
        }
      }
      , function (e, t) {
        var n = {}.toString;
        e.exports = function (e) {
          return n.call(e).slice(8, -1)
        }
      }
      , function (e, t) {
        var n = {}.hasOwnProperty;
        e.exports = function (e, t) {
          return n.call(e, t)
        }
      }
      , function (e, t) {
        e.exports = function (e) {
          if (null == e)
            throw TypeError("Can't call method on  " + e);
          return e
        }
      }
      , function (e, t, n) {
        var o = n(8)
          , i = n(0).document
          , r = o(i) && o(i.createElement);
        e.exports = function (e) {
          return r ? i.createElement(e) : {}
        }
      }
      , function (e, t) {
        e.exports = function (e) {
          try {
            return !!e()
          } catch (e) {
            return !0
          }
        }
      }
      , function (e, t) {
        e.exports = !0
      }
      , function (e, t, n) {
        "use strict";
        function o(e) {
          var t, n;
          this.promise = new e((function (e, o) {
            if (void 0 !== t || void 0 !== n)
              throw TypeError("Bad Promise constructor");
            t = e,
              n = o
          }
          )),
            this.resolve = i(t),
            this.reject = i(n)
        }
        var i = n(11);
        e.exports.f = function (e) {
          return new o(e)
        }
      }
      , function (e, t) {
        e.exports = function (e, t) {
          return {
            enumerable: !(1 & e),
            configurable: !(2 & e),
            writable: !(4 & e),
            value: t
          }
        }
      }
      , function (e, t, n) {
        var o = n(10).f
          , i = n(13)
          , r = n(1)("toStringTag");
        e.exports = function (e, t, n) {
          e && !i(e = n ? e : e.prototype, r) && o(e, r, {
            configurable: !0,
            value: t
          })
        }
      }
      , function (e, t, n) {
        var o = n(37)("keys")
          , i = n(40);
        e.exports = function (e) {
          return o[e] || (o[e] = i(e))
        }
      }
      , function (e, t) {
        var n = Math.ceil
          , o = Math.floor;
        e.exports = function (e) {
          return isNaN(e = +e) ? 0 : (e > 0 ? o : n)(e)
        }
      }
      , function (e, t, n) {
        var o = n(29)
          , i = n(14);
        e.exports = function (e) {
          return o(i(e))
        }
      }
      , function (e, t, n) {
        var o = n(22)
          , i = Math.min;
        e.exports = function (e) {
          return e > 0 ? i(o(e), 9007199254740991) : 0
        }
      }
      , function (e, t, n) {
        var o = n(14);
        e.exports = function (e) {
          return Object(o(e))
        }
      }
      , function (e, t, n) {
        var o = n(12)
          , i = n(1)("toStringTag")
          , r = "Arguments" == o(function () {
            return arguments
          }());
        e.exports = function (e) {
          var t, n, a;
          return void 0 === e ? "Undefined" : null === e ? "Null" : "string" == typeof (n = function (e, t) {
            try {
              return e[t]
            } catch (e) { }
          }(t = Object(e), i)) ? n : r ? o(t) : "Object" == (a = o(t)) && "function" == typeof t.callee ? "Arguments" : a
        }
      }
      , function (e, t) {
        e.exports = "constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")
      }
      , function (e, t, n) {
        var o = n(0).document;
        e.exports = o && o.documentElement
      }
      , function (e, t, n) {
        var o = n(12);
        e.exports = Object("z").propertyIsEnumerable(0) ? Object : function (e) {
          return "String" == o(e) ? e.split("") : Object(e)
        }
      }
      , function (e, t, n) {
        var o = n(9)
          , i = n(1)("iterator")
          , r = Array.prototype;
        e.exports = function (e) {
          return void 0 !== e && (o.Array === e || r[i] === e)
        }
      }
      , function (e, t, n) {
        var o = n(3);
        e.exports = function (e, t, n, i) {
          try {
            return i ? t(o(n)[0], n[1]) : t(n)
          } catch (t) {
            var r = e.return;
            throw void 0 !== r && o(r.call(e)),
            t
          }
        }
      }
      , function (e, t, n) {
        "use strict";
        var o = n(17)
          , i = n(5)
          , r = n(73)
          , a = n(6)
          , s = n(9)
          , l = n(62)
          , c = n(20)
          , u = n(69)
          , p = n(1)("iterator")
          , d = !([].keys && "next" in [].keys())
          , h = function () {
            return this
          };
        e.exports = function (e, t, n, f, y, m, g) {
          l(n, t, f);
          var v, x, _, E = function (e) {
            if (!d && e in O)
              return O[e];
            switch (e) {
              case "keys":
              case "values":
                return function () {
                  return new n(this, e)
                }
            }
            return function () {
              return new n(this, e)
            }
          }, b = t + " Iterator", T = "values" == y, w = !1, O = e.prototype, j = O[p] || O["@@iterator"] || y && O[y], M = j || E(y), C = y ? T ? E("entries") : M : void 0, R = "Array" == t && O.entries || j;
          if (R && (_ = u(R.call(new e))) !== Object.prototype && _.next && (c(_, b, !0),
            o || "function" == typeof _[p] || a(_, p, h)),
            T && j && "values" !== j.name && (w = !0,
              M = function () {
                return j.call(this)
              }
            ),
            o && !g || !d && !w && O[p] || a(O, p, M),
            s[t] = M,
            s[b] = h,
            y)
            if (v = {
              values: T ? M : E("values"),
              keys: m ? M : E("keys"),
              entries: C
            },
              g)
              for (x in v)
                x in O || r(O, x, v[x]);
            else
              i(i.P + i.F * (d || w), t, v);
          return v
        }
      }
      , function (e, t, n) {
        var o = n(1)("iterator")
          , i = !1;
        try {
          var r = [7][o]();
          r.return = function () {
            i = !0
          }
            ,
            Array.from(r, (function () {
              throw 2
            }
            ))
        } catch (e) { }
        e.exports = function (e, t) {
          if (!t && !i)
            return !1;
          var n = !1;
          try {
            var r = [7]
              , a = r[o]();
            a.next = function () {
              return {
                done: n = !0
              }
            }
              ,
              r[o] = function () {
                return a
              }
              ,
              e(r)
          } catch (e) { }
          return n
        }
      }
      , function (e, t, n) {
        var o = n(70)
          , i = n(27);
        e.exports = Object.keys || function (e) {
          return o(e, i)
        }
      }
      , function (e, t) {
        e.exports = function (e) {
          try {
            return {
              e: !1,
              v: e()
            }
          } catch (e) {
            return {
              e: !0,
              v: e
            }
          }
        }
      }
      , function (e, t, n) {
        var o = n(3)
          , i = n(8)
          , r = n(18);
        e.exports = function (e, t) {
          if (o(e),
            i(t) && t.constructor === e)
            return t;
          var n = r.f(e);
          return (0,
            n.resolve)(t),
            n.promise
        }
      }
      , function (e, t, n) {
        var o = n(2)
          , i = n(0)
          , r = i["__core-js_shared__"] || (i["__core-js_shared__"] = {});
        (e.exports = function (e, t) {
          return r[e] || (r[e] = void 0 !== t ? t : {})
        }
        )("versions", []).push({
          version: o.version,
          mode: n(17) ? "pure" : "global",
          copyright: "© 2019 Denis Pushkarev (zloirock.ru)"
        })
      }
      , function (e, t, n) {
        var o = n(3)
          , i = n(11)
          , r = n(1)("species");
        e.exports = function (e, t) {
          var n, a = o(e).constructor;
          return void 0 === a || null == (n = o(a)[r]) ? t : i(n)
        }
      }
      , function (e, t, n) {
        var o, i, r, a = n(7), s = n(61), l = n(28), c = n(15), u = n(0), p = u.process, d = u.setImmediate, h = u.clearImmediate, f = u.MessageChannel, y = u.Dispatch, m = 0, g = {}, v = function () {
          var e = +this;
          if (g.hasOwnProperty(e)) {
            var t = g[e];
            delete g[e],
              t()
          }
        }, x = function (e) {
          v.call(e.data)
        };
        d && h || (d = function (e) {
          for (var t = [], n = 1; arguments.length > n;)
            t.push(arguments[n++]);
          return g[++m] = function () {
            s("function" == typeof e ? e : Function(e), t)
          }
            ,
            o(m),
            m
        }
          ,
          h = function (e) {
            delete g[e]
          }
          ,
          "process" == n(12)(p) ? o = function (e) {
            p.nextTick(a(v, e, 1))
          }
            : y && y.now ? o = function (e) {
              y.now(a(v, e, 1))
            }
              : f ? (r = (i = new f).port2,
                i.port1.onmessage = x,
                o = a(r.postMessage, r, 1)) : u.addEventListener && "function" == typeof postMessage && !u.importScripts ? (o = function (e) {
                  u.postMessage(e + "", "*")
                }
                  ,
                  u.addEventListener("message", x, !1)) : o = "onreadystatechange" in c("script") ? function (e) {
                    l.appendChild(c("script")).onreadystatechange = function () {
                      l.removeChild(this),
                        v.call(e)
                    }
                  }
                    : function (e) {
                      setTimeout(a(v, e, 1), 0)
                    }
        ),
          e.exports = {
            set: d,
            clear: h
          }
      }
      , function (e, t) {
        var n = 0
          , o = Math.random();
        e.exports = function (e) {
          return "Symbol(".concat(void 0 === e ? "" : e, ")_", (++n + o).toString(36))
        }
      }
      , function (e, t, n) {
        var o = n(26)
          , i = n(1)("iterator")
          , r = n(9);
        e.exports = n(2).getIteratorMethod = function (e) {
          if (null != e)
            return e[i] || e["@@iterator"] || r[o(e)]
        }
      }
      , function (e, t, n) {
        "use strict";
        var o = n(75)(!0);
        n(32)(String, "String", (function (e) {
          this._t = String(e),
            this._i = 0
        }
        ), (function () {
          var e, t = this._t, n = this._i;
          return n >= t.length ? {
            value: void 0,
            done: !0
          } : (e = o(t, n),
            this._i += e.length,
          {
            value: e,
            done: !1
          })
        }
        ))
      }
      , function (e, t, n) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
          value: !0
        }),
          t.default = function (e) {
            var t = Math.PI / 180;
            e.transformSVGPath = function (e) {
              function n() {
                for (var t, n = void 0, o = !1, a = void 0; i < r && (44 === (n = e.charCodeAt(i)) || 32 === n);)
                  i++;
                for (t = 45 === n ? i++ : i; i < r;)
                  if (48 <= (n = e.charCodeAt(i)) && n <= 57)
                    i++;
                  else {
                    if (46 !== n)
                      return a = e.substring(t, i),
                        o ? parseFloat(a) : parseInt(a);
                    i++,
                      o = !0
                  }
                return a = e.substring(t),
                  o ? parseFloat(a) : parseInt(a)
              }
              var o = new AFRAME.THREE.Shape
                , i = 1
                , r = e.length
                , a = void 0
                , s = 0
                , l = 0
                , c = 0
                , u = 0
                , p = null
                , d = null
                , h = 0
                , f = 0
                , y = 0
                , m = 0
                , g = 0
                , v = 0
                , x = 0
                , _ = 0
                , E = 0
                , b = void 0
                , T = void 0
                , w = void 0;
              for (a = e[0]; i <= r;) {
                switch (w = !0,
                a) {
                  case "M":
                    s = n(),
                      l = n(),
                      o.moveTo(s, l),
                      a = "L";
                    break;
                  case "m":
                    s += n(),
                      l += n(),
                      o.moveTo(s, l),
                      a = "l";
                    break;
                  case "Z":
                  case "z":
                    w = !1,
                      s === p && l === d || o.lineTo(p, d);
                    break;
                  case "L":
                  case "H":
                  case "V":
                    c = "V" === a ? s : n(),
                      u = "H" === a ? l : n(),
                      o.lineTo(c, u),
                      s = c,
                      l = u;
                    break;
                  case "l":
                  case "h":
                  case "v":
                    c = "v" === a ? s : s + n(),
                      u = "h" === a ? l : l + n(),
                      o.lineTo(c, u),
                      s = c,
                      l = u;
                    break;
                  case "C":
                    h = n(),
                      y = n();
                  case "S":
                    "S" === a && (h = 2 * s - f,
                      y = 2 * l - m),
                      f = n(),
                      m = n(),
                      c = n(),
                      u = n(),
                      o.bezierCurveTo(h, y, f, m, c, u),
                      s = c,
                      l = u;
                    break;
                  case "c":
                    h = s + n(),
                      y = l + n();
                  case "s":
                    "s" === a && (h = 2 * s - f,
                      y = 2 * l - m),
                      f = s + n(),
                      m = l + n(),
                      c = s + n(),
                      u = l + n(),
                      o.bezierCurveTo(h, y, f, m, c, u),
                      s = c,
                      l = u;
                    break;
                  case "Q":
                    h = n(),
                      y = n();
                  case "T":
                    "T" === a && (h = 2 * s - h,
                      y = 2 * l - y),
                      c = n(),
                      u = n(),
                      o.quadraticCurveTo(h, y, c, u),
                      s = c,
                      l = u;
                    break;
                  case "q":
                    h = s + n(),
                      y = l + n();
                  case "t":
                    "t" === a && (h = 2 * s - h,
                      y = 2 * l - y),
                      c = s + n(),
                      u = l + n(),
                      o.quadraticCurveTo(h, y, c, u),
                      s = c,
                      l = u;
                    break;
                  case "A":
                    g = n(),
                      v = n(),
                      x = n() * t,
                      _ = n(),
                      E = n(),
                      c = n(),
                      u = n(),
                      g !== v && console.warn("Forcing elliptical arc to be a circular one :(", g, v),
                      h = Math.cos(x) * (s - c) / 2 + Math.sin(x) * (l - u) / 2,
                      y = -Math.sin(x) * (s - c) / 2 + Math.cos(x) * (l - u) / 2;
                    var O = Math.sqrt((g * g * v * v - g * g * y * y - v * v * h * h) / (g * g * y * y + v * v * h * h));
                    _ === E && (O = -O),
                      f = O * g * y / v,
                      m = O * -v * h / g,
                      b = Math.cos(x) * f - Math.sin(x) * m + (s + c) / 2,
                      T = Math.sin(x) * f + Math.cos(x) * m + (l + u) / 2;
                    var j = new AFRAME.THREE.Vector2(1, 0)
                      , M = new AFRAME.THREE.Vector2((h - f) / g, (y - m) / v)
                      , C = Math.acos(j.dot(M) / j.length() / M.length());
                    j.x * M.y - j.y * M.x < 0 && (C = -C),
                      j.x = (-h - f) / g,
                      j.y = (-y - m) / v;
                    var R = Math.acos(M.dot(j) / M.length() / j.length());
                    M.x * j.y - M.y * j.x < 0 && (R = -R),
                      !E && R > 0 && (R -= 2 * Math.PI),
                      E && R < 0 && (R += 2 * Math.PI),
                      o.absarc(b, T, g, C, C + R, E),
                      s = c,
                      l = u
                }
                null === p && (p = s,
                  d = l),
                  w && function () {
                    for (var t = void 0; i < r && (44 === (t = e.charCodeAt(i)) || 32 === t);)
                      i++;
                    return 45 === (t = e.charCodeAt(i)) || 48 <= t && t <= 57
                  }() || (a = e[i++])
              }
              return o
            }
          }
      }
      , function (e, t, n) {
        "use strict";
        function o(e) {
          return e && e.__esModule ? e : {
            default: e
          }
        }
        Object.defineProperty(t, "__esModule", {
          value: !0
        });
        var i = o(n(50))
          , r = o(n(88))
          , a = o(n(47));
        t.default = function (e) {
          return new i.default((function (t, n) {
            return (0,
              r.default)(e, (function (e, o) {
                if (e)
                  throw n(e);
                return t((0,
                  a.default)(o))
              }
              ))
          }
          ))
        }
      }
      , function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var o = function (e) {
          return e && e.__esModule ? e : {
            default: e
          }
        }(n(49));
        t.default = o.default || function (e) {
          for (var t = 1; t < arguments.length; t++) {
            var n = arguments[t];
            for (var o in n)
              Object.prototype.hasOwnProperty.call(n, o) && (e[o] = n[o])
          }
          return e
        }
      }
      , function (e, t, n) {
        "use strict";
        function o(e) {
          return e && e.__esModule ? e : {
            default: e
          }
        }
        var i = o(n(45))
          , r = o(n(44))
          , a = o(n(43));
        if ("undefined" == typeof AFRAME)
          throw new Error("Component attempted to register before AFRAME was available.");
        AFRAME.registerPrimitive("a-svg", {
          defaultComponents: {
            svg: {}
          },
          mappings: {
            src: "svg.src",
            "proportional-scale": "svg.proportionalScale",
            "override-color": "svg.overrideColor",
            "z-factor": "svg.zFactor",
            extrude: "svg.extrude"
          }
        }),
          AFRAME.registerComponent("svg", {
            schema: {
              src: {
                type: "string"
              },
              proportionalScale: {
                type: "number",
                default: 1
              },
              extrude: {
                type: "number",
                default: .1
              },
              zFactor: {
                type: "number",
                default: .005
              },
              overrideColor: {
                type: "string"
              }
            },
            $d3g: {},
            init: function () {
              this.el.setObject3D("mesh", new AFRAME.THREE.Object3D),
                (0,
                  a.default)(this.$d3g)
            },
            update: function () {
              var e = this;
              if (this.data.src) {
                var t = document.querySelector(this.data.src).attributes.src.value
                  , n = new AFRAME.THREE.Group;
                return this.data.extrude = 0 === this.data.extrude ? .001 : this.data.extrude,
                  this.data.zFactor = 0 === this.data.zFactor ? .001 : this.data.zFactor,
                  (0,
                    r.default)(t).then((function (t) {
                      if (t.length > 0) {
                        t.map((function (t) {
                          return (0,
                            i.default)({}, t, {
                              material: new AFRAME.THREE.MeshBasicMaterial({
                                shader: "flat",
                                side: AFRAME.THREE.DoubleSide,
                                color: e.data.overrideColor ? e.data.overrideColor : t.fill
                              })
                            })
                        }
                        )).map((function (t) {
                          return (0,
                            i.default)({}, t, {
                              shape: e.$d3g.transformSVGPath(t.path)
                            })
                        }
                        )).map((function (t) {
                          return (0,
                            i.default)({}, t, {
                              shape: new AFRAME.THREE.ExtrudeBufferGeometry(t.shape, {
                                amount: e.data.extrude,
                                bevelEnabled: !1
                              })
                            })
                        }
                        )).map((function (e) {
                          return new AFRAME.THREE.Mesh(e.shape, e.material)
                        }
                        )).forEach((function (t, o, i) {
                          t.scale.x = .0095 * e.data.proportionalScale,
                            t.scale.y = .0095 * e.data.proportionalScale,
                            t.scale.z = e.data.overrideColor ? e.data.extrude : e.data.extrude + o * e.data.zFactor,
                            t.rotation.x = Math.PI,
                            n.add(t)
                        }
                        )),
                          e.el.setObject3D("mesh", n),
                          e.el.getObject3D("mesh").position.z = 0;
                        var o = {
                          min: new AFRAME.THREE.Vector3(Number.MAX_VALUE),
                          max: new AFRAME.THREE.Vector3(Number.MIN_VALUE)
                        }
                          , r = new AFRAME.THREE.Vector3;
                        n.children.forEach((function (t) {
                          var n = t.geometry;
                          n.computeBoundingBox();
                          var i = n.boundingBox.getCenter();
                          o.min.x = Math.min(i.x, o.min.x),
                            o.min.y = Math.min(i.y, o.min.y),
                            o.min.z = e.data.extrude,
                            o.max.x = Math.max(i.x, o.max.x),
                            o.max.y = Math.max(2 * i.y, o.max.y),
                            o.max.z = e.data.extrude
                        }
                        )),
                          r.addVectors(o.min, o.max),
                          r.multiplyScalar(-.5),
                          n.children.forEach((function (e) {
                            e.geometry.applyMatrix((new AFRAME.THREE.Matrix4).makeTranslation(r.x, r.y, r.z)),
                              e.geometry.computeBoundingBox()
                          }
                          ))
                      }
                    }
                    ))
              }
            }
          })
      }
      , function (e, t, n) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
          value: !0
        });
        var o = function (e) {
          return e && e.__esModule ? e : {
            default: e
          }
        }(n(51));
        t.default = function (e) {
          if ("string" == typeof e && (e = function (e) {
            if (void 0 !== self.DOMParser)
              return function (e) {
                return (new self.DOMParser).parseFromString(e, "application/xml")
              }
          }()),
            !e || "function" != typeof e.getElementsByTagName)
            throw new Error("could not get an XML document from the specified SVG contents");
          return [].slice.call(e.getElementsByTagName("path")).reduce((function (e, t) {
            var n = t.getAttribute("d") || ""
              , i = t.getAttribute("fill") || "";
            return [].concat((0,
              o.default)(e), [{
                path: n.replace(/\s+/g, " ").trim(),
                fill: i
              }])
          }
          ), [])
        }
      }
      , function (e, t, n) {
        e.exports = {
          default: n(52),
          __esModule: !0
        }
      }
      , function (e, t, n) {
        e.exports = {
          default: n(53),
          __esModule: !0
        }
      }
      , function (e, t, n) {
        e.exports = {
          default: n(54),
          __esModule: !0
        }
      }
      , function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var o = function (e) {
          return e && e.__esModule ? e : {
            default: e
          }
        }(n(48));
        t.default = function (e) {
          if (Array.isArray(e)) {
            for (var t = 0, n = Array(e.length); t < e.length; t++)
              n[t] = e[t];
            return n
          }
          return (0,
            o.default)(e)
        }
      }
      , function (e, t, n) {
        n(42),
          n(79),
          e.exports = n(2).Array.from
      }
      , function (e, t, n) {
        n(81),
          e.exports = n(2).Object.assign
      }
      , function (e, t, n) {
        n(82),
          n(42),
          n(86),
          n(83),
          n(84),
          n(85),
          e.exports = n(2).Promise
      }
      , function (e, t) {
        e.exports = function () { }
      }
      , function (e, t) {
        e.exports = function (e, t, n, o) {
          if (!(e instanceof t) || void 0 !== o && o in e)
            throw TypeError(n + ": incorrect invocation!");
          return e
        }
      }
      , function (e, t, n) {
        var o = n(23)
          , i = n(24)
          , r = n(76);
        e.exports = function (e) {
          return function (t, n, a) {
            var s, l = o(t), c = i(l.length), u = r(a, c);
            if (e && n != n) {
              for (; c > u;)
                if ((s = l[u++]) != s)
                  return !0
            } else
              for (; c > u; u++)
                if ((e || u in l) && l[u] === n)
                  return e || u || 0;
            return !e && -1
          }
        }
      }
      , function (e, t, n) {
        "use strict";
        var o = n(10)
          , i = n(19);
        e.exports = function (e, t, n) {
          t in e ? o.f(e, t, i(0, n)) : e[t] = n
        }
      }
      , function (e, t, n) {
        var o = n(7)
          , i = n(31)
          , r = n(30)
          , a = n(3)
          , s = n(24)
          , l = n(41)
          , c = {}
          , u = {};
        (t = e.exports = function (e, t, n, p, d) {
          var h, f, y, m, g = d ? function () {
            return e
          }
            : l(e), v = o(n, p, t ? 2 : 1), x = 0;
          if ("function" != typeof g)
            throw TypeError(e + " is not iterable!");
          if (r(g)) {
            for (h = s(e.length); h > x; x++)
              if ((m = t ? v(a(f = e[x])[0], f[1]) : v(e[x])) === c || m === u)
                return m
          } else
            for (y = g.call(e); !(f = y.next()).done;)
              if ((m = i(y, v, f.value, t)) === c || m === u)
                return m
        }
        ).BREAK = c,
          t.RETURN = u
      }
      , function (e, t, n) {
        e.exports = !n(4) && !n(16)((function () {
          return 7 != Object.defineProperty(n(15)("div"), "a", {
            get: function () {
              return 7
            }
          }).a
        }
        ))
      }
      , function (e, t) {
        e.exports = function (e, t, n) {
          var o = void 0 === n;
          switch (t.length) {
            case 0:
              return o ? e() : e.call(n);
            case 1:
              return o ? e(t[0]) : e.call(n, t[0]);
            case 2:
              return o ? e(t[0], t[1]) : e.call(n, t[0], t[1]);
            case 3:
              return o ? e(t[0], t[1], t[2]) : e.call(n, t[0], t[1], t[2]);
            case 4:
              return o ? e(t[0], t[1], t[2], t[3]) : e.call(n, t[0], t[1], t[2], t[3])
          }
          return e.apply(n, t)
        }
      }
      , function (e, t, n) {
        "use strict";
        var o = n(66)
          , i = n(19)
          , r = n(20)
          , a = {};
        n(6)(a, n(1)("iterator"), (function () {
          return this
        }
        )),
          e.exports = function (e, t, n) {
            e.prototype = o(a, {
              next: i(1, n)
            }),
              r(e, t + " Iterator")
          }
      }
      , function (e, t) {
        e.exports = function (e, t) {
          return {
            value: t,
            done: !!e
          }
        }
      }
      , function (e, t, n) {
        var o = n(0)
          , i = n(39).set
          , r = o.MutationObserver || o.WebKitMutationObserver
          , a = o.process
          , s = o.Promise
          , l = "process" == n(12)(a);
        e.exports = function () {
          var e, t, n, c = function () {
            var o, i;
            for (l && (o = a.domain) && o.exit(); e;) {
              i = e.fn,
                e = e.next;
              try {
                i()
              } catch (o) {
                throw e ? n() : t = void 0,
                o
              }
            }
            t = void 0,
              o && o.enter()
          };
          if (l)
            n = function () {
              a.nextTick(c)
            }
              ;
          else if (!r || o.navigator && o.navigator.standalone)
            if (s && s.resolve) {
              var u = s.resolve(void 0);
              n = function () {
                u.then(c)
              }
            } else
              n = function () {
                i.call(o, c)
              }
                ;
          else {
            var p = !0
              , d = document.createTextNode("");
            new r(c).observe(d, {
              characterData: !0
            }),
              n = function () {
                d.data = p = !p
              }
          }
          return function (o) {
            var i = {
              fn: o,
              next: void 0
            };
            t && (t.next = i),
              e || (e = i,
                n()),
              t = i
          }
        }
      }
      , function (e, t, n) {
        "use strict";
        var o = n(4)
          , i = n(34)
          , r = n(68)
          , a = n(71)
          , s = n(25)
          , l = n(29)
          , c = Object.assign;
        e.exports = !c || n(16)((function () {
          var e = {}
            , t = {}
            , n = Symbol()
            , o = "abcdefghijklmnopqrst";
          return e[n] = 7,
            o.split("").forEach((function (e) {
              t[e] = e
            }
            )),
            7 != c({}, e)[n] || Object.keys(c({}, t)).join("") != o
        }
        )) ? function (e, t) {
          for (var n = s(e), c = arguments.length, u = 1, p = r.f, d = a.f; c > u;)
            for (var h, f = l(arguments[u++]), y = p ? i(f).concat(p(f)) : i(f), m = y.length, g = 0; m > g;)
              h = y[g++],
                o && !d.call(f, h) || (n[h] = f[h]);
          return n
        }
          : c
      }
      , function (e, t, n) {
        var o = n(3)
          , i = n(67)
          , r = n(27)
          , a = n(21)("IE_PROTO")
          , s = function () { }
          , l = function () {
            var e, t = n(15)("iframe"), o = r.length;
            for (t.style.display = "none",
              n(28).appendChild(t),
              t.src = "javascript:",
              (e = t.contentWindow.document).open(),
              e.write("<script>document.F=Object<\/script>"),
              e.close(),
              l = e.F; o--;)
              delete l.prototype[r[o]];
            return l()
          };
        e.exports = Object.create || function (e, t) {
          var n;
          return null !== e ? (s.prototype = o(e),
            n = new s,
            s.prototype = null,
            n[a] = e) : n = l(),
            void 0 === t ? n : i(n, t)
        }
      }
      , function (e, t, n) {
        var o = n(10)
          , i = n(3)
          , r = n(34);
        e.exports = n(4) ? Object.defineProperties : function (e, t) {
          i(e);
          for (var n, a = r(t), s = a.length, l = 0; s > l;)
            o.f(e, n = a[l++], t[n]);
          return e
        }
      }
      , function (e, t) {
        t.f = Object.getOwnPropertySymbols
      }
      , function (e, t, n) {
        var o = n(13)
          , i = n(25)
          , r = n(21)("IE_PROTO")
          , a = Object.prototype;
        e.exports = Object.getPrototypeOf || function (e) {
          return e = i(e),
            o(e, r) ? e[r] : "function" == typeof e.constructor && e instanceof e.constructor ? e.constructor.prototype : e instanceof Object ? a : null
        }
      }
      , function (e, t, n) {
        var o = n(13)
          , i = n(23)
          , r = n(57)(!1)
          , a = n(21)("IE_PROTO");
        e.exports = function (e, t) {
          var n, s = i(e), l = 0, c = [];
          for (n in s)
            n != a && o(s, n) && c.push(n);
          for (; t.length > l;)
            o(s, n = t[l++]) && (~r(c, n) || c.push(n));
          return c
        }
      }
      , function (e, t) {
        t.f = {}.propertyIsEnumerable
      }
      , function (e, t, n) {
        var o = n(6);
        e.exports = function (e, t, n) {
          for (var i in t)
            n && e[i] ? e[i] = t[i] : o(e, i, t[i]);
          return e
        }
      }
      , function (e, t, n) {
        e.exports = n(6)
      }
      , function (e, t, n) {
        "use strict";
        var o = n(0)
          , i = n(2)
          , r = n(10)
          , a = n(4)
          , s = n(1)("species");
        e.exports = function (e) {
          var t = "function" == typeof i[e] ? i[e] : o[e];
          a && t && !t[s] && r.f(t, s, {
            configurable: !0,
            get: function () {
              return this
            }
          })
        }
      }
      , function (e, t, n) {
        var o = n(22)
          , i = n(14);
        e.exports = function (e) {
          return function (t, n) {
            var r, a, s = String(i(t)), l = o(n), c = s.length;
            return l < 0 || l >= c ? e ? "" : void 0 : (r = s.charCodeAt(l)) < 55296 || r > 56319 || l + 1 === c || (a = s.charCodeAt(l + 1)) < 56320 || a > 57343 ? e ? s.charAt(l) : r : e ? s.slice(l, l + 2) : a - 56320 + (r - 55296 << 10) + 65536
          }
        }
      }
      , function (e, t, n) {
        var o = n(22)
          , i = Math.max
          , r = Math.min;
        e.exports = function (e, t) {
          return (e = o(e)) < 0 ? i(e + t, 0) : r(e, t)
        }
      }
      , function (e, t, n) {
        var o = n(8);
        e.exports = function (e, t) {
          if (!o(e))
            return e;
          var n, i;
          if (t && "function" == typeof (n = e.toString) && !o(i = n.call(e)))
            return i;
          if ("function" == typeof (n = e.valueOf) && !o(i = n.call(e)))
            return i;
          if (!t && "function" == typeof (n = e.toString) && !o(i = n.call(e)))
            return i;
          throw TypeError("Can't convert object to primitive value")
        }
      }
      , function (e, t, n) {
        var o = n(0).navigator;
        e.exports = o && o.userAgent || ""
      }
      , function (e, t, n) {
        "use strict";
        var o = n(7)
          , i = n(5)
          , r = n(25)
          , a = n(31)
          , s = n(30)
          , l = n(24)
          , c = n(58)
          , u = n(41);
        i(i.S + i.F * !n(33)((function (e) {
          Array.from(e)
        }
        )), "Array", {
          from: function (e) {
            var t, n, i, p, d = r(e), h = "function" == typeof this ? this : Array, f = arguments.length, y = f > 1 ? arguments[1] : void 0, m = void 0 !== y, g = 0, v = u(d);
            if (m && (y = o(y, f > 2 ? arguments[2] : void 0, 2)),
              null == v || h == Array && s(v))
              for (n = new h(t = l(d.length)); t > g; g++)
                c(n, g, m ? y(d[g], g) : d[g]);
            else
              for (p = v.call(d),
                n = new h; !(i = p.next()).done; g++)
                c(n, g, m ? a(p, y, [i.value, g], !0) : i.value);
            return n.length = g,
              n
          }
        })
      }
      , function (e, t, n) {
        "use strict";
        var o = n(55)
          , i = n(63)
          , r = n(9)
          , a = n(23);
        e.exports = n(32)(Array, "Array", (function (e, t) {
          this._t = a(e),
            this._i = 0,
            this._k = t
        }
        ), (function () {
          var e = this._t
            , t = this._k
            , n = this._i++;
          return !e || n >= e.length ? (this._t = void 0,
            i(1)) : i(0, "keys" == t ? n : "values" == t ? e[n] : [n, e[n]])
        }
        ), "values"),
          r.Arguments = r.Array,
          o("keys"),
          o("values"),
          o("entries")
      }
      , function (e, t, n) {
        var o = n(5);
        o(o.S + o.F, "Object", {
          assign: n(65)
        })
      }
      , function (e, t) { }
      , function (e, t, n) {
        "use strict";
        var o, i, r, a, s = n(17), l = n(0), c = n(7), u = n(26), p = n(5), d = n(8), h = n(11), f = n(56), y = n(59), m = n(38), g = n(39).set, v = n(64)(), x = n(18), _ = n(35), E = n(78), b = n(36), T = l.TypeError, w = l.process, O = w && w.versions, j = O && O.v8 || "", M = l.Promise, C = "process" == u(w), R = function () { }, B = i = x.f, D = !!function () {
          try {
            var e = M.resolve(1)
              , t = (e.constructor = {})[n(1)("species")] = function (e) {
                e(R, R)
              }
              ;
            return (C || "function" == typeof PromiseRejectionEvent) && e.then(R) instanceof t && 0 !== j.indexOf("6.6") && -1 === E.indexOf("Chrome/66")
          } catch (e) { }
        }(), k = function (e) {
          var t;
          return !(!d(e) || "function" != typeof (t = e.then)) && t
        }, S = function (e, t) {
          if (!e._n) {
            e._n = !0;
            var n = e._c;
            v((function () {
              for (var o = e._v, i = 1 == e._s, r = 0; n.length > r;)
                !function (t) {
                  var n, r, a, s = i ? t.ok : t.fail, l = t.resolve, c = t.reject, u = t.domain;
                  try {
                    s ? (i || (2 == e._h && A(e),
                      e._h = 1),
                      !0 === s ? n = o : (u && u.enter(),
                        n = s(o),
                        u && (u.exit(),
                          a = !0)),
                      n === t.promise ? c(T("Promise-chain cycle")) : (r = k(n)) ? r.call(n, l, c) : l(n)) : c(o)
                  } catch (e) {
                    u && !a && u.exit(),
                      c(e)
                  }
                }(n[r++]);
              e._c = [],
                e._n = !1,
                t && !e._h && I(e)
            }
            ))
          }
        }, I = function (e) {
          g.call(l, (function () {
            var t, n, o, i = e._v, r = P(e);
            if (r && (t = _((function () {
              C ? w.emit("unhandledRejection", i, e) : (n = l.onunhandledrejection) ? n({
                promise: e,
                reason: i
              }) : (o = l.console) && o.error && o.error("Unhandled promise rejection", i)
            }
            )),
              e._h = C || P(e) ? 2 : 1),
              e._a = void 0,
              r && t.e)
              throw t.v
          }
          ))
        }, P = function (e) {
          return 1 !== e._h && 0 === (e._a || e._c).length
        }, A = function (e) {
          g.call(l, (function () {
            var t;
            C ? w.emit("rejectionHandled", e) : (t = l.onrejectionhandled) && t({
              promise: e,
              reason: e._v
            })
          }
          ))
        }, N = function (e) {
          var t = this;
          t._d || (t._d = !0,
            (t = t._w || t)._v = e,
            t._s = 2,
            t._a || (t._a = t._c.slice()),
            S(t, !0))
        }, H = function (e) {
          var t, n = this;
          if (!n._d) {
            n._d = !0,
              n = n._w || n;
            try {
              if (n === e)
                throw T("Promise can't be resolved itself");
              (t = k(e)) ? v((function () {
                var o = {
                  _w: n,
                  _d: !1
                };
                try {
                  t.call(e, c(H, o, 1), c(N, o, 1))
                } catch (e) {
                  N.call(o, e)
                }
              }
              )) : (n._v = e,
                n._s = 1,
                S(n, !1))
            } catch (e) {
              N.call({
                _w: n,
                _d: !1
              }, e)
            }
          }
        };
        D || (M = function (e) {
          f(this, M, "Promise", "_h"),
            h(e),
            o.call(this);
          try {
            e(c(H, this, 1), c(N, this, 1))
          } catch (e) {
            N.call(this, e)
          }
        }
          ,
          (o = function (e) {
            this._c = [],
              this._a = void 0,
              this._s = 0,
              this._d = !1,
              this._v = void 0,
              this._h = 0,
              this._n = !1
          }
          ).prototype = n(72)(M.prototype, {
            then: function (e, t) {
              var n = B(m(this, M));
              return n.ok = "function" != typeof e || e,
                n.fail = "function" == typeof t && t,
                n.domain = C ? w.domain : void 0,
                this._c.push(n),
                this._a && this._a.push(n),
                this._s && S(this, !1),
                n.promise
            },
            catch: function (e) {
              return this.then(void 0, e)
            }
          }),
          r = function () {
            var e = new o;
            this.promise = e,
              this.resolve = c(H, e, 1),
              this.reject = c(N, e, 1)
          }
          ,
          x.f = B = function (e) {
            return e === M || e === a ? new r(e) : i(e)
          }
        ),
          p(p.G + p.W + p.F * !D, {
            Promise: M
          }),
          n(20)(M, "Promise"),
          n(74)("Promise"),
          a = n(2).Promise,
          p(p.S + p.F * !D, "Promise", {
            reject: function (e) {
              var t = B(this);
              return (0,
                t.reject)(e),
                t.promise
            }
          }),
          p(p.S + p.F * (s || !D), "Promise", {
            resolve: function (e) {
              return b(s && this === a ? M : this, e)
            }
          }),
          p(p.S + p.F * !(D && n(33)((function (e) {
            M.all(e).catch(R)
          }
          ))), "Promise", {
            all: function (e) {
              var t = this
                , n = B(t)
                , o = n.resolve
                , i = n.reject
                , r = _((function () {
                  var n = []
                    , r = 0
                    , a = 1;
                  y(e, !1, (function (e) {
                    var s = r++
                      , l = !1;
                    n.push(void 0),
                      a++,
                      t.resolve(e).then((function (e) {
                        l || (l = !0,
                          n[s] = e,
                          --a || o(n))
                      }
                      ), i)
                  }
                  )),
                    --a || o(n)
                }
                ));
              return r.e && i(r.v),
                n.promise
            },
            race: function (e) {
              var t = this
                , n = B(t)
                , o = n.reject
                , i = _((function () {
                  y(e, !1, (function (e) {
                    t.resolve(e).then(n.resolve, o)
                  }
                  ))
                }
                ));
              return i.e && o(i.v),
                n.promise
            }
          })
      }
      , function (e, t, n) {
        "use strict";
        var o = n(5)
          , i = n(2)
          , r = n(0)
          , a = n(38)
          , s = n(36);
        o(o.P + o.R, "Promise", {
          finally: function (e) {
            var t = a(this, i.Promise || r.Promise)
              , n = "function" == typeof e;
            return this.then(n ? function (n) {
              return s(t, e()).then((function () {
                return n
              }
              ))
            }
              : e, n ? function (n) {
                return s(t, e()).then((function () {
                  throw n
                }
                ))
              }
              : e)
          }
        })
      }
      , function (e, t, n) {
        "use strict";
        var o = n(5)
          , i = n(18)
          , r = n(35);
        o(o.S, "Promise", {
          try: function (e) {
            var t = i.f(this)
              , n = r(e);
            return (n.e ? t.reject : t.resolve)(n.v),
              t.promise
          }
        })
      }
      , function (e, t, n) {
        n(80);
        for (var o = n(0), i = n(6), r = n(9), a = n(1)("toStringTag"), s = "CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","), l = 0; l < s.length; l++) {
          var c = s[l]
            , u = o[c]
            , p = u && u.prototype;
          p && !p[a] && i(p, a, c),
            r[c] = r.Array
        }
      }
      , function (e, t, n) {
        (function (t) {
          var n;
          n = "undefined" != typeof window ? window : void 0 !== t ? t : "undefined" != typeof self ? self : {},
            e.exports = n
        }
        ).call(t, n(91))
      }
      , function (e, t, n) {
        var o = n(92);
        e.exports = function (e, t) {
          "string" == typeof e && (e = {
            uri: e
          }),
            o(e, (function (e, n, o) {
              if (e)
                return t(e);
              if (!/^2/.test(n.statusCode))
                return t(new Error("http status code: " + n.statusCode));
              var i = document.createElement("div");
              i.innerHTML = o;
              var r = i.querySelector("svg");
              if (!r)
                return t(new Error("svg not present in resource"));
              t(null, r)
            }
            ))
        }
      }
      , function (e, t) {
        function n(e) {
          var t = !1;
          return function () {
            if (!t)
              return t = !0,
                e.apply(this, arguments)
          }
        }
        e.exports = n,
          n.proto = n((function () {
            Object.defineProperty(Function.prototype, "once", {
              value: function () {
                return n(this)
              },
              configurable: !0
            })
          }
          ))
      }
      , function (e, t) {
        var n = function (e) {
          return e.replace(/^\s+|\s+$/g, "")
        }
          , o = function (e) {
            return "[object Array]" === Object.prototype.toString.call(e)
          };
        e.exports = function (e) {
          if (!e)
            return {};
          for (var t = {}, i = n(e).split("\n"), r = 0; r < i.length; r++) {
            var a = i[r]
              , s = a.indexOf(":")
              , l = n(a.slice(0, s)).toLowerCase()
              , c = n(a.slice(s + 1));
            void 0 === t[l] ? t[l] = c : o(t[l]) ? t[l].push(c) : t[l] = [t[l], c]
          }
          return t
        }
      }
      , function (e, t) {
        var n;
        n = function () {
          return this
        }();
        try {
          n = n || Function("return this")() || (0,
            eval)("this")
        } catch (e) {
          "object" == typeof window && (n = window)
        }
        e.exports = n
      }
      , function (e, t, n) {
        function o() { }
        var i = n(87)
          , r = n(89)
          , a = n(90)
          , s = {
            0: "Internal XMLHttpRequest Error",
            4: "4xx Client Error",
            5: "5xx Server Error"
          }
          , l = i.XMLHttpRequest || o
          , c = "withCredentials" in new l ? l : i.XDomainRequest;
        e.exports = function (e, t) {
          function n() {
            var e = null;
            if (p.response ? e = p.response : "text" !== p.responseType && p.responseType || (e = p.responseText || p.responseXML),
              v)
              try {
                e = JSON.parse(e)
              } catch (e) { }
            return e
          }
          function i() {
            return 1223 === p.status ? 204 : p.status
          }
          function u(e, t) {
            var n = null;
            if (0 === e || e >= 400 && e < 600) {
              var o = "string" == typeof t && t || s[String(e).charAt(0)];
              (n = new Error(o)).statusCode = e
            }
            return n
          }
          "string" == typeof e && (e = {
            uri: e
          }),
            e = e || {},
            t = r(t);
          var p = e.xhr || null;
          p || (p = e.cors || e.useXDR ? new c : new l);
          var d, h = p.url = e.uri || e.url, f = p.method = e.method || "GET", y = e.body || e.data, m = p.headers = e.headers || {}, g = !!e.sync, v = !1, x = e.response ? function () {
            var e = i()
              , o = n()
              , r = u(e, o)
              , s = {
                body: o,
                statusCode: e,
                statusText: p.statusText,
                raw: p
              };
            p.getAllResponseHeaders ? s.headers = a(p.getAllResponseHeaders()) : s.headers = {},
              t(r, s, s.body)
          }
            : function () {
              var e = i()
                , o = u(e);
              p.status = p.statusCode = e,
                p.body = n(),
                p.headers = a(p.getAllResponseHeaders()),
                t(o, p, p.body)
            }
            ;
          if ("json" in e && (v = !0,
            m.Accept = "application/json",
            "GET" !== f && "HEAD" !== f && (m["Content-Type"] = "application/json",
              y = JSON.stringify(e.json))),
            p.onreadystatechange = function () {
              4 === p.readyState && x()
            }
            ,
            p.onload = x,
            p.onerror = function (e) {
              t(e, p)
            }
            ,
            p.onprogress = function () { }
            ,
            p.ontimeout = o,
            p.open(f, h, !g),
            (e.withCredentials || e.cors && !1 !== e.withCredentials) && (p.withCredentials = !0),
            g || (p.timeout = "timeout" in e ? e.timeout : 5e3),
            p.setRequestHeader)
            for (d in m)
              m.hasOwnProperty(d) && p.setRequestHeader(d, m[d]);
          else if (e.headers)
            throw new Error("Headers cannot be set on an XDomainRequest object");
          return "responseType" in e && (p.responseType = e.responseType),
            "beforeSend" in e && "function" == typeof e.beforeSend && e.beforeSend(p),
            p.send(y),
            p
        }
      }
    ])
  }
  , function (e, t, n) {
    "use strict";
    n.r(t);
    const o = {
      MP3_OVERVIEW: {
        viewId: "MP3_OVERVIEW",
        src: "assets/MP3_OVERVIEW.jpg",
        rotation: "0 90 0",
        xvalue: -.6,
        next: null
      },
      MP3_TER_E: {
        viewId: "MP3_TER_E",
        src: "assets/myphuoc/terrace/MP3_TER_E.jpg",
        rotation: "0 195 0",
        next: "MP3_TER_CENTER",
        xvalue: null
      },
      MP3_TER_CENTER: {
        viewId: "MP3_TER_CENTER",
        src: "assets/myphuoc/terrace/MP3_TER_CENTER.jpg",
        rotation: "0 100 0",
        next: "MP3_TER_C1",
        xvalue: null
      },
      MP3_TER_C1: {
        viewId: "MP3_TER_C1",
        src: "assets/myphuoc/terrace/MP3_TER_C1.jpg",
        rotation: "0 100 0",
        next: "MP3_TER_C2",
        xvalue: null
      },
      MP3_TER_C2: {
        viewId: "MP3_TER_C2",
        src: "assets/myphuoc/terrace/MP3_TER_C2.jpg",
        rotation: "0 100 0",
        next: "MP3_TER_O1",
        xvalue: null
      },
      MP3_TER_O1: {
        viewId: "MP3_TER_O1",
        src: "assets/myphuoc/terrace/MP3_TER_O1.jpg",
        rotation: "0 -90 0",
        next: "MP3_TER_O2",
        xvalue: null
      },
      MP3_TER_O2: {
        viewId: "MP3_TER_O2",
        src: "assets/myphuoc/terrace/MP3_TER_O2.jpg",
        rotation: "0 210 0",
        next: "MP3_TER_CENTER",
        xvalue: null
      },
      MP3_SEMI_E: {
        viewId: "MP3_SEMI_E",
        src: "assets/myphuoc/semi/MP3_SEMI_E.jpg",
        rotation: "0 145 0",
        next: "MP3_SEMI_CENTER",
        xvalue: null
      },
      MP3_SEMI_CENTER: {
        viewId: "MP3_SEMI_CENTER",
        src: "assets/myphuoc/semi/MP3_SEMI_CENTER.jpg",
        rotation: "0 100 0",
        next: "MP3_SEMI_C1",
        xvalue: null
      },
      MP3_SEMI_C1: {
        viewId: "MP3_SEMI_C1",
        src: "assets/myphuoc/semi/MP3_SEMI_C1.jpg",
        rotation: "0 150 0",
        next: "MP3_SEMI_C2",
        xvalue: null
      },
      MP3_SEMI_C2: {
        viewId: "MP3_SEMI_C2",
        src: "assets/myphuoc/semi/MP3_SEMI_C2.jpg",
        rotation: "0 100 0",
        next: "MP3_SEMI_O1",
        xvalue: null
      },
      MP3_SEMI_O1: {
        viewId: "MP3_SEMI_O1",
        src: "assets/myphuoc/semi/MP3_SEMI_O1.jpg",
        rotation: "0 0 0",
        next: "MP3_SEMI_O2",
        xvalue: null
      },
      MP3_SEMI_O2: {
        viewId: "MP3_SEMI_O2",
        src: "assets/myphuoc/semi/MP3_SEMI_O2.jpg",
        rotation: "0 180 0",
        next: "MP3_SEMI_CENTER",
        xvalue: null
      },
      MP3_DET_E: {
        viewId: "MP3_DET_E",
        src: "assets/myphuoc/det/MP3_DET_E.jpg",
        rotation: "0 100 0",
        next: "MP3_DET_CENTER",
        xvalue: null
      },
      MP3_DET_CENTER: {
        viewId: "MP3_DET_CENTER",
        src: "assets/myphuoc/det/MP3_DET_CENTER.jpg",
        rotation: "0 53 0",
        next: "MP3_DET_O1",
        xvalue: null
      },
      MP3_DET_O1: {
        viewId: "MP3_DET_O1",
        src: "assets/myphuoc/det/MP3_DET_O1.jpg",
        rotation: "0 -25 0",
        next: "MP3_DET_O2",
        xvalue: null
      },
      MP3_DET_O2: {
        viewId: "MP3_DET_O2",
        src: "assets/myphuoc/det/MP3_DET_O2.jpg",
        rotation: "0 180 0",
        next: "MP3_DET_CENTER",
        xvalue: null
      },
      MP3_OUTDOOR_1: {
        viewId: "MP3_OUTDOOR_1",
        src: "assets/outdoor/MP3_VIEW1.jpg",
        rotation: "0 -100 0",
        xvalue: null,
        next: "MP3_OUTDOOR_2"
      },
      MP3_OUTDOOR_2: {
        viewId: "MP3_OUTDOOR_2",
        src: "assets/outdoor/MP3_VIEW2.jpg",
        rotation: "0 90 0",
        xvalue: -.2,
        next: "MP3_OUTDOOR_3"
      },
      MP3_OUTDOOR_3: {
        viewId: "MP3_OUTDOOR_3",
        src: "assets/outdoor/MP3_VIEW3.jpg",
        rotation: "0 85 0",
        xvalue: -.2,
        next: "MP3_OUTDOOR_4"
      },
      MP3_OUTDOOR_4: {
        viewId: "MP3_OUTDOOR_4",
        src: "assets/outdoor/MP3_VIEW4.jpg",
        rotation: "0 90 0",
        xvalue: -.2,
        next: "MP3_OUTDOOR_5"
      },
      MP3_OUTDOOR_5: {
        viewId: "MP3_OUTDOOR_5",
        src: "assets/outdoor/MP3_VIEW5.jpg",
        rotation: "0 90 0",
        xvalue: -.3,
        next: "MP3_OUTDOOR_6"
      },
      MP3_OUTDOOR_6: {
        viewId: "MP3_OUTDOOR_6",
        src: "assets/outdoor/MP3_VIEW6.jpg",
        rotation: "0 90 0",
        xvalue: -.3,
        next: "MP3_OUTDOOR_7"
      },
      MP3_OUTDOOR_7: {
        viewId: "MP3_OUTDOOR_7",
        src: "assets/outdoor/MP3_VIEW7.jpg",
        rotation: "0 -175 0",
        xvalue: -.5,
        next: "MP3_OUTDOOR_8"
      },
      MP3_OUTDOOR_8: {
        viewId: "MP3_OUTDOOR_8",
        src: "assets/outdoor/MP3_VIEW8.jpg",
        rotation: "0 95 0",
        xvalue: -.5,
        next: "MP3_OUTDOOR_9"
      },
      MP3_OUTDOOR_9: {
        viewId: "MP3_OUTDOOR_9",
        src: "assets/outdoor/MP3_VIEW9.jpg",
        rotation: "0 80 0",
        xvalue: -.5,
        next: "MP3_OUTDOOR_1"
      },
      ...{
        BB_OVERVIEW: {
          viewId: "BB_OVERVIEW",
          src: "assets/baubang/BB_OVERVIEW.jpg",
          rotation: "0 100 0",
          xvalue: -.6,
          next: null
        },
        BB_DET_E: {
          viewId: "BB_DET_E",
          src: "assets/baubang/BB_DET_E.jpg",
          rotation: "0 120 0",
          next: "BB_DET_CENTER",
          xvalue: null
        },
        BB_DET_CENTER: {
          viewId: "BB_DET_CENTER",
          src: "assets/baubang/BB_DET_CENTER.jpg",
          rotation: "0 0 0",
          next: "BB_DET_O",
          xvalue: null
        },
        BB_DET_O: {
          viewId: "BB_DET_O",
          src: "assets/baubang/BB_DET_O.jpg",
          rotation: "0 0 0",
          next: "BB_DET_CENTER",
          xvalue: null
        },
        BB_TER_E1: {
          viewId: "BB_TER_E1",
          src: "assets/baubang/BB_TER_E1.jpg",
          rotation: "0 95 0",
          next: "BB_TER_CENTER",
          xvalue: null
        },
        BB_TER_E2: {
          viewId: "BB_TER_E2",
          src: "assets/baubang/BB_TER_E2.jpg",
          rotation: "0 130 0",
          next: "BB_TER_CENTER",
          xvalue: null
        },
        BB_TER_CENTER: {
          viewId: "BB_TER_CENTER",
          src: "assets/baubang/BB_TER_CENTER.jpg",
          rotation: "0 -40 0",
          next: "BB_TER_C1",
          xvalue: null
        },
        BB_TER_C1: {
          viewId: "BB_TER_C1",
          src: "assets/baubang/BB_TER_C1.jpg",
          rotation: "0 0 0",
          next: "BB_TER_C2",
          xvalue: null
        },
        BB_TER_C2: {
          viewId: "BB_TER_C2",
          src: "assets/baubang/BB_TER_C2.jpg",
          rotation: "0 -70 0",
          next: "BB_TER_C3",
          xvalue: null
        },
        BB_TER_C3: {
          viewId: "BB_TER_C3",
          src: "assets/baubang/BB_TER_C3.jpg",
          rotation: "0 0 0",
          next: "BB_TER_O1",
          xvalue: null
        },
        BB_TER_O1: {
          viewId: "BB_TER_O1",
          src: "assets/baubang/BB_TER_O1.jpg",
          rotation: "0 195 0",
          next: "BB_TER_O2",
          xvalue: null
        },
        BB_TER_O2: {
          viewId: "BB_TER_O2",
          src: "assets/baubang/BB_TER_O2.jpg",
          rotation: "0 30 0",
          next: "BB_TER_CENTER",
          xvalue: null
        },
        BB_SEMI_E1: {
          viewId: "BB_SEMI_E1",
          src: "assets/baubang/BB_SEMI_E1.jpg",
          rotation: "0 102 0",
          next: "BB_SEMI_CENTER",
          xvalue: null
        },
        BB_SEMI_E2: {
          viewId: "BB_SEMI_E2",
          src: "assets/baubang/BB_SEMI_E2.jpg",
          rotation: "0 130 0",
          next: "BB_SEMI_CENTER",
          xvalue: null
        },
        BB_SEMI_CENTER: {
          viewId: "BB_SEMI_CENTER",
          src: "assets/baubang/BB_SEMI_CENTER.jpg",
          rotation: "0 160 0",
          next: "BB_SEMI_C1",
          xvalue: null
        },
        BB_SEMI_C1: {
          viewId: "BB_SEMI_C1",
          src: "assets/baubang/BB_SEMI_C1.jpg",
          rotation: "0 70 0",
          next: "BB_SEMI_C2",
          xvalue: null
        },
        BB_SEMI_C2: {
          viewId: "BB_SEMI_C2",
          src: "assets/baubang/BB_SEMI_C2.jpg",
          rotation: "0 100 0",
          next: "BB_SEMI_C3",
          xvalue: null
        },
        BB_SEMI_C3: {
          viewId: "BB_SEMI_C3",
          src: "assets/baubang/BB_SEMI_C3.jpg",
          rotation: "0 0 0",
          next: "BB_SEMI_O1",
          xvalue: null
        },
        BB_SEMI_O1: {
          viewId: "BB_SEMI_O1",
          src: "assets/baubang/BB_SEMI_O1.jpg",
          rotation: "0 100 0",
          next: "BB_SEMI_O2",
          xvalue: null
        },
        BB_SEMI_O2: {
          viewId: "BB_SEMI_O2",
          src: "assets/baubang/BB_SEMI_O2.jpg",
          rotation: "0 90 0",
          next: "BB_SEMI_CENTER",
          xvalue: null
        },
        BB_OUTDOOR_1: {
          viewId: "BB_OUTDOOR_1",
          src: "assets/baubang/BB_VIEW1.jpg",
          rotation: "0 90 0",
          xvalue: -.2,
          next: "BB_OUTDOOR_2"
        },
        BB_OUTDOOR_2: {
          viewId: "BB_OUTDOOR_2",
          src: "assets/baubang/BB_VIEW2.jpg",
          rotation: "0 90 0",
          xvalue: -.2,
          next: "BB_OUTDOOR_3"
        },
        BB_OUTDOOR_3: {
          viewId: "BB_OUTDOOR_3",
          src: "assets/baubang/BB_VIEW3.jpg",
          rotation: "0 75 0",
          xvalue: 0,
          next: "BB_OUTDOOR_4"
        },
        BB_OUTDOOR_4: {
          viewId: "BB_OUTDOOR_4",
          src: "assets/baubang/BB_VIEW4.jpg",
          rotation: "0 100 0",
          xvalue: -.3,
          next: "BB_OUTDOOR_5"
        },
        BB_OUTDOOR_5: {
          viewId: "BB_OUTDOOR_5",
          src: "assets/baubang/BB_VIEW5.jpg",
          rotation: "0 -140 0",
          xvalue: -.3,
          next: "BB_OUTDOOR_6"
        },
        BB_OUTDOOR_6: {
          viewId: "BB_OUTDOOR_6",
          src: "assets/baubang/BB_VIEW6.jpg",
          rotation: "0 -240 0",
          xvalue: -1,
          next: "BB_OUTDOOR_1"
        }
      }
    };
    const i = {
      MP3_OVERVIEW: ['<a-hotspot\n      visible="false"\n      id="MP3_OVERVIEW_TO_TER_CENTER"\n      to="MP3_TER_CENTER"\n      position="-14.39 -4.65 1.24"\n      look-at="[camera]"\n      scale="3 3 3"\n    >\n      <a-svg\n        src="#hotspot-icon-svg"\n        proportional-scale="0.75"\n        extrude="1"\n        z-factor="0"\n      >\n      <a-text\n        value="TERRACE"\n        align="center"\n        color="#696969"\n        position="0 0.38 -0.05"\n        rotation="0 0 -2.5"\n        mixin="hotspot-top-text"\n      ></a-text>\n      <a-text\n        value="TERRACE"\n        align="center"\n        rotation="0 0 -2.5"\n        mixin="hotspot-top-text"\n      ></a-text>\n      <a-entity\n        position="0 -0.2 -0.2"\n        material="side: double; color: white; shader: flat; opacity: 0"\n        geometry="primitive: ring; radiusInner: 0.45; radiusOuter: 0.5"\n        animation__grow="property: scale; from: 0 0 0; to: 1 0.5 1; loop: true; easing: easeInOutQuad; dur: 1200"\n        animation__fade="property: material.opacity; to: 1; loop: true; easing: easeInOutQuad; dir: alternate; dur: 600"\n      ></a-entity>\n      <a-entity\n        position="0 -0.2 -0.2"\n        material="side: double; color: white; shader: flat; opacity: 0"\n        geometry="primitive: ring; radiusInner: 0.45; radiusOuter: 0.5"\n        animation__grow="property: scale; from: 0 0 0; to: 0.5 0.25 0.5; loop: true; easing: easeInOutQuad; dur: 1200"\n        animation__fade="property: material.opacity; to: 1; loop: true; easing: easeInOutQuad; dir: alternate; dur: 600"\n      ></a-entity>\n      <a-entity\n        position="0 0.4 0"\n        geometry="primitive: box; width: 0.8; height: 0.5; depth: 0.5"\n        material="opacity: 0;"\n      ></a-entity>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="MP3_OVERVIEW_TO_DETACHED"\n      to="MP3_DET_CENTER"\n      position="-8.12 -5.47 0.35"\n      look-at="[camera]"\n      scale="2.25 2.25 2.25"\n    >\n      <a-svg\n        src="#hotspot-icon-svg"\n        proportional-scale="0.75"\n        extrude="1"\n        z-factor="0"\n      >\n      <a-text\n        value="DETACHED"\n        align="center"\n        color="#696969"\n        position="0 0.38 -0.05"\n        rotation="0 0 -2.5"\n        mixin="hotspot-top-text"\n      ></a-text>\n      <a-text\n        value="DETACHED"\n        align="center"\n        rotation="0 0 -2.5"\n        mixin="hotspot-top-text"\n      ></a-text>\n      <a-entity\n        position="0 -0.2 -0.2"\n        material="side: double; color: white; shader: flat; opacity: 0"\n        geometry="primitive: ring; radiusInner: 0.45; radiusOuter: 0.5"\n        animation__grow="property: scale; from: 0 0 0; to: 1 0.5 1; loop: true; easing: easeInOutQuad; dur: 1200"\n        animation__fade="property: material.opacity; to: 1; loop: true; easing: easeInOutQuad; dir: alternate; dur: 600"\n      ></a-entity>\n      <a-entity\n        position="0 -0.2 -0.2"\n        material="side: double; color: white; shader: flat; opacity: 0"\n        geometry="primitive: ring; radiusInner: 0.45; radiusOuter: 0.5"\n        animation__grow="property: scale; from: 0 0 0; to: 0.5 0.25 0.5; loop: true; easing: easeInOutQuad; dur: 1200"\n        animation__fade="property: material.opacity; to: 1; loop: true; easing: easeInOutQuad; dir: alternate; dur: 600"\n      ></a-entity>\n      <a-entity\n        position="0 0.4 0"\n        geometry="primitive: box; width: 0.8; height: 0.5; depth: 0.5"\n        material="opacity: 0;"\n      ></a-entity>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="MP3_OVERVIEW_TO_SEMI_CENTER"\n      look-at="[camera]"\n      scale="3.5 3.5 3.5"\n      to="MP3_SEMI_CENTER"\n      position="-18.86 -3.8 -3.67"\n      rotation="0 90 0"\n    >\n      <a-svg\n        src="#hotspot-icon-svg"\n        proportional-scale="0.75"\n        extrude="1"\n        z-factor="0"\n      >\n      <a-text\n        value="SEMI DETACHED"\n        align="center"\n        color="#696969"\n        position="0 0.38 -0.05"\n        rotation="0 0 2.5"\n        mixin="hotspot-top-text"\n      ></a-text>\n      <a-text\n        value="SEMI DETACHED"\n        align="center"\n        rotation="0 0 2.5"\n        mixin="hotspot-top-text">\n      </a-text>\n      <a-entity\n        position="0 -0.2 -0.2"\n        material="side: double; color: white; shader: flat; opacity: 0"\n        geometry="primitive: ring; radiusInner: 0.45; radiusOuter: 0.5"\n        animation__grow="property: scale; from: 0 0 0; to: 1 0.5 1; loop: true; easing: easeInOutQuad; dur: 1200"\n        animation__fade="property: material.opacity; to: 1; loop: true; easing: easeInOutQuad; dir: alternate; dur: 600"\n      ></a-entity>\n      <a-entity\n        position="0 -0.2 -0.2"\n        material="side: double; color: white; shader: flat; opacity: 0"\n        geometry="primitive: ring; radiusInner: 0.45; radiusOuter: 0.5"\n        animation__grow="property: scale; from: 0 0 0; to: 0.5 0.25 0.5; loop: true; easing: easeInOutQuad; dur: 1200"\n        animation__fade="property: material.opacity; to: 1; loop: true; easing: easeInOutQuad; dir: alternate; dur: 600"\n      ></a-entity>\n      <a-entity\n        position="0 0.4 0"\n        geometry="primitive: box; width: 0.8; height: 0.5; depth: 0.5"\n        material="opacity: 0;"\n      ></a-entity>\n    </a-hotspot>', '<a-entity\n      visible="false"\n      id="HIGHWAY"\n      position="-15.39 -2.65 1.24"\n      look-at="[camera]" scale="1.75 1.75 1.75"\n    >\n      <a-image\n        width="4"\n        height="4"\n        src="assets/tanvanhighway.png" >\n      </a-image>\n    </a-entity>'],
      BB_OVERVIEW: ['<a-hotspot\n      visible="false"\n      id="BB_OVERVIEW_TO_TER_CENTER"\n      to="BB_TER_CENTER"\n      position="-7.5 -4.85 1"\n      look-at="[camera]"\n      scale="2.5 2.5 2.5"\n    >\n      <a-svg\n        src="#hotspot-icon-svg"\n        proportional-scale="0.75"\n        extrude="1"\n        z-factor="0"\n      >\n      <a-text\n        value="TERRACE"\n        align="center"\n        color="#696969"\n        position="0 0.48 -0.05"\n        mixin="hotspot-top-text"\n      ></a-text>\n      <a-text\n        value="TERRACE"\n        align="center"\n        color="#ffffff"\n        mixin="hotspot-top-text"\n      ></a-text>\n      <a-entity\n        position="0 -0.2 -0.2"\n        material="side: double; color: white; shader: flat; opacity: 0"\n        geometry="primitive: ring; radiusInner: 0.45; radiusOuter: 0.5"\n        animation__grow="property: scale; from: 0 0 0; to: 0.75 0.5 0.75; loop: true; easing: easeInOutQuad; dur: 1200"\n        animation__fade="property: material.opacity; to: 1; loop: true; easing: easeInOutQuad; dir: alternate; dur: 600"\n      ></a-entity>\n      <a-entity\n        position="0 -0.2 -0.2"\n        material="side: double; color: white; shader: flat; opacity: 0"\n        geometry="primitive: ring; radiusInner: 0.45; radiusOuter: 0.5"\n        animation__grow="property: scale; from: 0 0 0; to: 0.5 0.25 0.5; loop: true; easing: easeInOutQuad; dur: 1200"\n        animation__fade="property: material.opacity; to: 1; loop: true; easing: easeInOutQuad; dir: alternate; dur: 600"\n      ></a-entity>\n      <a-entity\n        position="0 0.4 0"\n        geometry="primitive: box; width: 0.8; height: 0.5; depth: 0.5"\n        material="opacity: 0;"\n      ></a-entity>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="BB_OVERVIEW_TO_DET_CENTER"\n      to="BB_DET_CENTER"\n      position="-10 -3.65 1.5"\n      look-at="[camera]"\n      scale="2.3 2.3 2.3"\n    >\n      <a-svg\n        src="#hotspot-icon-svg"\n        proportional-scale="0.75"\n        extrude="1"\n        z-factor="0"\n      >\n      <a-text\n        value="DETACHED"\n        align="center"\n        color="#696969"\n        position="0 0.48 -0.05"\n        mixin="hotspot-top-text"\n      ></a-text>\n      <a-text\n        value="DETACHED"\n        align="center"\n        color="#ffffff"\n        mixin="hotspot-top-text"\n      ></a-text>\n      <a-entity\n        position="0 -0.2 -0.2"\n        material="side: double; color: white; shader: flat; opacity: 0"\n        geometry="primitive: ring; radiusInner: 0.45; radiusOuter: 0.5"\n        animation__grow="property: scale; from: 0 0 0; to: 0.75 0.5 0.75; loop: true; easing: easeInOutQuad; dur: 1200"\n        animation__fade="property: material.opacity; to: 1; loop: true; easing: easeInOutQuad; dir: alternate; dur: 600"\n      ></a-entity>\n      <a-entity\n        position="0 -0.2 -0.2"\n        material="side: double; color: white; shader: flat; opacity: 0"\n        geometry="primitive: ring; radiusInner: 0.45; radiusOuter: 0.5"\n        animation__grow="property: scale; from: 0 0 0; to: 0.5 0.25 0.5; loop: true; easing: easeInOutQuad; dur: 1200"\n        animation__fade="property: material.opacity; to: 1; loop: true; easing: easeInOutQuad; dir: alternate; dur: 600"\n      ></a-entity>\n      <a-entity\n        position="0 0.4 0"\n        geometry="primitive: box; width: 0.8; height: 0.5; depth: 0.5"\n        material="opacity: 0;"\n      ></a-entity>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="BB_OVERVIEW_TO_SEMI_CENTER"\n      look-at="[camera]"\n      scale="2.5 2.5 2.5"\n      to="BB_SEMI_CENTER"\n      position="-10.39 -5.65 5"\n    >\n      <a-svg\n        src="#hotspot-icon-svg"\n        proportional-scale="0.75"\n        extrude="1"\n        z-factor="0"\n      >\n      <a-text\n        value="SEMI DETACHED"\n        align="center"\n        color="#696969"\n        rotation="0 0 -6"\n        position="0 0.48 -0.05"\n        mixin="hotspot-top-text"\n      ></a-text>\n      <a-text\n        value="SEMI DETACHED"\n        align="center"\n        color="#ffffff"\n        rotation="0 0 -6"\n        mixin="hotspot-top-text">\n      </a-text>\n      <a-entity\n        position="0 -0.2 -0.2"\n        material="side: double; color: white; shader: flat; opacity: 0"\n        geometry="primitive: ring; radiusInner: 0.45; radiusOuter: 0.5"\n        animation__grow="property: scale; from: 0 0 0; to: 0.75 0.5 0.75; loop: true; easing: easeInOutQuad; dur: 1200"\n        animation__fade="property: material.opacity; to: 1; loop: true; easing: easeInOutQuad; dir: alternate; dur: 600"\n      ></a-entity>\n      <a-entity\n        position="0 -0.2 -0.2"\n        material="side: double; color: white; shader: flat; opacity: 0"\n        geometry="primitive: ring; radiusInner: 0.45; radiusOuter: 0.5"\n        animation__grow="property: scale; from: 0 0 0; to: 0.5 0.25 0.5; loop: true; easing: easeInOutQuad; dur: 1200"\n        animation__fade="property: material.opacity; to: 1; loop: true; easing: easeInOutQuad; dir: alternate; dur: 600"\n      ></a-entity>\n      <a-entity\n        position="0 0.4 0"\n        geometry="primitive: box; width: 0.8; height: 0.5; depth: 0.5"\n        material="opacity: 0;"\n      ></a-entity>\n    </a-hotspot>', '<a-entity\n      visible="false"\n      id="HIGHWAY"\n      position="-15.39 -2.65 1.24"\n      look-at="[camera]" scale="1.75 1.75 1.75"\n    >\n      <a-image\n        width="4"\n        height="4"\n        src="assets/tanvanhighwayBB.png" >\n      </a-image>\n    </a-entity>'],
      ...{
        MP3_OUTDOOR_1: ['<a-hotspot\n      visible="false"\n      id="MP3_OUTDOOR_1_TO_2"\n      to="MP3_OUTDOOR_2"\n      look-at="[camera]"\n      position="12.75 0.49 2.49"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="View 2"\n        align="center"\n        mixin="hotspot-bottom-text"\n        ></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="MP3_OUTDOOR_1_TO_9"\n      to="MP3_OUTDOOR_9"\n      look-at="[camera]"\n      position="2.29 0.04 -10.76"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="View 9"\n        align="center"\n        mixin="hotspot-bottom-text"\n        ></a-text>\n    </a-hotspot>'],
        MP3_OUTDOOR_2: ['<a-hotspot\n      visible="false"\n      id="MP3_OUTDOOR_2_TO_1"\n      to="MP3_OUTDOOR_1"\n      look-at="[camera]"\n      position="1.24 -1.75 10.02"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="View 1"\n        align="center"\n        mixin="hotspot-bottom-text"\n        ></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="MP3_OUTDOOR_2_TO_3"\n      to="MP3_OUTDOOR_3"\n      look-at="[camera]"\n      position="2.17 -1.98 -9.82"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="View 3"\n        align="center"\n        mixin="hotspot-bottom-text"\n        ></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="MP3_OUTDOOR_2_TO_4"\n      to="MP3_OUTDOOR_4"\n      look-at="[camera]"\n      position="-9.24 -1.82 -0.06"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="View 4"\n        align="center"\n        mixin="hotspot-bottom-text"\n        ></a-text>\n    </a-hotspot>'],
        MP3_OUTDOOR_3: ['<a-hotspot\n      visible="false"\n      id="MP3_OUTDOOR_3_TO_2"\n      to="MP3_OUTDOOR_2"\n      look-at="[camera]"\n      position="-0.51 -2.28 9.47"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="View 2"\n        align="center"\n        mixin="hotspot-bottom-text"\n        ></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="MP3_OUTDOOR_2_TO_7"\n      to="MP3_OUTDOOR_7"\n      look-at="[camera]"\n      position="-9.49 -1.98 -1.00"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="View 7"\n        align="center"\n        mixin="hotspot-bottom-text"\n        ></a-text>\n    </a-hotspot>'],
        MP3_OUTDOOR_4: ['<a-hotspot\n      visible="false"\n      id="MP3_OUTDOOR_4_TO_2"\n      to="MP3_OUTDOOR_2"\n      look-at="[camera]"\n      position="9.50 0.09 0"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="View 2"\n        align="center"\n        mixin="hotspot-bottom-text"\n        ></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="MP3_OUTDOOR_4_TO_5"\n      to="MP3_OUTDOOR_5"\n      look-at="[camera]"\n      position="-9.49 -0.51 -0.02"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="View 5"\n        align="center"\n        mixin="hotspot-bottom-text"\n        ></a-text>\n    </a-hotspot>'],
        MP3_OUTDOOR_5: ['<a-hotspot\n      visible="false"\n      id="MP3_OUTDOOR_5_TO_4"\n      to="MP3_OUTDOOR_4"\n      look-at="[camera]"\n      position="10.98 -4.10 0.85"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="View 4"\n        align="center"\n        mixin="hotspot-bottom-text"\n        ></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="MP3_OUTDOOR_5_TO_6"\n      to="MP3_OUTDOOR_6"\n      look-at="[camera]"\n      position="-0.61 -2.36 -9.96"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="View 6"\n        align="center"\n        mixin="hotspot-bottom-text"\n        ></a-text>\n    </a-hotspot>'],
        MP3_OUTDOOR_6: ['<a-hotspot\n      visible="false"\n      id="MP3_OUTDOOR_6_TO_1"\n      to="MP3_OUTDOOR_1"\n      look-at="[camera]"\n      position="-0.06 -2.13 -6.93"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="View 1"\n        align="center"\n        mixin="hotspot-bottom-text"\n        ></a-text>\n    </a-hotspot>', ' <a-hotspot\n      visible="false"\n      id="MP3_OUTDOOR_6_TO_5"\n      to="MP3_OUTDOOR_5"\n      look-at="[camera]"\n      position="-8.58 -2.73 -0.00"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="View 5"\n        align="center"\n        mixin="hotspot-bottom-text"\n        ></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="MP3_OUTDOOR_6_TO_9"\n      to="MP3_OUTDOOR_9"\n      look-at="[camera]"\n      position="-0.01 -2.63 9.13"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="View 9"\n        align="center"\n        mixin="hotspot-bottom-text"\n        ></a-text>\n    </a-hotspot>'],
        MP3_OUTDOOR_7: ['<a-hotspot\n      visible="false"\n      id="MP3_OUTDOOR_7_TO_3"\n      to="MP3_OUTDOOR_3"\n      look-at="[camera]"\n      position="9.08 -3.47 -0.77"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="View 3"\n        align="center"\n        mixin="hotspot-bottom-text"\n        ></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="MP3_OUTDOOR_7_TO_8"\n      to="MP3_OUTDOOR_8"\n      look-at="[camera]"\n      position="-8.43 -3.09 0.64"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="View 8"\n        align="center"\n        mixin="hotspot-bottom-text"\n        ></a-text>\n    </a-hotspot>'],
        MP3_OUTDOOR_8: ['<a-hotspot\n      visible="false"\n      id="MP3_OUTDOOR_8_TO_7"\n      to="MP3_OUTDOOR_7"\n      look-at="[camera]"\n      position="-9.52 -4.96 0.51"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="View 7"\n        align="center"\n        mixin="hotspot-bottom-text"\n        ></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="MP3_OUTDOOR_8_TO_9"\n      to="MP3_OUTDOOR_9"\n      look-at="[camera]"\n      position="-0.64 -4.11 -9.91"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="View 9"\n        align="center"\n        mixin="hotspot-bottom-text"\n        ></a-text>\n    </a-hotspot>'],
        MP3_OUTDOOR_9: ['<a-hotspot\n      visible="false"\n      id="MP3_OUTDOOR_9_TO_1"\n      to="MP3_OUTDOOR_1"\n      look-at="[camera]"\n      position="-11.08 -5.32 -2.28"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 -20"\n      ></a-image>\n      <a-text\n        value="View 1"\n        align="center"\n        mixin="hotspot-bottom-text"\n        ></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="MP3_OUTDOOR_9_TO_8"\n      to="MP3_OUTDOOR_8"\n      look-at="[camera]"\n      position="-9.04 -4.84 7.15"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 20"\n      ></a-image>\n      <a-text\n        value="View 8"\n        align="center"\n        mixin="hotspot-bottom-text"\n        ></a-text>\n    </a-hotspot>']
      },
      ...{
        MP3_TER_E: ['<a-hotspot\n      visible="false"\n      id="MP3_TER_E_TO_CENTER" to="MP3_TER_CENTER" look-at="[camera]"\n      position="2.2 1 10" scale="2.5 2.5 2.5"\n    >\n      <a-image width="0.5" height="0.5" src="#hotspot-staight-icon" rotation="-60 0 0"></a-image>\n      <a-text value="Factory Center" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>'],
        MP3_TER_CENTER: ['<a-hotspot\n      visible="false"\n      id="MP3_TER_CENTER_TO_E" to="MP3_TER_E" position="-6 0.5 1" look-at="[camera]"\n    >\n      <a-image width="0.5" height="0.5" src="#hotspot-staight-icon" rotation="-60 0 0" scale="1.5 1.5 1.5"></a-image>\n      <a-text value="Entrance" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="MP3_TER_CENTER_TO_C1"\n      to="MP3_TER_C1"\n      position="1 0.5 6"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n        scale="2 2 2"\n      ></a-image>\n      <a-text value="Corner 1" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="MP3_TER_CENTER_TO_C2"\n      to="MP3_TER_C2"\n      position="-1.3 0.5 -8"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n        scale="1.5 1.5 1.5"\n      ></a-image>\n      <a-text value="Corner 2" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="MP3_TER_CENTER_TO_O1"\n      to="MP3_TER_O1"\n      position="-8 1 -3"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n        scale="1.5 1.5 1.5"\n      ></a-image>\n      <a-text value="Office 1" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="MP3_TER_CENTER_TO_O2"\n      to="MP3_TER_O2"\n      position="-7.2 0.73 6"\n\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n        scale="1.7 1.7 1.7"\n      ></a-image>\n      <a-text value="Office 2" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>'],
        MP3_TER_C1: ['<a-hotspot\n      visible="false"\n      id="MP3_TER_C1_TO_CENTER"\n      to="MP3_TER_CENTER"\n      position="-6.37 0.45 -10.74"\n      scale="2.5 2.5 2.5"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="Factory Center"\n        align="center"\n        mixin="hotspot-bottom-text"\n      ></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="MP3_TER_C1_TO_O1"\n      to="MP3_TER_O1"\n      position="-12.25 0.47 -2.45"\n      scale="2.5 2.5 2.5"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="Office 1"\n        align="center"\n        mixin="hotspot-bottom-text"\n      ></a-text>\n    </a-hotspot>'],
        MP3_TER_C2: ['<a-hotspot\n      visible="false"\n      id="MP3_TER_C2_TO_CENTER"\n      to="MP3_TER_CENTER"\n      position="-2.17 0.42 12.05"\n      scale="2.5 2.5 2.5"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="Factory Center"\n        align="center"\n        mixin="hotspot-bottom-text"\n      ></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="MP3_TER_C1_TO_O2"\n      to="MP3_TER_O2"\n      position="-10.85 0.51 5.66"\n      scale="2.5 2.5 2.5"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="Office 2"\n        align="center"\n        mixin="hotspot-bottom-text"\n      ></a-text>\n    </a-hotspot>'],
        MP3_TER_O1: ['<a-hotspot\n      visible="false"\n      id="MP3_TER_O1_TO_CENTER"\n      to="MP3_TER_CENTER"\n      position="7 0 0"\n      scale="2.5 2.5 2.5"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="Factory Center"\n        align="center"\n        mixin="hotspot-bottom-text"\n      ></a-text>\n    </a-hotspot>'],
        MP3_TER_O2: ['\n    <a-hotspot\n      visible="false"\n      id="MP3_TER_O2_TO_CENTER"\n      to="MP3_TER_CENTER"\n      position="2 0 7"s\n      scale="2.5 2.5 2.5"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="Factory Center"\n        align="center"\n        mixin="hotspot-bottom-text"\n      ></a-text>\n    </a-hotspot>']
      },
      ...{
        MP3_SEMI_E: ['<a-hotspot\n      visible="false"\n      id="MP3_SEMI_E_TO_CENTER"\n      to="MP3_SEMI_CENTER"\n      look-at="[camera]"\n      position="-3.87 -0.01 5.53"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image width="0.5" height="0.5" src="#hotspot-staight-icon" rotation="-60 0 0"></a-image>\n      <a-text value="Factory Center" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>'],
        MP3_SEMI_CENTER: ['<a-hotspot\n      visible="false"\n      id="MP3_SEMI_CENTER_TO_E"\n      to="MP3_SEMI_E"\n      position="-16.04 0.81 2.50"\n      look-at="[camera]"\n      scale="2 2 2"\n    >\n      <a-image width="0.5" height="0.5" src="#hotspot-staight-icon" rotation="-60 0 0" scale="1.5 1.5 1.5"></a-image>\n      <a-text value="Entrance" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="MP3_SEMI_CENTER_TO_C1"\n      to="MP3_SEMI_C1"\n      position="-7.01 0.70 13.52"\n      look-at="[camera]"\n      scale="1.5 1.5 1.5"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n        scale="2 2 2"\n      ></a-image>\n      <a-text value="Corner 1" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="MP3_SEMI_CENTER_TO_C2"\n      to="MP3_SEMI_C2"\n      position="13.40 0.06 -6.74"\n      scale="2 2 2"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n        scale="1.5 1.5 1.5"\n      ></a-image>\n      <a-text value="Corner 2" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="MP3_SEMI_CENTER_TO_O1"\n      to="MP3_SEMI_O1"\n      position="-19.92 0.85 9.88"\n      scale="2 2 2"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n        scale="1.5 1.5 1.5"\n      ></a-image>\n      <a-text value="Office 1" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="MP3_SEMI_CENTER_TO_O2"\n      to="MP3_SEMI_O2"\n      position="-22.50 0.64 -4.74"\n      scale="2 2 2"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n        scale="1.7 1.7 1.7"\n      ></a-image>\n      <a-text value="Office 2" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>'],
        MP3_SEMI_C1: ['<a-hotspot\n      visible="false"\n      id="MP3_SEMI_C1_TO_E"\n      to="MP3_SEMI_E"\n      look-at="[camera]"\n      position="-10.63 0.77 4.94"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image width="0.5" height="0.5" src="#hotspot-staight-icon" rotation="-60 0 0"></a-image>\n      <a-text value="Entrance" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="MP3_SEMI_C1_TO_O1"\n      to="MP3_SEMI_O1"\n      look-at="[camera]"\n      position="-7.13 0.09 9.34"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image width="0.5" height="0.5" src="#hotspot-staight-icon" rotation="-60 0 0"></a-image>\n      <a-text value="Office 1" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="MP3_SEMI_C1_TO_CENTER"\n      to="MP3_SEMI_CENTER"\n      look-at="[camera]"\n      position="-7.74 0.35 -8.83"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image width="0.5" height="0.5" src="#hotspot-staight-icon" rotation="-60 0 0"></a-image>\n      <a-text value="Factory Center" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>'],
        MP3_SEMI_C2: ['<a-hotspot\n      visible="false"\n      id="MP3_SEMI_C2_TO_CENTER"\n      to="MP3_SEMI_CENTER"\n      position="-9.40 0.61 8.59"\n      scale="2.5 2.5 2.5"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="Factory Center"\n        align="center"\n        mixin="hotspot-bottom-text"\n      ></a-text>\n    </a-hotspot>'],
        MP3_SEMI_O1: ['<a-hotspot\n      visible="false"\n      id="MP3_SEMI_O1_TO_CENTER"\n      to="MP3_SEMI_CENTER"\n      position="0.19 0.46 7.23"\n      scale="2.5 2.5 2.5"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="Factory Center"\n        align="center"\n        mixin="hotspot-bottom-text"\n      ></a-text>\n    </a-hotspot>'],
        MP3_SEMI_O2: ['\n    <a-hotspot\n      visible="false"\n      id="MP3_SEMI_O2_TO_CENTER"\n      to="MP3_SEMI_CENTER"\n      position="-0.27 0.08 -8.50"\n      scale="2.5 2.5 2.5"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="Factory Center"\n        align="center"\n        mixin="hotspot-bottom-text"\n      ></a-text>\n    </a-hotspot>']
      },
      ...{
        MP3_DET_E: ['<a-hotspot\n      visible="false"\n      id="MP3_DET_E_TO_CENTER"\n      to="MP3_DET_CENTER"\n      look-at="[camera]"\n      position="-9.60 -0.00 1.69"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image width="0.5" height="0.5" src="#hotspot-staight-icon" rotation="-60 0 0"></a-image>\n      <a-text value="Factory Center" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>'],
        MP3_DET_CENTER: ['<a-hotspot\n      visible="false"\n      id="MP3_DET_CENTER_TO_E"\n      to="MP3_DET_E"\n      position="-13.98 0.00 -9.68"\n      look-at="[camera]"\n      scale="2 2 2"\n    >\n      <a-image width="0.5" height="0.5" src="#hotspot-staight-icon" rotation="-60 0 0" scale="1.5 1.5 1.5"></a-image>\n      <a-text value="Entrance" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="MP3_DET_CENTER_TO_O1"\n      to="MP3_DET_O1"\n      position="-11.12 0.37 -12.86"\n      scale="2 2 2"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n        scale="1.5 1.5 1.5"\n      ></a-image>\n      <a-text value="Office 1" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>'],
        MP3_DET_O1: ['<a-hotspot\n      visible="false"\n      id="MP3_DET_O1_TO_CENTER"\n      to="MP3_DET_CENTER"\n      position="-0.87 0.15 4.92"\n      scale="2.5 2.5 2.5"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="Factory Center"\n        align="center"\n        mixin="hotspot-bottom-text"\n      ></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="MP3_DET_O1_TO_O2"\n      to="MP3_DET_O2"\n      position="3.56 -0.07 -6.31"\n      scale="2.5 2.5 2.5"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="Office 2"\n        align="center"\n        mixin="hotspot-bottom-text"\n      ></a-text>\n    </a-hotspot>'],
        MP3_DET_O2: ['<a-hotspot\n      visible="false"\n      id="MP3_DET_O2_TO_CENTER"\n      to="MP3_DET_CENTER"\n      position="10.23 -0.47 9.17"\n      scale="2.5 2.5 2.5"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="Factory Center"\n        align="center"\n        mixin="hotspot-bottom-text"\n      ></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="MP3_DET_O2_TO_O1"\n      to="MP3_DET_O1"\n      position="3.69 -0.05 4.73"\n      scale="2.5 2.5 2.5"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="Office 1"\n        align="center"\n        mixin="hotspot-bottom-text"\n      ></a-text>\n    </a-hotspot>']
      },
      ...{
        BB_TER_E1: ['<a-hotspot\n      visible="false"\n      id="BB_TER_E1_TO_CENTER" to="BB_TER_CENTER" look-at="[camera]"\n      position="-12.43 -0.10 1.36" scale="2.5 2.5 2.5"\n    >\n      <a-image width="0.5" height="0.5" src="#hotspot-staight-icon" rotation="-60 0 0"></a-image>\n      <a-text value="Factory Center" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="BB_TER_E1_TO_E2" to="BB_TER_E2" look-at="[camera]"\n      position="0.37 0.65 11.98" scale="2.5 2.5 2.5"\n    >\n      <a-image width="0.5" height="0.5" src="#hotspot-staight-icon" rotation="-60 0 0"></a-image>\n      <a-text value="Entrance 2" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>'],
        BB_TER_E2: ['<a-hotspot\n      visible="false"\n      id="BB_TER_E2_TO_CENTER" to="BB_TER_CENTER" look-at="[camera]"\n      position="-9.55 0.31 7.26" scale="2.5 2.5 2.5"\n    >\n      <a-image width="0.5" height="0.5" src="#hotspot-staight-icon" rotation="-60 0 0"></a-image>\n      <a-text value="Factory Center" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="BB_TER_E2_TO_E1" to="BB_TER_E1" look-at="[camera]"\n      position="-7.33 0.41 -9.50" scale="2.5 2.5 2.5"\n    >\n      <a-image width="0.5" height="0.5" src="#hotspot-staight-icon" rotation="-60 0 0"></a-image>\n      <a-text value="Entrance 1" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>'],
        BB_TER_CENTER: ['<a-hotspot\n      visible="false"\n      id="BB_TER_CENTER_TO_E1" to="BB_TER_E1" position="12.03 0.89 -4.12" look-at="[camera]"\n    >\n      <a-image width="0.5" height="0.5" src="#hotspot-staight-icon" rotation="-60 0 0" scale="1.5 1.5 1.5"></a-image>\n      <a-text value="Entrance 1" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="BB_TER_CENTER_TO_E2"\n      to="BB_TER_E2"\n      position="1.25 0.69 12.67"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n        scale="2 2 2"\n      ></a-image>\n      <a-text value="Entrance 2" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="BB_TER_CENTER_TO_C1"\n      to="BB_TER_C1"\n      position="3.60 0.69 -12.21"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n        scale="2 2 2"\n      ></a-image>\n      <a-text value="Corner 1" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="BB_TER_CENTER_TO_C3"\n      to="BB_TER_C3"\n      position="-5.95 0.71 11.25"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n        scale="1.5 1.5 1.5"\n      ></a-image>\n      <a-text value="Corner 3" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="BB_TER_CENTER_TO_O2"\n      to="BB_TER_O2"\n      position="9.42 0.49 10.00"\n\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n        scale="1.7 1.7 1.7"\n      ></a-image>\n      <a-text value="Office 2" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>'],
        BB_TER_C1: ['<a-hotspot\n      visible="false"\n      id="BB_TER_C1_TO_CENTER"\n      to="BB_TER_CENTER"\n      position="0.28 0.80 12.47"\n      scale="2.5 2.5 2.5"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="Factory Center"\n        align="center"\n        mixin="hotspot-bottom-text"\n      ></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="BB_TER_C1_TO_O1"\n      to="BB_TER_O1"\n      position="11.43 0.61 -5.62"\n      scale="2.5 2.5 2.5"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="Office 1"\n        align="center"\n        mixin="hotspot-bottom-text"\n      ></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="BB_TER_C1_TO_E1"\n      to="BB_TER_E1"\n      position="12.03 0.84 4.14"\n      scale="2.5 2.5 2.5"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="Entrance 1"\n        align="center"\n        mixin="hotspot-bottom-text"\n      ></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="BB_TER_C1_TO_C2"\n      to="BB_TER_C2"\n      position="-0.41 0.69 -12.72"\n      scale="2.5 2.5 2.5"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="Corner 2"\n        align="center"\n        mixin="hotspot-bottom-text"\n      ></a-text>\n    </a-hotspot>'],
        BB_TER_C2: ['<a-hotspot\n      visible="false"\n      id="BB_TER_C3_TO_C1"\n      to="BB_TER_C1"\n      position="0.29 0.56 11.23"\n      scale="2.5 2.5 2.5"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="Corner 1"\n        align="center"\n        mixin="hotspot-bottom-text"\n      ></a-text>\n    </a-hotspot>'],
        BB_TER_C3: ['<a-hotspot\n      visible="false"\n      id="BB_TER_C2_TO_CENTER"\n      to="BB_TER_CENTER"\n      position="-2.43 0.66 -11.99"\n      scale="2.5 2.5 2.5"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="Factory Center"\n        align="center"\n        mixin="hotspot-bottom-text"\n      ></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="BB_TER_C2_TO_E2"\n      to="BB_TER_E2"\n      position="12.18 0.64 1.19"\n      scale="2.5 2.5 2.5"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="Entrance 2"\n        align="center"\n        mixin="hotspot-bottom-text"\n      ></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="BB_TER_C2_TO_O2"\n      to="BB_TER_O2"\n      position="9.60 0.47 -7.59"\n      scale="2.5 2.5 2.5"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="Office 2"\n        align="center"\n        mixin="hotspot-bottom-text"\n      ></a-text>\n    </a-hotspot>'],
        BB_TER_O1: ['<a-hotspot\n      visible="false"\n      id="BB_TER_O1_TO_CENTER"\n      to="BB_TER_CENTER"\n      position="-5.91 -1.05 -4.50"\n      scale="2.5 2.5 2.5"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="Factory Center"\n        align="center"\n        mixin="hotspot-bottom-text"\n      ></a-text>\n    </a-hotspot>'],
        BB_TER_O2: ['\n    <a-hotspot\n      visible="false"\n      id="BB_TER_O2_TO_CENTER"\n      to="BB_TER_CENTER"\n      position="-7.15 0.20 -12.33"\n      scale="2.5 2.5 2.5"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="Factory Center"\n        align="center"\n        mixin="hotspot-bottom-text"\n      ></a-text>\n    </a-hotspot>']
      },
      ...{
        BB_DET_E: ['<a-hotspot\n      visible="false"\n      id="BB_DET_E_TO_CENTER"\n      to="BB_DET_CENTER"\n      look-at="[camera]"\n      position="-10.26 0.18 7.99"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image width="0.5" height="0.5" src="#hotspot-staight-icon" rotation="-60 0 0"></a-image>\n      <a-text value="Factory Center" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>'],
        BB_DET_CENTER: ['<a-hotspot\n      visible="false"\n      id="BB_DET_CENTER_TO_E"\n      to="BB_DET_E"\n      position="6.85 0.63 -12.48"\n      look-at="[camera]"\n      scale="2 2 2"\n    >\n      <a-image width="0.5" height="0.5" src="#hotspot-staight-icon" rotation="-60 0 0" scale="1.5 1.5 1.5"></a-image>\n      <a-text value="Entrance" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="BB_DET_CENTER_TO_O"\n      to="BB_DET_O"\n      position="-5.57 0.63 -13.10"\n      scale="2 2 2"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n        scale="1.5 1.5 1.5"\n      ></a-image>\n      <a-text value="Office" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>'],
        BB_DET_O: ['<a-hotspot\n      visible="false"\n      id="BB_DET_O1_TO_CENTER"\n      to="BB_DET_CENTER"\n      position="-5.00 -0.85 -11.43"\n      scale="2.5 2.5 2.5"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="Factory Center"\n        align="center"\n        mixin="hotspot-bottom-text"\n      ></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="BB_DET_O1_TO_E"\n      to="BB_DET_E"\n      position="5.51 -0.97 9.47"\n      scale="2.5 2.5 2.5"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="Entrance"\n        align="center"\n        mixin="hotspot-bottom-text"\n      ></a-text>\n    </a-hotspot>']
      },
      ...{
        BB_OUTDOOR_1: ['<a-hotspot\n      visible="false"\n      id="BB_OUTDOOR_1_TO_2"\n      to="BB_OUTDOOR_2"\n      look-at="[camera]"\n      position="-11.94 -1.10 -0.43"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="View 2"\n        align="center"\n        mixin="hotspot-bottom-text"\n        ></a-text>\n    </a-hotspot>'],
        BB_OUTDOOR_2: ['<a-hotspot\n      visible="false"\n      id="BB_OUTDOOR_2_TO_1"\n      to="BB_OUTDOOR_1"\n      look-at="[camera]"\n      position="12.23 -0.66 0.35"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="View 1"\n        align="center"\n        mixin="hotspot-bottom-text"\n        ></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="BB_OUTDOOR_2_TO_3"\n      to="BB_OUTDOOR_3"\n      look-at="[camera]"\n      position="0.06 -0.54 -12.24"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="View 3"\n        align="center"\n        mixin="hotspot-bottom-text"\n        ></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="BB_OUTDOOR_2_TO_5"\n      to="BB_OUTDOOR_5"\n      look-at="[camera]"\n      position="-12.25 -0.15 -0.12"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="View 5"\n        align="center"\n        mixin="hotspot-bottom-text"\n        ></a-text>\n    </a-hotspot>'],
        BB_OUTDOOR_3: ['<a-hotspot\n      visible="false"\n      id="BB_OUTDOOR_3_TO_6"\n      to="BB_OUTDOOR_6"\n      look-at="[camera]"\n      position="-11.88 0.64 -2.91"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="View 6"\n        align="center"\n        mixin="hotspot-bottom-text"\n        ></a-text>\n    </a-hotspot>'],
        BB_OUTDOOR_4: ['<a-hotspot\n      visible="false"\n      id="BB_OUTDOOR_4_TO_6"\n      to="BB_OUTDOOR_6"\n      look-at="[camera]"\n      position="-12.12 -1.35 2.77"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="View 6"\n        align="center"\n        mixin="hotspot-bottom-text"\n        ></a-text>\n    </a-hotspot>'],
        BB_OUTDOOR_5: ['<a-hotspot\n      visible="false"\n      id="BB_OUTDOOR_5_TO_2"\n      to="BB_OUTDOOR_2"\n      look-at="[camera]"\n      position="-8.72 -1.45 8.84"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="View 2"\n        align="center"\n        mixin="hotspot-bottom-text"\n        ></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="BB_OUTDOOR_5_TO_6"\n      to="BB_OUTDOOR_6"\n      look-at="[camera]"\n      position="8.96 -1.57 8.57"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="View 6"\n        align="center"\n        mixin="hotspot-bottom-text"\n        ></a-text>\n    </a-hotspot>'],
        BB_OUTDOOR_6: ['<a-hotspot\n      visible="false"\n      id="BB_OUTDOOR_6_TO_3"\n      to="BB_OUTDOOR_3"\n      look-at="[camera]"\n      position="-10.21 -7.19 10.01"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="View 3"\n        align="center"\n        mixin="hotspot-bottom-text"\n        ></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="BB_OUTDOOR_6_TO_5"\n      to="BB_OUTDOOR_5"\n      look-at="[camera]"\n      position="-9.22 -9.40 -9.09"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="View 5"\n        align="center"\n        mixin="hotspot-bottom-text"\n        ></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="BB_OUTDOOR_6_TO_4"\n      to="BB_OUTDOOR_4"\n      look-at="[camera]"\n      position="9.93 -7.70 9.90"\n      scale="2.5 2.5 2.5"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="View 4"\n        align="center"\n        mixin="hotspot-bottom-text"\n        ></a-text>\n    </a-hotspot>']
      },
      ...{
        BB_SEMI_E1: ['<a-hotspot\n      visible="false"\n      id="BB_SEMI_E1_TO_CENTER" to="BB_SEMI_CENTER" look-at="[camera]"\n      position="-11.91 0.10 2.86" scale="2.5 2.5 2.5"\n    >\n      <a-image width="0.5" height="0.5" src="#hotspot-staight-icon" rotation="-60 0 0"></a-image>\n      <a-text value="Factory Center" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="BB_SEMI_E1_TO_E2" to="BB_SEMI_E2" look-at="[camera]"\n      position="-2.84 0.39 -11.91" scale="2.5 2.5 2.5"\n    >\n      <a-image width="0.5" height="0.5" src="#hotspot-staight-icon" rotation="-60 0 0"></a-image>\n      <a-text value="Entrance 2" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>'],
        BB_SEMI_E2: ['<a-hotspot\n      visible="false"\n      id="BB_SEMI_E2_TO_CENTER" to="BB_SEMI_CENTER" look-at="[camera]"\n      position="-10.38 0.39 2.76  " scale="2.5 2.5 2.5"\n    >\n      <a-image width="0.5" height="0.5" src="#hotspot-staight-icon" rotation="-60 0 0"></a-image>\n      <a-text value="Factory Center" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="BB_SEMI_E2_TO_E1" to="BB_SEMI_E1" look-at="[camera]"\n      position="-8.78 0.45 7.80" scale="2.5 2.5 2.5"\n    >\n      <a-image width="0.5" height="0.5" src="#hotspot-staight-icon" rotation="-60 0 0"></a-image>\n      <a-text value="Entrance 1" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>'],
        BB_SEMI_CENTER: ['<a-hotspot\n      visible="false"\n      id="BB_SEMI_CENTER_TO_E1"\n      to="BB_SEMI_E1"\n      position="0.44 0.53 9.47"\n      look-at="[camera]"\n    >\n      <a-image width="0.5" height="0.5" src="#hotspot-staight-icon" rotation="-60 0 0" scale="1.5 1.5 1.5"></a-image>\n      <a-text value="Entrance 1" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="BB_SEMI_CENTER_TO_C1"\n      to="BB_SEMI_C1"\n      position="-8.45 0.22 3.76"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n        scale="2 2 2"\n      ></a-image>\n      <a-text value="Corner 1" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="BB_SEMI_CENTER_TO_C3"\n      to="BB_SEMI_C3"\n      position="8.54 0.35 -3.53"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n        scale="1.5 1.5 1.5"\n      ></a-image>\n      <a-text value="Corner 3" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="BB_SEMI_CENTER_TO_O2"\n      to="BB_SEMI_O2"\n      position="6.77 0.65 6.27"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n        scale="1.5 1.5 1.5"\n      ></a-image>\n      <a-text value="Office 2" align="center" mixin="hotspot-bottom-text"></a-text>\n    </a-hotspot>'],
        BB_SEMI_C1: ['<a-hotspot\n      visible="false"\n      id="BB_SEMI_C1_TO_CENTER"\n      to="BB_SEMI_CENTER"\n      position="-4.07 0.62 10.20"\n      scale="2 2 2"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="Factory Center"\n        align="center"\n        mixin="hotspot-bottom-text"\n      ></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="BB_SEMI_C1_TO_O1"\n      to="BB_SEMI_O1"\n      position="-7.68 0.42 -7.86"\n      scale="2 2 2"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="Office 1"\n        align="center"\n        mixin="hotspot-bottom-text"\n      ></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="BB_SEMI_C1_TO_C2"\n      to="BB_SEMI_C2"\n      position="3.89 0.46 -10.28"\n      scale="2 2 2"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="Corner 2"\n        align="center"\n        mixin="hotspot-bottom-text"\n      ></a-text>\n    </a-hotspot>'],
        BB_SEMI_C2: ['<a-hotspot\n      visible="false"\n      id="BB_SEMI_C3_TO_C1"\n      to="BB_SEMI_C1"\n      position="-8.83 0.90 5.12"\n      scale="2.5 2.5 2.5"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="Corner 1"\n        align="center"\n        mixin="hotspot-bottom-text"\n      ></a-text>\n    </a-hotspot>'],
        BB_SEMI_C3: ['<a-hotspot\n      visible="false"\n      id="BB_SEMI_C2_TO_CENTER"\n      to="BB_SEMI_CENTER"\n      position="-3.50 0.70 -9.34"\n      scale="2 2 2"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="Factory Center"\n        align="center"\n        mixin="hotspot-bottom-text"\n      ></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="BB_SEMI_C2_TO_E2"\n      to="BB_SEMI_E2"\n      position="-7.62 0.62 6.45"\n      scale="1.5 1.5 1.5"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="Entrance 2"\n        align="center"\n        mixin="hotspot-bottom-text"\n      ></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="BB_SEMI_C2_TO_O2"\n      to="BB_SEMI_O2"\n      position="-9.91 0.80 -1.06"\n      scale="1.5 1.5 1.5"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="Office 2"\n        align="center"\n        mixin="hotspot-bottom-text"\n      ></a-text>\n    </a-hotspot>'],
        BB_SEMI_O1: ['<a-hotspot\n      visible="false"\n      id="BB_SEMI_O1_TO_C1"\n      to="BB_SEMI_C1"\n      position="-10.09 0.29 2.89"\n      scale="2.5 2.5 2.5"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="Corner 1"\n        align="center"\n        mixin="hotspot-bottom-text"\n      ></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="BB_SEMI_O1_TO_E1"\n      to="BB_SEMI_E1"\n      position="9.71 -0.82 -3.91"\n      scale="2.5 2.5 2.5"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="Entrance 1"\n        align="center"\n        mixin="hotspot-bottom-text"\n      ></a-text>\n    </a-hotspot>'],
        BB_SEMI_O2: ['<a-hotspot\n      visible="false"\n      id="BB_SEMI_O2_TO_C2"\n      to="BB_SEMI_C2"\n      position="10.90 0.07 1.50"\n      scale="2.5 2.5 2.5"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="Corner 2"\n        align="center"\n        mixin="hotspot-bottom-text"\n      ></a-text>\n    </a-hotspot>', '<a-hotspot\n      visible="false"\n      id="BB_SEMI_O2_TO_E2"\n      to="BB_SEMI_E2"\n      position="-10.77 -0.31 -2.22"\n      scale="2.5 2.5 2.5"\n      look-at="[camera]"\n    >\n      <a-image\n        width="0.5"\n        height="0.5"\n        src="#hotspot-staight-icon"\n        rotation="-60 0 0"\n      ></a-image>\n      <a-text\n        value="Entrance 2"\n        align="center"\n        mixin="hotspot-bottom-text"\n      ></a-text>\n    </a-hotspot>']
      }
    };
    n(0);
    /*! @license is-dom-node v1.0.4
  
  Copyright 2018 Fisssion LLC.
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
  
  */
    var r = function (e) {
      return "object" == typeof window.Node ? e instanceof window.Node : null !== e && "object" == typeof e && "number" == typeof e.nodeType && "string" == typeof e.nodeName
    };
    /*! @license is-dom-node-list v1.2.1
  
  Copyright 2018 Fisssion LLC.
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
  
  */
    var a = function (e) {
      var t = Object.prototype.toString.call(e);
      return "object" == typeof window.NodeList ? e instanceof window.NodeList : null !== e && "object" == typeof e && "number" == typeof e.length && /^\[object (HTMLCollection|NodeList|Object)\]$/.test(t) && (0 === e.length || r(e[0]))
    };
    /*! @license Tealight v0.3.6
  
  Copyright 2018 Fisssion LLC.
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
  
  */
    var s = function (e, t) {
      if (void 0 === t && (t = document),
        e instanceof Array)
        return e.filter(r);
      if (r(e))
        return [e];
      if (a(e))
        return Array.prototype.slice.call(e);
      if ("string" == typeof e)
        try {
          var n = t.querySelectorAll(e);
          return Array.prototype.slice.call(n)
        } catch (e) {
          return []
        }
      return []
    };
    /*! @license Rematrix v0.3.0
  
  Copyright 2018 Julian Lloyd.
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
  */
    function l(e) {
      if (e.constructor !== Array)
        throw new TypeError("Expected array.");
      if (16 === e.length)
        return e;
      if (6 === e.length) {
        var t = c();
        return t[0] = e[0],
          t[1] = e[1],
          t[4] = e[2],
          t[5] = e[3],
          t[12] = e[4],
          t[13] = e[5],
          t
      }
      throw new RangeError("Expected array with either 6 or 16 values.")
    }
    function c() {
      for (var e = [], t = 0; t < 16; t++)
        t % 5 == 0 ? e.push(1) : e.push(0);
      return e
    }
    function u(e, t) {
      for (var n = l(e), o = l(t), i = [], r = 0; r < 4; r++)
        for (var a = [n[r], n[r + 4], n[r + 8], n[r + 12]], s = 0; s < 4; s++) {
          var c = 4 * s
            , u = [o[c], o[c + 1], o[c + 2], o[c + 3]]
            , p = a[0] * u[0] + a[1] * u[1] + a[2] * u[2] + a[3] * u[3];
          i[r + c] = p
        }
      return i
    }
    function p(e) {
      if ("string" == typeof e) {
        var t = e.match(/matrix(3d)?\(([^)]+)\)/);
        if (t)
          return l(t[2].split(", ").map(parseFloat))
      }
      return c()
    }
    function d(e) {
      var t = Math.PI / 180 * e
        , n = c();
      return n[0] = n[5] = Math.cos(t),
        n[1] = n[4] = Math.sin(t),
        n[4] *= -1,
        n
    }
    function h(e, t) {
      var n = c();
      return n[0] = e,
        n[5] = "number" == typeof t ? t : e,
        n
    }
    /*! @license miniraf v1.0.0
  
  Copyright 2018 Fisssion LLC.
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
  
  */
    var f, y = (f = Date.now(),
      function (e) {
        var t = Date.now();
        t - f > 16 ? (f = t,
          e(t)) : setTimeout((function () {
            return y(e)
          }
          ), 0)
      }
    ), m = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || y, g = {
      delay: 0,
      distance: "0",
      duration: 600,
      easing: "cubic-bezier(0.5, 0, 0, 1)",
      interval: 0,
      opacity: 0,
      origin: "bottom",
      rotate: {
        x: 0,
        y: 0,
        z: 0
      },
      scale: 1,
      cleanup: !1,
      container: document.documentElement,
      desktop: !0,
      mobile: !0,
      reset: !1,
      useDelay: "always",
      viewFactor: 0,
      viewOffset: {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      },
      afterReset: function () { },
      afterReveal: function () { },
      beforeReset: function () { },
      beforeReveal: function () { }
    };
    var v = {
      success: function () {
        document.documentElement.classList.add("sr"),
          document.body ? document.body.style.height = "100%" : document.addEventListener("DOMContentLoaded", (function () {
            document.body.style.height = "100%"
          }
          ))
      },
      failure: function () {
        return document.documentElement.classList.remove("sr"),
        {
          clean: function () { },
          destroy: function () { },
          reveal: function () { },
          sync: function () { },
          get noop() {
            return !0
          }
        }
      }
    };
    function x(e) {
      return null !== e && e instanceof Object && (e.constructor === Object || "[object Object]" === Object.prototype.toString.call(e))
    }
    function _(e, t) {
      if (x(e))
        return Object.keys(e).forEach((function (n) {
          return t(e[n], n, e)
        }
        ));
      if (e instanceof Array)
        return e.forEach((function (n, o) {
          return t(n, o, e)
        }
        ));
      throw new TypeError("Expected either an array or object literal.")
    }
    function E(e) {
      for (var t = [], n = arguments.length - 1; n-- > 0;)
        t[n] = arguments[n + 1];
      if (this.constructor.debug && console) {
        var o = "%cScrollReveal: " + e;
        t.forEach((function (e) {
          return o += "\n — " + e
        }
        )),
          console.log(o, "color: #ea654b;")
      }
    }
    function b() {
      var e = this
        , t = {
          active: [],
          stale: []
        }
        , n = {
          active: [],
          stale: []
        }
        , o = {
          active: [],
          stale: []
        };
      try {
        _(s("[data-sr-id]"), (function (e) {
          var n = parseInt(e.getAttribute("data-sr-id"));
          t.active.push(n)
        }
        ))
      } catch (e) {
        throw e
      }
      _(this.store.elements, (function (e) {
        -1 === t.active.indexOf(e.id) && t.stale.push(e.id)
      }
      )),
        _(t.stale, (function (t) {
          return delete e.store.elements[t]
        }
        )),
        _(this.store.elements, (function (e) {
          -1 === o.active.indexOf(e.containerId) && o.active.push(e.containerId),
            e.hasOwnProperty("sequence") && -1 === n.active.indexOf(e.sequence.id) && n.active.push(e.sequence.id)
        }
        )),
        _(this.store.containers, (function (e) {
          -1 === o.active.indexOf(e.id) && o.stale.push(e.id)
        }
        )),
        _(o.stale, (function (t) {
          var n = e.store.containers[t].node;
          n.removeEventListener("scroll", e.delegate),
            n.removeEventListener("resize", e.delegate),
            delete e.store.containers[t]
        }
        )),
        _(this.store.sequences, (function (e) {
          -1 === n.active.indexOf(e.id) && n.stale.push(e.id)
        }
        )),
        _(n.stale, (function (t) {
          return delete e.store.sequences[t]
        }
        ))
    }
    function T(e) {
      var t, n = this;
      try {
        _(s(e), (function (e) {
          var o = e.getAttribute("data-sr-id");
          if (null !== o) {
            t = !0;
            var i = n.store.elements[o];
            i.callbackTimer && window.clearTimeout(i.callbackTimer.clock),
              e.setAttribute("style", i.styles.inline.generated),
              e.removeAttribute("data-sr-id"),
              delete n.store.elements[o]
          }
        }
        ))
      } catch (e) {
        return E.call(this, "Clean failed.", e.message)
      }
      if (t)
        try {
          b.call(this)
        } catch (e) {
          return E.call(this, "Clean failed.", e.message)
        }
    }
    function w() {
      var e = this;
      _(this.store.elements, (function (e) {
        e.node.setAttribute("style", e.styles.inline.generated),
          e.node.removeAttribute("data-sr-id")
      }
      )),
        _(this.store.containers, (function (t) {
          var n = t.node === document.documentElement ? window : t.node;
          n.removeEventListener("scroll", e.delegate),
            n.removeEventListener("resize", e.delegate)
        }
        )),
        this.store = {
          containers: {},
          elements: {},
          history: [],
          sequences: {}
        }
    }
    var O = function () {
      var e = {}
        , t = document.documentElement.style;
      function n(n, o) {
        if (void 0 === o && (o = t),
          n && "string" == typeof n) {
          if (e[n])
            return e[n];
          if ("string" == typeof o[n])
            return e[n] = n;
          if ("string" == typeof o["-webkit-" + n])
            return e[n] = "-webkit-" + n;
          throw new RangeError('Unable to find "' + n + '" style property.')
        }
        throw new TypeError("Expected a string.")
      }
      return n.clearCache = function () {
        return e = {}
      }
        ,
        n
    }();
    function j(e) {
      var t = window.getComputedStyle(e.node)
        , n = t.position
        , o = e.config
        , i = {}
        , r = (e.node.getAttribute("style") || "").match(/[\w-]+\s*:\s*[^;]+\s*/gi) || [];
      i.computed = r ? r.map((function (e) {
        return e.trim()
      }
      )).join("; ") + ";" : "",
        i.generated = r.some((function (e) {
          return e.match(/visibility\s?:\s?visible/i)
        }
        )) ? i.computed : r.concat(["visibility: visible"]).map((function (e) {
          return e.trim()
        }
        )).join("; ") + ";";
      var a, s, l, f = parseFloat(t.opacity), y = isNaN(parseFloat(o.opacity)) ? parseFloat(t.opacity) : parseFloat(o.opacity), m = {
        computed: f !== y ? "opacity: " + f + ";" : "",
        generated: f !== y ? "opacity: " + y + ";" : ""
      }, g = [];
      if (parseFloat(o.distance)) {
        var v = "top" === o.origin || "bottom" === o.origin ? "Y" : "X"
          , x = o.distance;
        "top" !== o.origin && "left" !== o.origin || (x = /^-/.test(x) ? x.substr(1) : "-" + x);
        var _ = x.match(/(^-?\d+\.?\d?)|(em$|px$|%$)/g)
          , E = _[0];
        switch (_[1]) {
          case "em":
            x = parseInt(t.fontSize) * E;
            break;
          case "px":
            x = E;
            break;
          case "%":
            x = "Y" === v ? e.node.getBoundingClientRect().height * E / 100 : e.node.getBoundingClientRect().width * E / 100;
            break;
          default:
            throw new RangeError("Unrecognized or missing distance unit.")
        }
        "Y" === v ? g.push(function (e) {
          var t = c();
          return t[13] = e,
            t
        }(x)) : g.push(function (e) {
          var t = c();
          return t[12] = e,
            t
        }(x))
      }
      o.rotate.x && g.push((a = o.rotate.x,
        s = Math.PI / 180 * a,
        (l = c())[5] = l[10] = Math.cos(s),
        l[6] = l[9] = Math.sin(s),
        l[9] *= -1,
        l)),
        o.rotate.y && g.push(function (e) {
          var t = Math.PI / 180 * e
            , n = c();
          return n[0] = n[10] = Math.cos(t),
            n[2] = n[8] = Math.sin(t),
            n[2] *= -1,
            n
        }(o.rotate.y)),
        o.rotate.z && g.push(d(o.rotate.z)),
        1 !== o.scale && (0 === o.scale ? g.push(h(2e-4)) : g.push(h(o.scale)));
      var b = {};
      if (g.length) {
        b.property = O("transform"),
          b.computed = {
            raw: t[b.property],
            matrix: p(t[b.property])
          },
          g.unshift(b.computed.matrix);
        var T = g.reduce(u);
        b.generated = {
          initial: b.property + ": matrix3d(" + T.join(", ") + ");",
          final: b.property + ": matrix3d(" + b.computed.matrix.join(", ") + ");"
        }
      } else
        b.generated = {
          initial: "",
          final: ""
        };
      var w = {};
      if (m.generated || b.generated.initial) {
        w.property = O("transition"),
          w.computed = t[w.property],
          w.fragments = [];
        var j = o.delay
          , M = o.duration
          , C = o.easing;
        m.generated && w.fragments.push({
          delayed: "opacity " + M / 1e3 + "s " + C + " " + j / 1e3 + "s",
          instant: "opacity " + M / 1e3 + "s " + C + " 0s"
        }),
          b.generated.initial && w.fragments.push({
            delayed: b.property + " " + M / 1e3 + "s " + C + " " + j / 1e3 + "s",
            instant: b.property + " " + M / 1e3 + "s " + C + " 0s"
          }),
          w.computed && !w.computed.match(/all 0s|none 0s/) && w.fragments.unshift({
            delayed: w.computed,
            instant: w.computed
          });
        var R = w.fragments.reduce((function (e, t, n) {
          return e.delayed += 0 === n ? t.delayed : ", " + t.delayed,
            e.instant += 0 === n ? t.instant : ", " + t.instant,
            e
        }
        ), {
          delayed: "",
          instant: ""
        });
        w.generated = {
          delayed: w.property + ": " + R.delayed + ";",
          instant: w.property + ": " + R.instant + ";"
        }
      } else
        w.generated = {
          delayed: "",
          instant: ""
        };
      return {
        inline: i,
        opacity: m,
        position: n,
        transform: b,
        transition: w
      }
    }
    function M(e, t) {
      void 0 === t && (t = {});
      var n = t.pristine || this.pristine
        , o = "always" === e.config.useDelay || "onload" === e.config.useDelay && n || "once" === e.config.useDelay && !e.seen
        , i = e.visible && !e.revealed
        , r = !e.visible && e.revealed && e.config.reset;
      return t.reveal || i ? C.call(this, e, o) : t.reset || r ? R.call(this, e) : void 0
    }
    function C(e, t) {
      var n = [e.styles.inline.generated, e.styles.opacity.computed, e.styles.transform.generated.final];
      t ? n.push(e.styles.transition.generated.delayed) : n.push(e.styles.transition.generated.instant),
        e.revealed = e.seen = !0,
        e.node.setAttribute("style", n.filter((function (e) {
          return "" !== e
        }
        )).join(" ")),
        B.call(this, e, t)
    }
    function R(e) {
      var t = [e.styles.inline.generated, e.styles.opacity.generated, e.styles.transform.generated.initial, e.styles.transition.generated.instant];
      e.revealed = !1,
        e.node.setAttribute("style", t.filter((function (e) {
          return "" !== e
        }
        )).join(" ")),
        B.call(this, e)
    }
    function B(e, t) {
      var n = this
        , o = t ? e.config.duration + e.config.delay : e.config.duration
        , i = e.revealed ? e.config.beforeReveal : e.config.beforeReset
        , r = e.revealed ? e.config.afterReveal : e.config.afterReset
        , a = 0;
      e.callbackTimer && (a = Date.now() - e.callbackTimer.start,
        window.clearTimeout(e.callbackTimer.clock)),
        i(e.node),
        e.callbackTimer = {
          start: Date.now(),
          clock: window.setTimeout((function () {
            r(e.node),
              e.callbackTimer = null,
              e.revealed && !e.config.reset && e.config.cleanup && T.call(n, e.node)
          }
          ), o - a)
        }
    }
    var D, k = (D = 0,
      function () {
        return D++
      }
    );
    function S(e, t) {
      if (void 0 === t && (t = this.pristine),
        !e.visible && e.revealed && e.config.reset)
        return M.call(this, e, {
          reset: !0
        });
      var n = this.store.sequences[e.sequence.id]
        , o = e.sequence.index;
      if (n) {
        var i = new P(n, "visible", this.store)
          , r = new P(n, "revealed", this.store);
        if (n.models = {
          visible: i,
          revealed: r
        },
          !r.body.length) {
          var a = n.members[i.body[0]]
            , s = this.store.elements[a];
          if (s)
            return A.call(this, n, i.body[0], -1, t),
              A.call(this, n, i.body[0], 1, t),
              M.call(this, s, {
                reveal: !0,
                pristine: t
              })
        }
        if (!n.blocked.head && o === [].concat(r.head).pop() && o >= [].concat(i.body).shift())
          return A.call(this, n, o, -1, t),
            M.call(this, e, {
              reveal: !0,
              pristine: t
            });
        if (!n.blocked.foot && o === [].concat(r.foot).shift() && o <= [].concat(i.body).pop())
          return A.call(this, n, o, 1, t),
            M.call(this, e, {
              reveal: !0,
              pristine: t
            })
      }
    }
    function I(e) {
      var t = Math.abs(e);
      if (isNaN(t))
        throw new RangeError("Invalid sequence interval.");
      this.id = k(),
        this.interval = Math.max(t, 16),
        this.members = [],
        this.models = {},
        this.blocked = {
          head: !1,
          foot: !1
        }
    }
    function P(e, t, n) {
      var o = this;
      this.head = [],
        this.body = [],
        this.foot = [],
        _(e.members, (function (e, i) {
          var r = n.elements[e];
          r && r[t] && o.body.push(i)
        }
        )),
        this.body.length && _(e.members, (function (e, i) {
          var r = n.elements[e];
          r && !r[t] && (i < o.body[0] ? o.head.push(i) : o.foot.push(i))
        }
        ))
    }
    function A(e, t, n, o) {
      var i = this
        , r = ["head", null, "foot"][1 + n]
        , a = e.members[t + n]
        , s = this.store.elements[a];
      e.blocked[r] = !0,
        setTimeout((function () {
          e.blocked[r] = !1,
            s && S.call(i, s, o)
        }
        ), e.interval)
    }
    function N() {
      var e = this;
      b.call(this),
        _(this.store.elements, (function (e) {
          var t = [e.styles.inline.generated];
          e.visible ? (t.push(e.styles.opacity.computed),
            t.push(e.styles.transform.generated.final),
            e.revealed = !0) : (t.push(e.styles.opacity.generated),
              t.push(e.styles.transform.generated.initial),
              e.revealed = !1),
            e.node.setAttribute("style", t.filter((function (e) {
              return "" !== e
            }
            )).join(" "))
        }
        )),
        _(this.store.containers, (function (t) {
          var n = t.node === document.documentElement ? window : t.node;
          n.addEventListener("scroll", e.delegate),
            n.addEventListener("resize", e.delegate)
        }
        )),
        this.delegate(),
        this.initTimeout = null
    }
    function H(e) {
      return void 0 === e && (e = navigator.userAgent),
        /Android|iPhone|iPad|iPod/i.test(e)
    }
    function L(e) {
      for (var t = [], n = arguments.length - 1; n-- > 0;)
        t[n] = arguments[n + 1];
      if (x(e))
        return _(t, (function (t) {
          _(t, (function (t, n) {
            x(t) ? (e[n] && x(e[n]) || (e[n] = {}),
              L(e[n], t)) : e[n] = t
          }
          ))
        }
        )),
          e;
      throw new TypeError("Target must be an object literal.")
    }
    function V(e, t, n) {
      var o = this;
      void 0 === t && (t = {}),
        void 0 === n && (n = !1);
      var i, r = [], a = t.interval || g.interval;
      try {
        a && (i = new I(a));
        var l = s(e);
        if (!l.length)
          throw new Error("Invalid reveal target.");
        var c = l.reduce((function (e, n) {
          var a = {}
            , l = n.getAttribute("data-sr-id");
          l ? (L(a, o.store.elements[l]),
            a.node.setAttribute("style", a.styles.inline.computed)) : (a.id = k(),
              a.node = n,
              a.seen = !1,
              a.revealed = !1,
              a.visible = !1);
          var c = L({}, a.config || o.defaults, t);
          if (!c.mobile && H() || !c.desktop && !H())
            return l && T.call(o, a),
              e;
          var u, p = s(c.container)[0];
          if (!p)
            throw new Error("Invalid container.");
          return p.contains(n) ? (null === (u = function (e) {
            var t = []
              , n = arguments.length - 1;
            for (; n-- > 0;)
              t[n] = arguments[n + 1];
            var o = null;
            return _(t, (function (t) {
              _(t, (function (t) {
                null === o && t.node === e && (o = t.id)
              }
              ))
            }
            )),
              o
          }(p, r, o.store.containers)) && (u = k(),
            r.push({
              id: u,
              node: p
            })),
            a.config = c,
            a.containerId = u,
            a.styles = j(a),
            i && (a.sequence = {
              id: i.id,
              index: i.members.length
            },
              i.members.push(a.id)),
            e.push(a),
            e) : e
        }
        ), []);
        _(c, (function (e) {
          o.store.elements[e.id] = e,
            e.node.setAttribute("data-sr-id", e.id)
        }
        ))
      } catch (e) {
        return E.call(this, "Reveal failed.", e.message)
      }
      _(r, (function (e) {
        o.store.containers[e.id] = {
          id: e.id,
          node: e.node
        }
      }
      )),
        i && (this.store.sequences[i.id] = i),
        !0 !== n && (this.store.history.push({
          target: e,
          options: t
        }),
          this.initTimeout && window.clearTimeout(this.initTimeout),
          this.initTimeout = window.setTimeout(N.bind(this), 0))
    }
    function F() {
      var e = this;
      _(this.store.history, (function (t) {
        V.call(e, t.target, t.options, !0)
      }
      )),
        N.call(this)
    }
    var U = Math.sign || function (e) {
      return (e > 0) - (e < 0) || +e
    }
      ;
    function q(e, t) {
      var n = t ? e.node.clientHeight : e.node.offsetHeight
        , o = t ? e.node.clientWidth : e.node.offsetWidth
        , i = 0
        , r = 0
        , a = e.node;
      do {
        isNaN(a.offsetTop) || (i += a.offsetTop),
          isNaN(a.offsetLeft) || (r += a.offsetLeft),
          a = a.offsetParent
      } while (a); return {
        bounds: {
          top: i,
          right: r + o,
          bottom: i + n,
          left: r
        },
        height: n,
        width: o
      }
    }
    function z(e) {
      var t, n;
      return e.node === document.documentElement ? (t = window.pageYOffset,
        n = window.pageXOffset) : (t = e.node.scrollTop,
          n = e.node.scrollLeft),
      {
        top: t,
        left: n
      }
    }
    function W(e) {
      void 0 === e && (e = {});
      var t = this.store.containers[e.containerId];
      if (t) {
        var n = Math.max(0, Math.min(1, e.config.viewFactor))
          , o = e.config.viewOffset
          , i = e.geometry.bounds.top + e.geometry.height * n
          , r = e.geometry.bounds.right - e.geometry.width * n
          , a = e.geometry.bounds.bottom - e.geometry.height * n
          , s = e.geometry.bounds.left + e.geometry.width * n
          , l = t.geometry.bounds.top + t.scroll.top + o.top
          , c = t.geometry.bounds.right + t.scroll.left - o.right
          , u = t.geometry.bounds.bottom + t.scroll.top - o.bottom
          , p = t.geometry.bounds.left + t.scroll.left + o.left;
        return i < u && r > p && a > l && s < c || "fixed" === e.styles.position
      }
    }
    function X(e, t) {
      var n = this;
      void 0 === e && (e = {
        type: "init"
      }),
        void 0 === t && (t = this.store.elements),
        m((function () {
          var o = "init" === e.type || "resize" === e.type;
          _(n.store.containers, (function (e) {
            o && (e.geometry = q.call(n, e, !0));
            var t = z.call(n, e);
            e.scroll && (e.direction = {
              x: U(t.left - e.scroll.left),
              y: U(t.top - e.scroll.top)
            }),
              e.scroll = t
          }
          )),
            _(t, (function (e) {
              o && (e.geometry = q.call(n, e)),
                e.visible = W.call(n, e)
            }
            )),
            _(t, (function (e) {
              e.sequence ? S.call(n, e) : M.call(n, e)
            }
            )),
            n.pristine = !1
        }
        ))
    }
    var G, Q, Y, J, K, Z, ee, te;
    function ne(e) {
      var t;
      if (void 0 === e && (e = {}),
        void 0 === this || Object.getPrototypeOf(this) !== ne.prototype)
        return new ne(e);
      if (!ne.isSupported())
        return E.call(this, "Instantiation failed.", "This browser is not supported."),
          v.failure();
      try {
        t = L({}, Z || g, e)
      } catch (e) {
        return E.call(this, "Invalid configuration.", e.message),
          v.failure()
      }
      try {
        if (!s(t.container)[0])
          throw new Error("Invalid container.")
      } catch (e) {
        return E.call(this, e.message),
          v.failure()
      }
      return !(Z = t).mobile && H() || !Z.desktop && !H() ? (E.call(this, "This device is disabled.", "desktop: " + Z.desktop, "mobile: " + Z.mobile),
        v.failure()) : (v.success(),
          this.store = {
            containers: {},
            elements: {},
            history: [],
            sequences: {}
          },
          this.pristine = !0,
          G = G || X.bind(this),
          Q = Q || w.bind(this),
          Y = Y || V.bind(this),
          J = J || T.bind(this),
          K = K || F.bind(this),
          Object.defineProperty(this, "delegate", {
            get: function () {
              return G
            }
          }),
          Object.defineProperty(this, "destroy", {
            get: function () {
              return Q
            }
          }),
          Object.defineProperty(this, "reveal", {
            get: function () {
              return Y
            }
          }),
          Object.defineProperty(this, "clean", {
            get: function () {
              return J
            }
          }),
          Object.defineProperty(this, "sync", {
            get: function () {
              return K
            }
          }),
          Object.defineProperty(this, "defaults", {
            get: function () {
              return Z
            }
          }),
          Object.defineProperty(this, "version", {
            get: function () {
              return "4.0.6"
            }
          }),
          Object.defineProperty(this, "noop", {
            get: function () {
              return !1
            }
          }),
          te || (te = this))
    }
    ne.isSupported = function () {
      return function () {
        var e = document.documentElement.style;
        return "transform" in e || "WebkitTransform" in e
      }() && function () {
        var e = document.documentElement.style;
        return "transition" in e || "WebkitTransition" in e
      }()
    }
      ,
      Object.defineProperty(ne, "debug", {
        get: function () {
          return ee || !1
        },
        set: function (e) {
          return ee = "boolean" == typeof e ? e : ee
        }
      }),
      ne();
    var oe = ne;
    n(1);
    window.sr = oe(),
      window.$ = n(1);
    const ie = n(4);
    AFRAME.registerPrimitive("a-tour", {
      defaultComponents: {
        tour: {}
      }
    }),
      AFRAME.registerComponent("tour", {
        schema: {
          current_pano_id: {
            type: "string"
          },
          previous_pano_ids: {
            type: "array"
          }
        },
        init: function () {
          this.sky = document.createElement("a-sky"),
            this.sky.setAttribute("id", "sky"),
            this.sky.setAttribute("animation__fadein", "property:material.opacity;to:1;dur:500;startEvents:skyFadeIn"),
            this.sky.setAttribute("animation__fadeout", "property:material.opacity;to:0;dur:1000;startEvents:skyFadeOut"),
            this.el.appendChild(this.sky);
          var e = document.getElementById("camera")
            , t = this.setCamera.bind(this)
            , n = this.setHotspots.bind(this)
            , o = this.setHotspotsVisible.bind(this);
          e.addEventListener("animationcomplete", (function (e) {
            if ("animation__zoomin" == e.detail.name) {
              document.querySelector("a-tour").components.tour.updateSkyImage()
            }
          }
          )),
            this.sky.addEventListener("materialtextureloaded", (function (i) {
              (e = document.getElementById("camera")).emit("zoomout"),
                sky.emit("skyFadeIn"),
                t(),
                n(),
                $(".intro").is(":visible") || setTimeout(o, 2e3),
                window.sr.reveal(".heading-content", {
                  delay: 100,
                  interval: 50,
                  origin: "left",
                  distance: "50px"
                }),
                window.sr.reveal(".scrolldown-indicator .sv", {
                  delay: 150,
                  interval: 50,
                  origin: "left",
                  distance: "50px"
                }),
                window.sr.reveal(".highlight .point", {
                  interval: 50,
                  origin: "bottom",
                  distance: "50px"
                })
            }
            )),
            this.loadSceneId(this.getInitialViewId(), !0)
        },
        getInitialViewId: function () {
          return "myphuoc" == this.el.getAttribute("name") ? "MP3_OVERVIEW" : "BB_OVERVIEW"
        },
        loadSceneId: function (e, t) {
          const n = this.el.querySelector("a-panorama#main");
          n.components.panorama.updateData(e),
            this.clearHotspots(),
            this.el.setAttribute("tour", "current_pano_id", n.getAttribute("view-id")),
            this.loadImage(t),
            t || ("MP3_OVERVIEW" !== e ? $(".amenities").hide() : $(".amenities").fadeIn()),
            "MP3_SEMI_DETACHED" === e && oe().reveal(".skip-video-button", {
              scale: .5,
              reset: !0
            })
        },
        loadImage: function (e) {
          let t = this.sky
            , n = document.getElementById("camera");
          e ? this.updateSkyImage() : (n.emit("zoomin"),
            t.emit("skyFadeOut"),
            $(".spinner").show())
        },
        updateSkyImage: function () {
          let e = this.data.current_pano_id
            , t = this.el.querySelector("a-panorama#main").components.panorama.data.src;
          this.sky.setAttribute("src", t),
            window.displayDimention(e),
            window.changeViewName(e)
        },
        setHotspots: function () {
          let e = this.data.current_pano_id;
          i[e].forEach((function (e) {
            $(e).appendTo("#hotspot-group")
          }
          ))
        },
        setHotspotsVisible: function () {
          $("#hotspot-group").children().attr("visible", !0)
        },
        clearHotspots: function () {
          $("#hotspot-group").empty()
        },
        setCamera: function () {
          this.data.current_pano_id;
          let e = this.el.querySelector("a-panorama#main").components.panorama.data
            , t = this.el.sceneEl.camera.el;
          t.parentEl.setAttribute("rotation", e.rotation),
            t.parentEl.setAttribute("position", e.position);
          let n = e.xvalue ? parseFloat(e.xvalue) : 0;
          t.components["look-controls"].pitchObject.rotation.x = n,
            t.components["look-controls"].yawObject.rotation.y = 0
        },
        pushPreviousPanoIds: function () {
          "" != this.data.current_pano_id && this.el.setAttribute("tour", "previous_pano_ids", [...this.data.previous_pano_ids, this.data.current_pano_id])
        }
      }),
      AFRAME.registerPrimitive("a-panorama", {
        defaultComponents: {
          panorama: {}
        }
      }),
      AFRAME.registerComponent("panorama", {
        schema: {
          rotation: {
            type: "vec3"
          },
          position: {
            type: "vec3"
          },
          xvalue: {
            type: "number",
            default: 0
          },
          src: {
            type: "string"
          },
          next: {
            type: "string",
            default: ""
          },
          viewId: {
            type: "string"
          }
        },
        updateData: function (e) {
          let t = o[e];
          this.el.setAttribute("panorama", t),
            this.el.setAttribute("view-id", e)
        }
      }),
      AFRAME.registerPrimitive("a-hotspot", {
        defaultComponents: {
          hotspot: {}
        },
        mappings: {
          for: "hotspot.for",
          to: "hotspot.to",
          clickable: "hotspot.clickable",
          "enable-video": "hotspot.enable-video"
        }
      }),
      AFRAME.registerComponent("hotspot", {
        schema: {
          for: {
            type: "string"
          },
          to: {
            type: "string"
          },
          "enable-video": {
            type: "boolean",
            default: !1
          },
          clickable: {
            type: "boolean",
            default: !0
          },
          enable: {
            type: "boolean",
            default: !1
          },
          positioning: {
            type: "boolean",
            default: !1
          }
        },
        init: function () {
          this.tour = document.querySelector("a-tour"),
            this.data.clickable && this.el.addEventListener("click", this.handleClick.bind(this))
        },
        handleClick: function () {
          if (!this.data.positioning) {
            var e = this.tour.components.tour;
            e.pushPreviousPanoIds(),
              e.loadSceneId(this.data.to, !1)
          }
        }
      }),
      $((function () {
        var e;
        ie.replace(),
          $(".nav .menu-toggler").mouseenter((function () {
            $(".extended-nav").css("display", "flex"),
              $("#overlay").show()
          }
          )),
          $(".extended-nav .menu-toggler, #overlay, .intro").click((function () {
            $(".extended-nav").css("display", "none"),
              $("#overlay").hide()
          }
          )),
          $(".extended-nav").mouseover((function () {
            clearTimeout(e)
          }
          )).mouseleave((function () {
            e = setTimeout((function () {
              $(".extended-nav").css("display", "none"),
                $("#overlay").hide()
            }
            ), 500)
          }
          ))
      }
      ))
    $((function () {
      var e;
      ie.replace(),
        $("#phone-hover").mouseenter((function () {

          $(".extended-phone").css("top", $(this).position().top);
          $(".extended-phone").css("display", "flex")
        }
        )),
        $(".extended-phone .menu-toggler, #overlay, .intro").click((function () {
          $(".extended-phone").css("display", "none")
        }
        )),
        $(".extended-phone,#phone-hover").mouseover((function () {
          clearTimeout(e)
        }
        )).mouseleave((function () {
          e = setTimeout((function () {
            $(".extended-phone").css("display", "none")
          }
          ), 500)
        }
        ))
    }
    ))
    $((function () {
      var e;
      ie.replace(),
        $("#mail-hover").mouseenter((function () {
          $(".extended-mail").css("top", $(this).position().top);
          $(".extended-mail").css("display", "flex")
        }
        )),
        $(".extended-mail .menu-toggler, #overlay, .intro").click((function () {
          $(".extended-mail").css("display", "none")
        }
        )),
        $(".extended-mail,#mail-hover").mouseover((function () {
          clearTimeout(e)
        }
        )).mouseleave((function () {
          e = setTimeout((function () {
            $(".extended-mail").css("display", "none")
          }
          ), 500)
        }
        ))
    }
    ))
  }
]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vamF2YXNjcmlwdHMvdmlld0RhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vamF2YXNjcmlwdHMvZGF0YS9iYlZpZXdEYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vamF2YXNjcmlwdHMvbWFpbi5qcyIsIndlYnBhY2s6Ly8vLi9qYXZhc2NyaXB0cy9jdXN0b21Mb29rQ29udHJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmVhdGhlci1pY29ucy9kaXN0L2ZlYXRoZXIuanMiLCJ3ZWJwYWNrOi8vLy4vamF2YXNjcmlwdHMvYWN0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9qYXZhc2NyaXB0cy9zdmcubWluLmpzIiwid2VicGFjazovLy8uL2phdmFzY3JpcHRzL2RhdGEvcGFyYW5vbWEuanMiLCJ3ZWJwYWNrOi8vLy4vamF2YXNjcmlwdHMvZGF0YS9iYlBhbm9yYW1hLmpzIiwid2VicGFjazovLy8uL2phdmFzY3JpcHRzL2RhdGEvaG90c3BvdHMuanMiLCJ3ZWJwYWNrOi8vLy4vamF2YXNjcmlwdHMvZGF0YS9ob3RzcG90cy9tcDNPdXRkb29ycy5qcyIsIndlYnBhY2s6Ly8vLi9qYXZhc2NyaXB0cy9kYXRhL2hvdHNwb3RzL21wM1Rlci5qcyIsIndlYnBhY2s6Ly8vLi9qYXZhc2NyaXB0cy9kYXRhL2hvdHNwb3RzL21wM1NlbWkuanMiLCJ3ZWJwYWNrOi8vLy4vamF2YXNjcmlwdHMvZGF0YS9ob3RzcG90cy9tcDNEZXQuanMiLCJ3ZWJwYWNrOi8vLy4vamF2YXNjcmlwdHMvZGF0YS9ob3RzcG90cy9iYlRlci5qcyIsIndlYnBhY2s6Ly8vLi9qYXZhc2NyaXB0cy9kYXRhL2hvdHNwb3RzL2JiRGV0LmpzIiwid2VicGFjazovLy8uL2phdmFzY3JpcHRzL2RhdGEvaG90c3BvdHMvYmJPdXRkb29ycy5qcyIsIndlYnBhY2s6Ly8vLi9qYXZhc2NyaXB0cy9kYXRhL2hvdHNwb3RzL2JiU2VtaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtZG9tLW5vZGUvZGlzdC9pcy1kb20tbm9kZS5lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtZG9tLW5vZGUtbGlzdC9kaXN0L2lzLWRvbS1ub2RlLWxpc3QuZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RlYWxpZ2h0L2Rpc3QvdGVhbGlnaHQuZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWF0cml4L2Rpc3QvcmVtYXRyaXguZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21pbmlyYWYvZGlzdC9taW5pcmFmLmVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY3JvbGxyZXZlYWwvZGlzdC9zY3JvbGxyZXZlYWwuZXMuanMiLCJ3ZWJwYWNrOi8vLy4vamF2YXNjcmlwdHMvaW5kZXguanMiXSwibmFtZXMiOlsid2VicGFja0pzb25wQ2FsbGJhY2siLCJkYXRhIiwibW9kdWxlSWQiLCJjaHVua0lkIiwiY2h1bmtJZHMiLCJtb3JlTW9kdWxlcyIsImkiLCJyZXNvbHZlcyIsImxlbmd0aCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImluc3RhbGxlZENodW5rcyIsInB1c2giLCJtb2R1bGVzIiwicGFyZW50SnNvbnBGdW5jdGlvbiIsInNoaWZ0IiwiaW5zdGFsbGVkTW9kdWxlcyIsImluc3RhbGxlZENzc0NodW5rcyIsIjAiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiZXhwb3J0cyIsIm1vZHVsZSIsImwiLCJlIiwicHJvbWlzZXMiLCJjc3NDaHVua3MiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImhyZWYiLCJmdWxsaHJlZiIsInAiLCJleGlzdGluZ0xpbmtUYWdzIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImRhdGFIcmVmIiwidGFnIiwiZ2V0QXR0cmlidXRlIiwicmVsIiwiZXhpc3RpbmdTdHlsZVRhZ3MiLCJsaW5rVGFnIiwiY3JlYXRlRWxlbWVudCIsInR5cGUiLCJvbmxvYWQiLCJvbmVycm9yIiwiZXZlbnQiLCJyZXF1ZXN0IiwidGFyZ2V0Iiwic3JjIiwiZXJyIiwiRXJyb3IiLCJjb2RlIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJ0aGVuIiwiaW5zdGFsbGVkQ2h1bmtEYXRhIiwicHJvbWlzZSIsIm9uU2NyaXB0Q29tcGxldGUiLCJzY3JpcHQiLCJjaGFyc2V0IiwidGltZW91dCIsIm5jIiwic2V0QXR0cmlidXRlIiwianNvbnBTY3JpcHRTcmMiLCJlcnJvciIsImNsZWFyVGltZW91dCIsImNodW5rIiwiZXJyb3JUeXBlIiwicmVhbFNyYyIsIm1lc3NhZ2UiLCJuYW1lIiwidW5kZWZpbmVkIiwic2V0VGltZW91dCIsImhlYWQiLCJhbGwiLCJtIiwiYyIsImQiLCJnZXR0ZXIiLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJvZSIsImNvbnNvbGUiLCJqc29ucEFycmF5Iiwid2luZG93Iiwib2xkSnNvbnBGdW5jdGlvbiIsInNsaWNlIiwicyIsInZpZXdEYXRhIiwiTVAzX09WRVJWSUVXIiwidmlld0Rpc3BsYXlUZXh0IiwiTVAzX1RFUl9FIiwiTVAzX1RFUl9DRU5URVIiLCJ2aWRlb0lkIiwidmlkZW9UaXRsZSIsIk1QM19URVJfQzEiLCJNUDNfVEVSX0MyIiwiTVAzX1RFUl9PMSIsIk1QM19URVJfTzIiLCJNUDNfU0VNSV9FIiwiTVAzX1NFTUlfQ0VOVEVSIiwiTVAzX1NFTUlfQzEiLCJNUDNfU0VNSV9DMiIsIk1QM19TRU1JX08xIiwiTVAzX1NFTUlfTzIiLCJNUDNfREVUX0UiLCJNUDNfREVUX0NFTlRFUiIsIk1QM19ERVRfTzEiLCJNUDNfREVUX08yIiwiTVAzX09VVERPT1JfMSIsIk1QM19PVVRET09SXzIiLCJNUDNfT1VURE9PUl8zIiwiTVAzX09VVERPT1JfNCIsIk1QM19PVVRET09SXzUiLCJNUDNfT1VURE9PUl82IiwiTVAzX09VVERPT1JfNyIsIk1QM19PVVRET09SXzgiLCJNUDNfT1VURE9PUl85IiwiQkJfT1ZFUlZJRVciLCJCQl9URVJfRTEiLCJCQl9URVJfRTIiLCJCQl9URVJfQ0VOVEVSIiwiQkJfVEVSX0MxIiwiQkJfVEVSX0MyIiwiQkJfVEVSX0MzIiwiQkJfVEVSX08xIiwiQkJfVEVSX08yIiwiQkJfU0VNSV9FMSIsIkJCX1NFTUlfRTIiLCJCQl9TRU1JX0NFTlRFUiIsIkJCX1NFTUlfQzEiLCJCQl9TRU1JX0MyIiwiQkJfU0VNSV9DMyIsIkJCX1NFTUlfTzEiLCJCQl9TRU1JX08yIiwiQkJfREVUX0UiLCJCQl9ERVRfQ0VOVEVSIiwiQkJfREVUX08iLCJCQl9PVVRET09SXzEiLCJCQl9PVVRET09SXzIiLCJCQl9PVVRET09SXzMiLCJCQl9PVVRET09SXzQiLCJCQl9PVVRET09SXzUiLCJCQl9PVVRET09SXzYiLCJnbG9iYWwiLCJmYWN0b3J5IiwidyIsInRoaXMiLCJub0dsb2JhbCIsImFyciIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJmbGF0IiwiYXJyYXkiLCJjb25jYXQiLCJhcHBseSIsImluZGV4T2YiLCJjbGFzczJ0eXBlIiwidG9TdHJpbmciLCJoYXNPd24iLCJmblRvU3RyaW5nIiwiT2JqZWN0RnVuY3Rpb25TdHJpbmciLCJzdXBwb3J0IiwiaXNGdW5jdGlvbiIsIm9iaiIsIm5vZGVUeXBlIiwiaXNXaW5kb3ciLCJwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzIiwibm9uY2UiLCJub01vZHVsZSIsIkRPTUV2YWwiLCJub2RlIiwiZG9jIiwidmFsIiwidGV4dCIsInRvVHlwZSIsImpRdWVyeSIsInNlbGVjdG9yIiwiY29udGV4dCIsImZuIiwiaW5pdCIsImlzQXJyYXlMaWtlIiwianF1ZXJ5IiwiY29uc3RydWN0b3IiLCJ0b0FycmF5IiwibnVtIiwicHVzaFN0YWNrIiwiZWxlbXMiLCJyZXQiLCJtZXJnZSIsInByZXZPYmplY3QiLCJlYWNoIiwiY2FsbGJhY2siLCJtYXAiLCJlbGVtIiwiYXJndW1lbnRzIiwiZmlyc3QiLCJlcSIsImxhc3QiLCJldmVuIiwiZ3JlcCIsIl9lbGVtIiwib2RkIiwibGVuIiwiaiIsImVuZCIsInNvcnQiLCJzcGxpY2UiLCJleHRlbmQiLCJvcHRpb25zIiwiY29weSIsImNvcHlJc0FycmF5IiwiY2xvbmUiLCJkZWVwIiwiaXNQbGFpbk9iamVjdCIsIkFycmF5IiwiaXNBcnJheSIsImV4cGFuZG8iLCJNYXRoIiwicmFuZG9tIiwicmVwbGFjZSIsImlzUmVhZHkiLCJtc2ciLCJub29wIiwicHJvdG8iLCJDdG9yIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJtYWtlQXJyYXkiLCJyZXN1bHRzIiwiaW5BcnJheSIsInNlY29uZCIsImludmVydCIsIm1hdGNoZXMiLCJjYWxsYmFja0V4cGVjdCIsImFyZyIsImd1aWQiLCJpdGVyYXRvciIsInNwbGl0IiwiX2kiLCJ0b0xvd2VyQ2FzZSIsIlNpenpsZSIsIkV4cHIiLCJnZXRUZXh0IiwiaXNYTUwiLCJ0b2tlbml6ZSIsImNvbXBpbGUiLCJzZWxlY3QiLCJvdXRlcm1vc3RDb250ZXh0Iiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwic2V0RG9jdW1lbnQiLCJkb2NFbGVtIiwiZG9jdW1lbnRJc0hUTUwiLCJyYnVnZ3lRU0EiLCJyYnVnZ3lNYXRjaGVzIiwiY29udGFpbnMiLCJEYXRlIiwicHJlZmVycmVkRG9jIiwiZGlycnVucyIsImRvbmUiLCJjbGFzc0NhY2hlIiwiY3JlYXRlQ2FjaGUiLCJ0b2tlbkNhY2hlIiwiY29tcGlsZXJDYWNoZSIsIm5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUiLCJzb3J0T3JkZXIiLCJhIiwiYiIsInBvcCIsInB1c2hOYXRpdmUiLCJsaXN0IiwiYm9vbGVhbnMiLCJ3aGl0ZXNwYWNlIiwiaWRlbnRpZmllciIsImF0dHJpYnV0ZXMiLCJwc2V1ZG9zIiwicndoaXRlc3BhY2UiLCJSZWdFeHAiLCJydHJpbSIsInJjb21tYSIsInJjb21iaW5hdG9ycyIsInJkZXNjZW5kIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwicmh0bWwiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJycXVpY2tFeHByIiwicnNpYmxpbmciLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJlc2NhcGUiLCJub25IZXgiLCJoaWdoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwicmNzc2VzY2FwZSIsImZjc3Nlc2NhcGUiLCJjaCIsImFzQ29kZVBvaW50IiwiY2hhckNvZGVBdCIsInVubG9hZEhhbmRsZXIiLCJpbkRpc2FibGVkRmllbGRzZXQiLCJhZGRDb21iaW5hdG9yIiwiZGlzYWJsZWQiLCJub2RlTmFtZSIsImRpciIsIm5leHQiLCJjaGlsZE5vZGVzIiwiZWxzIiwic2VlZCIsIm5pZCIsIm1hdGNoIiwiZ3JvdXBzIiwibmV3U2VsZWN0b3IiLCJuZXdDb250ZXh0Iiwib3duZXJEb2N1bWVudCIsImV4ZWMiLCJnZXRFbGVtZW50QnlJZCIsImlkIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInFzYSIsInRlc3QiLCJ0ZXN0Q29udGV4dCIsInNjb3BlIiwidG9TZWxlY3RvciIsImpvaW4iLCJxdWVyeVNlbGVjdG9yQWxsIiwicXNhRXJyb3IiLCJyZW1vdmVBdHRyaWJ1dGUiLCJrZXlzIiwiY2FjaGUiLCJjYWNoZUxlbmd0aCIsIm1hcmtGdW5jdGlvbiIsImFzc2VydCIsImVsIiwiYWRkSGFuZGxlIiwiYXR0cnMiLCJoYW5kbGVyIiwiYXR0ckhhbmRsZSIsInNpYmxpbmdDaGVjayIsImN1ciIsImRpZmYiLCJzb3VyY2VJbmRleCIsIm5leHRTaWJsaW5nIiwiY3JlYXRlSW5wdXRQc2V1ZG8iLCJjcmVhdGVCdXR0b25Qc2V1ZG8iLCJjcmVhdGVEaXNhYmxlZFBzZXVkbyIsImlzRGlzYWJsZWQiLCJjcmVhdGVQb3NpdGlvbmFsUHNldWRvIiwiYXJndW1lbnQiLCJtYXRjaEluZGV4ZXMiLCJuYW1lc3BhY2UiLCJuYW1lc3BhY2VVUkkiLCJkb2N1bWVudEVsZW1lbnQiLCJoYXNDb21wYXJlIiwic3ViV2luZG93IiwiZGVmYXVsdFZpZXciLCJ0b3AiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJjbGFzc05hbWUiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiZmlsdGVyIiwiYXR0cklkIiwiZmluZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJ0bXAiLCJpbnB1dCIsImlubmVySFRNTCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwidW5zaGlmdCIsImV4cHIiLCJlbGVtZW50cyIsImF0dHIiLCJzcGVjaWZpZWQiLCJzZWwiLCJ1bmlxdWVTb3J0IiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwidGV4dENvbnRlbnQiLCJmaXJzdENoaWxkIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwicmVsYXRpdmUiLCJwcmVGaWx0ZXIiLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwib3BlcmF0b3IiLCJjaGVjayIsInJlc3VsdCIsIndoYXQiLCJfYXJndW1lbnQiLCJzaW1wbGUiLCJmb3J3YXJkIiwib2ZUeXBlIiwiX2NvbnRleHQiLCJ4bWwiLCJ1bmlxdWVDYWNoZSIsIm91dGVyQ2FjaGUiLCJub2RlSW5kZXgiLCJzdGFydCIsInBhcmVudCIsInVzZUNhY2hlIiwibGFzdENoaWxkIiwidW5pcXVlSUQiLCJwc2V1ZG8iLCJhcmdzIiwic2V0RmlsdGVycyIsImlkeCIsIm1hdGNoZWQiLCJtYXRjaGVyIiwidW5tYXRjaGVkIiwibGFuZyIsImVsZW1MYW5nIiwiaGFzaCIsImxvY2F0aW9uIiwiYWN0aXZlRWxlbWVudCIsImhhc0ZvY3VzIiwidGFiSW5kZXgiLCJjaGVja2VkIiwic2VsZWN0ZWQiLCJzZWxlY3RlZEluZGV4IiwiX21hdGNoSW5kZXhlcyIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwicGFzc3dvcmQiLCJpbWFnZSIsInN1Ym1pdCIsInJlc2V0IiwidG9rZW5zIiwiY29tYmluYXRvciIsImJhc2UiLCJza2lwIiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwib2xkQ2FjaGUiLCJuZXdDYWNoZSIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJjb25kZW5zZSIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInRlbXAiLCJwcmVNYXAiLCJwb3N0TWFwIiwicHJlZXhpc3RpbmciLCJjb250ZXh0cyIsIm11bHRpcGxlQ29udGV4dHMiLCJtYXRjaGVySW4iLCJtYXRjaGVyT3V0IiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsInNldE1hdGNoZXJzIiwiZWxlbWVudE1hdGNoZXJzIiwiYnlTZXQiLCJieUVsZW1lbnQiLCJzdXBlck1hdGNoZXIiLCJvdXRlcm1vc3QiLCJtYXRjaGVkQ291bnQiLCJzZXRNYXRjaGVkIiwiY29udGV4dEJhY2t1cCIsImRpcnJ1bnNVbmlxdWUiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJ0b2tlbiIsImNvbXBpbGVkIiwiX25hbWUiLCJkZWZhdWx0VmFsdWUiLCJ1bmlxdWUiLCJpc1hNTERvYyIsImVzY2FwZVNlbGVjdG9yIiwidW50aWwiLCJ0cnVuY2F0ZSIsImlzIiwic2libGluZ3MiLCJybmVlZHNDb250ZXh0IiwibmVlZHNDb250ZXh0IiwicnNpbmdsZVRhZyIsIndpbm5vdyIsInF1YWxpZmllciIsIm5vdCIsInNlbGYiLCJyb290alF1ZXJ5Iiwicm9vdCIsInBhcnNlSFRNTCIsInJlYWR5IiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNoaWxkcmVuIiwiY29udGVudHMiLCJwcmV2Iiwic2libGluZyIsImhhcyIsInRhcmdldHMiLCJjbG9zZXN0IiwiaW5kZXgiLCJwcmV2QWxsIiwiYWRkIiwiYWRkQmFjayIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwiY29udGVudERvY3VtZW50IiwiY29udGVudCIsInJldmVyc2UiLCJybm90aHRtbHdoaXRlIiwiSWRlbnRpdHkiLCJ2IiwiVGhyb3dlciIsImV4IiwiYWRvcHRWYWx1ZSIsIm5vVmFsdWUiLCJtZXRob2QiLCJmYWlsIiwiQ2FsbGJhY2tzIiwiXyIsImZsYWciLCJjcmVhdGVPcHRpb25zIiwiZmlyaW5nIiwibWVtb3J5IiwiZmlyZWQiLCJsb2NrZWQiLCJxdWV1ZSIsImZpcmluZ0luZGV4IiwiZmlyZSIsIm9uY2UiLCJzdG9wT25GYWxzZSIsInJlbW92ZSIsImVtcHR5IiwiZGlzYWJsZSIsImxvY2siLCJmaXJlV2l0aCIsIkRlZmVycmVkIiwiZnVuYyIsInR1cGxlcyIsInN0YXRlIiwiYWx3YXlzIiwiZGVmZXJyZWQiLCJwaXBlIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwicHJvZ3Jlc3MiLCJub3RpZnkiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJvblByb2dyZXNzIiwibWF4RGVwdGgiLCJkZXB0aCIsInNwZWNpYWwiLCJ0aGF0IiwibWlnaHRUaHJvdyIsIlR5cGVFcnJvciIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsInByb2Nlc3MiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsInJlamVjdFdpdGgiLCJnZXRTdGFja0hvb2siLCJzdGF0ZVN0cmluZyIsIndoZW4iLCJzaW5nbGVWYWx1ZSIsInJlbWFpbmluZyIsInJlc29sdmVDb250ZXh0cyIsInJlc29sdmVWYWx1ZXMiLCJtYXN0ZXIiLCJ1cGRhdGVGdW5jIiwicmVycm9yTmFtZXMiLCJzdGFjayIsIndhcm4iLCJyZWFkeUV4Y2VwdGlvbiIsInJlYWR5TGlzdCIsImNvbXBsZXRlZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjYXRjaCIsInJlYWR5V2FpdCIsIndhaXQiLCJyZWFkeVN0YXRlIiwiZG9TY3JvbGwiLCJhY2Nlc3MiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsInJhdyIsImJ1bGsiLCJfa2V5Iiwicm1zUHJlZml4IiwicmRhc2hBbHBoYSIsImZjYW1lbENhc2UiLCJfYWxsIiwibGV0dGVyIiwidG9VcHBlckNhc2UiLCJjYW1lbENhc2UiLCJzdHJpbmciLCJhY2NlcHREYXRhIiwib3duZXIiLCJEYXRhIiwidWlkIiwiY29uZmlndXJhYmxlIiwic2V0IiwicHJvcCIsImhhc0RhdGEiLCJkYXRhUHJpdiIsImRhdGFVc2VyIiwicmJyYWNlIiwicm11bHRpRGFzaCIsImRhdGFBdHRyIiwiSlNPTiIsInBhcnNlIiwiZ2V0RGF0YSIsInJlbW92ZURhdGEiLCJfZGF0YSIsIl9yZW1vdmVEYXRhIiwiZGVxdWV1ZSIsInN0YXJ0TGVuZ3RoIiwiaG9va3MiLCJfcXVldWVIb29rcyIsInN0b3AiLCJzZXR0ZXIiLCJjbGVhclF1ZXVlIiwiY291bnQiLCJkZWZlciIsInBudW0iLCJzb3VyY2UiLCJyY3NzTnVtIiwiY3NzRXhwYW5kIiwiaXNBdHRhY2hlZCIsImNvbXBvc2VkIiwiZ2V0Um9vdE5vZGUiLCJpc0hpZGRlbldpdGhpblRyZWUiLCJzdHlsZSIsImRpc3BsYXkiLCJjc3MiLCJhZGp1c3RDU1MiLCJ2YWx1ZVBhcnRzIiwidHdlZW4iLCJhZGp1c3RlZCIsInNjYWxlIiwibWF4SXRlcmF0aW9ucyIsImN1cnJlbnRWYWx1ZSIsImluaXRpYWwiLCJ1bml0IiwiY3NzTnVtYmVyIiwiaW5pdGlhbEluVW5pdCIsImRlZmF1bHREaXNwbGF5TWFwIiwiZ2V0RGVmYXVsdERpc3BsYXkiLCJib2R5Iiwic2hvd0hpZGUiLCJzaG93IiwidmFsdWVzIiwiaGlkZSIsInRvZ2dsZSIsImRpdiIsInJjaGVja2FibGVUeXBlIiwicnRhZ05hbWUiLCJyc2NyaXB0VHlwZSIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJjaGVja0Nsb25lIiwiY2xvbmVOb2RlIiwibm9DbG9uZUNoZWNrZWQiLCJvcHRpb24iLCJ3cmFwTWFwIiwidGhlYWQiLCJjb2wiLCJ0ciIsInRkIiwiX2RlZmF1bHQiLCJnZXRBbGwiLCJzZXRHbG9iYWxFdmFsIiwicmVmRWxlbWVudHMiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJvcHRncm91cCIsImJ1aWxkRnJhZ21lbnQiLCJzY3JpcHRzIiwic2VsZWN0aW9uIiwiaWdub3JlZCIsIndyYXAiLCJhdHRhY2hlZCIsImZyYWdtZW50Iiwibm9kZXMiLCJodG1sUHJlZmlsdGVyIiwiY3JlYXRlVGV4dE5vZGUiLCJya2V5RXZlbnQiLCJybW91c2VFdmVudCIsInJ0eXBlbmFtZXNwYWNlIiwicmV0dXJuVHJ1ZSIsInJldHVybkZhbHNlIiwiZXhwZWN0U3luYyIsInNhZmVBY3RpdmVFbGVtZW50Iiwib24iLCJ0eXBlcyIsIm9uZSIsIm9yaWdGbiIsIm9mZiIsImxldmVyYWdlTmF0aXZlIiwibm90QXN5bmMiLCJzYXZlZCIsImlzVHJpZ2dlciIsImRlbGVnYXRlVHlwZSIsInN0b3BQcm9wYWdhdGlvbiIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInByZXZlbnREZWZhdWx0IiwidHJpZ2dlciIsIkV2ZW50IiwiaGFuZGxlT2JqSW4iLCJldmVudEhhbmRsZSIsImV2ZW50cyIsImhhbmRsZU9iaiIsImhhbmRsZXJzIiwibmFtZXNwYWNlcyIsIm9yaWdUeXBlIiwiZWxlbURhdGEiLCJoYW5kbGUiLCJ0cmlnZ2VyZWQiLCJkaXNwYXRjaCIsImJpbmRUeXBlIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwibWFwcGVkVHlwZXMiLCJvcmlnQ291bnQiLCJ0ZWFyZG93biIsInJlbW92ZUV2ZW50IiwibmF0aXZlRXZlbnQiLCJoYW5kbGVyUXVldWUiLCJmaXgiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJjdXJyZW50VGFyZ2V0IiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJybmFtZXNwYWNlIiwicG9zdERpc3BhdGNoIiwibWF0Y2hlZEhhbmRsZXJzIiwibWF0Y2hlZFNlbGVjdG9ycyIsImJ1dHRvbiIsImFkZFByb3AiLCJob29rIiwib3JpZ2luYWxFdmVudCIsIndyaXRhYmxlIiwibG9hZCIsIm5vQnViYmxlIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsInByb3BzIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJub3ciLCJpc1NpbXVsYXRlZCIsImFsdEtleSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJjdHJsS2V5IiwiZGV0YWlsIiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJ2aWV3IiwiY2hhckNvZGUiLCJrZXlDb2RlIiwiYnV0dG9ucyIsImNsaWVudFgiLCJjbGllbnRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwidGFyZ2V0VG91Y2hlcyIsInRvRWxlbWVudCIsInRvdWNoZXMiLCJ3aGljaCIsImZvY3VzIiwiYmx1ciIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwib3JpZyIsInJlbGF0ZWQiLCJybm9Jbm5lcmh0bWwiLCJyY2hlY2tlZCIsInJjbGVhblNjcmlwdCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImRpc2FibGVTY3JpcHQiLCJyZXN0b3JlU2NyaXB0IiwiY2xvbmVDb3B5RXZlbnQiLCJkZXN0IiwidWRhdGFPbGQiLCJ1ZGF0YUN1ciIsImZpeElucHV0IiwiZG9tTWFuaXAiLCJjb2xsZWN0aW9uIiwiaGFzU2NyaXB0cyIsImlOb0Nsb25lIiwidmFsdWVJc0Z1bmN0aW9uIiwiaHRtbCIsIl9ldmFsVXJsIiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImRldGFjaCIsImFwcGVuZCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJhZnRlciIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwiYXBwZW5kVG8iLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJvcmlnaW5hbCIsImluc2VydCIsInJudW1ub25weCIsImdldFN0eWxlcyIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJzd2FwIiwib2xkIiwicmJveFN0eWxlIiwiY3VyQ1NTIiwiY29tcHV0ZWQiLCJ3aWR0aCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicGl4ZWxCb3hTdHlsZXMiLCJhZGRHZXRIb29rSWYiLCJjb25kaXRpb25GbiIsImhvb2tGbiIsImNvbXB1dGVTdHlsZVRlc3RzIiwiY29udGFpbmVyIiwiY3NzVGV4dCIsImRpdlN0eWxlIiwicGl4ZWxQb3NpdGlvblZhbCIsInJlbGlhYmxlTWFyZ2luTGVmdFZhbCIsInJvdW5kUGl4ZWxNZWFzdXJlcyIsIm1hcmdpbkxlZnQiLCJyaWdodCIsInBpeGVsQm94U3R5bGVzVmFsIiwiYm94U2l6aW5nUmVsaWFibGVWYWwiLCJwb3NpdGlvbiIsInNjcm9sbGJveFNpemVWYWwiLCJvZmZzZXRXaWR0aCIsIm1lYXN1cmUiLCJyb3VuZCIsInBhcnNlRmxvYXQiLCJyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwiYm94U2l6aW5nUmVsaWFibGUiLCJwaXhlbFBvc2l0aW9uIiwicmVsaWFibGVNYXJnaW5MZWZ0Iiwic2Nyb2xsYm94U2l6ZSIsInJlbGlhYmxlVHJEaW1lbnNpb25zIiwidGFibGUiLCJ0ckNoaWxkIiwidHJTdHlsZSIsImhlaWdodCIsInBhcnNlSW50IiwiY3NzUHJlZml4ZXMiLCJlbXB0eVN0eWxlIiwidmVuZG9yUHJvcHMiLCJmaW5hbFByb3BOYW1lIiwiZmluYWwiLCJjc3NQcm9wcyIsImNhcE5hbWUiLCJ2ZW5kb3JQcm9wTmFtZSIsInJkaXNwbGF5c3dhcCIsInJjdXN0b21Qcm9wIiwiY3NzU2hvdyIsInZpc2liaWxpdHkiLCJjc3NOb3JtYWxUcmFuc2Zvcm0iLCJsZXR0ZXJTcGFjaW5nIiwiZm9udFdlaWdodCIsInNldFBvc2l0aXZlTnVtYmVyIiwic3VidHJhY3QiLCJtYXgiLCJib3hNb2RlbEFkanVzdG1lbnQiLCJkaW1lbnNpb24iLCJib3giLCJpc0JvcmRlckJveCIsInN0eWxlcyIsImNvbXB1dGVkVmFsIiwiZXh0cmEiLCJkZWx0YSIsImNlaWwiLCJnZXRXaWR0aE9ySGVpZ2h0IiwidmFsdWVJc0JvcmRlckJveCIsIm9mZnNldFByb3AiLCJnZXRDbGllbnRSZWN0cyIsIlR3ZWVuIiwiZWFzaW5nIiwiY3NzSG9va3MiLCJvcGFjaXR5Iiwib3JpZ05hbWUiLCJpc0N1c3RvbVByb3AiLCJzZXRQcm9wZXJ0eSIsImlzRmluaXRlIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwic2Nyb2xsYm94U2l6ZUJ1Z2d5IiwibGVmdCIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJwcmVmaXgiLCJzdWZmaXgiLCJleHBhbmQiLCJleHBhbmRlZCIsInBhcnRzIiwicHJvcEhvb2tzIiwicnVuIiwicGVyY2VudCIsImVhc2VkIiwiZHVyYXRpb24iLCJwb3MiLCJzdGVwIiwiZngiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwibGluZWFyIiwic3dpbmciLCJjb3MiLCJQSSIsImZ4Tm93IiwiaW5Qcm9ncmVzcyIsInJmeHR5cGVzIiwicnJ1biIsInNjaGVkdWxlIiwiaGlkZGVuIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiaW50ZXJ2YWwiLCJ0aWNrIiwiY3JlYXRlRnhOb3ciLCJnZW5GeCIsImluY2x1ZGVXaWR0aCIsImNyZWF0ZVR3ZWVuIiwiYW5pbWF0aW9uIiwiQW5pbWF0aW9uIiwidHdlZW5lcnMiLCJwcm9wZXJ0aWVzIiwic3RvcHBlZCIsInByZWZpbHRlcnMiLCJjdXJyZW50VGltZSIsInN0YXJ0VGltZSIsInR3ZWVucyIsIm9wdHMiLCJzcGVjaWFsRWFzaW5nIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwiZ290b0VuZCIsInByb3BGaWx0ZXIiLCJjb21wbGV0ZSIsInRpbWVyIiwiYW5pbSIsInR3ZWVuZXIiLCJvbGRmaXJlIiwicHJvcFR3ZWVuIiwicmVzdG9yZURpc3BsYXkiLCJpc0JveCIsImRhdGFTaG93IiwidW5xdWV1ZWQiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInByZWZpbHRlciIsInNwZWVkIiwib3B0Iiwic3BlZWRzIiwiZmFkZVRvIiwidG8iLCJhbmltYXRlIiwib3B0YWxsIiwiZG9BbmltYXRpb24iLCJmaW5pc2giLCJzdG9wUXVldWUiLCJ0aW1lcnMiLCJjc3NGbiIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwic2xvdyIsImZhc3QiLCJkZWxheSIsInRpbWUiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJyYWRpb1ZhbHVlIiwiYm9vbEhvb2siLCJyZW1vdmVBdHRyIiwiblR5cGUiLCJhdHRySG9va3MiLCJib29sIiwiYXR0ck5hbWVzIiwibG93ZXJjYXNlTmFtZSIsInJmb2N1c2FibGUiLCJyY2xpY2thYmxlIiwic3RyaXBBbmRDb2xsYXBzZSIsImdldENsYXNzIiwiY2xhc3Nlc1RvQXJyYXkiLCJyZW1vdmVQcm9wIiwicHJvcEZpeCIsInRhYmluZGV4IiwiYWRkQ2xhc3MiLCJjbGFzc2VzIiwiY3VyVmFsdWUiLCJjbGF6eiIsImZpbmFsVmFsdWUiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwic3RhdGVWYWwiLCJpc1ZhbGlkVmFsdWUiLCJjbGFzc05hbWVzIiwiaGFzQ2xhc3MiLCJycmV0dXJuIiwidmFsSG9va3MiLCJvcHRpb25TZXQiLCJmb2N1c2luIiwicmZvY3VzTW9ycGgiLCJzdG9wUHJvcGFnYXRpb25DYWxsYmFjayIsIm9ubHlIYW5kbGVycyIsImJ1YmJsZVR5cGUiLCJvbnR5cGUiLCJsYXN0RWxlbWVudCIsImV2ZW50UGF0aCIsInBhcmVudFdpbmRvdyIsInNpbXVsYXRlIiwidHJpZ2dlckhhbmRsZXIiLCJhdHRhY2hlcyIsInJxdWVyeSIsInBhcnNlWE1MIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwicmJyYWNrZXQiLCJyQ1JMRiIsInJzdWJtaXR0ZXJUeXBlcyIsInJzdWJtaXR0YWJsZSIsImJ1aWxkUGFyYW1zIiwidHJhZGl0aW9uYWwiLCJwYXJhbSIsInZhbHVlT3JGdW5jdGlvbiIsImVuY29kZVVSSUNvbXBvbmVudCIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZUFycmF5IiwicjIwIiwicmhhc2giLCJyYW50aUNhY2hlIiwicmhlYWRlcnMiLCJybm9Db250ZW50IiwicnByb3RvY29sIiwidHJhbnNwb3J0cyIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZGF0YVR5cGUiLCJkYXRhVHlwZXMiLCJpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsImpxWEhSIiwiaW5zcGVjdGVkIiwic2Vla2luZ1RyYW5zcG9ydCIsImluc3BlY3QiLCJwcmVmaWx0ZXJPckZhY3RvcnkiLCJkYXRhVHlwZU9yVHJhbnNwb3J0IiwiYWpheEV4dGVuZCIsImZsYXRPcHRpb25zIiwiYWpheFNldHRpbmdzIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsInVybCIsImlzTG9jYWwiLCJwcm90b2NvbCIsInByb2Nlc3NEYXRhIiwiYXN5bmMiLCJjb250ZW50VHlwZSIsImFjY2VwdHMiLCJqc29uIiwicmVzcG9uc2VGaWVsZHMiLCJjb252ZXJ0ZXJzIiwiYWpheFNldHVwIiwic2V0dGluZ3MiLCJhamF4UHJlZmlsdGVyIiwiYWpheFRyYW5zcG9ydCIsImFqYXgiLCJ0cmFuc3BvcnQiLCJjYWNoZVVSTCIsInJlc3BvbnNlSGVhZGVyc1N0cmluZyIsInJlc3BvbnNlSGVhZGVycyIsInRpbWVvdXRUaW1lciIsInVybEFuY2hvciIsImZpcmVHbG9iYWxzIiwidW5jYWNoZWQiLCJjYWxsYmFja0NvbnRleHQiLCJnbG9iYWxFdmVudENvbnRleHQiLCJjb21wbGV0ZURlZmVycmVkIiwic3RhdHVzQ29kZSIsInJlcXVlc3RIZWFkZXJzIiwicmVxdWVzdEhlYWRlcnNOYW1lcyIsInN0ckFib3J0IiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib3ZlcnJpZGVNaW1lVHlwZSIsIm1pbWVUeXBlIiwic3RhdHVzIiwiYWJvcnQiLCJzdGF0dXNUZXh0IiwiZmluYWxUZXh0IiwiY3Jvc3NEb21haW4iLCJob3N0IiwiaGFzQ29udGVudCIsImlmTW9kaWZpZWQiLCJoZWFkZXJzIiwiYmVmb3JlU2VuZCIsInN1Y2Nlc3MiLCJzZW5kIiwibmF0aXZlU3RhdHVzVGV4dCIsInJlc3BvbnNlcyIsImlzU3VjY2VzcyIsInJlc3BvbnNlIiwibW9kaWZpZWQiLCJjdCIsImZpbmFsRGF0YVR5cGUiLCJmaXJzdERhdGFUeXBlIiwiYWpheEhhbmRsZVJlc3BvbnNlcyIsImNvbnYyIiwiY3VycmVudCIsImNvbnYiLCJkYXRhRmlsdGVyIiwidGhyb3dzIiwiYWpheENvbnZlcnQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0Iiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwiaHRtbElzRnVuY3Rpb24iLCJ1bndyYXAiLCJ2aXNpYmxlIiwib2Zmc2V0SGVpZ2h0IiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJ4aHJTdWNjZXNzU3RhdHVzIiwiMTIyMyIsInhoclN1cHBvcnRlZCIsImNvcnMiLCJlcnJvckNhbGxiYWNrIiwib3BlbiIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25hYm9ydCIsIm9udGltZW91dCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsImJpbmFyeSIsInNjcmlwdEF0dHJzIiwic2NyaXB0Q2hhcnNldCIsImV2dCIsIm9sZENhbGxiYWNrcyIsInJqc29ucCIsImpzb25wIiwianNvbnBDYWxsYmFjayIsIm9yaWdpbmFsU2V0dGluZ3MiLCJjYWxsYmFja05hbWUiLCJvdmVyd3JpdHRlbiIsInJlc3BvbnNlQ29udGFpbmVyIiwianNvblByb3AiLCJjcmVhdGVIVE1MRG9jdW1lbnQiLCJpbXBsZW1lbnRhdGlvbiIsImtlZXBTY3JpcHRzIiwicGFyc2VkIiwicGFyYW1zIiwiYW5pbWF0ZWQiLCJvZmZzZXQiLCJzZXRPZmZzZXQiLCJjdXJQb3NpdGlvbiIsImN1ckxlZnQiLCJjdXJDU1NUb3AiLCJjdXJUb3AiLCJjdXJPZmZzZXQiLCJjdXJDU1NMZWZ0IiwiY3VyRWxlbSIsInVzaW5nIiwicmVjdCIsIndpbiIsInBhZ2VZT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJvZmZzZXRQYXJlbnQiLCJwYXJlbnRPZmZzZXQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiZGVmYXVsdEV4dHJhIiwiZnVuY05hbWUiLCJ1bmJpbmQiLCJkZWxlZ2F0ZSIsInVuZGVsZWdhdGUiLCJob3ZlciIsImZuT3ZlciIsImZuT3V0IiwicHJveHkiLCJob2xkUmVhZHkiLCJob2xkIiwicGFyc2VKU09OIiwiaXNOdW1lcmljIiwiaXNOYU4iLCJ0cmltIiwiX2pRdWVyeSIsIl8kIiwiJCIsIm5vQ29uZmxpY3QiLCJBRlJBTUUiLCJjb21wb25lbnRzIiwiQ29tcG9uZW50Iiwib25Ub3VjaE1vdmUiLCJkaXJlY3Rpb24iLCJkZWx0YVkiLCJjYW52YXMiLCJzY2VuZUVsIiwieWF3T2JqZWN0IiwidG91Y2hTdGFydGVkIiwidG91Y2hFbmFibGVkIiwidG91Y2hTdGFydCIsIngiLCJjbGllbnRXaWR0aCIsImRlbHRhWCIsInkiLCJjbGllbnRIZWlnaHQiLCJyZXZlcnNlVG91Y2hEcmFnIiwicm90YXRpb24iLCJwaXRjaE9iamVjdCIsIl9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fIiwiU3RvcmFnZU9iamVjdCIsIl9wYXJzZUFycmF5IiwicmVzdWx0U2V0IiwiX3BhcnNlIiwiU1BBQ0UiLCJhcmdUeXBlIiwic3RyIiwiX3BhcnNlU3RyaW5nIiwiayIsIl9wYXJzZU9iamVjdCIsIl9wYXJzZU51bWJlciIsImNsYXNzU2V0IiwicGF0aCIsImZyb20iLCJpdCIsImlzT2JqZWN0IiwidG9PYmplY3QiLCJjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nIiwiaXNBcnJheUl0ZXJhdG9yTWV0aG9kIiwidG9MZW5ndGgiLCJjcmVhdGVQcm9wZXJ0eSIsImdldEl0ZXJhdG9yTWV0aG9kIiwiYXJyYXlMaWtlIiwiTyIsIkMiLCJhcmd1bWVudHNMZW5ndGgiLCJtYXBmbiIsIm1hcHBpbmciLCJpdGVyYXRvck1ldGhvZCIsInRvSW5kZXhlZE9iamVjdCIsInRvQWJzb2x1dGVJbmRleCIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCJmcm9tSW5kZXgiLCJhRnVuY3Rpb24iLCJhbk9iamVjdCIsIkVOVFJJRVMiLCJyZXR1cm5NZXRob2QiLCJJVEVSQVRPUiIsIndlbGxLbm93blN5bWJvbCIsIlNBRkVfQ0xPU0lORyIsImNhbGxlZCIsIml0ZXJhdG9yV2l0aFJldHVybiIsIlNLSVBfQ0xPU0lORyIsIklURVJBVElPTl9TVVBQT1JUIiwiY2xhc3NvZlJhdyIsIlRPX1NUUklOR19UQUciLCJDT1JSRUNUX0FSR1VNRU5UUyIsInRyeUdldCIsImNhbGxlZSIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUiLCJkZWZpbmVQcm9wZXJ0eU1vZHVsZSIsImYiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJmYWlscyIsIkYiLCJJdGVyYXRvclByb3RvdHlwZSIsImNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciIsInNldFRvU3RyaW5nVGFnIiwiSXRlcmF0b3JzIiwicmV0dXJuVGhpcyIsIkl0ZXJhdG9yQ29uc3RydWN0b3IiLCJOQU1FIiwiYml0bWFwIiwidG9QcmltaXRpdmUiLCJwcm9wZXJ0eUtleSIsImNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IiLCJzZXRQcm90b3R5cGVPZiIsInJlZGVmaW5lIiwiSVNfUFVSRSIsIkl0ZXJhdG9yc0NvcmUiLCJCVUdHWV9TQUZBUklfSVRFUkFUT1JTIiwiSXRlcmFibGUiLCJERUZBVUxUIiwiSVNfU0VUIiwiRk9SQ0VEIiwiQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlIiwibWV0aG9kcyIsIktFWSIsImdldEl0ZXJhdGlvbk1ldGhvZCIsIktJTkQiLCJkZWZhdWx0SXRlcmF0b3IiLCJJdGVyYWJsZVByb3RvdHlwZSIsIklOQ09SUkVDVF9WQUxVRVNfTkFNRSIsIm5hdGl2ZUl0ZXJhdG9yIiwiYW55TmF0aXZlSXRlcmF0b3IiLCJlbnRyaWVzIiwiZm9yY2VkIiwiZXhpc3QiLCJzZXRHbG9iYWwiLCJjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzIiwiaXNGb3JjZWQiLCJ0YXJnZXRQcm9wZXJ0eSIsInNvdXJjZVByb3BlcnR5IiwiZGVzY3JpcHRvciIsIlRBUkdFVCIsIkdMT0JBTCIsIlNUQVRJQyIsInN0YXQiLCJub1RhcmdldEdldCIsInNoYW0iLCJzaGFyZWQiLCJGdW5jdGlvbiIsImNsYXNzb2YiLCJnbG9iYWxUaGlzIiwiREVTQ1JJUFRPUlMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIk5BVElWRV9XRUFLX01BUCIsIm9iamVjdEhhcyIsInNoYXJlZEtleSIsImhpZGRlbktleXMiLCJXZWFrTWFwIiwic3RvcmUiLCJ3bWdldCIsIndtaGFzIiwid21zZXQiLCJtZXRhZGF0YSIsIlNUQVRFIiwiZW5mb3JjZSIsImdldHRlckZvciIsIlRZUEUiLCJBcnJheVByb3RvdHlwZSIsInJlcGxhY2VtZW50IiwiZmVhdHVyZSIsImRldGVjdGlvbiIsIm5vcm1hbGl6ZSIsIlBPTFlGSUxMIiwiTkFUSVZFIiwiUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlIiwiYXJyYXlJdGVyYXRvciIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm5hdGl2ZUZ1bmN0aW9uVG9TdHJpbmciLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZW51bUJ1Z0tleXMiLCJkb2N1bWVudENyZWF0ZUVsZW1lbnQiLCJJRV9QUk9UTyIsIkVtcHR5IiwiY3JlYXRlRGljdCIsImlmcmFtZURvY3VtZW50IiwiaWZyYW1lIiwiY29udGVudFdpbmRvdyIsIndyaXRlIiwibHQiLCJjbG9zZSIsIlByb3BlcnRpZXMiLCJvYmplY3RLZXlzIiwiSUU4X0RPTV9ERUZJTkUiLCJuYXRpdmVEZWZpbmVQcm9wZXJ0eSIsIlAiLCJBdHRyaWJ1dGVzIiwicHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUiLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJpbnRlcm5hbE9iamVjdEtleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSIiwiT2JqZWN0UHJvdG90eXBlIiwiYXJyYXlJbmNsdWRlcyIsImFycmF5SW5kZXhPZiIsIm5hbWVzIiwibmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUiLCJOQVNIT1JOX0JVRyIsIjEiLCJWIiwidmFsaWRhdGVTZXRQcm90b3R5cGVPZkFyZ3VtZW50cyIsImNvcnJlY3RTZXR0ZXIiLCJfX3Byb3RvX18iLCJnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlIiwiUmVmbGVjdCIsIkludGVybmFsU3RhdGVNb2R1bGUiLCJnZXRJbnRlcm5hbFN0YXRlIiwiZW5mb3JjZUludGVybmFsU3RhdGUiLCJURU1QTEFURSIsInVuc2FmZSIsIlRBRyIsInZlcnNpb24iLCJjb3B5cmlnaHQiLCJ0b0ludGVnZXIiLCJyZXF1aXJlT2JqZWN0Q29lcmNpYmxlIiwiQ09OVkVSVF9UT19TVFJJTkciLCJTIiwic2l6ZSIsImNoYXJBdCIsIm1pbiIsImludGVnZXIiLCJJbmRleGVkT2JqZWN0IiwiZmxvb3IiLCJ2YWx1ZU9mIiwicG9zdGZpeCIsIk5BVElWRV9TWU1CT0wiLCJjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24iLCJpdGVyYWJsZSIsImNvZGVQb2ludEF0IiwiZGVmaW5lSXRlcmF0b3IiLCJzZXRJbnRlcm5hbFN0YXRlIiwiaXRlcmF0ZWQiLCJwb2ludCIsImciLCJldmFsIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJfY3JlYXRlQ2xhc3MiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9kZWR1cGUyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9kZWZhdWx0QXR0cnMyIiwiZGVmYXVsdCIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiSWNvbiIsInRhZ3MiLCJjbGFzcyIsImNvbWJpbmVkQXR0cnMiLCJhdHRyc1RvU3RyaW5nIiwiX2ljb24yIiwiX2ljb25zMiIsIl90YWdzMiIsInJlZHVjZSIsImljb24iLCJfdG9TdmcyIiwiX3JlcGxhY2UyIiwiaWNvbnMiLCJ0b1N2ZyIsInJlcGxhY2VFbGVtZW50IiwiZWxlbWVudCIsImVsZW1lbnRBdHRycyIsImdldEF0dHJzIiwic3ZnU3RyaW5nIiwic3ZnRG9jdW1lbnQiLCJzdmdFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsImVsZW1lbnRzVG9SZXBsYWNlIiwiZm9yRWFjaCIsIl9pY29ucyIsInRpZCIsInByZXZpb3VzVmlldyIsIm5leHRWaWV3IiwibW91c2Vkb3duIiwic2V0SW50ZXJ2YWwiLCJ6b29tIiwiZ29Ub1NjcmVlbiIsInNyIiwiY2xlYW4iLCJ2aWV3U2VsZWN0b3IiLCJyZXZlYWwiLCJvcmlnaW4iLCJkaXN0YW5jZSIsImNoYW5nZVZpZXdOYW1lIiwidG91ciIsImN1cnJlbnRfcGFub19pZCIsInRvdXJDb21wb25lbnQiLCJ2aWV3SWQiLCJpbml0Vmlld0lkIiwiZ2V0SW5pdGlhbFZpZXdJZCIsInNpZ24iLCJsb2ciLCJoaWRlSW50cm8iLCJzZXRIb3RzcG90c1Zpc2libGUiLCJjYW1lcmEiLCJ6b29tTGV2ZWwiLCJuZXh0U2NlbmVJZCIsInByZXZpb3VzX3Bhbm9faWRzIiwibmV4dElkIiwibG9hZFNjZW5lSWQiLCJzY3JlZW5JZCIsInB1c2hQcmV2aW91c1Bhbm9JZHMiLCJkaXNwbGF5RGltZW50aW9uIiwic3BsaXROYW1lIiwiZW5kaW5nSWQiLCJ2aWRlb0xpbmsiLCJ2aWRlb1VybCIsInl0UGxheWVyIiwiZ2V0UGxheWVyU3RhdGUiLCJwYXVzZVZpZGVvIiwicGxheVZpZGVvIiwiX19nIiwidSIsIl9fZSIsIkciLCJoIiwiQiIsIlciLCJ2aXJ0dWFsIiwiUiIsIlUiLCJyZXR1cm4iLCJBIiwiTSIsIkUiLCJUIiwic2V0SW1tZWRpYXRlIiwiY2xlYXJJbW1lZGlhdGUiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwibmV4dFRpY2siLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJpbXBvcnRTY3JpcHRzIiwiY2xlYXIiLCJfdCIsInRyYW5zZm9ybVNWR1BhdGgiLCJzdWJzdHJpbmciLCJUSFJFRSIsIlNoYXBlIiwibW92ZVRvIiwibGluZVRvIiwiYmV6aWVyQ3VydmVUbyIsInF1YWRyYXRpY0N1cnZlVG8iLCJzaW4iLCJzcXJ0IiwiVmVjdG9yMiIsImFjb3MiLCJkb3QiLCJMIiwiYWJzYXJjIiwicmVnaXN0ZXJQcmltaXRpdmUiLCJkZWZhdWx0Q29tcG9uZW50cyIsInN2ZyIsIm1hcHBpbmdzIiwiZXh0cnVkZSIsInJlZ2lzdGVyQ29tcG9uZW50Iiwic2NoZW1hIiwicHJvcG9ydGlvbmFsU2NhbGUiLCJ6RmFjdG9yIiwib3ZlcnJpZGVDb2xvciIsIiRkM2ciLCJzZXRPYmplY3QzRCIsIk9iamVjdDNEIiwidXBkYXRlIiwiR3JvdXAiLCJtYXRlcmlhbCIsIk1lc2hCYXNpY01hdGVyaWFsIiwic2hhZGVyIiwic2lkZSIsIkRvdWJsZVNpZGUiLCJjb2xvciIsImZpbGwiLCJzaGFwZSIsIkV4dHJ1ZGVCdWZmZXJHZW9tZXRyeSIsImFtb3VudCIsImJldmVsRW5hYmxlZCIsIk1lc2giLCJ6IiwiZ2V0T2JqZWN0M0QiLCJWZWN0b3IzIiwiTnVtYmVyIiwiTUFYX1ZBTFVFIiwiTUlOX1ZBTFVFIiwiZ2VvbWV0cnkiLCJjb21wdXRlQm91bmRpbmdCb3giLCJib3VuZGluZ0JveCIsImdldENlbnRlciIsImFkZFZlY3RvcnMiLCJtdWx0aXBseVNjYWxhciIsImFwcGx5TWF0cml4IiwiTWF0cml4NCIsIm1ha2VUcmFuc2xhdGlvbiIsIkJSRUFLIiwiUkVUVVJOIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJkb21haW4iLCJleGl0IiwiZW50ZXIiLCJuYXZpZ2F0b3IiLCJzdGFuZGFsb25lIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJ1c2VyQWdlbnQiLCJfayIsIkFyZ3VtZW50cyIsInZlcnNpb25zIiwidjgiLCJQcm9taXNlUmVqZWN0aW9uRXZlbnQiLCJfbiIsIl9jIiwiX3YiLCJfcyIsIm9rIiwiX2giLCJIIiwiZW1pdCIsIm9udW5oYW5kbGVkcmVqZWN0aW9uIiwicmVhc29uIiwiX2EiLCJvbnJlamVjdGlvbmhhbmRsZWQiLCJJIiwiX2QiLCJfdyIsInJhY2UiLCJmaW5hbGx5IiwidHJ5IiwidXJpIiwiNCIsIjUiLCJYRG9tYWluUmVxdWVzdCIsInJlc3BvbnNlWE1MIiwidXNlWERSIiwic3luYyIsIkFjY2VwdCIsInN0cmluZ2lmeSIsIm9ucHJvZ3Jlc3MiLCJ3aXRoQ3JlZGVudGlhbHMiLCJwYW5vcmFtYV9saXN0IiwieHZhbHVlIiwiaG90c3BvdF9saXN0IiwiTm9kZSIsInByb3RvdHlwZVRvU3RyaW5nIiwiTm9kZUxpc3QiLCJxdWVyeSIsImZvcm1hdCIsIm1hdHJpeCIsImlkZW50aXR5IiwiUmFuZ2VFcnJvciIsIm11bHRpcGx5IiwiZm0iLCJwcm9kdWN0Iiwicm93Iiwicm90YXRlWiIsImFuZ2xlIiwidGhldGEiLCJzY2FsYXIiLCJzY2FsYXJZIiwiY2xvY2siLCJwb2x5ZmlsbCIsIndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1velJlcXVlc3RBbmltYXRpb25GcmFtZSIsImRlZmF1bHRzIiwicm90YXRlIiwiY2xlYW51cCIsImRlc2t0b3AiLCJtb2JpbGUiLCJ1c2VEZWxheSIsInZpZXdGYWN0b3IiLCJ2aWV3T2Zmc2V0IiwiYm90dG9tIiwiYWZ0ZXJSZXNldCIsImFmdGVyUmV2ZWFsIiwiYmVmb3JlUmVzZXQiLCJiZWZvcmVSZXZlYWwiLCJtb3VudCIsImNsYXNzTGlzdCIsImZhaWx1cmUiLCJkZXN0cm95IiwiaXRlbSIsImxvZ2dlciIsImRldGFpbHMiLCJkZWJ1ZyIsInJlcG9ydCIsInJpbnNlIiwidGhpcyQxIiwiZWxlbWVudElkcyIsInN0YWxlIiwic2VxdWVuY2VJZHMiLCJjb250YWluZXJJZHMiLCJzdGFsZUlkIiwiY29udGFpbmVySWQiLCJzZXF1ZW5jZSIsImNvbnRhaW5lcnMiLCJzZXF1ZW5jZXMiLCJkaXJ0eSIsImNhbGxiYWNrVGltZXIiLCJpbmxpbmUiLCJnZW5lcmF0ZWQiLCJoaXN0b3J5IiwiZ2V0UHJlZml4ZWRDc3NQcm9wIiwiZ2V0UHJlZml4ZWRDc3NQcm9wZXJ0eSIsImNsZWFyQ2FjaGUiLCJjb25maWciLCJpbmxpbmVNYXRjaCIsInNvbWUiLCJjb21wdXRlZE9wYWNpdHkiLCJjb25maWdPcGFjaXR5IiwidHJhbnNmb3JtYXRpb25zIiwiYXhpcyIsInN1YnN0ciIsInJlZiIsImZvbnRTaXplIiwidHJhbnNsYXRlWSIsInRyYW5zbGF0ZVgiLCJyb3RhdGVZIiwidHJhbnNmb3JtIiwidHJhbnNpdGlvbiIsImZyYWdtZW50cyIsImRlbGF5ZWQiLCJpbnN0YW50IiwiY29tcG9zaXRpb24iLCJmb3JjZSIsInByaXN0aW5lIiwic2VlbiIsInNob3VsZFJldmVhbCIsInJldmVhbGVkIiwic2hvdWxkUmVzZXQiLCJ0cmlnZ2VyUmV2ZWFsIiwidHJpZ2dlclJlc2V0IiwicmVnaXN0ZXJDYWxsYmFja3MiLCJpc0RlbGF5ZWQiLCJiZWZvcmVDYWxsYmFjayIsImFmdGVyQ2FsbGJhY2siLCJlbGFwc2VkIiwibmV4dFVuaXF1ZUlkIiwic2VxIiwiU2VxdWVuY2VNb2RlbCIsIm1vZGVscyIsIm1lbWJlcnMiLCJuZXh0RWxlbWVudCIsImN1ZSIsImJsb2NrZWQiLCJmb290IiwiU2VxdWVuY2UiLCJhYnMiLCJpbml0aWFsaXplIiwiaW5pdFRpbWVvdXQiLCJpc01vYmlsZSIsImFnZW50IiwiZGVlcEFzc2lnbiIsInNvdXJjZXMiLCJzeW5jaW5nIiwic2VxdWVuY2UkJDEiLCJjb250YWluZXJCdWZmZXIiLCJlbGVtZW50QnVmZmVyIiwiZWxlbWVudE5vZGUiLCJleGlzdGluZ0lkIiwiY29udGFpbmVyTm9kZSIsImNvbGxlY3Rpb25zIiwiZ2V0Q29udGFpbmVySWQiLCJyZWNvcmQiLCJtYXRoU2lnbiIsImdldEdlb21ldHJ5IiwiaXNDb250YWluZXIiLCJvZmZzZXRUb3AiLCJvZmZzZXRMZWZ0IiwiYm91bmRzIiwiZ2V0U2Nyb2xsZWQiLCJpc0VsZW1lbnRWaXNpYmxlIiwiZWxlbWVudEJvdW5kcyIsImNvbnRhaW5lckJvdW5kcyIsInNjcm9sbCIsImJvdW5kRGVsZWdhdGUiLCJib3VuZERlc3Ryb3kiLCJib3VuZFJldmVhbCIsImJvdW5kQ2xlYW4iLCJib3VuZFN5bmMiLCJTY3JvbGxSZXZlYWwiLCJidWZmZXIiLCJpc1N1cHBvcnRlZCIsImlzVHJhbnNmb3JtU3VwcG9ydGVkIiwiaXNUcmFuc2l0aW9uU3VwcG9ydGVkIiwiZmVhdGhlciIsInNreSIsImNhbSIsInNldENhbWVyYSIsInNldEhvdHNwb3RzIiwidXBkYXRlU2t5SW1hZ2UiLCJpc0ZpcnN0TG9hZCIsImltYWdlUGFubyIsInVwZGF0ZURhdGEiLCJjbGVhckhvdHNwb3RzIiwibG9hZEltYWdlIiwicGFub0lkIiwiaG90c3BvdCIsImltYWdlUGFub0RhdGEiLCJwYXJlbnRFbCIsInhSb3RhdGlvbiIsInBhbm9yYW1hIiwicGFub0RhdGEiLCJmb3IiLCJjbGlja2FibGUiLCJlbmFibGUiLCJwb3NpdGlvbmluZyIsImhhbmRsZUNsaWNrIiwibWVudUhvdmVyVGltZXIiLCJtb3VzZW92ZXIiXSwibWFwcGluZ3MiOiJhQUNFLFNBQVNBLEVBQXFCQyxHQVE3QixJQVBBLElBTUlDLEVBQVVDLEVBTlZDLEVBQVdILEVBQUssR0FDaEJJLEVBQWNKLEVBQUssR0FLQUssRUFBSSxFQUFHQyxFQUFXLEdBQ3BDRCxFQUFJRixFQUFTSSxPQUFRRixJQUN6QkgsRUFBVUMsRUFBU0UsR0FDaEJHLE9BQU9DLFVBQVVDLGVBQWVDLEtBQUtDLEVBQWlCVixJQUFZVSxFQUFnQlYsSUFDcEZJLEVBQVNPLEtBQUtELEVBQWdCVixHQUFTLElBRXhDVSxFQUFnQlYsR0FBVyxFQUU1QixJQUFJRCxLQUFZRyxFQUNaSSxPQUFPQyxVQUFVQyxlQUFlQyxLQUFLUCxFQUFhSCxLQUNwRGEsRUFBUWIsR0FBWUcsRUFBWUgsSUFLbEMsSUFGR2MsR0FBcUJBLEVBQW9CZixHQUV0Q00sRUFBU0MsUUFDZEQsRUFBU1UsT0FBVFYs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VUFBVSxXQUFXLGFBQWEsYUFBYSxDQUFDLFdBQVcsU0FBUyxTQUFTLFFBQVEsS0FBTyxDQUFDLFVBQVUsU0FBUyxTQUFTLFdBQWEsQ0FBQyxRQUFRLFFBQVEsU0FBUyxNQUFRLENBQUMsT0FBTyxPQUFPLFdBQVcsY0FBYyxDQUFDLGlCQUFpQixRQUFVLENBQUMsUUFBUSxVQUFVLFFBQVEsS0FBTyxDQUFDLFFBQVEsVUFBVSxNQUFRLENBQUMsV0FBVyxNQUFRLENBQUMsU0FBUyxVQUFZLENBQUMsT0FBTyxVQUFVLElBQU0sQ0FBQyxXQUFXLFFBQVEsaUJBQWlCLFVBQVUsT0FBUyxDQUFDLFNBQVMsT0FBUyxDQUFDLFNBQVMsV0FBVyxZQUFZLENBQUMsT0FBTyxZQUFZLFdBQVcsS0FBTyxDQUFDLFFBQVEsT0FBTyxTQUFTLENBQUMsUUFBUSxPQUFPLFNBQVcsQ0FBQyxPQUFPLGdCQUFnQixLQUFPLENBQUMsV0FBVyxLQUFPLENBQUMsV0FBVyxXQUFXLFVBQVUsU0FBUyxDQUFDLFVBQVUsUUFBUSxTQUFTLFVBQVUsQ0FBQyxXQUFXLFFBQVEsUUFBUSxLQUFPLENBQUMsUUFBUSxXQUFXLFVBQVUsQ0FBQyxXQUFXLGFBQWEsU0FBUyxVQUFVLElBQU0sQ0FBQyxXQUFXLGFBQWEsVUFBVSxTQUFXLENBQUMsY0FBYyxhQUFhLENBQUMsYUFBYSxTQUFTLFVBQVUsSUFBTSxDQUFDLFFBQVEsT0FBTyxVQUFVLFdBQVcsS0FBTyxDQUFDLE9BQU8sYUFBYSxhQUFhLGlCQUFpQixDQUFDLFVBQVUsUUFBUSxpQkFBaUIsQ0FBQyxVQUFVLFFBQVEsVUFBVSxDQUFDLFNBQVMsUUFBUSxRQUFRLElBQU0sQ0FBQyxTQUFTLFFBQVEsVUFBVSxTQUFXLENBQUMsa0JBQWtCLFNBQVMsYUFBYSxDQUFDLGtCQUFrQixTQUFTLFNBQVMsTUFBUSxDQUFDLFlBQVksUUFBVSxDQUFDLEtBQUssU0FBUyxXQUFXLEtBQU8sQ0FBQyxPQUFPLFNBQVMsa0JBQWtCLENBQUMsWUFBWSxnQkFBZ0IsQ0FBQyxZQUFZLGdCQUFnQixDQUFDLFFBQVEsVUFBVSxLQUFPLENBQUMsVUFBVSxNQUFRLENBQUMsUUFBUSxXQUFhLENBQUMsV0FBVyxVQUFVLGVBQWUsQ0FBQyxXQUFXLFVBQVUsUUFBVSxDQUFDLFFBQVEsUUFBVSxDQUFDLE1BQU0sYUFBYSxVQUFZLENBQUMsY0FBYyxNQUFRLENBQUMsUUFBUSxRQUFRLGVBQWUsQ0FBQyxRQUFRLFFBQVEsUUFBUSxXQUFXLENBQUMsU0FBUyxXQUFXLFFBQVUsQ0FBQyxZQUFZLGFBQWEsQ0FBQyxRQUFRLGtCQUFrQixDQUFDLFFBQVEsaUJBQWlCLENBQUMsUUFBUSxlQUFlLENBQUMsUUFBUSxZQUFZLENBQUMsT0FBTyxRQUFRLGlCQUFpQixDQUFDLFFBQVEsTUFBUSxDQUFDLFFBQVEsS0FBTyxDQUFDLFFBQVEsU0FBUyxZQUFZLENBQUMsYUFBYSxXQUFXLGNBQWMsQ0FBQyxRQUFRLFNBQVMsS0FBTyxDQUFDLE1BQU0sT0FBTyxjQUFjLENBQUMsTUFBTSxPQUFPLGNBQWMsQ0FBQyxNQUFNLE9BQU8sT0FBUyxDQUFDLE9BQU8sUUFBUSxNQUFRLENBQUMsS0FBSyxPQUFPLFFBQVUsQ0FBQyxNQUFNLFNBQVMsVUFBVSxNQUFRLENBQUMsVUFBVSxhQUFhLENBQUMsY0FBYyxVQUFVLGNBQWMsQ0FBQyxVQUFVLE9BQVMsQ0FBQyxPQUFPLFVBQVUsT0FBUyxDQUFDLFNBQVMsYUFBYSxDQUFDLFNBQVMsWUFBWSxDQUFDLFNBQVMsSUFBTSxDQUFDLE9BQU8sYUFBYSxLQUFPLENBQUMsZUFBZSxTQUFXLENBQUMsT0FBTyxPQUFTLENBQUMsT0FBTyxZQUFZLG9CQUFvQixLQUFPLENBQUMsVUFBVSxPQUFPLFFBQVEsaUJBQWlCLG1CQUFtQixTQUFXLENBQUMsTUFBTSxPQUFPLE9BQU8sZUFBZSxVQUFVLENBQUMsVUFBVSxlQUFlLE9BQVMsQ0FBQyxXQUFXLFVBQVUsYUFBYSxDQUFDLFdBQVcsWUFBWSxlQUFlLENBQUMsWUFBWSxPQUFPLFdBQVcsU0FBUyxnQkFBZ0IsQ0FBQyxZQUFZLE9BQU8sV0FBVyxTQUFTLFFBQVUsQ0FBQyxTQUFTLFlBQVksQ0FBQyxTQUFTLGVBQWUsQ0FBQyxTQUFTLE1BQVEsQ0FBQyxRQUFRLE1BQVEsQ0FBQyxNQUFNLE1BQU0sUUFBVSxDQUFDLFdBQVcsWUFBWSxXQUFhLENBQUMsWUFBWSxVQUFVLE1BQVEsQ0FBQyxRQUFRLE9BQU8sUUFBUSxPQUFPLFdBQVcsUUFBVSxDQUFDLFFBQVEsU0FBUyxLQUFPLENBQUMsV0FBVyxXQUFXLFFBQVEsY0FBYyxDQUFDLFFBQVEsU0FBUyxJQUFNLENBQUMsYUFBYSxVQUFVLFNBQVMsUUFBVSxDQUFDLFVBQVUsT0FBTyxVQUFVLE9BQU8sT0FBUyxDQUFDLFVBQVUsT0FBTyxVQUFVLFNBQVMsT0FBUyxDQUFDLFVBQVUsSUFBTSxDQUFDLFNBQVMsT0FBUyxDQUFDLE9BQU8sWUFBWSxTQUFXLENBQUMsT0FBTyxlQUFlLFVBQVUsWUFBYyxDQUFDLGNBQWMsVUFBVSxhQUFhLFdBQVcsY0FBYyxDQUFDLFVBQVUsTUFBTSxXQUFXLFlBQVksQ0FBQyxPQUFPLE9BQU8sV0FBVyxjQUFjLENBQUMsS0FBSyxNQUFNLFVBQVUsZUFBZSxDQUFDLEtBQUssTUFBTSxVQUFVLEtBQU8sQ0FBQyxXQUFXLFdBQVcsTUFBUSxDQUFDLFVBQVUsU0FBUyxTQUFTLE9BQU8sVUFBVSxDQUFDLFVBQVUsU0FBUyxTQUFTLE9BQU8sU0FBVyxDQUFDLFNBQVMsTUFBUSxDQUFDLFdBQVcsTUFBTSxXQUFXLFlBQVksU0FBUyxHQUFLLENBQUMsYUFBYSxVQUFVLE9BQVMsQ0FBQyxRQUFRLFFBQVUsQ0FBQyxPQUFPLFVBQVUsS0FBTyxDQUFDLFFBQVEsU0FBVyxDQUFDLE9BQU8sV0FBVyxPQUFTLENBQUMsWUFBWSxhQUFhLENBQUMsV0FBVyxjQUFjLGFBQWEsQ0FBQyxTQUFTLFNBQVMsV0FBVyxlQUFlLFlBQVksQ0FBQyxNQUFNLE1BQU0sU0FBUyxTQUFTLGFBQWEsU0FBUyxDQUFDLFNBQVMsU0FBUyxXQUFXLGNBQWMsZUFBZSxLQUFPLENBQUMsU0FBUyxXQUFXLE1BQVEsQ0FBQyxTQUFTLFlBQVksQ0FBQyxT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LEVBQUUsaUJBQWlCdmxCLElBQUksVUFBVyxRQUNsQ3VsQixFQUFFLFlBQVlya0IsVUFHaEJxa0IsRUFBRSxpQkFDQ3dsQixXQUFVLFdBQ1Q3eEQsYUFBYTR4RCxNQUVkcmhDLFlBQVcsV0FDVnFoQyxFQUFpQnJ4RCxZQUFXLFdBQzFCOHJDLEVBQUUsaUJBQWlCdmxCLElBQUksVUFBVyxRQUNsQ3VsQixFQUFFLFlBQVlya0IsU0FDYiIsImZpbGUiOiJidW5kbGUuMDE1YzA5NjNjY2E4YjU5ODYyYzYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBpbnN0YWxsIGEgSlNPTlAgY2FsbGJhY2sgZm9yIGNodW5rIGxvYWRpbmdcbiBcdGZ1bmN0aW9uIHdlYnBhY2tKc29ucENhbGxiYWNrKGRhdGEpIHtcbiBcdFx0dmFyIGNodW5rSWRzID0gZGF0YVswXTtcbiBcdFx0dmFyIG1vcmVNb2R1bGVzID0gZGF0YVsxXTtcblxuXG4gXHRcdC8vIGFkZCBcIm1vcmVNb2R1bGVzXCIgdG8gdGhlIG1vZHVsZXMgb2JqZWN0LFxuIFx0XHQvLyB0aGVuIGZsYWcgYWxsIFwiY2h1bmtJZHNcIiBhcyBsb2FkZWQgYW5kIGZpcmUgY2FsbGJhY2tcbiBcdFx0dmFyIG1vZHVsZUlkLCBjaHVua0lkLCBpID0gMCwgcmVzb2x2ZXMgPSBbXTtcbiBcdFx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiYgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG4gXHRcdFx0XHRyZXNvbHZlcy5wdXNoKGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSk7XG4gXHRcdFx0fVxuIFx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG4gXHRcdH1cbiBcdFx0Zm9yKG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdG1vZHVsZXNbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRpZihwYXJlbnRKc29ucEZ1bmN0aW9uKSBwYXJlbnRKc29ucEZ1bmN0aW9uKGRhdGEpO1xuXG4gXHRcdHdoaWxlKHJlc29sdmVzLmxlbmd0aCkge1xuIFx0XHRcdHJlc29sdmVzLnNoaWZ0KCkoKTtcbiBcdFx0fVxuXG4gXHR9O1xuXG5cbiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgQ1NTIGNodW5rc1xuIFx0dmFyIGluc3RhbGxlZENzc0NodW5rcyA9IHtcbiBcdFx0MDogMFxuIFx0fVxuXG4gXHQvLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIENTUyBjaHVua3NcbiBcdHZhciBpbnN0YWxsZWRDc3NDaHVua3MgPSB7XG4gXHRcdDA6IDBcbiBcdH1cblxuIFx0Ly8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3NcbiBcdC8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuIFx0Ly8gUHJvbWlzZSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbiBcdHZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG4gXHRcdDA6IDBcbiBcdH07XG5cblxuXG4gXHQvLyBzY3JpcHQgcGF0aCBmdW5jdGlvblxuIFx0ZnVuY3Rpb24ganNvbnBTY3JpcHRTcmMoY2h1bmtJZCkge1xuIFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJcIiArIGNodW5rSWQgKyBcIi5idW5kbGUuXCIgKyB7XCIxXCI6XCJjODc4ZTFjODAxNWJlYTc3NDNjNFwifVtjaHVua0lkXSArIFwiLmpzXCJcbiBcdH1cblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG4gXHQvLyBUaGlzIGZpbGUgY29udGFpbnMgb25seSB0aGUgZW50cnkgY2h1bmsuXG4gXHQvLyBUaGUgY2h1bmsgbG9hZGluZyBmdW5jdGlvbiBmb3IgYWRkaXRpb25hbCBjaHVua3NcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZSA9IGZ1bmN0aW9uIHJlcXVpcmVFbnN1cmUoY2h1bmtJZCkge1xuIFx0XHR2YXIgcHJvbWlzZXMgPSBbXTtcblxuXG4gXHRcdC8vIG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIENTUyBsb2FkaW5nXG4gXHRcdHZhciBjc3NDaHVua3MgPSB7XCIxXCI6MX07XG4gXHRcdGlmKGluc3RhbGxlZENzc0NodW5rc1tjaHVua0lkXSkgcHJvbWlzZXMucHVzaChpbnN0YWxsZWRDc3NDaHVua3NbY2h1bmtJZF0pO1xuIFx0XHRlbHNlIGlmKGluc3RhbGxlZENzc0NodW5rc1tjaHVua0lkXSAhPT0gMCAmJiBjc3NDaHVua3NbY2h1bmtJZF0pIHtcbiBcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENzc0NodW5rc1tjaHVua0lkXSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuIFx0XHRcdFx0dmFyIGhyZWYgPSBcIlwiICsgY2h1bmtJZCArIFwiLlwiICsge1wiMVwiOlwiN2U3MGI3MGM1YjhmNjczZDQ3NjdcIn1bY2h1bmtJZF0gKyBcIi5zdHlsZS5jc3NcIjtcbiBcdFx0XHRcdHZhciBmdWxsaHJlZiA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIGhyZWY7XG4gXHRcdFx0XHR2YXIgZXhpc3RpbmdMaW5rVGFncyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwibGlua1wiKTtcbiBcdFx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBleGlzdGluZ0xpbmtUYWdzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHRcdHZhciB0YWcgPSBleGlzdGluZ0xpbmtUYWdzW2ldO1xuIFx0XHRcdFx0XHR2YXIgZGF0YUhyZWYgPSB0YWcuZ2V0QXR0cmlidXRlKFwiZGF0YS1ocmVmXCIpIHx8IHRhZy5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpO1xuIFx0XHRcdFx0XHRpZih0YWcucmVsID09PSBcInN0eWxlc2hlZXRcIiAmJiAoZGF0YUhyZWYgPT09IGhyZWYgfHwgZGF0YUhyZWYgPT09IGZ1bGxocmVmKSkgcmV0dXJuIHJlc29sdmUoKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdHZhciBleGlzdGluZ1N0eWxlVGFncyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic3R5bGVcIik7XG4gXHRcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgZXhpc3RpbmdTdHlsZVRhZ3MubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdFx0dmFyIHRhZyA9IGV4aXN0aW5nU3R5bGVUYWdzW2ldO1xuIFx0XHRcdFx0XHR2YXIgZGF0YUhyZWYgPSB0YWcuZ2V0QXR0cmlidXRlKFwiZGF0YS1ocmVmXCIpO1xuIFx0XHRcdFx0XHRpZihkYXRhSHJlZiA9PT0gaHJlZiB8fCBkYXRhSHJlZiA9PT0gZnVsbGhyZWYpIHJldHVybiByZXNvbHZlKCk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHR2YXIgbGlua1RhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuIFx0XHRcdFx0bGlua1RhZy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcbiBcdFx0XHRcdGxpbmtUYWcudHlwZSA9IFwidGV4dC9jc3NcIjtcbiBcdFx0XHRcdGxpbmtUYWcub25sb2FkID0gcmVzb2x2ZTtcbiBcdFx0XHRcdGxpbmtUYWcub25lcnJvciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gXHRcdFx0XHRcdHZhciByZXF1ZXN0ID0gZXZlbnQgJiYgZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldC5zcmMgfHwgZnVsbGhyZWY7XG4gXHRcdFx0XHRcdHZhciBlcnIgPSBuZXcgRXJyb3IoXCJMb2FkaW5nIENTUyBjaHVuayBcIiArIGNodW5rSWQgKyBcIiBmYWlsZWQuXFxuKFwiICsgcmVxdWVzdCArIFwiKVwiKTtcbiBcdFx0XHRcdFx0ZXJyLmNvZGUgPSBcIkNTU19DSFVOS19MT0FEX0ZBSUxFRFwiO1xuIFx0XHRcdFx0XHRlcnIucmVxdWVzdCA9IHJlcXVlc3Q7XG4gXHRcdFx0XHRcdGRlbGV0ZSBpbnN0YWxsZWRDc3NDaHVua3NbY2h1bmtJZF1cbiBcdFx0XHRcdFx0bGlua1RhZy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGxpbmtUYWcpXG4gXHRcdFx0XHRcdHJlamVjdChlcnIpO1xuIFx0XHRcdFx0fTtcbiBcdFx0XHRcdGxpbmtUYWcuaHJlZiA9IGZ1bGxocmVmO1xuXG4gXHRcdFx0XHR2YXIgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXTtcbiBcdFx0XHRcdGhlYWQuYXBwZW5kQ2hpbGQobGlua1RhZyk7XG4gXHRcdFx0fSkudGhlbihmdW5jdGlvbigpIHtcbiBcdFx0XHRcdGluc3RhbGxlZENzc0NodW5rc1tjaHVua0lkXSA9IDA7XG4gXHRcdFx0fSkpO1xuIFx0XHR9XG5cbiBcdFx0Ly8gbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4gQ1NTIGxvYWRpbmdcbiBcdFx0dmFyIGNzc0NodW5rcyA9IHtcIjFcIjoxfTtcbiBcdFx0aWYoaW5zdGFsbGVkQ3NzQ2h1bmtzW2NodW5rSWRdKSBwcm9taXNlcy5wdXNoKGluc3RhbGxlZENzc0NodW5rc1tjaHVua0lkXSk7XG4gXHRcdGVsc2UgaWYoaW5zdGFsbGVkQ3NzQ2h1bmtzW2NodW5rSWRdICE9PSAwICYmIGNzc0NodW5rc1tjaHVua0lkXSkge1xuIFx0XHRcdHByb21pc2VzLnB1c2goaW5zdGFsbGVkQ3NzQ2h1bmtzW2NodW5rSWRdID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gXHRcdFx0XHR2YXIgaHJlZiA9IFwiXCIgKyBjaHVua0lkICsgXCIuXCIgKyB7XCIxXCI6XCI3ZTcwYjcwYzViOGY2NzNkNDc2N1wifVtjaHVua0lkXSArIFwiLnN0eWxlLmNzc1wiO1xuIFx0XHRcdFx0dmFyIGZ1bGxocmVmID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgaHJlZjtcbiBcdFx0XHRcdHZhciBleGlzdGluZ0xpbmtUYWdzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJsaW5rXCIpO1xuIFx0XHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGV4aXN0aW5nTGlua1RhZ3MubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdFx0dmFyIHRhZyA9IGV4aXN0aW5nTGlua1RhZ3NbaV07XG4gXHRcdFx0XHRcdHZhciBkYXRhSHJlZiA9IHRhZy5nZXRBdHRyaWJ1dGUoXCJkYXRhLWhyZWZcIikgfHwgdGFnLmdldEF0dHJpYnV0ZShcImhyZWZcIik7XG4gXHRcdFx0XHRcdGlmKHRhZy5yZWwgPT09IFwic3R5bGVzaGVldFwiICYmIChkYXRhSHJlZiA9PT0gaHJlZiB8fCBkYXRhSHJlZiA9PT0gZnVsbGhyZWYpKSByZXR1cm4gcmVzb2x2ZSgpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0dmFyIGV4aXN0aW5nU3R5bGVUYWdzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzdHlsZVwiKTtcbiBcdFx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBleGlzdGluZ1N0eWxlVGFncy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0XHR2YXIgdGFnID0gZXhpc3RpbmdTdHlsZVRhZ3NbaV07XG4gXHRcdFx0XHRcdHZhciBkYXRhSHJlZiA9IHRhZy5nZXRBdHRyaWJ1dGUoXCJkYXRhLWhyZWZcIik7XG4gXHRcdFx0XHRcdGlmKGRhdGFIcmVmID09PSBocmVmIHx8IGRhdGFIcmVmID09PSBmdWxsaHJlZikgcmV0dXJuIHJlc29sdmUoKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdHZhciBsaW5rVGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG4gXHRcdFx0XHRsaW5rVGFnLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuIFx0XHRcdFx0bGlua1RhZy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuIFx0XHRcdFx0bGlua1RhZy5vbmxvYWQgPSByZXNvbHZlO1xuIFx0XHRcdFx0bGlua1RhZy5vbmVycm9yID0gZnVuY3Rpb24oZXZlbnQpIHtcbiBcdFx0XHRcdFx0dmFyIHJlcXVlc3QgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LnNyYyB8fCBmdWxsaHJlZjtcbiBcdFx0XHRcdFx0dmFyIGVyciA9IG5ldyBFcnJvcihcIkxvYWRpbmcgQ1NTIGNodW5rIFwiICsgY2h1bmtJZCArIFwiIGZhaWxlZC5cXG4oXCIgKyByZXF1ZXN0ICsgXCIpXCIpO1xuIFx0XHRcdFx0XHRlcnIuY29kZSA9IFwiQ1NTX0NIVU5LX0xPQURfRkFJTEVEXCI7XG4gXHRcdFx0XHRcdGVyci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiBcdFx0XHRcdFx0ZGVsZXRlIGluc3RhbGxlZENzc0NodW5rc1tjaHVua0lkXVxuIFx0XHRcdFx0XHRsaW5rVGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobGlua1RhZylcbiBcdFx0XHRcdFx0cmVqZWN0KGVycik7XG4gXHRcdFx0XHR9O1xuIFx0XHRcdFx0bGlua1RhZy5ocmVmID0gZnVsbGhyZWY7XG5cbiBcdFx0XHRcdHZhciBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdO1xuIFx0XHRcdFx0aGVhZC5hcHBlbmRDaGlsZChsaW5rVGFnKTtcbiBcdFx0XHR9KS50aGVuKGZ1bmN0aW9uKCkge1xuIFx0XHRcdFx0aW5zdGFsbGVkQ3NzQ2h1bmtzW2NodW5rSWRdID0gMDtcbiBcdFx0XHR9KSk7XG4gXHRcdH1cblxuIFx0XHQvLyBKU09OUCBjaHVuayBsb2FkaW5nIGZvciBqYXZhc2NyaXB0XG5cbiBcdFx0dmFyIGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcbiBcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhICE9PSAwKSB7IC8vIDAgbWVhbnMgXCJhbHJlYWR5IGluc3RhbGxlZFwiLlxuXG4gXHRcdFx0Ly8gYSBQcm9taXNlIG1lYW5zIFwiY3VycmVudGx5IGxvYWRpbmdcIi5cbiBcdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEpIHtcbiBcdFx0XHRcdHByb21pc2VzLnB1c2goaW5zdGFsbGVkQ2h1bmtEYXRhWzJdKTtcbiBcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0Ly8gc2V0dXAgUHJvbWlzZSBpbiBjaHVuayBjYWNoZVxuIFx0XHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiBcdFx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtEYXRhID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gW3Jlc29sdmUsIHJlamVjdF07XG4gXHRcdFx0XHR9KTtcbiBcdFx0XHRcdHByb21pc2VzLnB1c2goaW5zdGFsbGVkQ2h1bmtEYXRhWzJdID0gcHJvbWlzZSk7XG5cbiBcdFx0XHRcdC8vIHN0YXJ0IGNodW5rIGxvYWRpbmdcbiBcdFx0XHRcdHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiBcdFx0XHRcdHZhciBvblNjcmlwdENvbXBsZXRlO1xuXG4gXHRcdFx0XHRzY3JpcHQuY2hhcnNldCA9ICd1dGYtOCc7XG4gXHRcdFx0XHRzY3JpcHQudGltZW91dCA9IDEyMDtcbiBcdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKSB7XG4gXHRcdFx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdHNjcmlwdC5zcmMgPSBqc29ucFNjcmlwdFNyYyhjaHVua0lkKTtcblxuIFx0XHRcdFx0Ly8gY3JlYXRlIGVycm9yIGJlZm9yZSBzdGFjayB1bndvdW5kIHRvIGdldCB1c2VmdWwgc3RhY2t0cmFjZSBsYXRlclxuIFx0XHRcdFx0dmFyIGVycm9yID0gbmV3IEVycm9yKCk7XG4gXHRcdFx0XHRvblNjcmlwdENvbXBsZXRlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gXHRcdFx0XHRcdC8vIGF2b2lkIG1lbSBsZWFrcyBpbiBJRS5cbiBcdFx0XHRcdFx0c2NyaXB0Lm9uZXJyb3IgPSBzY3JpcHQub25sb2FkID0gbnVsbDtcbiBcdFx0XHRcdFx0Y2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuIFx0XHRcdFx0XHR2YXIgY2h1bmsgPSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG4gXHRcdFx0XHRcdGlmKGNodW5rICE9PSAwKSB7XG4gXHRcdFx0XHRcdFx0aWYoY2h1bmspIHtcbiBcdFx0XHRcdFx0XHRcdHZhciBlcnJvclR5cGUgPSBldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnID8gJ21pc3NpbmcnIDogZXZlbnQudHlwZSk7XG4gXHRcdFx0XHRcdFx0XHR2YXIgcmVhbFNyYyA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuc3JjO1xuIFx0XHRcdFx0XHRcdFx0ZXJyb3IubWVzc2FnZSA9ICdMb2FkaW5nIGNodW5rICcgKyBjaHVua0lkICsgJyBmYWlsZWQuXFxuKCcgKyBlcnJvclR5cGUgKyAnOiAnICsgcmVhbFNyYyArICcpJztcbiBcdFx0XHRcdFx0XHRcdGVycm9yLm5hbWUgPSAnQ2h1bmtMb2FkRXJyb3InO1xuIFx0XHRcdFx0XHRcdFx0ZXJyb3IudHlwZSA9IGVycm9yVHlwZTtcbiBcdFx0XHRcdFx0XHRcdGVycm9yLnJlcXVlc3QgPSByZWFsU3JjO1xuIFx0XHRcdFx0XHRcdFx0Y2h1bmtbMV0oZXJyb3IpO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSB1bmRlZmluZWQ7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH07XG4gXHRcdFx0XHR2YXIgdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiBcdFx0XHRcdFx0b25TY3JpcHRDb21wbGV0ZSh7IHR5cGU6ICd0aW1lb3V0JywgdGFyZ2V0OiBzY3JpcHQgfSk7XG4gXHRcdFx0XHR9LCAxMjAwMDApO1xuIFx0XHRcdFx0c2NyaXB0Lm9uZXJyb3IgPSBzY3JpcHQub25sb2FkID0gb25TY3JpcHRDb21wbGV0ZTtcbiBcdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0cmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbiBcdH07XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJkaXN0L1wiO1xuXG4gXHQvLyBvbiBlcnJvciBmdW5jdGlvbiBmb3IgYXN5bmMgbG9hZGluZ1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vZSA9IGZ1bmN0aW9uKGVycikgeyBjb25zb2xlLmVycm9yKGVycik7IHRocm93IGVycjsgfTtcblxuIFx0dmFyIGpzb25wQXJyYXkgPSB3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBcIl0gPSB3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBcIl0gfHwgW107XG4gXHR2YXIgb2xkSnNvbnBGdW5jdGlvbiA9IGpzb25wQXJyYXkucHVzaC5iaW5kKGpzb25wQXJyYXkpO1xuIFx0anNvbnBBcnJheS5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2s7XG4gXHRqc29ucEFycmF5ID0ganNvbnBBcnJheS5zbGljZSgpO1xuIFx0Zm9yKHZhciBpID0gMDsgaSA8IGpzb25wQXJyYXkubGVuZ3RoOyBpKyspIHdlYnBhY2tKc29ucENhbGxiYWNrKGpzb25wQXJyYXlbaV0pO1xuIFx0dmFyIHBhcmVudEpzb25wRnVuY3Rpb24gPSBvbGRKc29ucEZ1bmN0aW9uO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMik7XG4iLCJpbXBvcnQgYmJWaWV3RGF0YSBmcm9tIFwiLi9kYXRhL2JiVmlld0RhdGEuanNcIjtcblxuZXhwb3J0IGNvbnN0IHZpZXdEYXRhID0ge1xuICBNUDNfT1ZFUlZJRVc6IHtcbiAgICB2aWV3RGlzcGxheVRleHQ6IFwiSVAgVmlld1wiLFxuICB9LFxuICBNUDNfVEVSX0U6IHtcbiAgICB2aWV3RGlzcGxheVRleHQ6IFwiVEVSUkFDRSAvIEVOVFJBTkNFXCIsXG4gIH0sXG4gIE1QM19URVJfQ0VOVEVSOiB7XG4gICAgdmlld0Rpc3BsYXlUZXh0OiBcIlRFUlJBQ0UgLyBGQUNUT1JZIENFTlRFUlwiLFxuICAgIHZpZGVvSWQ6IFwiZ0tiLVRKVXBmNzhcIixcbiAgICB2aWRlb1RpdGxlOiBcIlRFUlJBQ0UgLyAzNjAgVklERU8gKDEgbWluKVwiLFxuICB9LFxuICBNUDNfVEVSX0MxOiB7XG4gICAgdmlld0Rpc3BsYXlUZXh0OiBcIlRFUlJBQ0UgLyBDT1JORVIgMVwiLFxuICB9LFxuICBNUDNfVEVSX0MyOiB7XG4gICAgdmlld0Rpc3BsYXlUZXh0OiBcIlRFUlJBQ0UgLyBDT1JORVIgMlwiLFxuICB9LFxuICBNUDNfVEVSX08xOiB7XG4gICAgdmlld0Rpc3BsYXlUZXh0OiBcIlRFUlJBQ0UgLyBPRkZJQ0UgMVwiLFxuICB9LFxuICBNUDNfVEVSX08yOiB7XG4gICAgdmlld0Rpc3BsYXlUZXh0OiBcIlRFUlJBQ0UgLyBPRkZJQ0UgMlwiLFxuICB9LFxuICAvL3NlbWlcbiAgTVAzX1NFTUlfRToge1xuICAgIHZpZXdEaXNwbGF5VGV4dDogXCJTRU1JIC0gREVUQUNIRUQgLyBFTlRSQU5DRVwiLFxuICB9LFxuICBNUDNfU0VNSV9DRU5URVI6IHtcbiAgICB2aWV3RGlzcGxheVRleHQ6IFwiU0VNSSAtIERFVEFDSEVEIC8gRkFDVE9SWSBDRU5URVJcIixcbiAgICB2aWRlb0lkOiBcIjJFOHNBR0l2eHJZXCIsXG4gICAgdmlkZW9UaXRsZTogXCJTRU1JIC0gREVUQUNIRUQgLyAzNjAgVklERU8gKDEgbWluKVwiLFxuICB9LFxuICBNUDNfU0VNSV9DMToge1xuICAgIHZpZXdEaXNwbGF5VGV4dDogXCJTRU1JIC0gREVUQUNIRUQgLyBDT1JORVIgMVwiLFxuICB9LFxuICBNUDNfU0VNSV9DMjoge1xuICAgIHZpZXdEaXNwbGF5VGV4dDogXCJTRU1JIC0gREVUQUNIRUQgLyBDT1JORVIgMlwiLFxuICB9LFxuICBNUDNfU0VNSV9PMToge1xuICAgIHZpZXdEaXNwbGF5VGV4dDogXCJTRU1JIC0gREVUQUNIRUQgLyBPRkZJQ0UgMVwiLFxuICB9LFxuICBNUDNfU0VNSV9PMjoge1xuICAgIHZpZXdEaXNwbGF5VGV4dDogXCJTRU1JIC0gREVUQUNIRUQgLyBPRkZJQ0UgMlwiLFxuICB9LFxuICAvLyBkZXRcbiAgTVAzX0RFVF9FOiB7XG4gICAgdmlld0Rpc3BsYXlUZXh0OiBcIkRFVEFDSEVEIC8gRU5UUkFOQ0VcIixcbiAgfSxcbiAgTVAzX0RFVF9DRU5URVI6IHtcbiAgICB2aWV3RGlzcGxheVRleHQ6IFwiREVUQUNIRUQgLyBGQUNUT1JZIENFTlRFUlwiLFxuICAgIHZpZGVvSWQ6IFwibUVaZ0RUeVo2NTRcIixcbiAgICB2aWRlb1RpdGxlOiBcIkRFVEFDSEVEIC8gMzYwIFZJREVPICgxIG1pbilcIixcbiAgfSxcbiAgTVAzX0RFVF9PMToge1xuICAgIHZpZXdEaXNwbGF5VGV4dDogXCJERVRBQ0hFRCAvIE9GRklDRSAxXCIsXG4gIH0sXG4gIE1QM19ERVRfTzI6IHtcbiAgICB2aWV3RGlzcGxheVRleHQ6IFwiREVUQUNIRUQgLyBPRkZJQ0UgMlwiLFxuICB9LFxuICBNUDNfT1VURE9PUl8xOiB7XG4gICAgdmlld0Rpc3BsYXlUZXh0OiBcIk9VVERPT1IgVklFVyAxXCIsXG4gIH0sXG4gIE1QM19PVVRET09SXzI6IHtcbiAgICB2aWV3RGlzcGxheVRleHQ6IFwiT1VURE9PUiBWSUVXIDJcIixcbiAgfSxcbiAgTVAzX09VVERPT1JfMzoge1xuICAgIHZpZXdEaXNwbGF5VGV4dDogXCJPVVRET09SIFZJRVcgM1wiLFxuICB9LFxuICBNUDNfT1VURE9PUl80OiB7XG4gICAgdmlld0Rpc3BsYXlUZXh0OiBcIk9VVERPT1IgVklFVyA0XCIsXG4gIH0sXG4gIE1QM19PVVRET09SXzU6IHtcbiAgICB2aWV3RGlzcGxheVRleHQ6IFwiT1VURE9PUiBWSUVXIDVcIixcbiAgfSxcbiAgTVAzX09VVERPT1JfNjoge1xuICAgIHZpZXdEaXNwbGF5VGV4dDogXCJPVVRET09SIFZJRVcgNlwiLFxuICB9LFxuICBNUDNfT1VURE9PUl83OiB7XG4gICAgdmlld0Rpc3BsYXlUZXh0OiBcIk9VVERPT1IgVklFVyA3XCIsXG4gIH0sXG4gIE1QM19PVVRET09SXzg6IHtcbiAgICB2aWV3RGlzcGxheVRleHQ6IFwiT1VURE9PUiBWSUVXIDhcIixcbiAgfSxcbiAgTVAzX09VVERPT1JfOToge1xuICAgIHZpZXdEaXNwbGF5VGV4dDogXCJPVVRET09SIFZJRVcgOVwiLFxuICB9LFxuICAuLi5iYlZpZXdEYXRhLFxufTtcbiIsImNvbnN0IGJiVmlld0RhdGEgPSB7XG4gIEJCX09WRVJWSUVXOiB7XG4gICAgdmlld0Rpc3BsYXlUZXh0OiBcIklQIFZpZXdcIixcbiAgfSxcbiAgQkJfVEVSX0UxOiB7XG4gICAgdmlld0Rpc3BsYXlUZXh0OiBcIlRFUlJBQ0UgLyBFTlRSQU5DRSAxXCIsXG4gIH0sXG4gIEJCX1RFUl9FMjoge1xuICAgIHZpZXdEaXNwbGF5VGV4dDogXCJURVJSQUNFIC8gRU5UUkFOQ0UgMlwiLFxuICB9LFxuICBCQl9URVJfQ0VOVEVSOiB7XG4gICAgdmlld0Rpc3BsYXlUZXh0OiBcIlRFUlJBQ0UgLyBGQUNUT1JZIENFTlRFUlwiLFxuICAgIHZpZGVvSWQ6IFwiQmxINEhkcktOZE1cIixcbiAgICB2aWRlb1RpdGxlOiBcIlRFUlJBQ0UgLyAzNjAgVklERU8gKDEgbWluKVwiLFxuICB9LFxuICBCQl9URVJfQzE6IHtcbiAgICB2aWV3RGlzcGxheVRleHQ6IFwiVEVSUkFDRSAvIENPUk5FUiAxXCIsXG4gIH0sXG4gIEJCX1RFUl9DMjoge1xuICAgIHZpZXdEaXNwbGF5VGV4dDogXCJURVJSQUNFIC8gQ09STkVSIDJcIixcbiAgfSxcbiAgQkJfVEVSX0MzOiB7XG4gICAgdmlld0Rpc3BsYXlUZXh0OiBcIlRFUlJBQ0UgLyBDT1JORVIgM1wiLFxuICB9LFxuICBCQl9URVJfTzE6IHtcbiAgICB2aWV3RGlzcGxheVRleHQ6IFwiVEVSUkFDRSAvIE9GRklDRSAxXCIsXG4gIH0sXG4gIEJCX1RFUl9PMjoge1xuICAgIHZpZXdEaXNwbGF5VGV4dDogXCJURVJSQUNFIC8gT0ZGSUNFIDJcIixcbiAgfSxcbiAgLy9zZW1pXG4gIEJCX1NFTUlfRTE6IHtcbiAgICB2aWV3RGlzcGxheVRleHQ6IFwiU0VNSSAtIERFVEFDSEVEIC8gRU5UUkFOQ0UgMVwiLFxuICB9LFxuICBCQl9TRU1JX0UyOiB7XG4gICAgdmlld0Rpc3BsYXlUZXh0OiBcIlNFTUkgLSBERVRBQ0hFRCAvIEVOVFJBTkNFIDJcIixcbiAgfSxcbiAgQkJfU0VNSV9DRU5URVI6IHtcbiAgICB2aWV3RGlzcGxheVRleHQ6IFwiU0VNSSAtIERFVEFDSEVEIC8gRkFDVE9SWSBDRU5URVJcIixcbiAgICB2aWRlb0lkOiBcIjZiRHMtYXZrWHJnXCIsXG4gICAgdmlkZW9UaXRsZTogXCJTRU1JIC0gREVUQUNIRUQgLyAzNjAgVklERU8gKDEgbWluKVwiLFxuICB9LFxuICBCQl9TRU1JX0MxOiB7XG4gICAgdmlld0Rpc3BsYXlUZXh0OiBcIlNFTUkgLSBERVRBQ0hFRCAvIENPUk5FUiAxXCIsXG4gIH0sXG4gIEJCX1NFTUlfQzI6IHtcbiAgICB2aWV3RGlzcGxheVRleHQ6IFwiU0VNSSAtIERFVEFDSEVEIC8gQ09STkVSIDJcIixcbiAgfSxcbiAgQkJfU0VNSV9DMzoge1xuICAgIHZpZXdEaXNwbGF5VGV4dDogXCJTRU1JIC0gREVUQUNIRUQgLyBDT1JORVIgM1wiLFxuICB9LFxuICBCQl9TRU1JX08xOiB7XG4gICAgdmlld0Rpc3BsYXlUZXh0OiBcIlNFTUkgLSBERVRBQ0hFRCAvIE9GRklDRSAxXCIsXG4gIH0sXG4gIEJCX1NFTUlfTzI6IHtcbiAgICB2aWV3RGlzcGxheVRleHQ6IFwiU0VNSSAtIERFVEFDSEVEIC8gT0ZGSUNFIDJcIixcbiAgfSxcbiAgLy8gREVUXG4gIEJCX0RFVF9FOiB7XG4gICAgdmlld0Rpc3BsYXlUZXh0OiBcIkRFVEFDSEVEIC8gRU5UUkFOQ0VcIixcbiAgfSxcbiAgQkJfREVUX0NFTlRFUjoge1xuICAgIHZpZXdEaXNwbGF5VGV4dDogXCJERVRBQ0hFRCAvIEZBQ1RPUlkgQ0VOVEVSXCIsXG4gICAgdmlkZW9JZDogXCJwNkg3NjhyU3FKUVwiLFxuICAgIHZpZGVvVGl0bGU6IFwiREVUQUNIRUQgLyAzNjAgVklERU8gKDEgbWluKVwiLFxuICB9LFxuICBCQl9ERVRfTzoge1xuICAgIHZpZXdEaXNwbGF5VGV4dDogXCJERVRBQ0hFRCAvIE9GRklDRVwiLFxuICB9LFxuICBCQl9PVVRET09SXzE6IHtcbiAgICB2aWV3RGlzcGxheVRleHQ6IFwiT1VURE9PUiBWSUVXIDFcIixcbiAgfSxcbiAgQkJfT1VURE9PUl8yOiB7XG4gICAgdmlld0Rpc3BsYXlUZXh0OiBcIk9VVERPT1IgVklFVyAyXCIsXG4gIH0sXG4gIEJCX09VVERPT1JfMzoge1xuICAgIHZpZXdEaXNwbGF5VGV4dDogXCJPVVRET09SIFZJRVcgM1wiLFxuICB9LFxuICBCQl9PVVRET09SXzQ6IHtcbiAgICB2aWV3RGlzcGxheVRleHQ6IFwiT1VURE9PUiBWSUVXIDRcIixcbiAgfSxcbiAgQkJfT1VURE9PUl81OiB7XG4gICAgdmlld0Rpc3BsYXlUZXh0OiBcIk9VVERPT1IgVklFVyA1XCIsXG4gIH0sXG4gIEJCX09VVERPT1JfNjoge1xuICAgIHZpZXdEaXNwbGF5VGV4dDogXCJPVVRET09SIFZJRVcgNlwiLFxuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgYmJWaWV3RGF0YTtcbiIsIi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2My41LjFcbiAqIGh0dHBzOi8vanF1ZXJ5LmNvbS9cbiAqXG4gKiBJbmNsdWRlcyBTaXp6bGUuanNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDIwLTA1LTA0VDIyOjQ5WlxuICovXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2Bcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0gKSggdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBFZGdlIDw9IDEyIC0gMTMrLCBGaXJlZm94IDw9MTggLSA0NSssIElFIDEwIC0gMTEsIFNhZmFyaSA1LjEgLSA5KywgaU9TIDYgLSA5LjFcbi8vIHRocm93IGV4Y2VwdGlvbnMgd2hlbiBub24tc3RyaWN0IGNvZGUgKGUuZy4sIEFTUC5ORVQgNC41KSBhY2Nlc3NlcyBzdHJpY3QgbW9kZVxuLy8gYXJndW1lbnRzLmNhbGxlZS5jYWxsZXIgKHRyYWMtMTMzMzUpLiBCdXQgYXMgb2YgalF1ZXJ5IDMuMCAoMjAxNiksIHN0cmljdCBtb2RlIHNob3VsZCBiZSBjb21tb25cbi8vIGVub3VnaCB0aGF0IGFsbCBzdWNoIGF0dGVtcHRzIGFyZSBndWFyZGVkIGluIGEgdHJ5IGJsb2NrLlxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhcnIgPSBbXTtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cbnZhciBmbGF0ID0gYXJyLmZsYXQgPyBmdW5jdGlvbiggYXJyYXkgKSB7XG5cdHJldHVybiBhcnIuZmxhdC5jYWxsKCBhcnJheSApO1xufSA6IGZ1bmN0aW9uKCBhcnJheSApIHtcblx0cmV0dXJuIGFyci5jb25jYXQuYXBwbHkoIFtdLCBhcnJheSApO1xufTtcblxuXG52YXIgcHVzaCA9IGFyci5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZuVG9TdHJpbmcgPSBoYXNPd24udG9TdHJpbmc7XG5cbnZhciBPYmplY3RGdW5jdGlvblN0cmluZyA9IGZuVG9TdHJpbmcuY2FsbCggT2JqZWN0ICk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gaXNGdW5jdGlvbiggb2JqICkge1xuXG4gICAgICAvLyBTdXBwb3J0OiBDaHJvbWUgPD01NywgRmlyZWZveCA8PTUyXG4gICAgICAvLyBJbiBzb21lIGJyb3dzZXJzLCB0eXBlb2YgcmV0dXJucyBcImZ1bmN0aW9uXCIgZm9yIEhUTUwgPG9iamVjdD4gZWxlbWVudHNcbiAgICAgIC8vIChpLmUuLCBgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib2JqZWN0XCIgKSA9PT0gXCJmdW5jdGlvblwiYCkuXG4gICAgICAvLyBXZSBkb24ndCB3YW50IHRvIGNsYXNzaWZ5ICphbnkqIERPTSBub2RlIGFzIGEgZnVuY3Rpb24uXG4gICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBvYmoubm9kZVR5cGUgIT09IFwibnVtYmVyXCI7XG4gIH07XG5cblxudmFyIGlzV2luZG93ID0gZnVuY3Rpb24gaXNXaW5kb3coIG9iaiApIHtcblx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09PSBvYmoud2luZG93O1xuXHR9O1xuXG5cbnZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcblxuXG5cblx0dmFyIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgPSB7XG5cdFx0dHlwZTogdHJ1ZSxcblx0XHRzcmM6IHRydWUsXG5cdFx0bm9uY2U6IHRydWUsXG5cdFx0bm9Nb2R1bGU6IHRydWVcblx0fTtcblxuXHRmdW5jdGlvbiBET01FdmFsKCBjb2RlLCBub2RlLCBkb2MgKSB7XG5cdFx0ZG9jID0gZG9jIHx8IGRvY3VtZW50O1xuXG5cdFx0dmFyIGksIHZhbCxcblx0XHRcdHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KCBcInNjcmlwdFwiICk7XG5cblx0XHRzY3JpcHQudGV4dCA9IGNvZGU7XG5cdFx0aWYgKCBub2RlICkge1xuXHRcdFx0Zm9yICggaSBpbiBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNjQrLCBFZGdlIDE4K1xuXHRcdFx0XHQvLyBTb21lIGJyb3dzZXJzIGRvbid0IHN1cHBvcnQgdGhlIFwibm9uY2VcIiBwcm9wZXJ0eSBvbiBzY3JpcHRzLlxuXHRcdFx0XHQvLyBPbiB0aGUgb3RoZXIgaGFuZCwganVzdCB1c2luZyBgZ2V0QXR0cmlidXRlYCBpcyBub3QgZW5vdWdoIGFzXG5cdFx0XHRcdC8vIHRoZSBgbm9uY2VgIGF0dHJpYnV0ZSBpcyByZXNldCB0byBhbiBlbXB0eSBzdHJpbmcgd2hlbmV2ZXIgaXRcblx0XHRcdFx0Ly8gYmVjb21lcyBicm93c2luZy1jb250ZXh0IGNvbm5lY3RlZC5cblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93aGF0d2cvaHRtbC9pc3N1ZXMvMjM2OVxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jbm9uY2UtYXR0cmlidXRlc1xuXHRcdFx0XHQvLyBUaGUgYG5vZGUuZ2V0QXR0cmlidXRlYCBjaGVjayB3YXMgYWRkZWQgZm9yIHRoZSBzYWtlIG9mXG5cdFx0XHRcdC8vIGBqUXVlcnkuZ2xvYmFsRXZhbGAgc28gdGhhdCBpdCBjYW4gZmFrZSBhIG5vbmNlLWNvbnRhaW5pbmcgbm9kZVxuXHRcdFx0XHQvLyB2aWEgYW4gb2JqZWN0LlxuXHRcdFx0XHR2YWwgPSBub2RlWyBpIF0gfHwgbm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoIGkgKTtcblx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0c2NyaXB0LnNldEF0dHJpYnV0ZSggaSwgdmFsICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZG9jLmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdCApLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xuXHR9XG5cblxuZnVuY3Rpb24gdG9UeXBlKCBvYmogKSB7XG5cdGlmICggb2JqID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIG9iaiArIFwiXCI7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHkgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcblx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiID9cblx0XHRjbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKCBvYmogKSBdIHx8IFwib2JqZWN0XCIgOlxuXHRcdHR5cGVvZiBvYmo7XG59XG4vKiBnbG9iYWwgU3ltYm9sICovXG4vLyBEZWZpbmluZyB0aGlzIGdsb2JhbCBpbiAuZXNsaW50cmMuanNvbiB3b3VsZCBjcmVhdGUgYSBkYW5nZXIgb2YgdXNpbmcgdGhlIGdsb2JhbFxuLy8gdW5ndWFyZGVkIGluIGFub3RoZXIgcGxhY2UsIGl0IHNlZW1zIHNhZmVyIHRvIGRlZmluZSBnbG9iYWwgb25seSBmb3IgdGhpcyBtb2R1bGVcblxuXG5cbnZhclxuXHR2ZXJzaW9uID0gXCIzLjUuMVwiLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblxuXHRcdC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcblx0fTtcblxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxuXHRsZW5ndGg6IDAsXG5cblx0dG9BcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XG5cdGdldDogZnVuY3Rpb24oIG51bSApIHtcblxuXHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcblx0XHRpZiAoIG51bSA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XG5cdFx0cmV0dXJuIG51bSA8IDAgPyB0aGlzWyBudW0gKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgbnVtIF07XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXZlbjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkuZ3JlcCggdGhpcywgZnVuY3Rpb24oIF9lbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICggaSArIDEgKSAlIDI7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0b2RkOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5ncmVwKCB0aGlzLCBmdW5jdGlvbiggX2VsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gaSAlIDI7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1sgaiBdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cblx0cHVzaDogcHVzaCxcblx0c29ydDogYXJyLnNvcnQsXG5cdHNwbGljZTogYXJyLnNwbGljZVxufTtcblxualF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgMCBdIHx8IHt9LFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xuXHRcdGkrKztcblx0fVxuXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWlzRnVuY3Rpb24oIHRhcmdldCApICkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Ly8gRXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xuXHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0aS0tO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XG5cblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IE9iamVjdC5wcm90b3R5cGUgcG9sbHV0aW9uXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCBuYW1lID09PSBcIl9fcHJvdG9fX1wiIHx8IHRhcmdldCA9PT0gY29weSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb3B5ICkgfHxcblx0XHRcdFx0XHQoIGNvcHlJc0FycmF5ID0gQXJyYXkuaXNBcnJheSggY29weSApICkgKSApIHtcblx0XHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblxuXHRcdFx0XHRcdC8vIEVuc3VyZSBwcm9wZXIgdHlwZSBmb3IgdGhlIHNvdXJjZSB2YWx1ZVxuXHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgJiYgIUFycmF5LmlzQXJyYXkoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBbXTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCAhY29weUlzQXJyYXkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSApIHtcblx0XHRcdFx0XHRcdGNsb25lID0ge307XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cblx0XHQvLyBEZXRlY3Qgb2J2aW91cyBuZWdhdGl2ZXNcblx0XHQvLyBVc2UgdG9TdHJpbmcgaW5zdGVhZCBvZiBqUXVlcnkudHlwZSB0byBjYXRjaCBob3N0IG9iamVjdHNcblx0XHRpZiAoICFvYmogfHwgdG9TdHJpbmcuY2FsbCggb2JqICkgIT09IFwiW29iamVjdCBPYmplY3RdXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cHJvdG8gPSBnZXRQcm90byggb2JqICk7XG5cblx0XHQvLyBPYmplY3RzIHdpdGggbm8gcHJvdG90eXBlIChlLmcuLCBgT2JqZWN0LmNyZWF0ZSggbnVsbCApYCkgYXJlIHBsYWluXG5cdFx0aWYgKCAhcHJvdG8gKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBPYmplY3RzIHdpdGggcHJvdG90eXBlIGFyZSBwbGFpbiBpZmYgdGhleSB3ZXJlIGNvbnN0cnVjdGVkIGJ5IGEgZ2xvYmFsIE9iamVjdCBmdW5jdGlvblxuXHRcdEN0b3IgPSBoYXNPd24uY2FsbCggcHJvdG8sIFwiY29uc3RydWN0b3JcIiApICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIGZuVG9TdHJpbmcuY2FsbCggQ3RvciApID09PSBPYmplY3RGdW5jdGlvblN0cmluZztcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBuYW1lO1xuXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIHByb3ZpZGVkIGNvbnRleHQ7IGZhbGxzIGJhY2sgdG8gdGhlIGdsb2JhbCBvbmVcblx0Ly8gaWYgbm90IHNwZWNpZmllZC5cblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUsIG9wdGlvbnMsIGRvYyApIHtcblx0XHRET01FdmFsKCBjb2RlLCB7IG5vbmNlOiBvcHRpb25zICYmIG9wdGlvbnMubm9uY2UgfSwgZG9jICk7XG5cdH0sXG5cblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGxlbmd0aCwgaSA9IDA7XG5cblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBvYmogKSApIHtcblx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlMaWtlKCBPYmplY3QoIGFyciApICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggcmV0LFxuXHRcdFx0XHRcdHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFsgYXJyIF0gOiBhcnJcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guY2FsbCggcmV0LCBhcnIgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdGluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7XG5cdFx0cmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mLmNhbGwoIGFyciwgZWxlbSwgaSApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdG1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHtcblx0XHR2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsXG5cdFx0XHRqID0gMCxcblx0XHRcdGkgPSBmaXJzdC5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdGZpcnN0WyBpKysgXSA9IHNlY29uZFsgaiBdO1xuXHRcdH1cblxuXHRcdGZpcnN0Lmxlbmd0aCA9IGk7XG5cblx0XHRyZXR1cm4gZmlyc3Q7XG5cdH0sXG5cblx0Z3JlcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgaW52ZXJ0ICkge1xuXHRcdHZhciBjYWxsYmFja0ludmVyc2UsXG5cdFx0XHRtYXRjaGVzID0gW10sXG5cdFx0XHRpID0gMCxcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcblx0XHRcdGNhbGxiYWNrRXhwZWN0ID0gIWludmVydDtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXNcblx0XHQvLyB0aGF0IHBhc3MgdGhlIHZhbGlkYXRvciBmdW5jdGlvblxuXHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0Y2FsbGJhY2tJbnZlcnNlID0gIWNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpICk7XG5cdFx0XHRpZiAoIGNhbGxiYWNrSW52ZXJzZSAhPT0gY2FsbGJhY2tFeHBlY3QgKSB7XG5cdFx0XHRcdG1hdGNoZXMucHVzaCggZWxlbXNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRjaGVzO1xuXHR9LFxuXG5cdC8vIGFyZyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGFyZyApIHtcblx0XHR2YXIgbGVuZ3RoLCB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0cmV0ID0gW107XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xuXHRcdGlmICggaXNBcnJheUxpa2UoIGVsZW1zICkgKSB7XG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBHbyB0aHJvdWdoIGV2ZXJ5IGtleSBvbiB0aGUgb2JqZWN0LFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIGVsZW1zICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdFx0cmV0dXJuIGZsYXQoIHJldCApO1xuXHR9LFxuXG5cdC8vIEEgZ2xvYmFsIEdVSUQgY291bnRlciBmb3Igb2JqZWN0c1xuXHRndWlkOiAxLFxuXG5cdC8vIGpRdWVyeS5zdXBwb3J0IGlzIG5vdCB1c2VkIGluIENvcmUgYnV0IG90aGVyIHByb2plY3RzIGF0dGFjaCB0aGVpclxuXHQvLyBwcm9wZXJ0aWVzIHRvIGl0IHNvIGl0IG5lZWRzIHRvIGV4aXN0LlxuXHRzdXBwb3J0OiBzdXBwb3J0XG59ICk7XG5cbmlmICggdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRqUXVlcnkuZm5bIFN5bWJvbC5pdGVyYXRvciBdID0gYXJyWyBTeW1ib2wuaXRlcmF0b3IgXTtcbn1cblxuLy8gUG9wdWxhdGUgdGhlIGNsYXNzMnR5cGUgbWFwXG5qUXVlcnkuZWFjaCggXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KCBcIiBcIiApLFxuZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbn0gKTtcblxuZnVuY3Rpb24gaXNBcnJheUxpa2UoIG9iaiApIHtcblxuXHQvLyBTdXBwb3J0OiByZWFsIGlPUyA4LjIgb25seSAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXG5cdC8vIGBpbmAgY2hlY2sgdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMjE0NSlcblx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXG5cdC8vIHJlZ2FyZGluZyBOb2RlbGlzdCBsZW5ndGggaW4gSUVcblx0dmFyIGxlbmd0aCA9ICEhb2JqICYmIFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsXG5cdFx0dHlwZSA9IHRvVHlwZSggb2JqICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBvYmogKSB8fCBpc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcblx0XHR0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgKCBsZW5ndGggLSAxICkgaW4gb2JqO1xufVxudmFyIFNpenpsZSA9XG4vKiFcbiAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjMuNVxuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pzLmZvdW5kYXRpb24vXG4gKlxuICogRGF0ZTogMjAyMC0wMy0xNFxuICovXG4oIGZ1bmN0aW9uKCB3aW5kb3cgKSB7XG52YXIgaSxcblx0c3VwcG9ydCxcblx0RXhwcixcblx0Z2V0VGV4dCxcblx0aXNYTUwsXG5cdHRva2VuaXplLFxuXHRjb21waWxlLFxuXHRzZWxlY3QsXG5cdG91dGVybW9zdENvbnRleHQsXG5cdHNvcnRJbnB1dCxcblx0aGFzRHVwbGljYXRlLFxuXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcblx0c2V0RG9jdW1lbnQsXG5cdGRvY3VtZW50LFxuXHRkb2NFbGVtLFxuXHRkb2N1bWVudElzSFRNTCxcblx0cmJ1Z2d5UVNBLFxuXHRyYnVnZ3lNYXRjaGVzLFxuXHRtYXRjaGVzLFxuXHRjb250YWlucyxcblxuXHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXG5cdGV4cGFuZG8gPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcblx0ZGlycnVucyA9IDAsXG5cdGRvbmUgPSAwLFxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRub25uYXRpdmVTZWxlY3RvckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIDA7XG5cdH0sXG5cblx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xuXHRoYXNPd24gPSAoIHt9ICkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoTmF0aXZlID0gYXJyLnB1c2gsXG5cdHB1c2ggPSBhcnIucHVzaCxcblx0c2xpY2UgPSBhcnIuc2xpY2UsXG5cblx0Ly8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGFzIGl0J3MgZmFzdGVyIHRoYW4gbmF0aXZlXG5cdC8vIGh0dHBzOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcblx0aW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGxlbiA9IGxpc3QubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0aWYgKCBsaXN0WyBpIF0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxcIiArXG5cdFx0XCJpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cblx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy1zeW50YXgtMy8jaWRlbnQtdG9rZW4tZGlhZ3JhbVxuXHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXFtcXFxcZGEtZkEtRl17MSw2fVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCI/fFxcXFxcXFxcW15cXFxcclxcXFxuXFxcXGZdfFtcXFxcdy1dfFteXFwwLVxcXFx4N2ZdKStcIixcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblxuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblxuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XVxuXHRcdC8vIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICtcblx0XHR3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIixcblxuXHRwc2V1ZG9zID0gXCI6KFwiICsgaWRlbnRpZmllciArIFwiKSg/OlxcXFwoKFwiICtcblxuXHRcdC8vIFRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9ycyBuZWVkaW5nIHRva2VuaXplIGluIHRoZSBwcmVGaWx0ZXIsIHByZWZlciBhcmd1bWVudHM6XG5cdFx0Ly8gMS4gcXVvdGVkIChjYXB0dXJlIDM7IGNhcHR1cmUgNCBvciBjYXB0dXJlIDUpXG5cdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXG5cblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cblx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXG5cdFx0XCIuKlwiICtcblx0XHRcIilcXFxcKXwpXCIsXG5cblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgK1xuXHRcdHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiICksXG5cblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlwiICksXG5cdHJkZXNjZW5kID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwifD5cIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcblx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJodG1sID0gL0hUTUwkL2ksXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cblx0Ly8gQ1NTIGVzY2FwZXNcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcW1xcXFxkYS1mQS1GXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fFxcXFxcXFxcKFteXFxcXHJcXFxcblxcXFxmXSlcIiwgXCJnXCIgKSxcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIGVzY2FwZSwgbm9uSGV4ICkge1xuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlLnNsaWNlKCAxICkgLSAweDEwMDAwO1xuXG5cdFx0cmV0dXJuIG5vbkhleCA/XG5cblx0XHRcdC8vIFN0cmlwIHRoZSBiYWNrc2xhc2ggcHJlZml4IGZyb20gYSBub24taGV4IGVzY2FwZSBzZXF1ZW5jZVxuXHRcdFx0bm9uSGV4IDpcblxuXHRcdFx0Ly8gUmVwbGFjZSBhIGhleGFkZWNpbWFsIGVzY2FwZSBzZXF1ZW5jZSB3aXRoIHRoZSBlbmNvZGVkIFVuaWNvZGUgY29kZSBwb2ludFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMStcblx0XHRcdC8vIEZvciB2YWx1ZXMgb3V0c2lkZSB0aGUgQmFzaWMgTXVsdGlsaW5ndWFsIFBsYW5lIChCTVApLCBtYW51YWxseSBjb25zdHJ1Y3QgYVxuXHRcdFx0Ly8gc3Vycm9nYXRlIHBhaXJcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIENTUyBzdHJpbmcvaWRlbnRpZmllciBzZXJpYWxpemF0aW9uXG5cdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jY29tbW9uLXNlcmlhbGl6aW5nLWlkaW9tc1xuXHRyY3NzZXNjYXBlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csXG5cdGZjc3Nlc2NhcGUgPSBmdW5jdGlvbiggY2gsIGFzQ29kZVBvaW50ICkge1xuXHRcdGlmICggYXNDb2RlUG9pbnQgKSB7XG5cblx0XHRcdC8vIFUrMDAwMCBOVUxMIGJlY29tZXMgVStGRkZEIFJFUExBQ0VNRU5UIENIQVJBQ1RFUlxuXHRcdFx0aWYgKCBjaCA9PT0gXCJcXDBcIiApIHtcblx0XHRcdFx0cmV0dXJuIFwiXFx1RkZGRFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb250cm9sIGNoYXJhY3RlcnMgYW5kIChkZXBlbmRlbnQgdXBvbiBwb3NpdGlvbikgbnVtYmVycyBnZXQgZXNjYXBlZCBhcyBjb2RlIHBvaW50c1xuXHRcdFx0cmV0dXJuIGNoLnNsaWNlKCAwLCAtMSApICsgXCJcXFxcXCIgK1xuXHRcdFx0XHRjaC5jaGFyQ29kZUF0KCBjaC5sZW5ndGggLSAxICkudG9TdHJpbmcoIDE2ICkgKyBcIiBcIjtcblx0XHR9XG5cblx0XHQvLyBPdGhlciBwb3RlbnRpYWxseS1zcGVjaWFsIEFTQ0lJIGNoYXJhY3RlcnMgZ2V0IGJhY2tzbGFzaC1lc2NhcGVkXG5cdFx0cmV0dXJuIFwiXFxcXFwiICsgY2g7XG5cdH0sXG5cblx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0Ly8gZXJyb3IgaW4gSUVcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNldERvY3VtZW50KCk7XG5cdH0sXG5cblx0aW5EaXNhYmxlZEZpZWxkc2V0ID0gYWRkQ29tYmluYXRvcihcblx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJmaWVsZHNldFwiO1xuXHRcdH0sXG5cdFx0eyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH1cblx0KTtcblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KCBhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApICksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxuXHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hOYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbCggZWxzICkgKTtcblx0XHR9IDpcblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBPdGhlcndpc2UgYXBwZW5kIGRpcmVjdGx5XG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG5cdFx0XHR3aGlsZSAoICggdGFyZ2V0WyBqKysgXSA9IGVsc1sgaSsrIF0gKSApIHt9XG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3Rvcixcblx0XHRuZXdDb250ZXh0ID0gY29udGV4dCAmJiBjb250ZXh0Lm93bmVyRG9jdW1lbnQsXG5cblx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XG5cdFx0bm9kZVR5cGUgPSBjb250ZXh0ID8gY29udGV4dC5ub2RlVHlwZSA6IDk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGZyb20gY2FsbHMgd2l0aCBpbnZhbGlkIHNlbGVjdG9yIG9yIGNvbnRleHRcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIChhcyBvcHBvc2VkIHRvIGZpbHRlcnMpIGluIEhUTUwgZG9jdW1lbnRzXG5cdGlmICggIXNlZWQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0XHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblxuXHRcdGlmICggZG9jdW1lbnRJc0hUTUwgKSB7XG5cblx0XHRcdC8vIElmIHRoZSBzZWxlY3RvciBpcyBzdWZmaWNpZW50bHkgc2ltcGxlLCB0cnkgdXNpbmcgYSBcImdldCpCeSpcIiBET00gbWV0aG9kXG5cdFx0XHQvLyAoZXhjZXB0aW5nIERvY3VtZW50RnJhZ21lbnQgY29udGV4dCwgd2hlcmUgdGhlIG1ldGhvZHMgZG9uJ3QgZXhpc3QpXG5cdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxMSAmJiAoIG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApICkgKSB7XG5cblx0XHRcdFx0Ly8gSUQgc2VsZWN0b3Jcblx0XHRcdFx0aWYgKCAoIG0gPSBtYXRjaFsgMSBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb2N1bWVudCBjb250ZXh0XG5cdFx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgJiYgKCBlbGVtID0gbmV3Q29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApICkgJiZcblx0XHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJlxuXHRcdFx0XHRcdFx0XHRlbGVtLmlkID09PSBtICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHlwZSBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsgMiBdICkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0XHQvLyBDbGFzcyBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCAoIG0gPSBtYXRjaFsgMyBdICkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmXG5cdFx0XHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRpZiAoIHN1cHBvcnQucXNhICYmXG5cdFx0XHRcdCFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcblx0XHRcdFx0KCAhcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSApICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOCBvbmx5XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgb2JqZWN0IGVsZW1lbnRzXG5cdFx0XHRcdCggbm9kZVR5cGUgIT09IDEgfHwgY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiICkgKSB7XG5cblx0XHRcdFx0bmV3U2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0XHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQ7XG5cblx0XHRcdFx0Ly8gcVNBIGNvbnNpZGVycyBlbGVtZW50cyBvdXRzaWRlIGEgc2NvcGluZyByb290IHdoZW4gZXZhbHVhdGluZyBjaGlsZCBvclxuXHRcdFx0XHQvLyBkZXNjZW5kYW50IGNvbWJpbmF0b3JzLCB3aGljaCBpcyBub3Qgd2hhdCB3ZSB3YW50LlxuXHRcdFx0XHQvLyBJbiBzdWNoIGNhc2VzLCB3ZSB3b3JrIGFyb3VuZCB0aGUgYmVoYXZpb3IgYnkgcHJlZml4aW5nIGV2ZXJ5IHNlbGVjdG9yIGluIHRoZVxuXHRcdFx0XHQvLyBsaXN0IHdpdGggYW4gSUQgc2VsZWN0b3IgcmVmZXJlbmNpbmcgdGhlIHNjb3BlIGNvbnRleHQuXG5cdFx0XHRcdC8vIFRoZSB0ZWNobmlxdWUgaGFzIHRvIGJlIHVzZWQgYXMgd2VsbCB3aGVuIGEgbGVhZGluZyBjb21iaW5hdG9yIGlzIHVzZWRcblx0XHRcdFx0Ly8gYXMgc3VjaCBzZWxlY3RvcnMgYXJlIG5vdCByZWNvZ25pemVkIGJ5IHF1ZXJ5U2VsZWN0b3JBbGwuXG5cdFx0XHRcdC8vIFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGlzIHRlY2huaXF1ZS5cblx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdCggcmRlc2NlbmQudGVzdCggc2VsZWN0b3IgKSB8fCByY29tYmluYXRvcnMudGVzdCggc2VsZWN0b3IgKSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRXhwYW5kIGNvbnRleHQgZm9yIHNpYmxpbmcgc2VsZWN0b3JzXG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gV2UgY2FuIHVzZSA6c2NvcGUgaW5zdGVhZCBvZiB0aGUgSUQgaGFjayBpZiB0aGUgYnJvd3NlclxuXHRcdFx0XHRcdC8vIHN1cHBvcnRzIGl0ICYgaWYgd2UncmUgbm90IGNoYW5naW5nIHRoZSBjb250ZXh0LlxuXHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAhPT0gY29udGV4dCB8fCAhc3VwcG9ydC5zY29wZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2FwdHVyZSB0aGUgY29udGV4dCBJRCwgc2V0dGluZyBpdCBmaXJzdCBpZiBuZWNlc3Nhcnlcblx0XHRcdFx0XHRcdGlmICggKCBuaWQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZSggXCJpZFwiICkgKSApIHtcblx0XHRcdFx0XHRcdFx0bmlkID0gbmlkLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRleHQuc2V0QXR0cmlidXRlKCBcImlkXCIsICggbmlkID0gZXhwYW5kbyApICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJlZml4IGV2ZXJ5IHNlbGVjdG9yIGluIHRoZSBsaXN0XG5cdFx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRncm91cHNbIGkgXSA9ICggbmlkID8gXCIjXCIgKyBuaWQgOiBcIjpzY29wZVwiICkgKyBcIiBcIiArXG5cdFx0XHRcdFx0XHRcdHRvU2VsZWN0b3IoIGdyb3Vwc1sgaSBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oIFwiLFwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXG5cdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9IGNhdGNoICggcXNhRXJyb3IgKSB7XG5cdFx0XHRcdFx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSggc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRpZiAoIG5pZCA9PT0gZXhwYW5kbyApIHtcblx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKCBcImlkXCIgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBbGwgb3RoZXJzXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xufVxuXG4vKipcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgb2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcblx0dmFyIGtleXMgPSBbXTtcblxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoIGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUgKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG4gKi9cbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuXHRyZXR1cm4gZm47XG59XG5cbi8qKlxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBlbGVtZW50IGFuZCByZXR1cm5zIGEgYm9vbGVhbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcblx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJmaWVsZHNldFwiICk7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gISFmbiggZWwgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XG5cdFx0aWYgKCBlbC5wYXJlbnROb2RlICkge1xuXHRcdFx0ZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWwgKTtcblx0XHR9XG5cblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdGVsID0gbnVsbDtcblx0fVxufVxuXG4vKipcbiAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxuICovXG5mdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkge1xuXHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoIFwifFwiICksXG5cdFx0aSA9IGFyci5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbIGkgXSBdID0gaGFuZGxlcjtcblx0fVxufVxuXG4vKipcbiAqIENoZWNrcyBkb2N1bWVudCBvcmRlciBvZiB0d28gc2libGluZ3NcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxuICogQHBhcmFtIHtFbGVtZW50fSBiXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIGxlc3MgdGhhbiAwIGlmIGEgcHJlY2VkZXMgYiwgZ3JlYXRlciB0aGFuIDAgaWYgYSBmb2xsb3dzIGJcbiAqL1xuZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkge1xuXHR2YXIgY3VyID0gYiAmJiBhLFxuXHRcdGRpZmYgPSBjdXIgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiBiLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRhLnNvdXJjZUluZGV4IC0gYi5zb3VyY2VJbmRleDtcblxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcblx0aWYgKCBkaWZmICkge1xuXHRcdHJldHVybiBkaWZmO1xuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0aWYgKCBjdXIgKSB7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGN1ci5uZXh0U2libGluZyApICkge1xuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuICggbmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIgKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciA6ZW5hYmxlZC86ZGlzYWJsZWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZGlzYWJsZWQgdHJ1ZSBmb3IgOmRpc2FibGVkOyBmYWxzZSBmb3IgOmVuYWJsZWRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGRpc2FibGVkICkge1xuXG5cdC8vIEtub3duIDpkaXNhYmxlZCBmYWxzZSBwb3NpdGl2ZXM6IGZpZWxkc2V0W2Rpc2FibGVkXSA+IGxlZ2VuZDpudGgtb2YtdHlwZShuKzIpIDpjYW4tZGlzYWJsZVxuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBPbmx5IGNlcnRhaW4gZWxlbWVudHMgY2FuIG1hdGNoIDplbmFibGVkIG9yIDpkaXNhYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWVuYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1kaXNhYmxlZFxuXHRcdGlmICggXCJmb3JtXCIgaW4gZWxlbSApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgZm9yIGluaGVyaXRlZCBkaXNhYmxlZG5lc3Mgb24gcmVsZXZhbnQgbm9uLWRpc2FibGVkIGVsZW1lbnRzOlxuXHRcdFx0Ly8gKiBsaXN0ZWQgZm9ybS1hc3NvY2lhdGVkIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgZmllbGRzZXRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjYXRlZ29yeS1saXN0ZWRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LWZlLWRpc2FibGVkXG5cdFx0XHQvLyAqIG9wdGlvbiBlbGVtZW50cyBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1vcHRpb24tZGlzYWJsZWRcblx0XHRcdC8vIEFsbCBzdWNoIGVsZW1lbnRzIGhhdmUgYSBcImZvcm1cIiBwcm9wZXJ0eS5cblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICYmIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIE9wdGlvbiBlbGVtZW50cyBkZWZlciB0byBhIHBhcmVudCBvcHRncm91cCBpZiBwcmVzZW50XG5cdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0ucGFyZW50Tm9kZS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gMTFcblx0XHRcdFx0Ly8gVXNlIHRoZSBpc0Rpc2FibGVkIHNob3J0Y3V0IHByb3BlcnR5IHRvIGNoZWNrIGZvciBkaXNhYmxlZCBmaWVsZHNldCBhbmNlc3RvcnNcblx0XHRcdFx0cmV0dXJuIGVsZW0uaXNEaXNhYmxlZCA9PT0gZGlzYWJsZWQgfHxcblxuXHRcdFx0XHRcdC8vIFdoZXJlIHRoZXJlIGlzIG5vIGlzRGlzYWJsZWQsIGNoZWNrIG1hbnVhbGx5XG5cdFx0XHRcdFx0LyoganNoaW50IC1XMDE4ICovXG5cdFx0XHRcdFx0ZWxlbS5pc0Rpc2FibGVkICE9PSAhZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRpbkRpc2FibGVkRmllbGRzZXQoIGVsZW0gKSA9PT0gZGlzYWJsZWQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblxuXHRcdC8vIFRyeSB0byB3aW5ub3cgb3V0IGVsZW1lbnRzIHRoYXQgY2FuJ3QgYmUgZGlzYWJsZWQgYmVmb3JlIHRydXN0aW5nIHRoZSBkaXNhYmxlZCBwcm9wZXJ0eS5cblx0XHQvLyBTb21lIHZpY3RpbXMgZ2V0IGNhdWdodCBpbiBvdXIgbmV0IChsYWJlbCwgbGVnZW5kLCBtZW51LCB0cmFjayksIGJ1dCBpdCBzaG91bGRuJ3Rcblx0XHQvLyBldmVuIGV4aXN0IG9uIHRoZW0sIGxldCBhbG9uZSBoYXZlIGEgYm9vbGVhbiB2YWx1ZS5cblx0XHR9IGVsc2UgaWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHR9XG5cblx0XHQvLyBSZW1haW5pbmcgZWxlbWVudHMgYXJlIG5laXRoZXIgOmVuYWJsZWQgbm9yIDpkaXNhYmxlZFxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGFyZ3VtZW50ICkge1xuXHRcdGFyZ3VtZW50ID0gK2FyZ3VtZW50O1xuXHRcdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbICggaiA9IG1hdGNoSW5kZXhlc1sgaSBdICkgXSApIHtcblx0XHRcdFx0XHRzZWVkWyBqIF0gPSAhKCBtYXRjaGVzWyBqIF0gPSBzZWVkWyBqIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSApO1xufVxuXG4vKipcbiAqIENoZWNrcyBhIG5vZGUgZm9yIHZhbGlkaXR5IGFzIGEgU2l6emxlIGNvbnRleHRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3Q9fSBjb250ZXh0XG4gKiBAcmV0dXJucyB7RWxlbWVudHxPYmplY3R8Qm9vbGVhbn0gVGhlIGlucHV0IG5vZGUgaWYgYWNjZXB0YWJsZSwgb3RoZXJ3aXNlIGEgZmFsc3kgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdGVzdENvbnRleHQoIGNvbnRleHQgKSB7XG5cdHJldHVybiBjb250ZXh0ICYmIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnRleHQ7XG59XG5cbi8vIEV4cG9zZSBzdXBwb3J0IHZhcnMgZm9yIGNvbnZlbmllbmNlXG5zdXBwb3J0ID0gU2l6emxlLnN1cHBvcnQgPSB7fTtcblxuLyoqXG4gKiBEZXRlY3RzIFhNTCBub2Rlc1xuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbSBBbiBlbGVtZW50IG9yIGEgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmZiBlbGVtIGlzIGEgbm9uLUhUTUwgWE1MIG5vZGVcbiAqL1xuaXNYTUwgPSBTaXp6bGUuaXNYTUwgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5hbWVzcGFjZSA9IGVsZW0ubmFtZXNwYWNlVVJJLFxuXHRcdGRvY0VsZW0gPSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkuZG9jdW1lbnRFbGVtZW50O1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OFxuXHQvLyBBc3N1bWUgSFRNTCB3aGVuIGRvY3VtZW50RWxlbWVudCBkb2Vzbid0IHlldCBleGlzdCwgc3VjaCBhcyBpbnNpZGUgbG9hZGluZyBpZnJhbWVzXG5cdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC80ODMzXG5cdHJldHVybiAhcmh0bWwudGVzdCggbmFtZXNwYWNlIHx8IGRvY0VsZW0gJiYgZG9jRWxlbS5ub2RlTmFtZSB8fCBcIkhUTUxcIiApO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBzdWJXaW5kb3csXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggZG9jID09IGRvY3VtZW50IHx8IGRvYy5ub2RlVHlwZSAhPT0gOSB8fCAhZG9jLmRvY3VtZW50RWxlbWVudCApIHtcblx0XHRyZXR1cm4gZG9jdW1lbnQ7XG5cdH1cblxuXHQvLyBVcGRhdGUgZ2xvYmFsIHZhcmlhYmxlc1xuXHRkb2N1bWVudCA9IGRvYztcblx0ZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0ZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoIGRvY3VtZW50ICk7XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4K1xuXHQvLyBBY2Nlc3NpbmcgaWZyYW1lIGRvY3VtZW50cyBhZnRlciB1bmxvYWQgdGhyb3dzIFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvcnMgKGpRdWVyeSAjMTM5MzYpXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggcHJlZmVycmVkRG9jICE9IGRvY3VtZW50ICYmXG5cdFx0KCBzdWJXaW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldyApICYmIHN1YldpbmRvdy50b3AgIT09IHN1YldpbmRvdyApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDExLCBFZGdlXG5cdFx0aWYgKCBzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDEwIG9ubHlcblx0XHR9IGVsc2UgaWYgKCBzdWJXaW5kb3cuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSAxMSssIEVkZ2UgMTIgLSAxOCssIENocm9tZSA8PTE2IC0gMjUgb25seSwgRmlyZWZveCA8PTMuNiAtIDMxIG9ubHksXG5cdC8vIFNhZmFyaSA0IC0gNSBvbmx5LCBPcGVyYSA8PTExLjYgLSAxMi54IG9ubHlcblx0Ly8gSUUvRWRnZSAmIG9sZGVyIGJyb3dzZXJzIGRvbid0IHN1cHBvcnQgdGhlIDpzY29wZSBwc2V1ZG8tY2xhc3MuXG5cdC8vIFN1cHBvcnQ6IFNhZmFyaSA2LjAgb25seVxuXHQvLyBTYWZhcmkgNi4wIHN1cHBvcnRzIDpzY29wZSBidXQgaXQncyBhbiBhbGlhcyBvZiA6cm9vdCB0aGVyZS5cblx0c3VwcG9ydC5zY29wZSA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXHRcdHJldHVybiB0eXBlb2YgZWwucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0IWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOnNjb3BlIGZpZWxkc2V0IGRpdlwiICkubGVuZ3RoO1xuXHR9ICk7XG5cblx0LyogQXR0cmlidXRlc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gU3VwcG9ydDogSUU8OFxuXHQvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXNcblx0Ly8gKGV4Y2VwdGluZyBJRTggYm9vbGVhbnMpXG5cdHN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmNsYXNzTmFtZSA9IFwiaVwiO1xuXHRcdHJldHVybiAhZWwuZ2V0QXR0cmlidXRlKCBcImNsYXNzTmFtZVwiICk7XG5cdH0gKTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlQ29tbWVudCggXCJcIiApICk7XG5cdFx0cmV0dXJuICFlbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCIqXCIgKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaWQgPSBleHBhbmRvO1xuXHRcdHJldHVybiAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xuXHR9ICk7XG5cblx0Ly8gSUQgZmlsdGVyIGFuZCBmaW5kXG5cdGlmICggc3VwcG9ydC5nZXRCeUlkICkge1xuXHRcdEV4cHIuZmlsdGVyWyBcIklEXCIgXSA9IGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdFx0RXhwci5maW5kWyBcIklEXCIgXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblx0XHRcdFx0cmV0dXJuIGVsZW0gPyBbIGVsZW0gXSA6IFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0RXhwci5maWx0ZXJbIFwiSURcIiBdID0gIGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gNyBvbmx5XG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxuXHRcdEV4cHIuZmluZFsgXCJJRFwiIF0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgbm9kZSwgaSwgZWxlbXMsXG5cdFx0XHRcdFx0ZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0Ly8gVmVyaWZ5IHRoZSBpZCBhdHRyaWJ1dGVcblx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBcImlkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRmFsbCBiYWNrIG9uIGdldEVsZW1lbnRzQnlOYW1lXG5cdFx0XHRcdFx0ZWxlbXMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlOYW1lKCBpZCApO1xuXHRcdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBcImlkXCIgKTtcblx0XHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0Ly8gVGFnXG5cdEV4cHIuZmluZFsgXCJUQUdcIiBdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdHRtcCA9IFtdLFxuXHRcdFx0XHRpID0gMCxcblxuXHRcdFx0XHQvLyBCeSBoYXBweSBjb2luY2lkZW5jZSwgYSAoYnJva2VuKSBnRUJUTiBhcHBlYXJzIG9uIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgdG9vXG5cdFx0XHRcdHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50c1xuXHRcdFx0aWYgKCB0YWcgPT09IFwiKlwiICkge1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IHJlc3VsdHNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdG1wO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmRbIFwiQ0xBU1NcIiBdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggY2xhc3NOYW1lICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qIFFTQS9tYXRjaGVzU2VsZWN0b3Jcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFFTQSBhbmQgbWF0Y2hlc1NlbGVjdG9yIHN1cHBvcnRcblxuXHQvLyBtYXRjaGVzU2VsZWN0b3IoOmFjdGl2ZSkgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKElFOS9PcGVyYSAxMS41KVxuXHRyYnVnZ3lNYXRjaGVzID0gW107XG5cblx0Ly8gcVNhKDpmb2N1cykgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKENocm9tZSAyMSlcblx0Ly8gV2UgYWxsb3cgdGhpcyBiZWNhdXNlIG9mIGEgYnVnIGluIElFOC85IHRoYXQgdGhyb3dzIGFuIGVycm9yXG5cdC8vIHdoZW5ldmVyIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBpcyBhY2Nlc3NlZCBvbiBhbiBpZnJhbWVcblx0Ly8gU28sIHdlIGFsbG93IDpmb2N1cyB0byBwYXNzIHRocm91Z2ggUVNBIGFsbCB0aGUgdGltZSB0byBhdm9pZCB0aGUgSUUgZXJyb3Jcblx0Ly8gU2VlIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM3OFxuXHRyYnVnZ3lRU0EgPSBbXTtcblxuXHRpZiAoICggc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSApICkge1xuXG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXG5cdFx0XHR2YXIgaW5wdXQ7XG5cblx0XHRcdC8vIFNlbGVjdCBpcyBzZXQgdG8gZW1wdHkgc3RyaW5nIG9uIHB1cnBvc2Vcblx0XHRcdC8vIFRoaXMgaXMgdG8gdGVzdCBJRSdzIHRyZWF0bWVudCBvZiBub3QgZXhwbGljaXRseVxuXHRcdFx0Ly8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsXG5cdFx0XHQvLyBzaW5jZSBpdHMgcHJlc2VuY2Ugc2hvdWxkIGJlIGVub3VnaFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzU5XG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlubmVySFRNTCA9IFwiPGEgaWQ9J1wiICsgZXhwYW5kbyArIFwiJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgaWQ9J1wiICsgZXhwYW5kbyArIFwiLVxcclxcXFwnIG1zYWxsb3djYXB0dXJlPScnPlwiICtcblx0XHRcdFx0XCI8b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTgsIE9wZXJhIDExLTEyLjE2XG5cdFx0XHQvLyBOb3RoaW5nIHNob3VsZCBiZSBzZWxlY3RlZCB3aGVuIGVtcHR5IHN0cmluZ3MgZm9sbG93IF49IG9yICQ9IG9yICo9XG5cdFx0XHQvLyBUaGUgdGVzdCBhdHRyaWJ1dGUgbXVzdCBiZSB1bmtub3duIGluIE9wZXJhIGJ1dCBcInNhZmVcIiBmb3IgV2luUlRcblx0XHRcdC8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvaGg0NjUzODguYXNweCNhdHRyaWJ1dGVfc2VjdGlvblxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIlttc2FsbG93Y2FwdHVyZV49JyddXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbc2VsZWN0ZWRdXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjQsIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS44K1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwifj1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHRcdC8vIElFIDExL0VkZ2UgZG9uJ3QgZmluZCBlbGVtZW50cyBvbiBhIGBbbmFtZT0nJ11gIHF1ZXJ5IGluIHNvbWUgY2FzZXMuXG5cdFx0XHQvLyBBZGRpbmcgYSB0ZW1wb3JhcnkgYXR0cmlidXRlIHRvIHRoZSBkb2N1bWVudCBiZWZvcmUgdGhlIHNlbGVjdGlvbiB3b3Jrc1xuXHRcdFx0Ly8gYXJvdW5kIHRoZSBpc3N1ZS5cblx0XHRcdC8vIEludGVyZXN0aW5nbHksIElFIDEwICYgb2xkZXIgZG9uJ3Qgc2VlbSB0byBoYXZlIHRoZSBpc3N1ZS5cblx0XHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIlwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW25hbWU9JyddXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqbmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKj1cIiArXG5cdFx0XHRcdFx0d2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmNoZWNrZWRcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmNoZWNrZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCssIGlPUyA4K1xuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjg1MVxuXHRcdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2libGluZy1jb21iaW5hdG9yIHNlbGVjdG9yYCBmYWlsc1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiLiMuK1srfl1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9My42IC0gNSBvbmx5XG5cdFx0XHQvLyBPbGQgRmlyZWZveCBkb2Vzbid0IHRocm93IG9uIGEgYmFkbHktZXNjYXBlZCBpZGVudGlmaWVyLlxuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbCggXCJcXFxcXFxmXCIgKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIltcXFxcclxcXFxuXFxcXGZdXCIgKTtcblx0XHR9ICk7XG5cblx0XHRhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nJyBkaXNhYmxlZD0nZGlzYWJsZWQnPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBkaXNhYmxlZD0nZGlzYWJsZWQnPjxvcHRpb24vPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxuXHRcdFx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltuYW1lPWRdXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIipbKl4kfCF+XT89XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZClcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmVuYWJsZWRcIiApLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdFx0XHQvLyBJRSdzIDpkaXNhYmxlZCBzZWxlY3RvciBkb2VzIG5vdCBwaWNrIHVwIHRoZSBjaGlsZHJlbiBvZiBkaXNhYmxlZCBmaWVsZHNldHNcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpkaXNhYmxlZFwiICkubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IE9wZXJhIDEwIC0gMTEgb25seVxuXHRcdFx0Ly8gT3BlcmEgMTAtMTEgZG9lcyBub3QgdGhyb3cgb24gcG9zdC1jb21tYSBpbnZhbGlkIHBzZXVkb3Ncblx0XHRcdGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiKiw6eFwiICk7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCIsLio6XCIgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoICggbWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yICkgKSApICkge1xuXG5cdFx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0XHRcdC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvclxuXHRcdFx0Ly8gb24gYSBkaXNjb25uZWN0ZWQgbm9kZSAoSUUgOSlcblx0XHRcdHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBtYXRjaGVzLmNhbGwoIGVsLCBcIipcIiApO1xuXG5cdFx0XHQvLyBUaGlzIHNob3VsZCBmYWlsIHdpdGggYW4gZXhjZXB0aW9uXG5cdFx0XHQvLyBHZWNrbyBkb2VzIG5vdCBlcnJvciwgcmV0dXJucyBmYWxzZSBpbnN0ZWFkXG5cdFx0XHRtYXRjaGVzLmNhbGwoIGVsLCBcIltzIT0nJ106eFwiICk7XG5cdFx0XHRyYnVnZ3lNYXRjaGVzLnB1c2goIFwiIT1cIiwgcHNldWRvcyApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oIFwifFwiICkgKTtcblx0cmJ1Z2d5TWF0Y2hlcyA9IHJidWdneU1hdGNoZXMubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneU1hdGNoZXMuam9pbiggXCJ8XCIgKSApO1xuXG5cdC8qIENvbnRhaW5zXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblx0aGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApO1xuXG5cdC8vIEVsZW1lbnQgY29udGFpbnMgYW5vdGhlclxuXHQvLyBQdXJwb3NlZnVsbHkgc2VsZi1leGNsdXNpdmVcblx0Ly8gQXMgaW4sIGFuIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBpdHNlbGZcblx0Y29udGFpbnMgPSBoYXNDb21wYXJlIHx8IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb250YWlucyApID9cblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdHZhciBhZG93biA9IGEubm9kZVR5cGUgPT09IDkgPyBhLmRvY3VtZW50RWxlbWVudCA6IGEsXG5cdFx0XHRcdGJ1cCA9IGIgJiYgYi5wYXJlbnROb2RlO1xuXHRcdFx0cmV0dXJuIGEgPT09IGJ1cCB8fCAhISggYnVwICYmIGJ1cC5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdGFkb3duLmNvbnRhaW5zID9cblx0XHRcdFx0XHRhZG93bi5jb250YWlucyggYnVwICkgOlxuXHRcdFx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYnVwICkgJiAxNlxuXHRcdFx0KSApO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0aWYgKCBiICkge1xuXHRcdFx0XHR3aGlsZSAoICggYiA9IGIucGFyZW50Tm9kZSApICkge1xuXHRcdFx0XHRcdGlmICggYiA9PT0gYSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG5cblx0LyogU29ydGluZ1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gRG9jdW1lbnQgb3JkZXIgc29ydGluZ1xuXHRzb3J0T3JkZXIgPSBoYXNDb21wYXJlID9cblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG5cdFx0dmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO1xuXHRcdGlmICggY29tcGFyZSApIHtcblx0XHRcdHJldHVybiBjb21wYXJlO1xuXHRcdH1cblxuXHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcblx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCggIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSApICkge1xuXG5cdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRpZiAoIGEgPT0gZG9jdW1lbnQgfHwgYS5vd25lckRvY3VtZW50ID09IHByZWZlcnJlZERvYyAmJlxuXHRcdFx0XHRjb250YWlucyggcHJlZmVycmVkRG9jLCBhICkgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdGlmICggYiA9PSBkb2N1bWVudCB8fCBiLm93bmVyRG9jdW1lbnQgPT0gcHJlZmVycmVkRG9jICYmXG5cdFx0XHRcdGNvbnRhaW5zKCBwcmVmZXJyZWREb2MsIGIgKSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0fSA6XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRXhpdCBlYXJseSBpZiB0aGUgbm9kZXMgYXJlIGlkZW50aWNhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRhdXAgPSBhLnBhcmVudE5vZGUsXG5cdFx0XHRidXAgPSBiLnBhcmVudE5vZGUsXG5cdFx0XHRhcCA9IFsgYSBdLFxuXHRcdFx0YnAgPSBbIGIgXTtcblxuXHRcdC8vIFBhcmVudGxlc3Mgbm9kZXMgYXJlIGVpdGhlciBkb2N1bWVudHMgb3IgZGlzY29ubmVjdGVkXG5cdFx0aWYgKCAhYXVwIHx8ICFidXAgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBlcWVxZXEgKi9cblx0XHRcdHJldHVybiBhID09IGRvY3VtZW50ID8gLTEgOlxuXHRcdFx0XHRiID09IGRvY3VtZW50ID8gMSA6XG5cdFx0XHRcdC8qIGVzbGludC1lbmFibGUgZXFlcWVxICovXG5cdFx0XHRcdGF1cCA/IC0xIDpcblx0XHRcdFx0YnVwID8gMSA6XG5cdFx0XHRcdHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblxuXHRcdC8vIElmIHRoZSBub2RlcyBhcmUgc2libGluZ3MsIHdlIGNhbiBkbyBhIHF1aWNrIGNoZWNrXG5cdFx0fSBlbHNlIGlmICggYXVwID09PSBidXAgKSB7XG5cdFx0XHRyZXR1cm4gc2libGluZ0NoZWNrKCBhLCBiICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlIHdlIG5lZWQgZnVsbCBsaXN0cyBvZiB0aGVpciBhbmNlc3RvcnMgZm9yIGNvbXBhcmlzb25cblx0XHRjdXIgPSBhO1xuXHRcdHdoaWxlICggKCBjdXIgPSBjdXIucGFyZW50Tm9kZSApICkge1xuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXHRcdGN1ciA9IGI7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGN1ci5wYXJlbnROb2RlICkgKSB7XG5cdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cblx0XHQvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeVxuXHRcdHdoaWxlICggYXBbIGkgXSA9PT0gYnBbIGkgXSApIHtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gaSA/XG5cblx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxuXHRcdFx0c2libGluZ0NoZWNrKCBhcFsgaSBdLCBicFsgaSBdICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3Rcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBlcWVxZXEgKi9cblx0XHRcdGFwWyBpIF0gPT0gcHJlZmVycmVkRG9jID8gLTEgOlxuXHRcdFx0YnBbIGkgXSA9PSBwcmVmZXJyZWREb2MgPyAxIDpcblx0XHRcdC8qIGVzbGludC1lbmFibGUgZXFlcWVxICovXG5cdFx0XHQwO1xuXHR9O1xuXG5cdHJldHVybiBkb2N1bWVudDtcbn07XG5cblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHRzZXREb2N1bWVudCggZWxlbSApO1xuXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHQhbm9ubmF0aXZlU2VsZWN0b3JDYWNoZVsgZXhwciArIFwiIFwiIF0gJiZcblx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXG5cdFx0dHJ5IHtcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXG5cdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0ZWxlbS5kb2N1bWVudCAmJiBlbGVtLmRvY3VtZW50Lm5vZGVUeXBlICE9PSAxMSApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIGV4cHIsIHRydWUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG5cblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblx0cmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7XG59O1xuXG5TaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcblxuXHRcdC8vIERvbid0IGdldCBmb29sZWQgYnkgT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzIChqUXVlcnkgIzEzODA3KVxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XG5cdFx0XHR1bmRlZmluZWQ7XG5cblx0cmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID9cblx0XHR2YWwgOlxuXHRcdHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6XG5cdFx0XHQoIHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApICkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG59O1xuXG5TaXp6bGUuZXNjYXBlID0gZnVuY3Rpb24oIHNlbCApIHtcblx0cmV0dXJuICggc2VsICsgXCJcIiApLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcbn07XG5cblNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdHRocm93IG5ldyBFcnJvciggXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyApO1xufTtcblxuLyoqXG4gKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXG4gKiBAcGFyYW0ge0FycmF5TGlrZX0gcmVzdWx0c1xuICovXG5TaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xuXHR2YXIgZWxlbSxcblx0XHRkdXBsaWNhdGVzID0gW10sXG5cdFx0aiA9IDAsXG5cdFx0aSA9IDA7XG5cblx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxuXHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzO1xuXHRzb3J0SW5wdXQgPSAhc3VwcG9ydC5zb3J0U3RhYmxlICYmIHJlc3VsdHMuc2xpY2UoIDAgKTtcblx0cmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTtcblxuXHRpZiAoIGhhc0R1cGxpY2F0ZSApIHtcblx0XHR3aGlsZSAoICggZWxlbSA9IHJlc3VsdHNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcblx0c29ydElucHV0ID0gbnVsbDtcblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcbiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxuICovXG5nZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5vZGUsXG5cdFx0cmV0ID0gXCJcIixcblx0XHRpID0gMCxcblx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0aWYgKCAhbm9kZVR5cGUgKSB7XG5cblx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxuXHRcdHdoaWxlICggKCBub2RlID0gZWxlbVsgaSsrIF0gKSApIHtcblxuXHRcdFx0Ly8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXNcblx0XHRcdHJldCArPSBnZXRUZXh0KCBub2RlICk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XG5cblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG5cdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1Mylcblx0XHRpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0fVxuXG5cdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xuXG5cdHJldHVybiByZXQ7XG59O1xuXG5FeHByID0gU2l6emxlLnNlbGVjdG9ycyA9IHtcblxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcblx0Y2FjaGVMZW5ndGg6IDUwLFxuXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxuXG5cdG1hdGNoOiBtYXRjaEV4cHIsXG5cblx0YXR0ckhhbmRsZToge30sXG5cblx0ZmluZDoge30sXG5cblx0cmVsYXRpdmU6IHtcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcblx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cblx0fSxcblxuXHRwcmVGaWx0ZXI6IHtcblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0bWF0Y2hbIDEgXSA9IG1hdGNoWyAxIF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcblx0XHRcdG1hdGNoWyAzIF0gPSAoIG1hdGNoWyAzIF0gfHwgbWF0Y2hbIDQgXSB8fFxuXHRcdFx0XHRtYXRjaFsgNSBdIHx8IFwiXCIgKS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHRpZiAoIG1hdGNoWyAyIF0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbIDMgXSA9IFwiIFwiICsgbWF0Y2hbIDMgXSArIFwiIFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcblx0XHRcdCovXG5cdFx0XHRtYXRjaFsgMSBdID0gbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRpZiAoIG1hdGNoWyAxIF0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcblxuXHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxuXHRcdFx0XHRpZiAoICFtYXRjaFsgMyBdICkge1xuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbIDAgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbIDQgXSA9ICsoIG1hdGNoWyA0IF0gP1xuXHRcdFx0XHRcdG1hdGNoWyA1IF0gKyAoIG1hdGNoWyA2IF0gfHwgMSApIDpcblx0XHRcdFx0XHQyICogKCBtYXRjaFsgMyBdID09PSBcImV2ZW5cIiB8fCBtYXRjaFsgMyBdID09PSBcIm9kZFwiICkgKTtcblx0XHRcdFx0bWF0Y2hbIDUgXSA9ICsoICggbWF0Y2hbIDcgXSArIG1hdGNoWyA4IF0gKSB8fCBtYXRjaFsgMyBdID09PSBcIm9kZFwiICk7XG5cblx0XHRcdFx0Ly8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsgMyBdICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHR2YXIgZXhjZXNzLFxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFsgNiBdICYmIG1hdGNoWyAyIF07XG5cblx0XHRcdGlmICggbWF0Y2hFeHByWyBcIkNISUxEXCIgXS50ZXN0KCBtYXRjaFsgMCBdICkgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xuXHRcdFx0aWYgKCBtYXRjaFsgMyBdICkge1xuXHRcdFx0XHRtYXRjaFsgMiBdID0gbWF0Y2hbIDQgXSB8fCBtYXRjaFsgNSBdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHQoIGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApICkgJiZcblxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KCBleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGggKSApIHtcblxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxuXHRcdFx0XHRtYXRjaFsgMCBdID0gbWF0Y2hbIDAgXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWyAyIF0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XG5cdFx0fVxuXHR9LFxuXG5cdGZpbHRlcjoge1xuXG5cdFx0XCJUQUdcIjogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDTEFTU1wiOiBmdW5jdGlvbiggY2xhc3NOYW1lICkge1xuXHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyBcIiBcIiBdO1xuXG5cdFx0XHRyZXR1cm4gcGF0dGVybiB8fFxuXHRcdFx0XHQoIHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcdFx0XCIpXCIgKyBjbGFzc05hbWUgKyBcIihcIiArIHdoaXRlc3BhY2UgKyBcInwkKVwiICkgKSAmJiBjbGFzc0NhY2hlKFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdChcblx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHxcblx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fFxuXHRcdFx0XHRcdFx0XHRcdFwiXCJcblx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0fSApO1xuXHRcdH0sXG5cblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cblxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcblx0XHRcdFx0XHRmYWxzZTtcblx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBtYXgtbGVuICovXG5cblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIF9hcmd1bWVudCwgZmlyc3QsIGxhc3QgKSB7XG5cdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSBcIm50aFwiLFxuXHRcdFx0XHRmb3J3YXJkID0gdHlwZS5zbGljZSggLTQgKSAhPT0gXCJsYXN0XCIsXG5cdFx0XHRcdG9mVHlwZSA9IHdoYXQgPT09IFwib2YtdHlwZVwiO1xuXG5cdFx0XHRyZXR1cm4gZmlyc3QgPT09IDEgJiYgbGFzdCA9PT0gMCA/XG5cblx0XHRcdFx0Ly8gU2hvcnRjdXQgZm9yIDpudGgtKihuKVxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gISFlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdH0gOlxuXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBjYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZSxcblx0XHRcdFx0XHRcdGRpZmYgPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSBub2RlWyBkaXIgXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRub2RlID0gcGFyZW50O1xuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8ICggbm9kZVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleCAmJiBjYWNoZVsgMiBdO1xuXHRcdFx0XHRcdFx0XHRub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KCBkaWZmID0gbm9kZUluZGV4ID0gMCApIHx8IHN0YXJ0LnBvcCgpICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAoIG5vZGVbIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleDtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLilcblx0XHRcdFx0XHRcdFx0Ly8gb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxuXHRcdFx0XHRcdFx0XHRpZiAoIGRpZmYgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdCggZGlmZiA9IG5vZGVJbmRleCA9IDAgKSB8fCBzdGFydC5wb3AoKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCsrZGlmZiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xuXHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3Ncblx0XHRcdHZhciBhcmdzLFxuXHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcblxuXHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxuXHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcblx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcblx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XG5cdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaWR4LFxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkWyBpIF0gKTtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbIGkgXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm47XG5cdFx0fVxuXHR9LFxuXG5cdHBzZXVkb3M6IHtcblxuXHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xuXHRcdFwibm90XCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXG5cdFx0XHQvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcblx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuXHRcdFx0dmFyIGlucHV0ID0gW10sXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcblx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSApO1xuXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cblx0XHRcdFx0bWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gdW5tYXRjaGVkWyBpIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaSBdID0gISggbWF0Y2hlc1sgaSBdID0gZWxlbSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApIDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdFx0XHRpbnB1dFsgMCBdID0gbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0XCJoYXNcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBnZXRUZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblxuXHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxuXHRcdFx0aWYgKCAhcmlkZW50aWZpZXIudGVzdCggbGFuZyB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcblx0XHRcdH1cblx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0aWYgKCAoIGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0XHRcdFx0ZWxlbS5sYW5nIDpcblx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBcInhtbDpsYW5nXCIgKSB8fCBlbGVtLmdldEF0dHJpYnV0ZSggXCJsYW5nXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IHdoaWxlICggKCBlbGVtID0gZWxlbS5wYXJlbnROb2RlICkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdC8vIE1pc2NlbGxhbmVvdXNcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdH0sXG5cblx0XHRcInJvb3RcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcblx0XHR9LFxuXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmXG5cdFx0XHRcdCggIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkgKSAmJlxuXHRcdFx0XHQhISggZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCApO1xuXHRcdH0sXG5cblx0XHQvLyBCb29sZWFuIHByb3BlcnRpZXNcblx0XHRcImVuYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGZhbHNlICksXG5cdFx0XCJkaXNhYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggdHJ1ZSApLFxuXG5cdFx0XCJjaGVja2VkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmICEhZWxlbS5jaGVja2VkICkgfHxcblx0XHRcdFx0KCBub2RlTmFtZSA9PT0gXCJvcHRpb25cIiAmJiAhIWVsZW0uc2VsZWN0ZWQgKTtcblx0XHR9LFxuXG5cdFx0XCJzZWxlY3RlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxuXHRcdFx0Ly8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseVxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXG5cdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG5cdFx0XHQvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvc1sgXCJlbXB0eVwiIF0oIGVsZW0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xuXHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImlucHV0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIjtcblx0XHR9LFxuXG5cdFx0XCJ0ZXh0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGF0dHI7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiZcblx0XHRcdFx0ZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0KCAoIGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSApID09IG51bGwgfHxcblx0XHRcdFx0XHRhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XG5cdFx0fSxcblxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cblx0XHRcImZpcnN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIFsgMCBdO1xuXHRcdH0gKSxcblxuXHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggX21hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIFsgbGVuZ3RoIC0gMSBdO1xuXHRcdH0gKSxcblxuXHRcdFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIF9tYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07XG5cdFx0fSApLFxuXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRcIm9kZFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0XCJsdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgP1xuXHRcdFx0XHRhcmd1bWVudCArIGxlbmd0aCA6XG5cdFx0XHRcdGFyZ3VtZW50ID4gbGVuZ3RoID9cblx0XHRcdFx0XHRsZW5ndGggOlxuXHRcdFx0XHRcdGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyAtLWkgPj0gMDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApXG5cdH1cbn07XG5cbkV4cHIucHNldWRvc1sgXCJudGhcIiBdID0gRXhwci5wc2V1ZG9zWyBcImVxXCIgXTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG50b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoIGNhY2hlZCApIHtcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xuXHR9XG5cblx0c29GYXIgPSBzZWxlY3Rvcjtcblx0Z3JvdXBzID0gW107XG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcblxuXHR3aGlsZSAoIHNvRmFyICkge1xuXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxuXHRcdGlmICggIW1hdGNoZWQgfHwgKCBtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApICkgKSB7XG5cdFx0XHRpZiAoIG1hdGNoICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWyAwIF0ubGVuZ3RoICkgfHwgc29GYXI7XG5cdFx0XHR9XG5cdFx0XHRncm91cHMucHVzaCggKCB0b2tlbnMgPSBbXSApICk7XG5cdFx0fVxuXG5cdFx0bWF0Y2hlZCA9IGZhbHNlO1xuXG5cdFx0Ly8gQ29tYmluYXRvcnNcblx0XHRpZiAoICggbWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSApICkge1xuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHR0b2tlbnMucHVzaCgge1xuXHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2Vcblx0XHRcdFx0dHlwZTogbWF0Y2hbIDAgXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxuXHRcdFx0fSApO1xuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGaWx0ZXJzXG5cdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcblx0XHRcdGlmICggKCBtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkgKSAmJiAoICFwcmVGaWx0ZXJzWyB0eXBlIF0gfHxcblx0XHRcdFx0KCBtYXRjaCA9IHByZUZpbHRlcnNbIHR5cGUgXSggbWF0Y2ggKSApICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0XHR0b2tlbnMucHVzaCgge1xuXHRcdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdFx0bWF0Y2hlczogbWF0Y2hcblx0XHRcdFx0fSApO1xuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggIW1hdGNoZWQgKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3Ncblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xuXHRyZXR1cm4gcGFyc2VPbmx5ID9cblx0XHRzb0Zhci5sZW5ndGggOlxuXHRcdHNvRmFyID9cblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XG5cblx0XHRcdC8vIENhY2hlIHRoZSB0b2tlbnNcblx0XHRcdHRva2VuQ2FjaGUoIHNlbGVjdG9yLCBncm91cHMgKS5zbGljZSggMCApO1xufTtcblxuZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRzZWxlY3RvciA9IFwiXCI7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdHNlbGVjdG9yICs9IHRva2Vuc1sgaSBdLnZhbHVlO1xuXHR9XG5cdHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcblx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxuXHRcdHNraXAgPSBjb21iaW5hdG9yLm5leHQsXG5cdFx0a2V5ID0gc2tpcCB8fCBkaXIsXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYga2V5ID09PSBcInBhcmVudE5vZGVcIixcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcblxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9IDpcblxuXHRcdC8vIENoZWNrIGFnYWluc3QgYWxsIGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50c1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgb2xkQ2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLFxuXHRcdFx0XHRuZXdDYWNoZSA9IFsgZGlycnVucywgZG9uZU5hbWUgXTtcblxuXHRcdFx0Ly8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gY29tYmluYXRvciBjYWNoaW5nXG5cdFx0XHRpZiAoIHhtbCApIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8ICggZWxlbVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdGlmICggc2tpcCAmJiBza2lwID09PSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtWyBkaXIgXSB8fCBlbGVtO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggKCBvbGRDYWNoZSA9IHVuaXF1ZUNhY2hlWyBrZXkgXSApICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuICggbmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsga2V5IF0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcblx0XHRcdFx0XHRcdFx0aWYgKCAoIG5ld0NhY2hlWyAyIF0gPSBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggIW1hdGNoZXJzWyBpIF0oIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSA6XG5cdFx0bWF0Y2hlcnNbIDAgXTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1sgaSBdLCByZXN1bHRzICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdHZhciBlbGVtLFxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoIGVsZW0gPSB1bm1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG5cdH1cblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuXHR9XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCByZXN1bHRzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0dmFyIHRlbXAsIGksIGVsZW0sXG5cdFx0XHRwcmVNYXAgPSBbXSxcblx0XHRcdHBvc3RNYXAgPSBbXSxcblx0XHRcdHByZWV4aXN0aW5nID0gcmVzdWx0cy5sZW5ndGgsXG5cblx0XHRcdC8vIEdldCBpbml0aWFsIGVsZW1lbnRzIGZyb20gc2VlZCBvciBjb250ZXh0XG5cdFx0XHRlbGVtcyA9IHNlZWQgfHwgbXVsdGlwbGVDb250ZXh0cyhcblx0XHRcdFx0c2VsZWN0b3IgfHwgXCIqXCIsXG5cdFx0XHRcdGNvbnRleHQubm9kZVR5cGUgPyBbIGNvbnRleHQgXSA6IGNvbnRleHQsXG5cdFx0XHRcdFtdXG5cdFx0XHQpLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zLFxuXG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBhIHBvc3RGaW5kZXIsIG9yIGZpbHRlcmVkIHNlZWQsIG9yIG5vbi1zZWVkIHBvc3RGaWx0ZXIgb3IgcHJlZXhpc3RpbmcgcmVzdWx0cyxcblx0XHRcdFx0cG9zdEZpbmRlciB8fCAoIHNlZWQgPyBwcmVGaWx0ZXIgOiBwcmVleGlzdGluZyB8fCBwb3N0RmlsdGVyICkgP1xuXG5cdFx0XHRcdFx0Ly8gLi4uaW50ZXJtZWRpYXRlIHByb2Nlc3NpbmcgaXMgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0W10gOlxuXG5cdFx0XHRcdFx0Ly8gLi4ub3RoZXJ3aXNlIHVzZSByZXN1bHRzIGRpcmVjdGx5XG5cdFx0XHRcdFx0cmVzdWx0cyA6XG5cdFx0XHRcdG1hdGNoZXJJbjtcblxuXHRcdC8vIEZpbmQgcHJpbWFyeSBtYXRjaGVzXG5cdFx0aWYgKCBtYXRjaGVyICkge1xuXHRcdFx0bWF0Y2hlciggbWF0Y2hlckluLCBtYXRjaGVyT3V0LCBjb250ZXh0LCB4bWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwb3N0RmlsdGVyXG5cdFx0aWYgKCBwb3N0RmlsdGVyICkge1xuXHRcdFx0dGVtcCA9IGNvbmRlbnNlKCBtYXRjaGVyT3V0LCBwb3N0TWFwICk7XG5cdFx0XHRwb3N0RmlsdGVyKCB0ZW1wLCBbXSwgY29udGV4dCwgeG1sICk7XG5cblx0XHRcdC8vIFVuLW1hdGNoIGZhaWxpbmcgZWxlbWVudHMgYnkgbW92aW5nIHRoZW0gYmFjayB0byBtYXRjaGVySW5cblx0XHRcdGkgPSB0ZW1wLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICggZWxlbSA9IHRlbXBbIGkgXSApICkge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbIGkgXSBdID0gISggbWF0Y2hlckluWyBwb3N0TWFwWyBpIF0gXSA9IGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggc2VlZCApIHtcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblxuXHRcdFx0XHRcdC8vIEdldCB0aGUgZmluYWwgbWF0Y2hlck91dCBieSBjb25kZW5zaW5nIHRoaXMgaW50ZXJtZWRpYXRlIGludG8gcG9zdEZpbmRlciBjb250ZXh0c1xuXHRcdFx0XHRcdHRlbXAgPSBbXTtcblx0XHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IG1hdGNoZXJPdXRbIGkgXSApICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFJlc3RvcmUgbWF0Y2hlckluIHNpbmNlIGVsZW0gaXMgbm90IHlldCBhIGZpbmFsIG1hdGNoXG5cdFx0XHRcdFx0XHRcdHRlbXAucHVzaCggKCBtYXRjaGVySW5bIGkgXSA9IGVsZW0gKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAoIG1hdGNoZXJPdXQgPSBbXSApLCB0ZW1wLCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE1vdmUgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHNlZWQgdG8gcmVzdWx0cyB0byBrZWVwIHRoZW0gc3luY2hyb25pemVkXG5cdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBtYXRjaGVyT3V0WyBpIF0gKSAmJlxuXHRcdFx0XHRcdFx0KCB0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFsgaSBdICkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFsgdGVtcCBdID0gISggcmVzdWx0c1sgdGVtcCBdID0gZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Ub2tlbnMoIHRva2VucyApIHtcblx0dmFyIGNoZWNrQ29udGV4dCwgbWF0Y2hlciwgaixcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdGxlYWRpbmdSZWxhdGl2ZSA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgMCBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbIFwiIFwiIF0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdCggY2hlY2tDb250ZXh0ID0gY29udGV4dCApLm5vZGVUeXBlID9cblx0XHRcdFx0XHRtYXRjaENvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0XHRtYXRjaEFueUNvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApICk7XG5cblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKCBtYXRjaGVyID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyBpIF0udHlwZSBdICkgKSB7XG5cdFx0XHRtYXRjaGVycyA9IFsgYWRkQ29tYmluYXRvciggZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIgKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1sgaSBdLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zWyBpIF0ubWF0Y2hlcyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gc3BlY2lhbCB1cG9uIHNlZWluZyBhIHBvc2l0aW9uYWwgbWF0Y2hlclxuXHRcdFx0aWYgKCBtYXRjaGVyWyBleHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyBqIF0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cblx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdHRva2Vuc1xuXHRcdFx0XHRcdFx0LnNsaWNlKCAwLCBpIC0gMSApXG5cdFx0XHRcdFx0XHQuY29uY2F0KCB7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSApXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXG5cdFx0XHRcdFx0bWF0Y2hlcixcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAoIHRva2VucyA9IHRva2Vucy5zbGljZSggaiApICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblxuXHRcdFx0XHQvLyBXZSBtdXN0IGFsd2F5cyBoYXZlIGVpdGhlciBzZWVkIGVsZW1lbnRzIG9yIG91dGVybW9zdCBjb250ZXh0XG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBieUVsZW1lbnQgJiYgRXhwci5maW5kWyBcIlRBR1wiIF0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcblxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKCBkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSApLFxuXHRcdFx0XHRsZW4gPSBlbGVtcy5sZW5ndGg7XG5cblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ID09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0XHRcdGlmICggIWNvbnRleHQgJiYgZWxlbS5vd25lckRvY3VtZW50ICE9IGRvY3VtZW50ICkge1xuXHRcdFx0XHRcdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0XHRcdFx0XHRcdHhtbCA9ICFkb2N1bWVudElzSFRNTDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoZXIgPSBlbGVtZW50TWF0Y2hlcnNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQgfHwgZG9jdW1lbnQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXG5cdFx0XHRcdFx0Ly8gVGhleSB3aWxsIGhhdmUgZ29uZSB0aHJvdWdoIGFsbCBwb3NzaWJsZSBtYXRjaGVyc1xuXHRcdFx0XHRcdGlmICggKCBlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSApICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGBpYCBpcyBub3cgdGhlIGNvdW50IG9mIGVsZW1lbnRzIHZpc2l0ZWQgYWJvdmUsIGFuZCBhZGRpbmcgaXQgdG8gYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIG1ha2VzIHRoZSBsYXR0ZXIgbm9ubmVnYXRpdmUuXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBOT1RFOiBUaGlzIGNhbiBiZSBza2lwcGVkIGlmIHRoZXJlIGFyZSBubyB1bm1hdGNoZWQgZWxlbWVudHMgKGkuZS4sIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBlcXVhbHMgYGlgKSwgdW5sZXNzIHdlIGRpZG4ndCB2aXNpdCBfYW55XyBlbGVtZW50cyBpbiB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGhhdmVcblx0XHRcdC8vIG5vIGVsZW1lbnQgbWF0Y2hlcnMgYW5kIG5vIHNlZWQuXG5cdFx0XHQvLyBJbmNyZW1lbnRpbmcgYW4gaW5pdGlhbGx5LXN0cmluZyBcIjBcIiBgaWAgYWxsb3dzIGBpYCB0byByZW1haW4gYSBzdHJpbmcgb25seSBpbiB0aGF0XG5cdFx0XHQvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhIFwiMDBcIiBgbWF0Y2hlZENvdW50YCB0aGF0IGRpZmZlcnMgZnJvbSBgaWAgYnV0IGlzIGFsc29cblx0XHRcdC8vIG51bWVyaWNhbGx5IHplcm8uXG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKCBtYXRjaGVyID0gc2V0TWF0Y2hlcnNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlciggdW5tYXRjaGVkLCBzZXRNYXRjaGVkLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggc2VlZCApIHtcblxuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhKCB1bm1hdGNoZWRbIGkgXSB8fCBzZXRNYXRjaGVkWyBpIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkWyBpIF0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblxuXHRcdC8vIEdlbmVyYXRlIGEgZnVuY3Rpb24gb2YgcmVjdXJzaXZlIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNoZWNrIGVhY2ggZWxlbWVudFxuXHRcdGlmICggIW1hdGNoICkge1xuXHRcdFx0bWF0Y2ggPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHR9XG5cdFx0aSA9IG1hdGNoLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGNhY2hlZCA9IG1hdGNoZXJGcm9tVG9rZW5zKCBtYXRjaFsgaSBdICk7XG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKFxuXHRcdFx0c2VsZWN0b3IsXG5cdFx0XHRtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKVxuXHRcdCk7XG5cblx0XHQvLyBTYXZlIHNlbGVjdG9yIGFuZCB0b2tlbml6YXRpb25cblx0XHRjYWNoZWQuc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0fVxuXHRyZXR1cm4gY2FjaGVkO1xufTtcblxuLyoqXG4gKiBBIGxvdy1sZXZlbCBzZWxlY3Rpb24gZnVuY3Rpb24gdGhhdCB3b3JrcyB3aXRoIFNpenpsZSdzIGNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb25zXG4gKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gc2VsZWN0b3IgQSBzZWxlY3RvciBvciBhIHByZS1jb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uIGJ1aWx0IHdpdGggU2l6emxlLmNvbXBpbGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gY29udGV4dFxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdHNdXG4gKiBAcGFyYW0ge0FycmF5fSBbc2VlZF0gQSBzZXQgb2YgZWxlbWVudHMgdG8gbWF0Y2ggYWdhaW5zdFxuICovXG5zZWxlY3QgPSBTaXp6bGUuc2VsZWN0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgaSwgdG9rZW5zLCB0b2tlbiwgdHlwZSwgZmluZCxcblx0XHRjb21waWxlZCA9IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICYmIHNlbGVjdG9yLFxuXHRcdG1hdGNoID0gIXNlZWQgJiYgdG9rZW5pemUoICggc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvciApICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcblx0Ly8gKHRoZSBsYXR0ZXIgb2Ygd2hpY2ggZ3VhcmFudGVlcyB1cyBjb250ZXh0KVxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFJlZHVjZSBjb250ZXh0IGlmIHRoZSBsZWFkaW5nIGNvbXBvdW5kIHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbIDAgXSA9IG1hdGNoWyAwIF0uc2xpY2UoIDAgKTtcblx0XHRpZiAoIHRva2Vucy5sZW5ndGggPiAyICYmICggdG9rZW4gPSB0b2tlbnNbIDAgXSApLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0Y29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJiBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIDEgXS50eXBlIF0gKSB7XG5cblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFsgXCJJRFwiIF0oIHRva2VuLm1hdGNoZXNbIDAgXVxuXHRcdFx0XHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSwgY29udGV4dCApIHx8IFtdIClbIDAgXTtcblx0XHRcdGlmICggIWNvbnRleHQgKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuXHRcdGkgPSBtYXRjaEV4cHJbIFwibmVlZHNDb250ZXh0XCIgXS50ZXN0KCBzZWxlY3RvciApID8gMCA6IHRva2Vucy5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0b2tlbiA9IHRva2Vuc1sgaSBdO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICggdHlwZSA9IHRva2VuLnR5cGUgKSBdICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggKCBmaW5kID0gRXhwci5maW5kWyB0eXBlIF0gKSApIHtcblxuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoIHNlZWQgPSBmaW5kKFxuXHRcdFx0XHRcdHRva2VuLm1hdGNoZXNbIDAgXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1sgMCBdLnR5cGUgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHRcblx0XHRcdFx0KSApICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5XG5cdFx0XHRcdFx0dG9rZW5zLnNwbGljZSggaSwgMSApO1xuXHRcdFx0XHRcdHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3RvciggdG9rZW5zICk7XG5cdFx0XHRcdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZWVkICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24gaWYgb25lIGlzIG5vdCBwcm92aWRlZFxuXHQvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXG5cdCggY29tcGlsZWQgfHwgY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoICkgKShcblx0XHRzZWVkLFxuXHRcdGNvbnRleHQsXG5cdFx0IWRvY3VtZW50SXNIVE1MLFxuXHRcdHJlc3VsdHMsXG5cdFx0IWNvbnRleHQgfHwgcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHQpO1xuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8vIE9uZS10aW1lIGFzc2lnbm1lbnRzXG5cbi8vIFNvcnQgc3RhYmlsaXR5XG5zdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KCBcIlwiICkuc29ydCggc29ydE9yZGVyICkuam9pbiggXCJcIiApID09PSBleHBhbmRvO1xuXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTQtMzUrXG4vLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uXG5zdXBwb3J0LmRldGVjdER1cGxpY2F0ZXMgPSAhIWhhc0R1cGxpY2F0ZTtcblxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XG5zZXREb2N1bWVudCgpO1xuXG4vLyBTdXBwb3J0OiBXZWJraXQ8NTM3LjMyIC0gU2FmYXJpIDYuMC4zL0Nocm9tZSAyNSAoZml4ZWQgaW4gQ2hyb21lIDI3KVxuLy8gRGV0YWNoZWQgbm9kZXMgY29uZm91bmRpbmdseSBmb2xsb3cgKmVhY2ggb3RoZXIqXG5zdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRyZXR1cm4gZWwuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZmllbGRzZXRcIiApICkgJiAxO1xufSApO1xuXG4vLyBTdXBwb3J0OiBJRTw4XG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxuLy8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcbmlmICggIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcImhyZWZcIiApID09PSBcIiNcIjtcbn0gKSApIHtcblx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcblx0XHR9XG5cdH0gKTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGRlZmF1bHRWYWx1ZSBpbiBwbGFjZSBvZiBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxuaWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8aW5wdXQvPlwiO1xuXHRlbC5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiLCBcIlwiICk7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IFwiXCI7XG59ICkgKSB7XG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgX25hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuXHRcdH1cblx0fSApO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZ2V0QXR0cmlidXRlTm9kZSB0byBmZXRjaCBib29sZWFucyB3aGVuIGdldEF0dHJpYnV0ZSBsaWVzXG5pZiAoICFhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0cmV0dXJuIGVsLmdldEF0dHJpYnV0ZSggXCJkaXNhYmxlZFwiICkgPT0gbnVsbDtcbn0gKSApIHtcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciB2YWw7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0KCB2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSApICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdFx0bnVsbDtcblx0XHR9XG5cdH0gKTtcbn1cblxucmV0dXJuIFNpenpsZTtcblxufSApKCB3aW5kb3cgKTtcblxuXG5cbmpRdWVyeS5maW5kID0gU2l6emxlO1xualF1ZXJ5LmV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzO1xuXG4vLyBEZXByZWNhdGVkXG5qUXVlcnkuZXhwclsgXCI6XCIgXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XG5qUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcbmpRdWVyeS50ZXh0ID0gU2l6emxlLmdldFRleHQ7XG5qUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7XG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XG5qUXVlcnkuZXNjYXBlU2VsZWN0b3IgPSBTaXp6bGUuZXNjYXBlO1xuXG5cblxuXG52YXIgZGlyID0gZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XG5cdHZhciBtYXRjaGVkID0gW10sXG5cdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXG5cdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgc2libGluZ3MgPSBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0dmFyIG1hdGNoZWQgPSBbXTtcblxuXHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0bWF0Y2hlZC5wdXNoKCBuICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG5cblxuZnVuY3Rpb24gbm9kZU5hbWUoIGVsZW0sIG5hbWUgKSB7XG5cbiAgcmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbn07XG52YXIgcnNpbmdsZVRhZyA9ICggL148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2kgKTtcblxuXG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBpc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW5nbGUgZWxlbWVudFxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gQXJyYXlsaWtlIG9mIGVsZW1lbnRzIChqUXVlcnksIGFyZ3VtZW50cywgQXJyYXkpXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRmlsdGVyZWQgZGlyZWN0bHkgZm9yIGJvdGggc2ltcGxlIGFuZCBjb21wbGV4IHNlbGVjdG9yc1xuXHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRpZiAoIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW107XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSwgcmV0LFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKSApO1xuXHRcdH1cblxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBbXSApO1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGVuID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCByZXQgKSA6IHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSApO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHQvLyBTaG9ydGN1dCBzaW1wbGUgI2lkIGNhc2UgZm9yIHNwZWVkXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcblx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcblxuXHRcdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpc1sgMCBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBpc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0dGFyZ2V0cyA9IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgJiYgalF1ZXJ5KCBzZWxlY3RvcnMgKTtcblxuXHRcdC8vIFBvc2l0aW9uYWwgc2VsZWN0b3JzIG5ldmVyIG1hdGNoLCBzaW5jZSB0aGVyZSdzIG5vIF9zZWxlY3Rpb25fIGNvbnRleHRcblx0XHRpZiAoICFybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHRhcmdldHMgP1xuXHRcdFx0XHRcdFx0dGFyZ2V0cy5pbmRleCggY3VyICkgPiAtMSA6XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xuXHR9LFxuXHRuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRpZiAoIGVsZW0uY29udGVudERvY3VtZW50ICE9IG51bGwgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErXG5cdFx0XHQvLyA8b2JqZWN0PiBlbGVtZW50cyB3aXRoIG5vIGBkYXRhYCBhdHRyaWJ1dGUgaGFzIGFuIG9iamVjdFxuXHRcdFx0Ly8gYGNvbnRlbnREb2N1bWVudGAgd2l0aCBhIGBudWxsYCBwcm90b3R5cGUuXG5cdFx0XHRnZXRQcm90byggZWxlbS5jb250ZW50RG9jdW1lbnQgKSApIHtcblxuXHRcdFx0cmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50O1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5LCBpT1MgNyBvbmx5LCBBbmRyb2lkIEJyb3dzZXIgPD00LjMgb25seVxuXHRcdC8vIFRyZWF0IHRoZSB0ZW1wbGF0ZSBlbGVtZW50IGFzIGEgcmVndWxhciBvbmUgaW4gYnJvd3NlcnMgdGhhdFxuXHRcdC8vIGRvbid0IHN1cHBvcnQgaXQuXG5cdFx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0ZW1wbGF0ZVwiICkgKSB7XG5cdFx0XHRlbGVtID0gZWxlbS5jb250ZW50IHx8IGVsZW07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSApO1xudmFyIHJub3RodG1sd2hpdGUgPSAoIC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZyApO1xuXG5cblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9ICk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdGxvY2tlZCxcblxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRxdWV1ZSA9IFtdLFxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdGxvY2tlZCA9IGxvY2tlZCB8fCBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XG5cdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxuXHRcdFx0aWYgKCBsb2NrZWQgKSB7XG5cblx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xuXHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgdG9UeXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcblxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gP1xuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxuXHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcblx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxuXHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcblx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxuZnVuY3Rpb24gSWRlbnRpdHkoIHYgKSB7XG5cdHJldHVybiB2O1xufVxuZnVuY3Rpb24gVGhyb3dlciggZXggKSB7XG5cdHRocm93IGV4O1xufVxuXG5mdW5jdGlvbiBhZG9wdFZhbHVlKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0LCBub1ZhbHVlICkge1xuXHR2YXIgbWV0aG9kO1xuXG5cdHRyeSB7XG5cblx0XHQvLyBDaGVjayBmb3IgcHJvbWlzZSBhc3BlY3QgZmlyc3QgdG8gcHJpdmlsZWdlIHN5bmNocm9ub3VzIGJlaGF2aW9yXG5cdFx0aWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnByb21pc2UgKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlICkuZG9uZSggcmVzb2x2ZSApLmZhaWwoIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgdGhlbmFibGVzXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS50aGVuICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciBub24tdGhlbmFibGVzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29udHJvbCBgcmVzb2x2ZWAgYXJndW1lbnRzIGJ5IGxldHRpbmcgQXJyYXkjc2xpY2UgY2FzdCBib29sZWFuIGBub1ZhbHVlYCB0byBpbnRlZ2VyOlxuXHRcdFx0Ly8gKiBmYWxzZTogWyB2YWx1ZSBdLnNsaWNlKCAwICkgPT4gcmVzb2x2ZSggdmFsdWUgKVxuXHRcdFx0Ly8gKiB0cnVlOiBbIHZhbHVlIF0uc2xpY2UoIDEgKSA9PiByZXNvbHZlKClcblx0XHRcdHJlc29sdmUuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdLnNsaWNlKCBub1ZhbHVlICkgKTtcblx0XHR9XG5cblx0Ly8gRm9yIFByb21pc2VzL0ErLCBjb252ZXJ0IGV4Y2VwdGlvbnMgaW50byByZWplY3Rpb25zXG5cdC8vIFNpbmNlIGpRdWVyeS53aGVuIGRvZXNuJ3QgdW53cmFwIHRoZW5hYmxlcywgd2UgY2FuIHNraXAgdGhlIGV4dHJhIGNoZWNrcyBhcHBlYXJpbmcgaW5cblx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cblx0fSBjYXRjaCAoIHZhbHVlICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRyZWplY3QuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdICk7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBjYWxsYmFja3MsXG5cdFx0XHRcdC8vIC4uLiAudGhlbiBoYW5kbGVycywgYXJndW1lbnQgaW5kZXgsIFtmaW5hbCBzdGF0ZV1cblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksIDIgXSxcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAwLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDEsIFwicmVqZWN0ZWRcIiBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRcdHJldHVybiBwcm9taXNlLnRoZW4oIG51bGwsIGZuICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRwaXBlOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBfaSwgdHVwbGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTWFwIHR1cGxlcyAocHJvZ3Jlc3MsIGRvbmUsIGZhaWwpIHRvIGFyZ3VtZW50cyAoZG9uZSwgZmFpbCwgcHJvZ3Jlc3MpXG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBpc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHZhciBtYXhEZXB0aCA9IDA7XG5cdFx0XHRcdFx0ZnVuY3Rpb24gcmVzb2x2ZSggZGVwdGgsIGRlZmVycmVkLCBoYW5kbGVyLCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0YXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQsIHRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01OVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIGRvdWJsZS1yZXNvbHV0aW9uIGF0dGVtcHRzXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoIDwgbWF4RGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQgPSBoYW5kbGVyLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTQ4XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkID09PSBkZWZlcnJlZC5wcm9taXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbnMgMi4zLjMuMSwgMy41XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01NFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFJldHJpZXZlIGB0aGVuYCBvbmx5IG9uY2Vcblx0XHRcdFx0XHRcdFx0XHRcdHRoZW4gPSByZXR1cm5lZCAmJlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBjaGVjayBvYmplY3RzIGFuZCBmdW5jdGlvbnMgZm9yIHRoZW5hYmlsaXR5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggdHlwZW9mIHJldHVybmVkID09PSBcIm9iamVjdFwiIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHJldHVybmVkID09PSBcImZ1bmN0aW9uXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYSByZXR1cm5lZCB0aGVuYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGVuICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BlY2lhbCBwcm9jZXNzb3JzIChub3RpZnkpIGp1c3Qgd2FpdCBmb3IgcmVzb2x1dGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gTm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGFsc28gaG9vayBpbnRvIHByb2dyZXNzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgZGlzcmVnYXJkIG9sZGVyIHJlc29sdXRpb24gdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWF4RGVwdGgrKztcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhbGwgb3RoZXIgcmV0dXJuZWQgdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gSWRlbnRpdHkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyByZXR1cm5lZCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gUHJvY2VzcyB0aGUgdmFsdWUocylcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmYXVsdCBwcm9jZXNzIGlzIHJlc29sdmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCBzcGVjaWFsIHx8IGRlZmVycmVkLnJlc29sdmVXaXRoICkoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBub3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgY2F0Y2ggYW5kIHJlamVjdCBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcyA9IHNwZWNpYWwgP1xuXHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rKCBlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuNC4xXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgcG9zdC1yZXNvbHV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICsgMSA+PSBtYXhEZXB0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IFRocm93ZXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIGUgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuMVxuXHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01N1xuXHRcdFx0XHRcdFx0XHQvLyBSZS1yZXNvbHZlIHByb21pc2VzIGltbWVkaWF0ZWx5IHRvIGRvZGdlIGZhbHNlIHJlamVjdGlvbiBmcm9tXG5cdFx0XHRcdFx0XHRcdC8vIHN1YnNlcXVlbnQgZXJyb3JzXG5cdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcygpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ2FsbCBhbiBvcHRpb25hbCBob29rIHRvIHJlY29yZCB0aGUgc3RhY2ssIGluIGNhc2Ugb2YgZXhjZXB0aW9uXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2luY2UgaXQncyBvdGhlcndpc2UgbG9zdCB3aGVuIGV4ZWN1dGlvbiBnb2VzIGFzeW5jXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlID0galF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggcHJvY2VzcyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblByb2dyZXNzICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25Qcm9ncmVzcyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlci5ub3RpZnlXaXRoXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDEgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uRnVsZmlsbGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25GdWxmaWxsZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHlcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAyIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblJlamVjdGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25SZWplY3RlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRUaHJvd2VyXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgNSBdO1xuXG5cdFx0XHQvLyBwcm9taXNlLnByb2dyZXNzID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZG9uZSA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmZhaWwgPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbIDEgXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoXG5cdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZXNvbHZlZFwiIChpLmUuLCBmdWxmaWxsZWQpXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVqZWN0ZWRcIlxuXHRcdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDIgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAzIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2NhbGxiYWNrcy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDIgXS5sb2NrLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0ubG9ja1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5maXJlXG5cdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0bGlzdC5hZGQoIHR1cGxlWyAzIF0uZmlyZSApO1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVzb2x2ZVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3QgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVqZWN0V2l0aCguLi4pIH1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlV2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHNpbmdsZVZhbHVlICkge1xuXHRcdHZhclxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblx0XHRcdC8vIGNvdW50IG9mIHVucHJvY2Vzc2VkIGFyZ3VtZW50c1xuXHRcdFx0aSA9IHJlbWFpbmluZyxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgZnVsZmlsbG1lbnQgZGF0YVxuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gQXJyYXkoIGkgKSxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblxuXHRcdFx0Ly8gdGhlIG1hc3RlciBEZWZlcnJlZFxuXHRcdFx0bWFzdGVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXNvbHZlQ29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdG1hc3Rlci5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdC8vIFNpbmdsZS0gYW5kIGVtcHR5IGFyZ3VtZW50cyBhcmUgYWRvcHRlZCBsaWtlIFByb21pc2UucmVzb2x2ZVxuXHRcdGlmICggcmVtYWluaW5nIDw9IDEgKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCBzaW5nbGVWYWx1ZSwgbWFzdGVyLmRvbmUoIHVwZGF0ZUZ1bmMoIGkgKSApLnJlc29sdmUsIG1hc3Rlci5yZWplY3QsXG5cdFx0XHRcdCFyZW1haW5pbmcgKTtcblxuXHRcdFx0Ly8gVXNlIC50aGVuKCkgdG8gdW53cmFwIHNlY29uZGFyeSB0aGVuYWJsZXMgKGNmLiBnaC0zMDAwKVxuXHRcdFx0aWYgKCBtYXN0ZXIuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHxcblx0XHRcdFx0aXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIHJlc29sdmVWYWx1ZXNbIGkgXS50aGVuICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG1hc3Rlci50aGVuKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTXVsdGlwbGUgYXJndW1lbnRzIGFyZSBhZ2dyZWdhdGVkIGxpa2UgUHJvbWlzZS5hbGwgYXJyYXkgZWxlbWVudHNcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHJlc29sdmVWYWx1ZXNbIGkgXSwgdXBkYXRlRnVuYyggaSApLCBtYXN0ZXIucmVqZWN0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hc3Rlci5wcm9taXNlKCk7XG5cdH1cbn0gKTtcblxuXG4vLyBUaGVzZSB1c3VhbGx5IGluZGljYXRlIGEgcHJvZ3JhbW1lciBtaXN0YWtlIGR1cmluZyBkZXZlbG9wbWVudCxcbi8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxudmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cbmpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBzdGFjayApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG5cdGlmICggd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KCBlcnJvci5uYW1lICkgKSB7XG5cdFx0d2luZG93LmNvbnNvbGUud2FybiggXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrLCBzdGFjayApO1xuXHR9XG59O1xuXG5cblxuXG5qUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHR0aHJvdyBlcnJvcjtcblx0fSApO1xufTtcblxuXG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblxuXHRyZWFkeUxpc3Rcblx0XHQudGhlbiggZm4gKVxuXG5cdFx0Ly8gV3JhcCBqUXVlcnkucmVhZHlFeGNlcHRpb24gaW4gYSBmdW5jdGlvbiBzbyB0aGF0IHRoZSBsb29rdXBcblx0XHQvLyBoYXBwZW5zIGF0IHRoZSB0aW1lIG9mIGVycm9yIGhhbmRsaW5nIGluc3RlYWQgb2YgY2FsbGJhY2tcblx0XHQvLyByZWdpc3RyYXRpb24uXG5cdFx0LmNhdGNoKCBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlFeGNlcHRpb24oIGVycm9yICk7XG5cdFx0fSApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkucmVhZHkudGhlbiA9IHJlYWR5TGlzdC50aGVuO1xuXG4vLyBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG4vLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuLy8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMCBvbmx5XG4vLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cbmlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8XG5cdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuXHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cbn0gZWxzZSB7XG5cblx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cblx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcbn1cblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0aWYgKCB0b1R5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcblx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIF9rZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0Zm4oXG5cdFx0XHRcdFx0ZWxlbXNbIGkgXSwga2V5LCByYXcgP1xuXHRcdFx0XHRcdHZhbHVlIDpcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCBlbGVtc1sgaSBdLCBpLCBmbiggZWxlbXNbIGkgXSwga2V5ICkgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggY2hhaW5hYmxlICkge1xuXHRcdHJldHVybiBlbGVtcztcblx0fVxuXG5cdC8vIEdldHNcblx0aWYgKCBidWxrICkge1xuXHRcdHJldHVybiBmbi5jYWxsKCBlbGVtcyApO1xuXHR9XG5cblx0cmV0dXJuIGxlbiA/IGZuKCBlbGVtc1sgMCBdLCBrZXkgKSA6IGVtcHR5R2V0O1xufTtcblxuXG4vLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcbnZhciBybXNQcmVmaXggPSAvXi1tcy0vLFxuXHRyZGFzaEFscGhhID0gLy0oW2Etel0pL2c7XG5cbi8vIFVzZWQgYnkgY2FtZWxDYXNlIGFzIGNhbGxiYWNrIHRvIHJlcGxhY2UoKVxuZnVuY3Rpb24gZmNhbWVsQ2FzZSggX2FsbCwgbGV0dGVyICkge1xuXHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG59XG5cbi8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcbi8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3MilcbmZ1bmN0aW9uIGNhbWVsQ2FzZSggc3RyaW5nICkge1xuXHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcbn1cbnZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG5cblx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHRcdC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZVxuXHRcdHZhciB2YWx1ZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdC8vIElmIG5vdCwgY3JlYXRlIG9uZVxuXHRcdGlmICggIXZhbHVlICkge1xuXHRcdFx0dmFsdWUgPSB7fTtcblxuXHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxuXHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHRcdFx0XHQvLyBjb25maWd1cmFibGUgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHR2YXIgcHJvcCxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZSggb3duZXIgKTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIGRhdGEgKSBdID0gdmFsdWU7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIHByb3AgKSBdID0gZGF0YVsgcHJvcCBdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH0sXG5cdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMuY2FjaGUoIG93bmVyICkgOlxuXG5cdFx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gJiYgb3duZXJbIHRoaXMuZXhwYW5kbyBdWyBjYW1lbENhc2UoIGtleSApIF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblx0XHR9XG5cblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBrZXkgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc2V0IGNhbWVsQ2FzZSBrZXlzLCBzbyByZW1vdmUgdGhhdC5cblx0XHRcdFx0a2V5ID0ga2V5Lm1hcCggY2FtZWxDYXNlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRrZXkgPSBjYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2Vcblx0XHRcdFx0a2V5ID0ga2V5IGluIGNhY2hlID9cblx0XHRcdFx0XHRbIGtleSBdIDpcblx0XHRcdFx0XHQoIGtleS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdICk7XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBrZXkubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSdzIG5vIG1vcmUgZGF0YVxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDVcblx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXG5cdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzg2MDcgKGJ1ZyByZXN0cmljdGVkKVxuXHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHR2YXIgY2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0cmV0dXJuIGNhY2hlICE9PSB1bmRlZmluZWQgJiYgIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApO1xuXHR9XG59O1xudmFyIGRhdGFQcml2ID0gbmV3IERhdGEoKTtcblxudmFyIGRhdGFVc2VyID0gbmV3IERhdGEoKTtcblxuXG5cbi8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG4vL1xuLy9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcbi8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cbi8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxuLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcbi8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcblxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0cm11bHRpRGFzaCA9IC9bQS1aXS9nO1xuXG5mdW5jdGlvbiBnZXREYXRhKCBkYXRhICkge1xuXHRpZiAoIGRhdGEgPT09IFwidHJ1ZVwiICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcImZhbHNlXCIgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcIm51bGxcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdGlmICggZGF0YSA9PT0gK2RhdGEgKyBcIlwiICkge1xuXHRcdHJldHVybiArZGF0YTtcblx0fVxuXG5cdGlmICggcmJyYWNlLnRlc3QoIGRhdGEgKSApIHtcblx0XHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSApO1xuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG5cdHZhciBuYW1lO1xuXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZ2V0RGF0YSggZGF0YSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdGRhdGFVc2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBkYXRhO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5oYXNEYXRhKCBlbGVtICkgfHwgZGF0YVByaXYuaGFzRGF0YSggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhVXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fSxcblxuXHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHQvLyB3aXRoIGRpcmVjdCBjYWxscyB0byBkYXRhUHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC5cblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFQcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAoIzE0ODk0KVxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGE7XG5cblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3Rcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIFRoZSBrZXkgd2lsbCBhbHdheXMgYmUgY2FtZWxDYXNlZCBpbiBEYXRhXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzdG9yZSB0aGUgY2FtZWxDYXNlZCBrZXlcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG5cdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YVByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgQXJyYXkuaXNBcnJheSggZGF0YSApICkge1xuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KCBkYXRhICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLmFkZCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSApXG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVsgMCBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHR9ICk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xuXHRcdHZhciB0bXAsXG5cdFx0XHRjb3VudCA9IDEsXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9iaiA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRtcCA9IGRhdGFQcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzb2x2ZSgpO1xuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcblx0fVxufSApO1xudmFyIHBudW0gPSAoIC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvICkuc291cmNlO1xuXG52YXIgcmNzc051bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICk7XG5cblxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xuXG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxuXHR2YXIgaXNBdHRhY2hlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cdFx0fSxcblx0XHRjb21wb3NlZCA9IHsgY29tcG9zZWQ6IHRydWUgfTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrLCBpT1MgMTAuMCAtIDEwLjIgb25seVxuXHQvLyBDaGVjayBhdHRhY2htZW50IGFjcm9zcyBzaGFkb3cgRE9NIGJvdW5kYXJpZXMgd2hlbiBwb3NzaWJsZSAoZ2gtMzUwNClcblx0Ly8gU3VwcG9ydDogaU9TIDEwLjAtMTAuMiBvbmx5XG5cdC8vIEVhcmx5IGlPUyAxMCB2ZXJzaW9ucyBzdXBwb3J0IGBhdHRhY2hTaGFkb3dgIGJ1dCBub3QgYGdldFJvb3ROb2RlYCxcblx0Ly8gbGVhZGluZyB0byBlcnJvcnMuIFdlIG5lZWQgdG8gY2hlY2sgZm9yIGBnZXRSb290Tm9kZWAuXG5cdGlmICggZG9jdW1lbnRFbGVtZW50LmdldFJvb3ROb2RlICkge1xuXHRcdGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Um9vdE5vZGUoIGNvbXBvc2VkICkgPT09IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHR9O1xuXHR9XG52YXIgaXNIaWRkZW5XaXRoaW5UcmVlID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXG5cdFx0Ly8gaXNIaWRkZW5XaXRoaW5UcmVlIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cblx0XHQvLyBJbmxpbmUgc3R5bGUgdHJ1bXBzIGFsbFxuXHRcdHJldHVybiBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiZcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBjaGVjayBjb21wdXRlZCBzdHlsZVxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQzIC0gNDVcblx0XHRcdC8vIERpc2Nvbm5lY3RlZCBlbGVtZW50cyBjYW4gaGF2ZSBjb21wdXRlZCBkaXNwbGF5OiBub25lLCBzbyBmaXJzdCBjb25maXJtIHRoYXQgZWxlbSBpc1xuXHRcdFx0Ly8gaW4gdGhlIGRvY3VtZW50LlxuXHRcdFx0aXNBdHRhY2hlZCggZWxlbSApICYmXG5cblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiO1xuXHR9O1xuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLCBzY2FsZSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7XG5cdFx0XHR9LFxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSBlbGVtLm5vZGVUeXBlICYmXG5cdFx0XHQoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdFx0Ly8gSGFsdmUgdGhlIGl0ZXJhdGlvbiB0YXJnZXQgdmFsdWUgdG8gcHJldmVudCBpbnRlcmZlcmVuY2UgZnJvbSBDU1MgdXBwZXIgYm91bmRzIChnaC0yMTQ0KVxuXHRcdGluaXRpYWwgPSBpbml0aWFsIC8gMjtcblxuXHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XG5cblx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXG5cdFx0d2hpbGUgKCBtYXhJdGVyYXRpb25zLS0gKSB7XG5cblx0XHRcdC8vIEV2YWx1YXRlIGFuZCB1cGRhdGUgb3VyIGJlc3QgZ3Vlc3MgKGRvdWJsaW5nIGd1ZXNzZXMgdGhhdCB6ZXJvIG91dCkuXG5cdFx0XHQvLyBGaW5pc2ggaWYgdGhlIHNjYWxlIGVxdWFscyBvciBjcm9zc2VzIDEgKG1ha2luZyB0aGUgb2xkKm5ldyBwcm9kdWN0IG5vbi1wb3NpdGl2ZSkuXG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cdFx0XHRpZiAoICggMSAtIHNjYWxlICkgKiAoIDEgLSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsIHx8IDAuNSApICkgPD0gMCApIHtcblx0XHRcdFx0bWF4SXRlcmF0aW9ucyA9IDA7XG5cdFx0XHR9XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXG5cdFx0fVxuXG5cdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgKiAyO1xuXHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblx0fVxuXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcblxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxuXHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cblx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xuXHRcdGlmICggdHdlZW4gKSB7XG5cdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcblx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYWRqdXN0ZWQ7XG59XG5cblxudmFyIGRlZmF1bHREaXNwbGF5TWFwID0ge307XG5cbmZ1bmN0aW9uIGdldERlZmF1bHREaXNwbGF5KCBlbGVtICkge1xuXHR2YXIgdGVtcCxcblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQsXG5cdFx0bm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLFxuXHRcdGRpc3BsYXkgPSBkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXTtcblxuXHRpZiAoIGRpc3BsYXkgKSB7XG5cdFx0cmV0dXJuIGRpc3BsYXk7XG5cdH1cblxuXHR0ZW1wID0gZG9jLmJvZHkuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVFbGVtZW50KCBub2RlTmFtZSApICk7XG5cdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCB0ZW1wLCBcImRpc3BsYXlcIiApO1xuXG5cdHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGVtcCApO1xuXG5cdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0ZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0fVxuXHRkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcblx0dmFyIGRpc3BsYXksIGVsZW0sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHQvLyBEZXRlcm1pbmUgbmV3IGRpc3BsYXkgdmFsdWUgZm9yIGVsZW1lbnRzIHRoYXQgbmVlZCB0byBjaGFuZ2Vcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXG5cdFx0XHQvLyBTaW5jZSB3ZSBmb3JjZSB2aXNpYmlsaXR5IHVwb24gY2FzY2FkZS1oaWRkZW4gZWxlbWVudHMsIGFuIGltbWVkaWF0ZSAoYW5kIHNsb3cpXG5cdFx0XHQvLyBjaGVjayBpcyByZXF1aXJlZCBpbiB0aGlzIGZpcnN0IGxvb3AgdW5sZXNzIHdlIGhhdmUgYSBub25lbXB0eSBkaXNwbGF5IHZhbHVlIChlaXRoZXJcblx0XHRcdC8vIGlubGluZSBvciBhYm91dC10by1iZS1yZXN0b3JlZClcblx0XHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKSB8fCBudWxsO1xuXHRcdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gKSB7XG5cdFx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGdldERlZmF1bHREaXNwbGF5KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IFwibm9uZVwiO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHdoYXQgd2UncmUgb3ZlcndyaXRpbmdcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImRpc3BsYXlcIiwgZGlzcGxheSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcCB0byBhdm9pZCBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoIHZhbHVlc1sgaW5kZXggXSAhPSBudWxsICkge1xuXHRcdFx0ZWxlbWVudHNbIGluZGV4IF0uc3R5bGUuZGlzcGxheSA9IHZhbHVlc1sgaW5kZXggXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbldpdGhpblRyZWUoIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xuXG52YXIgcnRhZ05hbWUgPSAoIC88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKikvaSApO1xuXG52YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxebW9kdWxlJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHQvLyBJRSA8PTkgcmVwbGFjZXMgPG9wdGlvbj4gdGFncyB3aXRoIHRoZWlyIGNvbnRlbnRzIHdoZW4gaW5zZXJ0ZWQgb3V0c2lkZSBvZlxuXHQvLyB0aGUgc2VsZWN0IGVsZW1lbnQuXG5cdGRpdi5pbm5lckhUTUwgPSBcIjxvcHRpb24+PC9vcHRpb24+XCI7XG5cdHN1cHBvcnQub3B0aW9uID0gISFkaXYubGFzdENoaWxkO1xufSApKCk7XG5cblxuLy8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcbnZhciB3cmFwTWFwID0ge1xuXG5cdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXG5cdC8vIHNhbWUgd2F5IHRoYXQgdGFnIHNvdXAgcGFyc2VycyBkby4gU28gd2UgY2Fubm90IHNob3J0ZW5cblx0Ly8gdGhpcyBieSBvbWl0dGluZyA8dGJvZHk+IG9yIG90aGVyIHJlcXVpcmVkIGVsZW1lbnRzLlxuXHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXG5cdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxufTtcblxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuaWYgKCAhc3VwcG9ydC5vcHRpb24gKSB7XG5cdHdyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbiA9IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXTtcbn1cblxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKCMxNTE1MSlcblx0dmFyIHJldDtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2Uge1xuXHRcdHJldCA9IFtdO1xuXHR9XG5cblx0aWYgKCB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgbm9kZU5hbWUoIGNvbnRleHQsIHRhZyApICkge1xuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRkYXRhUHJpdi5zZXQoXG5cdFx0XHRlbGVtc1sgaSBdLFxuXHRcdFx0XCJnbG9iYWxFdmFsXCIsXG5cdFx0XHQhcmVmRWxlbWVudHMgfHwgZGF0YVByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXG5cdFx0KTtcblx0fVxufVxuXG5cbnZhciByaHRtbCA9IC88fCYjP1xcdys7LztcblxuZnVuY3Rpb24gYnVpbGRGcmFnbWVudCggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiwgaWdub3JlZCApIHtcblx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBhdHRhY2hlZCwgaixcblx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdG5vZGVzID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRpZiAoIHRvVHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRpID0gMDtcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0YXR0YWNoZWQgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnRcblx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRpZiAoIGF0dGFjaGVkICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuXHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0bXBbIGorKyBdICkgKSB7XG5cdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmcmFnbWVudDtcbn1cblxuXG52YXJcblx0cmtleUV2ZW50ID0gL15rZXkvLFxuXHRybW91c2VFdmVudCA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyxcblx0cnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkvO1xuXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTErXG4vLyBmb2N1cygpIGFuZCBibHVyKCkgYXJlIGFzeW5jaHJvbm91cywgZXhjZXB0IHdoZW4gdGhleSBhcmUgbm8tb3AuXG4vLyBTbyBleHBlY3QgZm9jdXMgdG8gYmUgc3luY2hyb25vdXMgd2hlbiB0aGUgZWxlbWVudCBpcyBhbHJlYWR5IGFjdGl2ZSxcbi8vIGFuZCBibHVyIHRvIGJlIHN5bmNocm9ub3VzIHdoZW4gdGhlIGVsZW1lbnQgaXMgbm90IGFscmVhZHkgYWN0aXZlLlxuLy8gKGZvY3VzIGFuZCBibHVyIGFyZSBhbHdheXMgc3luY2hyb25vdXMgaW4gb3RoZXIgc3VwcG9ydGVkIGJyb3dzZXJzLFxuLy8gdGhpcyBqdXN0IGRlZmluZXMgd2hlbiB3ZSBjYW4gY291bnQgb24gaXQpLlxuZnVuY3Rpb24gZXhwZWN0U3luYyggZWxlbSwgdHlwZSApIHtcblx0cmV0dXJuICggZWxlbSA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSApID09PSAoIHR5cGUgPT09IFwiZm9jdXNcIiApO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gQWNjZXNzaW5nIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgY2FuIHRocm93IHVuZXhwZWN0ZWRseVxuLy8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzkzXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIE9ubHkgYXR0YWNoIGV2ZW50cyB0byBvYmplY3RzIHRoYXQgYWNjZXB0IGRhdGFcblx0XHRpZiAoICFhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0gT2JqZWN0LmNyZWF0ZSggbnVsbCApO1xuXHRcdH1cblx0XHRpZiAoICEoIGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlICkgKSB7XG5cdFx0XHRldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSA9IGZ1bmN0aW9uKCBlICkge1xuXG5cdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXG5cdFx0XHRcdC8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWRcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IFwidW5kZWZpbmVkXCIgJiYgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlID9cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guYXBwbHkoIGVsZW0sIGFyZ3VtZW50cyApIDogdW5kZWZpbmVkO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBIYW5kbGUgbXVsdGlwbGUgZXZlbnRzIHNlcGFyYXRlZCBieSBhIHNwYWNlXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3Rvcixcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcblx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiIClcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gKSApIHtcblx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSA9IFtdO1xuXHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcblxuXHRcdFx0XHQvLyBPbmx5IHVzZSBhZGRFdmVudExpc3RlbmVyIGlmIHRoZSBzcGVjaWFsIGV2ZW50cyBoYW5kbGVyIHJldHVybnMgZmFsc2Vcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fFxuXHRcdFx0XHRcdHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzcGVjaWFsLmFkZCApIHtcblx0XHRcdFx0c3BlY2lhbC5hZGQuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cblx0XHRcdFx0aWYgKCAhaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlci5ndWlkID0gaGFuZGxlci5ndWlkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250XG5cdFx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvblxuXHRcdFx0alF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdID0gdHJ1ZTtcblx0XHR9XG5cblx0fSxcblxuXHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcblx0cmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHtcblxuXHRcdHZhciBqLCBvcmlnQ291bnQsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHRpZiAoICFlbGVtRGF0YSB8fCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFVuYmluZCBhbGwgZXZlbnRzIChvbiB0aGlzIG5hbWVzcGFjZSwgaWYgcHJvdmlkZWQpIGZvciB0aGUgZWxlbWVudFxuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSArIHR5cGVzWyB0IF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSB8fCBbXTtcblx0XHRcdHRtcCA9IHRtcFsgMiBdICYmXG5cdFx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApO1xuXG5cdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXG5cdFx0XHRvcmlnQ291bnQgPSBqID0gaGFuZGxlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XG5cblx0XHRcdFx0aWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJlxuXHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXG5cdFx0XHRcdFx0KCAhdG1wIHx8IHRtcC50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSAmJlxuXHRcdFx0XHRcdCggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHxcblx0XHRcdFx0XHRcdHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBqLCAxICk7XG5cblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcblx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XG5cdFx0XHQvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycylcblx0XHRcdGlmICggb3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHxcblx0XHRcdFx0XHRzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIGRhdGEgYW5kIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcblx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBldmVudHMgKSApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0ZGlzcGF0Y2g6IGZ1bmN0aW9uKCBuYXRpdmVFdmVudCApIHtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXG5cdFx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHRcdGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKSxcblxuXHRcdFx0aGFuZGxlcnMgPSAoXG5cdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwgT2JqZWN0LmNyZWF0ZSggbnVsbCApXG5cdFx0XHRcdClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZSBldmVudCBpcyBuYW1lc3BhY2VkLCB0aGVuIGVhY2ggaGFuZGxlciBpcyBvbmx5IGludm9rZWQgaWYgaXQgaXNcblx0XHRcdFx0Ly8gc3BlY2lhbGx5IHVuaXZlcnNhbCBvciBpdHMgbmFtZXNwYWNlcyBhcmUgYSBzdXBlcnNldCBvZiB0aGUgZXZlbnQncy5cblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBoYW5kbGVPYmoubmFtZXNwYWNlID09PSBmYWxzZSB8fFxuXHRcdFx0XHRcdGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuXHRcdFx0XHRcdHJldCA9ICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30gKS5oYW5kbGUgfHxcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBpLCBoYW5kbGVPYmosIHNlbCwgbWF0Y2hlZEhhbmRsZXJzLCBtYXRjaGVkU2VsZWN0b3JzLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05XG5cdFx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAodHJhYy0xMzE4MClcblx0XHRcdGN1ci5ub2RlVHlwZSAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDJcblx0XHRcdC8vIFN1cHByZXNzIHNwZWMtdmlvbGF0aW5nIGNsaWNrcyBpbmRpY2F0aW5nIGEgbm9uLXByaW1hcnkgcG9pbnRlciBidXR0b24gKHRyYWMtMzg2MSlcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50LXR5cGUtY2xpY2tcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdC8vIC4uLmJ1dCBub3QgYXJyb3cga2V5IFwiY2xpY2tzXCIgb2YgcmFkaW8gaW5wdXRzLCB3aGljaCBjYW4gaGF2ZSBgYnV0dG9uYCAtMSAoZ2gtMjM0Mylcblx0XHRcdCEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBldmVudC5idXR0b24gPj0gMSApICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKCMxMzIwOClcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlID09PSAxICYmICEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBjdXIuZGlzYWJsZWQgPT09IHRydWUgKSApIHtcblx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzID0ge307XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRIYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVkSGFuZGxlcnMgfSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRjdXIgPSB0aGlzO1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XG5cdH0sXG5cblx0YWRkUHJvcDogZnVuY3Rpb24oIG5hbWUsIGhvb2sgKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBqUXVlcnkuRXZlbnQucHJvdG90eXBlLCBuYW1lLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXG5cdFx0XHRnZXQ6IGlzRnVuY3Rpb24oIGhvb2sgKSA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaG9vayggdGhpcy5vcmlnaW5hbEV2ZW50ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbIG5hbWUgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBvcmlnaW5hbEV2ZW50ICkge1xuXHRcdHJldHVybiBvcmlnaW5hbEV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdG9yaWdpbmFsRXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCB0byBlbnN1cmUgY29ycmVjdCBzdGF0ZSBmb3IgY2hlY2thYmxlIGlucHV0c1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0Ly8gZGF0YVByaXYuc2V0KCBlbCwgXCJjbGlja1wiLCAuLi4gKVxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiLCByZXR1cm5UcnVlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9LFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlcmluZyBhIGNsaWNrXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIHN1cHByZXNzIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0Ly8gQWxzbyBwcmV2ZW50IGl0IGlmIHdlJ3JlIGN1cnJlbnRseSBpbnNpZGUgYSBsZXZlcmFnZWQgbmF0aXZlLWV2ZW50IHN0YWNrXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXHRcdFx0XHRyZXR1cm4gcmNoZWNrYWJsZVR5cGUudGVzdCggdGFyZ2V0LnR5cGUgKSAmJlxuXHRcdFx0XHRcdHRhcmdldC5jbGljayAmJiBub2RlTmFtZSggdGFyZ2V0LCBcImlucHV0XCIgKSAmJlxuXHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGFyZ2V0LCBcImNsaWNrXCIgKSB8fFxuXHRcdFx0XHRcdG5vZGVOYW1lKCB0YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gRW5zdXJlIHRoZSBwcmVzZW5jZSBvZiBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGhhbmRsZXMgbWFudWFsbHktdHJpZ2dlcmVkXG4vLyBzeW50aGV0aWMgZXZlbnRzIGJ5IGludGVycnVwdGluZyBwcm9ncmVzcyB1bnRpbCByZWludm9rZWQgaW4gcmVzcG9uc2UgdG9cbi8vICpuYXRpdmUqIGV2ZW50cyB0aGF0IGl0IGZpcmVzIGRpcmVjdGx5LCBlbnN1cmluZyB0aGF0IHN0YXRlIGNoYW5nZXMgaGF2ZVxuLy8gYWxyZWFkeSBvY2N1cnJlZCBiZWZvcmUgb3RoZXIgbGlzdGVuZXJzIGFyZSBpbnZva2VkLlxuZnVuY3Rpb24gbGV2ZXJhZ2VOYXRpdmUoIGVsLCB0eXBlLCBleHBlY3RTeW5jICkge1xuXG5cdC8vIE1pc3NpbmcgZXhwZWN0U3luYyBpbmRpY2F0ZXMgYSB0cmlnZ2VyIGNhbGwsIHdoaWNoIG11c3QgZm9yY2Ugc2V0dXAgdGhyb3VnaCBqUXVlcnkuZXZlbnQuYWRkXG5cdGlmICggIWV4cGVjdFN5bmMgKSB7XG5cdFx0aWYgKCBkYXRhUHJpdi5nZXQoIGVsLCB0eXBlICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCByZXR1cm5UcnVlICk7XG5cdFx0fVxuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlZ2lzdGVyIHRoZSBjb250cm9sbGVyIGFzIGEgc3BlY2lhbCB1bml2ZXJzYWwgaGFuZGxlciBmb3IgYWxsIGV2ZW50IG5hbWVzcGFjZXNcblx0ZGF0YVByaXYuc2V0KCBlbCwgdHlwZSwgZmFsc2UgKTtcblx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHtcblx0XHRuYW1lc3BhY2U6IGZhbHNlLFxuXHRcdGhhbmRsZXI6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciBub3RBc3luYywgcmVzdWx0LFxuXHRcdFx0XHRzYXZlZCA9IGRhdGFQcml2LmdldCggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRpZiAoICggZXZlbnQuaXNUcmlnZ2VyICYgMSApICYmIHRoaXNbIHR5cGUgXSApIHtcblxuXHRcdFx0XHQvLyBJbnRlcnJ1cHQgcHJvY2Vzc2luZyBvZiB0aGUgb3V0ZXIgc3ludGhldGljIC50cmlnZ2VyKCllZCBldmVudFxuXHRcdFx0XHQvLyBTYXZlZCBkYXRhIHNob3VsZCBiZSBmYWxzZSBpbiBzdWNoIGNhc2VzLCBidXQgbWlnaHQgYmUgYSBsZWZ0b3ZlciBjYXB0dXJlIG9iamVjdFxuXHRcdFx0XHQvLyBmcm9tIGFuIGFzeW5jIG5hdGl2ZSBoYW5kbGVyIChnaC00MzUwKVxuXHRcdFx0XHRpZiAoICFzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBhcmd1bWVudHMgZm9yIHVzZSB3aGVuIGhhbmRsaW5nIHRoZSBpbm5lciBuYXRpdmUgZXZlbnRcblx0XHRcdFx0XHQvLyBUaGVyZSB3aWxsIGFsd2F5cyBiZSBhdCBsZWFzdCBvbmUgYXJndW1lbnQgKGFuIGV2ZW50IG9iamVjdCksIHNvIHRoaXMgYXJyYXlcblx0XHRcdFx0XHQvLyB3aWxsIG5vdCBiZSBjb25mdXNlZCB3aXRoIGEgbGVmdG92ZXIgY2FwdHVyZSBvYmplY3QuXG5cdFx0XHRcdFx0c2F2ZWQgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHNhdmVkICk7XG5cblx0XHRcdFx0XHQvLyBUcmlnZ2VyIHRoZSBuYXRpdmUgZXZlbnQgYW5kIGNhcHR1cmUgaXRzIHJlc3VsdFxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdC8vIGZvY3VzKCkgYW5kIGJsdXIoKSBhcmUgYXN5bmNocm9ub3VzXG5cdFx0XHRcdFx0bm90QXN5bmMgPSBleHBlY3RTeW5jKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0dGhpc1sgdHlwZSBdKCk7XG5cdFx0XHRcdFx0cmVzdWx0ID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0IHx8IG5vdEFzeW5jICkge1xuXHRcdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBmYWxzZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQgPSB7fTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0ICkge1xuXG5cdFx0XHRcdFx0XHQvLyBDYW5jZWwgdGhlIG91dGVyIHN5bnRoZXRpYyBldmVudFxuXHRcdFx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdC52YWx1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhpcyBpcyBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgZm9yIGFuIGV2ZW50IHdpdGggYSBidWJibGluZyBzdXJyb2dhdGVcblx0XHRcdFx0Ly8gKGZvY3VzIG9yIGJsdXIpLCBhc3N1bWUgdGhhdCB0aGUgc3Vycm9nYXRlIGFscmVhZHkgcHJvcGFnYXRlZCBmcm9tIHRyaWdnZXJpbmcgdGhlXG5cdFx0XHRcdC8vIG5hdGl2ZSBldmVudCBhbmQgcHJldmVudCB0aGF0IGZyb20gaGFwcGVuaW5nIGFnYWluIGhlcmUuXG5cdFx0XHRcdC8vIFRoaXMgdGVjaG5pY2FsbHkgZ2V0cyB0aGUgb3JkZXJpbmcgd3Jvbmcgdy5yLnQuIHRvIGAudHJpZ2dlcigpYCAoaW4gd2hpY2ggdGhlXG5cdFx0XHRcdC8vIGJ1YmJsaW5nIHN1cnJvZ2F0ZSBwcm9wYWdhdGVzICphZnRlciogdGhlIG5vbi1idWJibGluZyBiYXNlKSwgYnV0IHRoYXQgc2VlbXNcblx0XHRcdFx0Ly8gbGVzcyBiYWQgdGhhbiBkdXBsaWNhdGlvbi5cblx0XHRcdFx0fSBlbHNlIGlmICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9ICkuZGVsZWdhdGVUeXBlICkge1xuXHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBuYXRpdmUgZXZlbnQgdHJpZ2dlcmVkIGFib3ZlLCBldmVyeXRoaW5nIGlzIG5vdyBpbiBvcmRlclxuXHRcdFx0Ly8gRmlyZSBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgd2l0aCB0aGUgb3JpZ2luYWwgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0Ly8gLi4uYW5kIGNhcHR1cmUgdGhlIHJlc3VsdFxuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHtcblx0XHRcdFx0XHR2YWx1ZTogalF1ZXJ5LmV2ZW50LnRyaWdnZXIoXG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdFx0Ly8gRXh0ZW5kIHdpdGggdGhlIHByb3RvdHlwZSB0byByZXNldCB0aGUgYWJvdmUgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKClcblx0XHRcdFx0XHRcdGpRdWVyeS5leHRlbmQoIHNhdmVkWyAwIF0sIGpRdWVyeS5FdmVudC5wcm90b3R5cGUgKSxcblx0XHRcdFx0XHRcdHNhdmVkLnNsaWNlKCAxICksXG5cdFx0XHRcdFx0XHR0aGlzXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gQWJvcnQgaGFuZGxpbmcgb2YgdGhlIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcbn1cblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjb2RlOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblxuXHR3aGljaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBidXR0b24gPSBldmVudC5idXR0b247XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgJiYgcmtleUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdHJldHVybiBldmVudC5jaGFyQ29kZSAhPSBudWxsID8gZXZlbnQuY2hhckNvZGUgOiBldmVudC5rZXlDb2RlO1xuXHRcdH1cblxuXHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcblx0XHRpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCAmJiBybW91c2VFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDEgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDIgKSB7XG5cdFx0XHRcdHJldHVybiAzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDQgKSB7XG5cdFx0XHRcdHJldHVybiAyO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQud2hpY2g7XG5cdH1cbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbmpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCB0eXBlLCBkZWxlZ2F0ZVR5cGUgKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gPSB7XG5cblx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiZm9jdXNcIiwgLi4uIClcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJibHVyXCIsIC4uLiApXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSwgZXhwZWN0U3luYyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSApO1xuXG5cdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0ZGVsZWdhdGVUeXBlOiBkZWxlZ2F0ZVR5cGVcblx0fTtcbn0gKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxMyBvbmx5XG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztcblxuLy8gUHJlZmVyIGEgdGJvZHkgb3ZlciBpdHMgcGFyZW50IHRhYmxlIGZvciBjb250YWluaW5nIG5ldyByb3dzXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0bm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgKSB7XG5cblx0XHRyZXR1cm4galF1ZXJ5KCBlbGVtICkuY2hpbGRyZW4oIFwidGJvZHlcIiApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHRpZiAoICggZWxlbS50eXBlIHx8IFwiXCIgKS5zbGljZSggMCwgNSApID09PSBcInRydWUvXCIgKSB7XG5cdFx0ZWxlbS50eXBlID0gZWxlbS50eXBlLnNsaWNlKCA1ICk7XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcblxuXHRpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cblx0aWYgKCBkYXRhUHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHRwZGF0YU9sZCA9IGRhdGFQcml2LmdldCggc3JjICk7XG5cdFx0ZXZlbnRzID0gcGRhdGFPbGQuZXZlbnRzO1xuXG5cdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRlc3QsIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cblx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxuXHRpZiAoIGRhdGFVc2VyLmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHVkYXRhT2xkID0gZGF0YVVzZXIuYWNjZXNzKCBzcmMgKTtcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXG5cdFx0ZGF0YVVzZXIuc2V0KCBkZXN0LCB1ZGF0YUN1ciApO1xuXHR9XG59XG5cbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRvbU1hbmlwKCBjb2xsZWN0aW9uLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApIHtcblxuXHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdGFyZ3MgPSBmbGF0KCBhcmdzICk7XG5cblx0dmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBjb2xsZWN0aW9uLmxlbmd0aCxcblx0XHRpTm9DbG9uZSA9IGwgLSAxLFxuXHRcdHZhbHVlID0gYXJnc1sgMCBdLFxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdGlmICggdmFsdWVJc0Z1bmN0aW9uIHx8XG5cdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRyZXR1cm4gY29sbGVjdGlvbi5lYWNoKCBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGNvbGxlY3Rpb24uZXEoIGluZGV4ICk7XG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHR9XG5cdFx0XHRkb21NYW5pcCggc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoIGwgKSB7XG5cdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcblx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHR9XG5cblx0XHQvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2tcblx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XG5cdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xuXG5cdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xuXG5cdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxuXHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FsbGJhY2suY2FsbCggY29sbGVjdGlvblsgaSBdLCBub2RlLCBpICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcblxuXHRcdFx0XHQvLyBSZWVuYWJsZSBzY3JpcHRzXG5cdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcblxuXHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaGFzU2NyaXB0czsgaSsrICkge1xuXHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXG5cdFx0XHRcdFx0XHQhZGF0YVByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUuc3JjICYmICggbm9kZS50eXBlIHx8IFwiXCIgKS50b0xvd2VyQ2FzZSgpICAhPT0gXCJtb2R1bGVcIiApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBPcHRpb25hbCBBSkFYIGRlcGVuZGVuY3ksIGJ1dCB3b24ndCBydW4gc2NyaXB0cyBpZiBub3QgcHJlc2VudFxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5fZXZhbFVybCAmJiAhbm9kZS5ub01vZHVsZSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuX2V2YWxVcmwoIG5vZGUuc3JjLCB7XG5cdFx0XHRcdFx0XHRcdFx0XHRub25jZTogbm9kZS5ub25jZSB8fCBub2RlLmdldEF0dHJpYnV0ZSggXCJub25jZVwiIClcblx0XHRcdFx0XHRcdFx0XHR9LCBkb2MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0RE9NRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSwgbm9kZSwgZG9jICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSggZWxlbSwgc2VsZWN0b3IsIGtlZXBEYXRhICkge1xuXHR2YXIgbm9kZSxcblx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXG5cdFx0aSA9IDA7XG5cblx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdGlmICggIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApO1xuXHRcdH1cblxuXHRcdGlmICggbm9kZS5wYXJlbnROb2RlICkge1xuXHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBpc0F0dGFjaGVkKCBub2RlICkgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHR9XG5cdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRyZXR1cm4gaHRtbDtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0gaXNBdHRhY2hlZCggZWxlbSApO1xuXG5cdFx0Ly8gRml4IElFIGNsb25pbmcgaXNzdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCAmJiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgZWxlbS5ub2RlVHlwZSA9PT0gMTEgKSAmJlxuXHRcdFx0XHQhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIFdlIGVzY2hldyBTaXp6bGUgaGVyZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uczogaHR0cHM6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcblx0XHRyZXR1cm4gY2xvbmU7XG5cdH0sXG5cblx0Y2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cdFx0dmFyIGRhdGEsIGVsZW0sIHR5cGUsXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9PSB1bmRlZmluZWQ7IGkrKyApIHtcblx0XHRcdGlmICggYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0XHRpZiAoICggZGF0YSA9IGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSApICkge1xuXHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCB0eXBlIGluIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkZXRhY2g6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yICk7XG5cdH0sXG5cblx0dGV4dDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnRleHQoIHRoaXMgKSA6XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGJlZm9yZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSB0aGlzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gUHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcblx0XHRcdFx0ZWxlbS50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzO1xuXHRcdGRlZXBEYXRhQW5kRXZlbnRzID0gZGVlcERhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGRhdGFBbmRFdmVudHMgOiBkZWVwRGF0YUFuZEV2ZW50cztcblxuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKCB0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApO1xuXHRcdH0gKTtcblx0fSxcblxuXHRodG1sOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pbm5lckhUTUw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxuXHRcdFx0XHQhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpIF0gKSB7XG5cblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuaHRtbFByZWZpbHRlciggdmFsdWUgKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF0gfHwge307XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtID0gMDtcblxuXHRcdFx0XHQvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2Rcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7XG5cdFx0XHR9XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRyZXBsYWNlV2l0aDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGlnbm9yZWQgPSBbXTtcblxuXHRcdC8vIE1ha2UgdGhlIGNoYW5nZXMsIHJlcGxhY2luZyBlYWNoIG5vbi1pZ25vcmVkIGNvbnRleHQgZWxlbWVudCB3aXRoIHRoZSBuZXcgY29udGVudFxuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG5cblx0XHRcdGlmICggalF1ZXJ5LmluQXJyYXkoIHRoaXMsIGlnbm9yZWQgKSA8IDAgKSB7XG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggdGhpcyApICk7XG5cdFx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRcdHBhcmVudC5yZXBsYWNlQ2hpbGQoIGVsZW0sIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gRm9yY2UgY2FsbGJhY2sgaW52b2NhdGlvblxuXHRcdH0sIGlnbm9yZWQgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCgge1xuXHRhcHBlbmRUbzogXCJhcHBlbmRcIixcblx0cHJlcGVuZFRvOiBcInByZXBlbmRcIixcblx0aW5zZXJ0QmVmb3JlOiBcImJlZm9yZVwiLFxuXHRpbnNlcnRBZnRlcjogXCJhZnRlclwiLFxuXHRyZXBsYWNlQWxsOiBcInJlcGxhY2VXaXRoXCJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGVsZW1zLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksXG5cdFx0XHRsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDEsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgaSA8PSBsYXN0OyBpKysgKSB7XG5cdFx0XHRlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSggdHJ1ZSApO1xuXHRcdFx0alF1ZXJ5KCBpbnNlcnRbIGkgXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xuXHR9O1xufSApO1xudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xuXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHksIEZpcmVmb3ggPD0zMCAoIzE1MDk4LCAjMTQxNTApXG5cdFx0Ly8gSUUgdGhyb3dzIG9uIGVsZW1lbnRzIGNyZWF0ZWQgaW4gcG9wdXBzXG5cdFx0Ly8gRkYgbWVhbndoaWxlIHRocm93cyBvbiBmcmFtZSBlbGVtZW50cyB0aHJvdWdoIFwiZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZVwiXG5cdFx0dmFyIHZpZXcgPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cblx0XHRpZiAoICF2aWV3IHx8ICF2aWV3Lm9wZW5lciApIHtcblx0XHRcdHZpZXcgPSB3aW5kb3c7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuXHR9O1xuXG52YXIgc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjayApIHtcblx0dmFyIHJldCwgbmFtZSxcblx0XHRvbGQgPSB7fTtcblxuXHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcblx0fVxuXG5cdHJldCA9IGNhbGxiYWNrLmNhbGwoIGVsZW0gKTtcblxuXHQvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn07XG5cblxudmFyIHJib3hTdHlsZSA9IG5ldyBSZWdFeHAoIGNzc0V4cGFuZC5qb2luKCBcInxcIiApLCBcImlcIiApO1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0Ly8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XG5cblx0XHQvLyBUaGlzIGlzIGEgc2luZ2xldG9uLCB3ZSBuZWVkIHRvIGV4ZWN1dGUgaXQgb25seSBvbmNlXG5cdFx0aWYgKCAhZGl2ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4O3dpZHRoOjYwcHg7XCIgK1xuXHRcdFx0XCJtYXJnaW4tdG9wOjFweDtwYWRkaW5nOjA7Ym9yZGVyOjBcIjtcblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHRcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7Ym94LXNpemluZzpib3JkZXItYm94O292ZXJmbG93OnNjcm9sbDtcIiArXG5cdFx0XHRcIm1hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7XCIgK1xuXHRcdFx0XCJ3aWR0aDo2MCU7dG9wOjElXCI7XG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKS5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgRmlyZWZveCA8PTMgLSA0NFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUubWFyZ2luTGVmdCApID09PSAxMjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIFNhZmFyaSA8PTkuMSAtIDEwLjEsIGlPUyA8PTcuMCAtIDkuM1xuXHRcdC8vIFNvbWUgc3R5bGVzIGNvbWUgYmFjayB3aXRoIHBlcmNlbnRhZ2UgdmFsdWVzLCBldmVuIHRob3VnaCB0aGV5IHNob3VsZG4ndFxuXHRcdGRpdi5zdHlsZS5yaWdodCA9IFwiNjAlXCI7XG5cdFx0cGl4ZWxCb3hTdHlsZXNWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLnJpZ2h0ICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0XHQvLyBEZXRlY3QgbWlzcmVwb3J0aW5nIG9mIGNvbnRlbnQgZGltZW5zaW9ucyBmb3IgYm94LXNpemluZzpib3JkZXItYm94IGVsZW1lbnRzXG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLndpZHRoICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG92ZXJmbG93OnNjcm9sbCBzY3Jld2luZXNzIChnaC0zNjk5KVxuXHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTY0XG5cdFx0Ly8gRG9uJ3QgZ2V0IHRyaWNrZWQgd2hlbiB6b29tIGFmZmVjdHMgb2Zmc2V0V2lkdGggKGdoLTQwMjkpXG5cdFx0ZGl2LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuXHRcdHNjcm9sbGJveFNpemVWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdi5vZmZzZXRXaWR0aCAvIDMgKSA9PT0gMTI7XG5cblx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0Ly8gTnVsbGlmeSB0aGUgZGl2IHNvIGl0IHdvdWxkbid0IGJlIHN0b3JlZCBpbiB0aGUgbWVtb3J5IGFuZFxuXHRcdC8vIGl0IHdpbGwgYWxzbyBiZSBhIHNpZ24gdGhhdCBjaGVja3MgYWxyZWFkeSBwZXJmb3JtZWRcblx0XHRkaXYgPSBudWxsO1xuXHR9XG5cblx0ZnVuY3Rpb24gcm91bmRQaXhlbE1lYXN1cmVzKCBtZWFzdXJlICkge1xuXHRcdHJldHVybiBNYXRoLnJvdW5kKCBwYXJzZUZsb2F0KCBtZWFzdXJlICkgKTtcblx0fVxuXG5cdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCwgc2Nyb2xsYm94U2l6ZVZhbCwgcGl4ZWxCb3hTdHlsZXNWYWwsXG5cdFx0cmVsaWFibGVUckRpbWVuc2lvbnNWYWwsIHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxCb3hTdHlsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbEJveFN0eWxlc1ZhbDtcblx0XHR9LFxuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH0sXG5cdFx0c2Nyb2xsYm94U2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHNjcm9sbGJveFNpemVWYWw7XG5cdFx0fSxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHQvLyBJRS9FZGdlIG1pc3JlcG9ydCBgZ2V0Q29tcHV0ZWRTdHlsZWAgb2YgdGFibGUgcm93cyB3aXRoIHdpZHRoL2hlaWdodFxuXHRcdC8vIHNldCBpbiBDU1Mgd2hpbGUgYG9mZnNldCpgIHByb3BlcnRpZXMgcmVwb3J0IGNvcnJlY3QgdmFsdWVzLlxuXHRcdC8vIEJlaGF2aW9yIGluIElFIDkgaXMgbW9yZSBzdWJ0bGUgdGhhbiBpbiBuZXdlciB2ZXJzaW9ucyAmIGl0IHBhc3Nlc1xuXHRcdC8vIHNvbWUgdmVyc2lvbnMgb2YgdGhpcyB0ZXN0OyBtYWtlIHN1cmUgbm90IHRvIG1ha2UgaXQgcGFzcyB0aGVyZSFcblx0XHRyZWxpYWJsZVRyRGltZW5zaW9uczogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdGFibGUsIHRyLCB0ckNoaWxkLCB0clN0eWxlO1xuXHRcdFx0aWYgKCByZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR0YWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwidGFibGVcIiApO1xuXHRcdFx0XHR0ciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwidHJcIiApO1xuXHRcdFx0XHR0ckNoaWxkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdFx0XHRcdHRhYmxlLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHhcIjtcblx0XHRcdFx0dHIuc3R5bGUuaGVpZ2h0ID0gXCIxcHhcIjtcblx0XHRcdFx0dHJDaGlsZC5zdHlsZS5oZWlnaHQgPSBcIjlweFwiO1xuXG5cdFx0XHRcdGRvY3VtZW50RWxlbWVudFxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdGFibGUgKVxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdHIgKVxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdHJDaGlsZCApO1xuXG5cdFx0XHRcdHRyU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggdHIgKTtcblx0XHRcdFx0cmVsaWFibGVUckRpbWVuc2lvbnNWYWwgPSBwYXJzZUludCggdHJTdHlsZS5oZWlnaHQgKSA+IDM7XG5cblx0XHRcdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCB0YWJsZSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsO1xuXHRcdH1cblx0fSApO1xufSApKCk7XG5cblxuZnVuY3Rpb24gY3VyQ1NTKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcblx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNTErXG5cdFx0Ly8gUmV0cmlldmluZyBzdHlsZSBiZWZvcmUgY29tcHV0ZWQgc29tZWhvd1xuXHRcdC8vIGZpeGVzIGFuIGlzc3VlIHdpdGggZ2V0dGluZyB3cm9uZyB2YWx1ZXNcblx0XHQvLyBvbiBkZXRhY2hlZCBlbGVtZW50c1xuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXG5cdC8vIGdldFByb3BlcnR5VmFsdWUgaXMgbmVlZGVkIGZvcjpcblx0Ly8gICAuY3NzKCdmaWx0ZXInKSAoSUUgOSBvbmx5LCAjMTI1MzcpXG5cdC8vICAgLmNzcygnLS1jdXN0b21Qcm9wZXJ0eSkgKCMzMTQ0KVxuXHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdHJldCA9IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdO1xuXG5cdFx0aWYgKCByZXQgPT09IFwiXCIgJiYgIWlzQXR0YWNoZWQoIGVsZW0gKSApIHtcblx0XHRcdHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEEgdHJpYnV0ZSB0byB0aGUgXCJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzXCJcblx0XHQvLyBBbmRyb2lkIEJyb3dzZXIgcmV0dXJucyBwZXJjZW50YWdlIGZvciBzb21lIHZhbHVlcyxcblx0XHQvLyBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzLlxuXHRcdC8vIFRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzpcblx0XHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI3Jlc29sdmVkLXZhbHVlc1xuXHRcdGlmICggIXN1cHBvcnQucGl4ZWxCb3hTdHlsZXMoKSAmJiBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcmJveFN0eWxlLnRlc3QoIG5hbWUgKSApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuXHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcblx0XHRcdG1pbldpZHRoID0gc3R5bGUubWluV2lkdGg7XG5cdFx0XHRtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xuXG5cdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XG5cdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcblxuXHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuXHRcdFx0c3R5bGUud2lkdGggPSB3aWR0aDtcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XG5cdFx0XHRzdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA/XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cblx0XHRyZXQgKyBcIlwiIDpcblx0XHRyZXQ7XG59XG5cblxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xuXG5cdC8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggY29uZGl0aW9uRm4oKSApIHtcblxuXHRcdFx0XHQvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWVcblx0XHRcdFx0Ly8gdG8gbWlzc2luZyBkZXBlbmRlbmN5KSwgcmVtb3ZlIGl0LlxuXHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSG9vayBuZWVkZWQ7IHJlZGVmaW5lIGl0IHNvIHRoYXQgdGhlIHN1cHBvcnQgdGVzdCBpcyBub3QgZXhlY3V0ZWQgYWdhaW4uXG5cdFx0XHRyZXR1cm4gKCB0aGlzLmdldCA9IGhvb2tGbiApLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9XG5cdH07XG59XG5cblxudmFyIGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCIgXSxcblx0ZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKS5zdHlsZSxcblx0dmVuZG9yUHJvcHMgPSB7fTtcblxuLy8gUmV0dXJuIGEgdmVuZG9yLXByZWZpeGVkIHByb3BlcnR5IG9yIHVuZGVmaW5lZFxuZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB7XG5cblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuXHR2YXIgY2FwTmFtZSA9IG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApLFxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xuXHRcdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9XG59XG5cbi8vIFJldHVybiBhIHBvdGVudGlhbGx5LW1hcHBlZCBqUXVlcnkuY3NzUHJvcHMgb3IgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XG5mdW5jdGlvbiBmaW5hbFByb3BOYW1lKCBuYW1lICkge1xuXHR2YXIgZmluYWwgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXSB8fCB2ZW5kb3JQcm9wc1sgbmFtZSBdO1xuXG5cdGlmICggZmluYWwgKSB7XG5cdFx0cmV0dXJuIGZpbmFsO1xuXHR9XG5cdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdHJldHVybiBuYW1lO1xuXHR9XG5cdHJldHVybiB2ZW5kb3JQcm9wc1sgbmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB8fCBuYW1lO1xufVxuXG5cbnZhclxuXG5cdC8vIFN3YXBwYWJsZSBpZiBkaXNwbGF5IGlzIG5vbmUgb3Igc3RhcnRzIHdpdGggdGFibGVcblx0Ly8gZXhjZXB0IFwidGFibGVcIiwgXCJ0YWJsZS1jZWxsXCIsIG9yIFwidGFibGUtY2FwdGlvblwiXG5cdC8vIFNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvZGlzcGxheVxuXHRyZGlzcGxheXN3YXAgPSAvXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sXG5cdHJjdXN0b21Qcm9wID0gL14tLS8sXG5cdGNzc1Nob3cgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxuXHRjc3NOb3JtYWxUcmFuc2Zvcm0gPSB7XG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXG5cdFx0Zm9udFdlaWdodDogXCI0MDBcIlxuXHR9O1xuXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggX2VsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcblxuXHQvLyBBbnkgcmVsYXRpdmUgKCsvLSkgdmFsdWVzIGhhdmUgYWxyZWFkeSBiZWVuXG5cdC8vIG5vcm1hbGl6ZWQgYXQgdGhpcyBwb2ludFxuXHR2YXIgbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKTtcblx0cmV0dXJuIG1hdGNoZXMgP1xuXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMiBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApIDpcblx0XHR2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYm94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIGJveCwgaXNCb3JkZXJCb3gsIHN0eWxlcywgY29tcHV0ZWRWYWwgKSB7XG5cdHZhciBpID0gZGltZW5zaW9uID09PSBcIndpZHRoXCIgPyAxIDogMCxcblx0XHRleHRyYSA9IDAsXG5cdFx0ZGVsdGEgPSAwO1xuXG5cdC8vIEFkanVzdG1lbnQgbWF5IG5vdCBiZSBuZWNlc3Nhcnlcblx0aWYgKCBib3ggPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSApIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcblxuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpblxuXHRcdGlmICggYm94ID09PSBcIm1hcmdpblwiICkge1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgYm94ICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBjb250ZW50LWJveCwgd2UncmUgc2Vla2luZyBcInBhZGRpbmdcIiBvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCJcblx0XHRpZiAoICFpc0JvcmRlckJveCApIHtcblxuXHRcdFx0Ly8gQWRkIHBhZGRpbmdcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBGb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiLCBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJwYWRkaW5nXCIgKSB7XG5cdFx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEJ1dCBzdGlsbCBrZWVwIHRyYWNrIG9mIGl0IG90aGVyd2lzZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZXh0cmEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBib3JkZXItYm94IChjb250ZW50ICsgcGFkZGluZyArIGJvcmRlciksIHdlJ3JlIHNlZWtpbmcgXCJjb250ZW50XCIgb3Jcblx0XHQvLyBcInBhZGRpbmdcIiBvciBcIm1hcmdpblwiXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiLCBzdWJ0cmFjdCBwYWRkaW5nXG5cdFx0XHRpZiAoIGJveCA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIgb3IgXCJwYWRkaW5nXCIsIHN1YnRyYWN0IGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWNjb3VudCBmb3IgcG9zaXRpdmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlciB3aGVuIHJlcXVlc3RlZCBieSBwcm92aWRpbmcgY29tcHV0ZWRWYWxcblx0aWYgKCAhaXNCb3JkZXJCb3ggJiYgY29tcHV0ZWRWYWwgPj0gMCApIHtcblxuXHRcdC8vIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyBhIHJvdW5kZWQgc3VtIG9mIGNvbnRlbnQsIHBhZGRpbmcsIHNjcm9sbCBndXR0ZXIsIGFuZCBib3JkZXJcblx0XHQvLyBBc3N1bWluZyBpbnRlZ2VyIHNjcm9sbCBndXR0ZXIsIHN1YnRyYWN0IHRoZSByZXN0IGFuZCByb3VuZCBkb3duXG5cdFx0ZGVsdGEgKz0gTWF0aC5tYXgoIDAsIE1hdGguY2VpbChcblx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRjb21wdXRlZFZhbCAtXG5cdFx0XHRkZWx0YSAtXG5cdFx0XHRleHRyYSAtXG5cdFx0XHQwLjVcblxuXHRcdC8vIElmIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyB1bmtub3duLCB0aGVuIHdlIGNhbid0IGRldGVybWluZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyXG5cdFx0Ly8gVXNlIGFuIGV4cGxpY2l0IHplcm8gdG8gYXZvaWQgTmFOIChnaC0zOTY0KVxuXHRcdCkgKSB8fCAwO1xuXHR9XG5cblx0cmV0dXJuIGRlbHRhO1xufVxuXG5mdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICkge1xuXG5cdC8vIFN0YXJ0IHdpdGggY29tcHV0ZWQgc3R5bGVcblx0dmFyIHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtNDMyMikuXG5cdFx0Ly8gRmFrZSBjb250ZW50LWJveCB1bnRpbCB3ZSBrbm93IGl0J3MgbmVlZGVkIHRvIGtub3cgdGhlIHRydWUgdmFsdWUuXG5cdFx0Ym94U2l6aW5nTmVlZGVkID0gIXN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCBleHRyYSxcblx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3gsXG5cblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIGRpbWVuc2lvbiwgc3R5bGVzICksXG5cdFx0b2Zmc2V0UHJvcCA9IFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICk7XG5cblx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdC8vIFJldHVybiBhIGNvbmZvdW5kaW5nIG5vbi1waXhlbCB2YWx1ZSBvciBmZWlnbiBpZ25vcmFuY2UsIGFzIGFwcHJvcHJpYXRlLlxuXHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRpZiAoICFleHRyYSApIHtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXHRcdHZhbCA9IFwiYXV0b1wiO1xuXHR9XG5cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBVc2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciB3aGVuIGJveCBzaXppbmcgaXMgdW5yZWxpYWJsZS5cblx0Ly8gSW4gdGhvc2UgY2FzZXMsIHRoZSBjb21wdXRlZCB2YWx1ZSBjYW4gYmUgdHJ1c3RlZCB0byBiZSBib3JkZXItYm94LlxuXHRpZiAoICggIXN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSAmJiBpc0JvcmRlckJveCB8fFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTAgLSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHQvLyBJRS9FZGdlIG1pc3JlcG9ydCBgZ2V0Q29tcHV0ZWRTdHlsZWAgb2YgdGFibGUgcm93cyB3aXRoIHdpZHRoL2hlaWdodFxuXHRcdC8vIHNldCBpbiBDU1Mgd2hpbGUgYG9mZnNldCpgIHByb3BlcnRpZXMgcmVwb3J0IGNvcnJlY3QgdmFsdWVzLlxuXHRcdC8vIEludGVyZXN0aW5nbHksIGluIHNvbWUgY2FzZXMgSUUgOSBkb2Vzbid0IHN1ZmZlciBmcm9tIHRoaXMgaXNzdWUuXG5cdFx0IXN1cHBvcnQucmVsaWFibGVUckRpbWVuc2lvbnMoKSAmJiBub2RlTmFtZSggZWxlbSwgXCJ0clwiICkgfHxcblxuXHRcdC8vIEZhbGwgYmFjayB0byBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgd2hlbiB2YWx1ZSBpcyBcImF1dG9cIlxuXHRcdC8vIFRoaXMgaGFwcGVucyBmb3IgaW5saW5lIGVsZW1lbnRzIHdpdGggbm8gZXhwbGljaXQgc2V0dGluZyAoZ2gtMzU3MSlcblx0XHR2YWwgPT09IFwiYXV0b1wiIHx8XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIC0gNC4zIG9ubHlcblx0XHQvLyBBbHNvIHVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIG1pc3JlcG9ydGVkIGlubGluZSBkaW1lbnNpb25zIChnaC0zNjAyKVxuXHRcdCFwYXJzZUZsb2F0KCB2YWwgKSAmJiBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImlubGluZVwiICkgJiZcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGUgZWxlbWVudCBpcyB2aXNpYmxlICYgY29ubmVjdGVkXG5cdFx0ZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcblxuXHRcdC8vIFdoZXJlIGF2YWlsYWJsZSwgb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGFwcHJveGltYXRlIGJvcmRlciBib3ggZGltZW5zaW9ucy5cblx0XHQvLyBXaGVyZSBub3QgYXZhaWxhYmxlIChlLmcuLCBTVkcpLCBhc3N1bWUgdW5yZWxpYWJsZSBib3gtc2l6aW5nIGFuZCBpbnRlcnByZXQgdGhlXG5cdFx0Ly8gcmV0cmlldmVkIHZhbHVlIGFzIGEgY29udGVudCBib3ggZGltZW5zaW9uLlxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBvZmZzZXRQcm9wIGluIGVsZW07XG5cdFx0aWYgKCB2YWx1ZUlzQm9yZGVyQm94ICkge1xuXHRcdFx0dmFsID0gZWxlbVsgb2Zmc2V0UHJvcCBdO1xuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBcIlwiIGFuZCBhdXRvXG5cdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cblx0Ly8gQWRqdXN0IGZvciB0aGUgZWxlbWVudCdzIGJveCBtb2RlbFxuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdGVsZW0sXG5cdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzLFxuXG5cdFx0XHQvLyBQcm92aWRlIHRoZSBjdXJyZW50IGNvbXB1dGVkIHNpemUgdG8gcmVxdWVzdCBzY3JvbGwgZ3V0dGVyIGNhbGN1bGF0aW9uIChnaC0zNTg5KVxuXHRcdFx0dmFsXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxuXHRjc3NIb29rczoge1xuXHRcdG9wYWNpdHk6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xuXHRjc3NOdW1iZXI6IHtcblx0XHRcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IHRydWUsXG5cdFx0XCJjb2x1bW5Db3VudFwiOiB0cnVlLFxuXHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcImZsZXhHcm93XCI6IHRydWUsXG5cdFx0XCJmbGV4U2hyaW5rXCI6IHRydWUsXG5cdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXG5cdFx0XCJncmlkQXJlYVwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtblwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtbkVuZFwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtblN0YXJ0XCI6IHRydWUsXG5cdFx0XCJncmlkUm93XCI6IHRydWUsXG5cdFx0XCJncmlkUm93RW5kXCI6IHRydWUsXG5cdFx0XCJncmlkUm93U3RhcnRcIjogdHJ1ZSxcblx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcblx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcIm9yZGVyXCI6IHRydWUsXG5cdFx0XCJvcnBoYW5zXCI6IHRydWUsXG5cdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcblx0XHRcInpJbmRleFwiOiB0cnVlLFxuXHRcdFwiem9vbVwiOiB0cnVlXG5cdH0sXG5cblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXG5cdGNzc1Byb3BzOiB7fSxcblxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcblxuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIHF1ZXJ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdC8vIFRoZSBpc0N1c3RvbVByb3AgY2hlY2sgY2FuIGJlIHJlbW92ZWQgaW4galF1ZXJ5IDQuMCB3aGVuIHdlIG9ubHkgYXV0by1hcHBlbmRcblx0XHRcdC8vIFwicHhcIiB0byBhIGZldyBoYXJkY29kZWQgdmFsdWVzLlxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICYmICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdHZhbHVlICs9IHJldCAmJiByZXRbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGJhY2tncm91bmQtKiBwcm9wcyBhZmZlY3Qgb3JpZ2luYWwgY2xvbmUncyB2YWx1ZXNcblx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fFxuXHRcdFx0XHQoIHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0aWYgKCBpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdFx0c3R5bGUuc2V0UHJvcGVydHkoIG5hbWUsIHZhbHVlICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XG5cdFx0XHRyZXR1cm4gc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cdH0sXG5cblx0Y3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEsIHN0eWxlcyApIHtcblx0XHR2YXIgdmFsLCBudW0sIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIG1vZGlmeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgaXNGaW5pdGUoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbDtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIF9pLCBkaW1lbnNpb24gKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgZGltZW5zaW9uIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggfHwgIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKSA/XG5cdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdFx0XHQvLyBPbmx5IHJlYWQgc3R5bGVzLnBvc2l0aW9uIGlmIHRoZSB0ZXN0IGhhcyBhIGNoYW5jZSB0byBmYWlsXG5cdFx0XHRcdC8vIHRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3cuXG5cdFx0XHRcdHNjcm9sbGJveFNpemVCdWdneSA9ICFzdXBwb3J0LnNjcm9sbGJveFNpemUoKSAmJlxuXHRcdFx0XHRcdHN0eWxlcy5wb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiLFxuXG5cdFx0XHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTM5OTEpXG5cdFx0XHRcdGJveFNpemluZ05lZWRlZCA9IHNjcm9sbGJveFNpemVCdWdneSB8fCBleHRyYSxcblx0XHRcdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhID9cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0XHRpc0JvcmRlckJveCxcblx0XHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHRcdCkgOlxuXHRcdFx0XHRcdDA7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHVucmVsaWFibGUgYm9yZGVyLWJveCBkaW1lbnNpb25zIGJ5IGNvbXBhcmluZyBvZmZzZXQqIHRvIGNvbXB1dGVkIGFuZFxuXHRcdFx0Ly8gZmFraW5nIGEgY29udGVudC1ib3ggdG8gZ2V0IGJvcmRlciBhbmQgcGFkZGluZyAoZ2gtMzY5OSlcblx0XHRcdGlmICggaXNCb3JkZXJCb3ggJiYgc2Nyb2xsYm94U2l6ZUJ1Z2d5ICkge1xuXHRcdFx0XHRzdWJ0cmFjdCAtPSBNYXRoLmNlaWwoXG5cdFx0XHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdFx0XHRwYXJzZUZsb2F0KCBzdHlsZXNbIGRpbWVuc2lvbiBdICkgLVxuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBcImJvcmRlclwiLCBmYWxzZSwgc3R5bGVzICkgLVxuXHRcdFx0XHRcdDAuNVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIGRpbWVuc2lvbiBdID0gdmFsdWU7XG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgZGltZW5zaW9uICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCBwcmVmaXggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdIHx8XG5cdFx0XHRcdFx0dHdlZW4uZWxlbS5zdHlsZVsgZmluYWxQcm9wTmFtZSggdHdlZW4ucHJvcCApIF0gIT0gbnVsbCApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9LFxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBjb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgaW5Qcm9ncmVzcyxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJydW4gPSAvcXVldWVIb29rcyQvO1xuXG5mdW5jdGlvbiBzY2hlZHVsZSgpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdGlmICggZG9jdW1lbnQuaGlkZGVuID09PSBmYWxzZSAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICkge1xuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggc2NoZWR1bGUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHNjaGVkdWxlLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0XHR9XG5cblx0XHRqUXVlcnkuZngudGljaygpO1xuXHR9XG59XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0gKTtcblx0cmV0dXJuICggZnhOb3cgPSBEYXRlLm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgaG9va3MsIG9sZGZpcmUsIHByb3BUd2VlbiwgcmVzdG9yZURpc3BsYXksIGRpc3BsYXksXG5cdFx0aXNCb3ggPSBcIndpZHRoXCIgaW4gcHJvcHMgfHwgXCJoZWlnaHRcIiBpbiBwcm9wcyxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBRdWV1ZS1za2lwcGluZyBhbmltYXRpb25zIGhpamFjayB0aGUgZnggaG9va3Ncblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMudGVzdCggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJldGVuZCB0byBiZSBoaWRkZW4gaWYgdGhpcyBpcyBhIFwic2hvd1wiIGFuZFxuXHRcdFx0XHQvLyB0aGVyZSBpcyBzdGlsbCBkYXRhIGZyb20gYSBzdG9wcGVkIHNob3cvaGlkZVxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBJZ25vcmUgYWxsIG90aGVyIG5vLW9wIHNob3cvaGlkZSBkYXRhXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wcyApO1xuXHRpZiAoICFwcm9wVHdlZW4gJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZXN0cmljdCBcIm92ZXJmbG93XCIgYW5kIFwiZGlzcGxheVwiIHN0eWxlcyBkdXJpbmcgYm94IGFuaW1hdGlvbnNcblx0aWYgKCBpc0JveCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QgaW5mZXIgdGhlIHNob3J0aGFuZFxuXHRcdC8vIGZyb20gaWRlbnRpY2FsbHktdmFsdWVkIG92ZXJmbG93WCBhbmQgb3ZlcmZsb3dZIGFuZCBFZGdlIGp1c3QgbWlycm9yc1xuXHRcdC8vIHRoZSBvdmVyZmxvd1ggdmFsdWUgdGhlcmUuXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBJZGVudGlmeSBhIGRpc3BsYXkgdHlwZSwgcHJlZmVycmluZyBvbGQgc2hvdy9oaWRlIGRhdGEgb3ZlciB0aGUgQ1NTIGNhc2NhZGVcblx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFTaG93ICYmIGRhdGFTaG93LmRpc3BsYXk7XG5cdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0fVxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ICkge1xuXHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEdldCBub25lbXB0eSB2YWx1ZShzKSBieSB0ZW1wb3JhcmlseSBmb3JjaW5nIHZpc2liaWxpdHlcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5IHx8IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQW5pbWF0ZSBpbmxpbmUgZWxlbWVudHMgYXMgaW5saW5lLWJsb2NrXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXG5cdFx0XHRcdC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWUgYXQgdGhlIGVuZCBvZiBwdXJlIHNob3cvaGlkZSBhbmltYXRpb25zXG5cdFx0XHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgPyBcIlwiIDogZGlzcGxheTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBJbXBsZW1lbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0cHJvcFR3ZWVuID0gZmFsc2U7XG5cdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblxuXHRcdC8vIEdlbmVyYWwgc2hvdy9oaWRlIHNldHVwIGZvciB0aGlzIGVsZW1lbnQgYW5pbWF0aW9uXG5cdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdG9yZSBoaWRkZW4vdmlzaWJsZSBmb3IgdG9nZ2xlIHNvIGAuc3RvcCgpLnRvZ2dsZSgpYCBcInJldmVyc2VzXCJcblx0XHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTaG93IGVsZW1lbnRzIGJlZm9yZSBhbmltYXRpbmcgdGhlbVxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0Ly8gSWYgdGhlcmUncyBtb3JlIHRvIGRvLCB5aWVsZFxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgd2FzIGFuIGVtcHR5IGFuaW1hdGlvbiwgc3ludGhlc2l6ZSBhIGZpbmFsIHByb2dyZXNzIG5vdGlmaWNhdGlvblxuXHRcdFx0aWYgKCAhbGVuZ3RoICkge1xuXHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc29sdmUgdGhlIGFuaW1hdGlvbiBhbmQgcmVwb3J0IGl0cyBjb25jbHVzaW9uXG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0cmVzdWx0LnN0b3AuYmluZCggcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0Ly8gQXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0YW5pbWF0aW9uXG5cdFx0LnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHRyZXR1cm4gYW5pbWF0aW9uO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSA9IEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmXG5cdGlmICggalF1ZXJ5LmZ4Lm9mZiApIHtcblx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXG5cdH0gZWxzZSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cblx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKCB7XG5cdHNsaWRlRG93bjogZ2VuRngoIFwic2hvd1wiICksXG5cdHNsaWRlVXA6IGdlbkZ4KCBcImhpZGVcIiApLFxuXHRzbGlkZVRvZ2dsZTogZ2VuRngoIFwidG9nZ2xlXCIgKSxcblx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS50aW1lcnMgPSBbXTtcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XG5cdHZhciB0aW1lcixcblx0XHRpID0gMCxcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xuXG5cdGZ4Tm93ID0gRGF0ZS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblxuXHRcdC8vIFJ1biB0aGUgdGltZXIgYW5kIHNhZmVseSByZW1vdmUgaXQgd2hlbiBkb25lIChhbGxvd2luZyBmb3IgZXh0ZXJuYWwgcmVtb3ZhbClcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRqUXVlcnkuZnguc3RhcnQoKTtcbn07XG5cbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpblByb2dyZXNzID0gdHJ1ZTtcblx0c2NoZWR1bGUoKTtcbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdGluUHJvZ3Jlc3MgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cblx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRfZGVmYXVsdDogNDAwXG59O1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbi8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9ICk7XG59O1xuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMyBvbmx5XG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSApKCk7XG5cblxudmFyIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIEF0dHJpYnV0ZSBob29rcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgbG93ZXJjYXNlIHZlcnNpb25cblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IHVuZGVmaW5lZCApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdHZhciBuYW1lLFxuXHRcdFx0aSA9IDAsXG5cblx0XHRcdC8vIEF0dHJpYnV0ZSBuYW1lcyBjYW4gY29udGFpbiBub24tSFRNTCB3aGl0ZXNwYWNlIGNoYXJhY3RlcnNcblx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuYm9vbEhvb2sgPSB7XG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcblxualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgcmV0LCBoYW5kbGUsXG5cdFx0XHRsb3dlcmNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cblx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcblx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXTtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IHJldDtcblx0XHRcdHJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID9cblx0XHRcdFx0bG93ZXJjYXNlTmFtZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSBoYW5kbGU7XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH07XG59ICk7XG5cblxuXG5cbnZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmNsaWNrYWJsZSA9IC9eKD86YXxhcmVhKSQvaTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXG5cdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuICggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdO1xuXHR9LFxuXG5cdHByb3BIb29rczoge1xuXHRcdHRhYkluZGV4OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHRcdFx0Ly8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlXG5cdFx0XHRcdC8vIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldFxuXHRcdFx0XHQvLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxNDExMTYyMzMzNDcvaHR0cDovL2ZsdWlkcHJvamVjdC5vcmcvYmxvZy8yMDA4LzAxLzA5L2dldHRpbmctc2V0dGluZy1hbmQtcmVtb3ZpbmctdGFiaW5kZXgtdmFsdWVzLXdpdGgtamF2YXNjcmlwdC9cblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsKCMxMjA3Milcblx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0YWJpbmRleFwiICk7XG5cblx0XHRcdFx0aWYgKCB0YWJpbmRleCApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGFyc2VJbnQoIHRhYmluZGV4LCAxMCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8XG5cdFx0XHRcdFx0cmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiZcblx0XHRcdFx0XHRlbGVtLmhyZWZcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fVxufSApO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcbi8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxuLy8gZm9yY2VzIHRoZSBicm93c2VyIHRvIHJlc3BlY3Qgc2V0dGluZyBzZWxlY3RlZFxuLy8gb24gdGhlIG9wdGlvblxuLy8gVGhlIGdldHRlciBlbnN1cmVzIGEgZGVmYXVsdCBvcHRpb24gaXMgc2VsZWN0ZWRcbi8vIHdoZW4gaW4gYW4gb3B0Z3JvdXBcbi8vIGVzbGludCBydWxlIFwibm8tdW51c2VkLWV4cHJlc3Npb25zXCIgaXMgZGlzYWJsZWQgZm9yIHRoaXMgY29kZVxuLy8gc2luY2UgaXQgY29uc2lkZXJzIHN1Y2ggYWNjZXNzaW9ucyBub29wXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0cGFyZW50LnNlbGVjdGVkSW5kZXg7XG5cblx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaCggW1xuXHRcInRhYkluZGV4XCIsXG5cdFwicmVhZE9ubHlcIixcblx0XCJtYXhMZW5ndGhcIixcblx0XCJjZWxsU3BhY2luZ1wiLFxuXHRcImNlbGxQYWRkaW5nXCIsXG5cdFwicm93U3BhblwiLFxuXHRcImNvbFNwYW5cIixcblx0XCJ1c2VNYXBcIixcblx0XCJmcmFtZUJvcmRlclwiLFxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXG5dLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcbn0gKTtcblxuXG5cblxuXHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZSBhY2NvcmRpbmcgdG8gSFRNTCBzcGVjXG5cdC8vIGh0dHBzOi8vaW5mcmEuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2UtYXNjaWktd2hpdGVzcGFjZVxuXHRmdW5jdGlvbiBzdHJpcEFuZENvbGxhcHNlKCB2YWx1ZSApIHtcblx0XHR2YXIgdG9rZW5zID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0XHRyZXR1cm4gdG9rZW5zLmpvaW4oIFwiIFwiICk7XG5cdH1cblxuXG5mdW5jdGlvbiBnZXRDbGFzcyggZWxlbSApIHtcblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlICYmIGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fCBcIlwiO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VzVG9BcnJheSggdmFsdWUgKSB7XG5cdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdH1cblx0cmV0dXJuIFtdO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYXR0ciggXCJjbGFzc1wiLCBcIlwiICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NlcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc2VzLmxlbmd0aCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZSxcblx0XHRcdGlzVmFsaWRWYWx1ZSA9IHR5cGUgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiBpc1ZhbGlkVmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoXG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggdGhpcywgaSwgZ2V0Q2xhc3MoIHRoaXMgKSwgc3RhdGVWYWwgKSxcblx0XHRcdFx0XHRzdGF0ZVZhbFxuXHRcdFx0XHQpO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGNsYXNzTmFtZSwgaSwgc2VsZiwgY2xhc3NOYW1lcztcblxuXHRcdFx0aWYgKCBpc1ZhbGlkVmFsdWUgKSB7XG5cblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcblx0XHRcdFx0Y2xhc3NOYW1lcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0XHRcdHdoaWxlICggKCBjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGdldENsYXNzKCB0aGlzICk7XG5cdFx0XHRcdGlmICggY2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgY2xhc3NOYW1lIGlmIHNldFxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGNsYXNzTmFtZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHRpZiAoIHRoaXMuc2V0QXR0cmlidXRlICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID9cblx0XHRcdFx0XHRcdFwiXCIgOlxuXHRcdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSwgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Y2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiO1xuXHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggZ2V0Q2xhc3MoIGVsZW0gKSApICsgXCIgXCIgKS5pbmRleE9mKCBjbGFzc05hbWUgKSA+IC0xICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgcnJldHVybiA9IC9cXHIvZztcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCwgdmFsdWVJc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fFxuXHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKCBob29rcyAmJlxuXHRcdFx0XHRcdFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0aWYgKCB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsICs9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xuXHRcdFx0XHRcdHZhbCA6XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEgb25seVxuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbiwgaSxcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPCAwICkge1xuXHRcdFx0XHRcdGkgPSBtYXg7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpID0gb25lID8gaW5kZXggOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0IW9wdGlvbi5kaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuXHRcdFx0XHRcdFx0XHRcdCFub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduICovXG5cblx0XHRcdFx0XHRpZiAoIG9wdGlvbi5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+IC0xXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24gKi9cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KCBlbGVtICkudmFsKCksIHZhbHVlICkgPiAtMSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxuc3VwcG9ydC5mb2N1c2luID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XG5cblxudmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLFxuXHRzdG9wUHJvcGFnYXRpb25DYWxsYmFjayA9IGZ1bmN0aW9uKCBlICkge1xuXHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH07XG5cbmpRdWVyeS5leHRlbmQoIGpRdWVyeS5ldmVudCwge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCwgbGFzdEVsZW1lbnQsXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcblxuXHRcdGN1ciA9IGxhc3RFbGVtZW50ID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUuaW5kZXhPZiggXCIuXCIgKSA+IC0xICkge1xuXG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdCggXCIuXCIgKTtcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHR9XG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKCBcIjpcIiApIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRldmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcblxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiICk7XG5cdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRudWxsO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xuXHRcdFx0WyBldmVudCBdIDpcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggY3VyID0gZXZlbnRQYXRoWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0bGFzdEVsZW1lbnQgPSBjdXI7XG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKFxuXHRcdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwgT2JqZWN0LmNyZWF0ZSggbnVsbCApXG5cdFx0XHRcdClbIGV2ZW50LnR5cGUgXSAmJlxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBhY2NlcHREYXRhKCBjdXIgKSApIHtcblx0XHRcdFx0ZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZXZlbnQudHlwZSA9IHR5cGU7XG5cblx0XHQvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblxuXHRcdFx0aWYgKCAoICFzcGVjaWFsLl9kZWZhdWx0IHx8XG5cdFx0XHRcdHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSApICYmXG5cdFx0XHRcdGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxuXHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXG5cdFx0XHRcdGlmICggb250eXBlICYmIGlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxuXHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gdG1wO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXG5cdC8vIFVzZWQgb25seSBmb3IgYGZvY3VzKGluIHwgb3V0KWAgZXZlbnRzXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XG5cdH1cblxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0gKTtcblx0fSxcblx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBlbGVtID0gdGhpc1sgMCBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00NFxuLy8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02ODc3ODdcbi8vXG4vLyBTdXBwb3J0OiBDaHJvbWUgPD00OCAtIDQ5LCBTYWZhcmkgPD05LjAgLSA5LjFcbi8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxuLy8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xuaWYgKCAhc3VwcG9ydC5mb2N1c2luICkge1xuXHRqUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXG5cdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcblx0XHR2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICkgKTtcblx0XHR9O1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIEhhbmRsZTogcmVndWxhciBub2RlcyAodmlhIGB0aGlzLm93bmVyRG9jdW1lbnRgKSwgd2luZG93XG5cdFx0XHRcdC8vICh2aWEgYHRoaXMuZG9jdW1lbnRgKSAmIGRvY3VtZW50ICh2aWEgYHRoaXNgKS5cblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLmRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0sXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcy5kb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZG9jLCBmaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG59XG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5cbnZhciBub25jZSA9IHsgZ3VpZDogRGF0ZS5ub3coKSB9O1xuXG52YXIgcnF1ZXJ5ID0gKCAvXFw/LyApO1xuXG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWw7XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBJRSB0aHJvd3Mgb24gcGFyc2VGcm9tU3RyaW5nIHdpdGggaW52YWxpZCBpbnB1dC5cblx0dHJ5IHtcblx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHR4bWwgPSB1bmRlZmluZWQ7XG5cdH1cblxuXHRpZiAoICF4bWwgfHwgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKS5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIGRhdGEgKTtcblx0fVxuXHRyZXR1cm4geG1sO1xufTtcblxuXG52YXJcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXG5cdHJDUkxGID0gL1xccj9cXG4vZyxcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcblx0dmFyIG5hbWU7XG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBvYmogKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKFxuXHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXG5cdFx0XHRcdFx0dixcblx0XHRcdFx0XHR0cmFkaXRpb25hbCxcblx0XHRcdFx0XHRhZGRcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIHRvVHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWVPckZ1bmN0aW9uICkge1xuXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHVzZSBpdHMgcmV0dXJuIHZhbHVlXG5cdFx0XHR2YXIgdmFsdWUgPSBpc0Z1bmN0aW9uKCB2YWx1ZU9yRnVuY3Rpb24gKSA/XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbigpIDpcblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uO1xuXG5cdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICtcblx0XHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG5cdFx0fTtcblxuXHRpZiAoIGEgPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gXCJcIjtcblx0fVxuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggQXJyYXkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XG5cdFx0fSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9IClcblx0XHQuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSApXG5cdFx0Lm1hcCggZnVuY3Rpb24oIF9pLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxudmFyXG5cdHIyMCA9IC8lMjAvZyxcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJhbnRpQ2FjaGUgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblxuXHQvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxuXG5cdC8vIEFuY2hvciB0YWcgZm9yIHBhcnNpbmcgdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvcmlnaW5BbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXHRvcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG5cbi8vIEJhc2UgXCJjb25zdHJ1Y3RvclwiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnRcbmZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkge1xuXG5cdC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gXCIqXCJcblx0cmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xuXHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XG5cdFx0fVxuXG5cdFx0dmFyIGRhdGFUeXBlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBmdW5jICkgKSB7XG5cblx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cblx0XHRcdHdoaWxlICggKCBkYXRhVHlwZSA9IGRhdGFUeXBlc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWyAwIF0gPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnVuc2hpZnQoIGZ1bmMgKTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuXHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG5cdFx0dmFyIHNlbGVjdGVkO1xuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblxuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgIzk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIga2V5LCBkZWVwLFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdGlmICggY3QgKSB7XG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1sgMCBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdH1cblxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdH1cbn1cblxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0Y29udmVydGVycyA9IHt9LFxuXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogSlNPTi5wYXJzZSxcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXG5cdFx0XHQvLyBVcmwgY2xlYW51cCB2YXJcblx0XHRcdHVybEFuY2hvcixcblxuXHRcdFx0Ly8gUmVxdWVzdCBzdGF0ZSAoYmVjb21lcyBmYWxzZSB1cG9uIHNlbmQgYW5kIHRydWUgdXBvbiBjb21wbGV0aW9uKVxuXHRcdFx0Y29tcGxldGVkLFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXG5cdFx0XHQvLyB1bmNhY2hlZCBwYXJ0IG9mIHRoZSB1cmxcblx0XHRcdHVuY2FjaGVkLFxuXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXG5cdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0anFYSFIgPSB7XG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSA9XG5cdFx0XHRcdFx0XHRcdFx0XHQoIHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSB8fCBbXSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5jb25jYXQoIG1hdGNoWyAyIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2guam9pbiggXCIsIFwiICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBjb21wbGV0ZWQgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdID1cblx0XHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHwgbmFtZTtcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrcyBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3Rcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKTtcblxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSAoIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gb24gYWNjZXNzaW5nIHRoZSBocmVmIHByb3BlcnR5IGlmIHVybCBpcyBtYWxmb3JtZWQsXG5cdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExIG9ubHlcblx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxuXHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcblxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggdG8gc2ltcGxpZnkgdXJsIG1hbmlwdWxhdGlvblxuXHRcdGNhY2hlVVJMID0gcy51cmwucmVwbGFjZSggcmhhc2gsIFwiXCIgKTtcblxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgaGFzaCBzbyB3ZSBjYW4gcHV0IGl0IGJhY2tcblx0XHRcdHVuY2FjaGVkID0gcy51cmwuc2xpY2UoIGNhY2hlVVJMLmxlbmd0aCApO1xuXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSBhbmQgc2hvdWxkIGJlIHByb2Nlc3NlZCwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRpZiAoIHMuZGF0YSAmJiAoIHMucHJvY2Vzc0RhdGEgfHwgdHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiApICkge1xuXHRcdFx0XHRjYWNoZVVSTCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhO1xuXG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKCByYW50aUNhY2hlLCBcIiQxXCIgKTtcblx0XHRcdFx0dW5jYWNoZWQgPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgKCBub25jZS5ndWlkKysgKSArXG5cdFx0XHRcdFx0dW5jYWNoZWQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFB1dCBoYXNoIGFuZCBhbnRpLWNhY2hlIG9uIHRoZSBVUkwgdGhhdCB3aWxsIGJlIHJlcXVlc3RlZCAoZ2gtMTczMilcblx0XHRcdHMudXJsID0gY2FjaGVVUkwgKyB1bmNhY2hlZDtcblxuXHRcdC8vIENoYW5nZSAnJTIwJyB0byAnKycgaWYgdGhpcyBpcyBlbmNvZGVkIGZvcm0gYm9keSBjb250ZW50IChnaC0yNjU4KVxuXHRcdH0gZWxzZSBpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmXG5cdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCApIHtcblx0XHRcdHMuZGF0YSA9IHMuZGF0YS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcblx0XHRcdFwiQWNjZXB0XCIsXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdID9cblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gK1xuXHRcdFx0XHRcdCggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxuXHRcdCk7XG5cblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmXG5cdFx0XHQoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IGNvbXBsZXRlZCApICkge1xuXG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Y29tcGxldGVEZWZlcnJlZC5hZGQoIHMuY29tcGxldGUgKTtcblx0XHRqcVhIUi5kb25lKCBzLnN1Y2Nlc3MgKTtcblx0XHRqcVhIUi5mYWlsKCBzLmVycm9yICk7XG5cblx0XHQvLyBHZXQgdHJhbnNwb3J0XG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcblxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhamF4U2VuZCwgc3RvcCB0aGVyZVxuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybiBqcVhIUjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqcVhIUi5hYm9ydCggXCJ0aW1lb3V0XCIgKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbXBsZXRlZCA9IGZhbHNlO1xuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIFJldGhyb3cgcG9zdC1jb21wbGV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBvdGhlcnMgYXMgcmVzdWx0c1xuXHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdC8vIElnbm9yZSByZXBlYXQgaW52b2NhdGlvbnNcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbXBsZXRlZCA9IHRydWU7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XG5cblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFVzZSBhIG5vb3AgY29udmVydGVyIGZvciBtaXNzaW5nIHNjcmlwdFxuXHRcdFx0aWYgKCAhaXNTdWNjZXNzICYmIGpRdWVyeS5pbkFycmF5KCBcInNjcmlwdFwiLCBzLmRhdGFUeXBlcyApID4gLTEgKSB7XG5cdFx0XHRcdHMuY29udmVydGVyc1sgXCJ0ZXh0IHNjcmlwdFwiIF0gPSBmdW5jdGlvbigpIHt9O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBfaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdHZhciBpO1xuXHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRpZiAoIGkudG9Mb3dlckNhc2UoKSA9PT0gXCJjb250ZW50LXR5cGVcIiApIHtcblx0XHRcdHMuY29udGVudFR5cGUgPSBzLmhlYWRlcnNbIGkgXSB8fCBcIlwiO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMsIGRvYyApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KCB7XG5cdFx0dXJsOiB1cmwsXG5cblx0XHQvLyBNYWtlIHRoaXMgZXhwbGljaXQsIHNpbmNlIHVzZXIgY2FuIG92ZXJyaWRlIHRoaXMgdGhyb3VnaCBhamF4U2V0dXAgKCMxMTI2NClcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdGNhY2hlOiB0cnVlLFxuXHRcdGFzeW5jOiBmYWxzZSxcblx0XHRnbG9iYWw6IGZhbHNlLFxuXG5cdFx0Ly8gT25seSBldmFsdWF0ZSB0aGUgcmVzcG9uc2UgaWYgaXQgaXMgc3VjY2Vzc2Z1bCAoZ2gtNDEyNilcblx0XHQvLyBkYXRhRmlsdGVyIGlzIG5vdCBpbnZva2VkIGZvciBmYWlsdXJlIHJlc3BvbnNlcywgc28gdXNpbmcgaXQgaW5zdGVhZFxuXHRcdC8vIG9mIHRoZSBkZWZhdWx0IGNvbnZlcnRlciBpcyBrbHVkZ3kgYnV0IGl0IHdvcmtzLlxuXHRcdGNvbnZlcnRlcnM6IHtcblx0XHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oKSB7fVxuXHRcdH0sXG5cdFx0ZGF0YUZpbHRlcjogZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHJlc3BvbnNlLCBvcHRpb25zLCBkb2MgKTtcblx0XHR9XG5cdH0gKTtcbn07XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR3cmFwQWxsOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgd3JhcDtcblxuXHRcdGlmICggdGhpc1sgMCBdICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRcdGh0bWwgPSBodG1sLmNhbGwoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxuXHRcdFx0d3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQgKS5lcSggMCApLmNsb25lKCB0cnVlICk7XG5cblx0XHRcdGlmICggdGhpc1sgMCBdLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHdyYXAuaW5zZXJ0QmVmb3JlKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0d3JhcC5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XG5cblx0XHRcdFx0d2hpbGUgKCBlbGVtLmZpcnN0RWxlbWVudENoaWxkICkge1xuXHRcdFx0XHRcdGVsZW0gPSBlbGVtLmZpcnN0RWxlbWVudENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHR9ICkuYXBwZW5kKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCggdGhpcywgaSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxuXHRcdFx0XHRjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcblxuXHRcdFx0aWYgKCBjb250ZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdGNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5hcHBlbmQoIGh0bWwgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0d3JhcDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIGh0bWxJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggaHRtbCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBodG1sSXNGdW5jdGlvbiA/IGh0bWwuY2FsbCggdGhpcywgaSApIDogaHRtbCApO1xuXHRcdH0gKTtcblx0fSxcblxuXHR1bndyYXA6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR0aGlzLnBhcmVudCggc2VsZWN0b3IgKS5ub3QoIFwiYm9keVwiICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XG5cdFx0fSApO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5oaWRkZW4gPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICFqUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUoIGVsZW0gKTtcbn07XG5qUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICEhKCBlbGVtLm9mZnNldFdpZHRoIHx8IGVsZW0ub2Zmc2V0SGVpZ2h0IHx8IGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKTtcbn07XG5cblxuXG5cbmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24oKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcblx0fSBjYXRjaCAoIGUgKSB7fVxufTtcblxudmFyIHhoclN1Y2Nlc3NTdGF0dXMgPSB7XG5cblx0XHQvLyBGaWxlIHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIGNvZGUgMCwgYXNzdW1lIDIwMFxuXHRcdDA6IDIwMCxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0Ly8gIzE0NTA6IHNvbWV0aW1lcyBJRSByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0MTIyMzogMjA0XG5cdH0sXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcbnN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5qUXVlcnkuYWpheFRyYW5zcG9ydCggZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdHZhciBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaztcblxuXHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XG5cdGlmICggc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xuXHRcdFx0XHR2YXIgaSxcblx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpO1xuXG5cdFx0XHRcdHhoci5vcGVuKFxuXHRcdFx0XHRcdG9wdGlvbnMudHlwZSxcblx0XHRcdFx0XHRvcHRpb25zLnVybCxcblx0XHRcdFx0XHRvcHRpb25zLmFzeW5jLFxuXHRcdFx0XHRcdG9wdGlvbnMudXNlcm5hbWUsXG5cdFx0XHRcdFx0b3B0aW9ucy5wYXNzd29yZFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdFx0eGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xuXHRcdFx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHQvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlXG5cdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXG5cdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHQvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC5cblx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSApIHtcblx0XHRcdFx0XHRoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcblx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBlcnJvckNhbGxiYWNrID0geGhyLm9ubG9hZCA9XG5cdFx0XHRcdFx0XHRcdFx0eGhyLm9uZXJyb3IgPSB4aHIub25hYm9ydCA9IHhoci5vbnRpbWVvdXQgPVxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IFwiZXJyb3JcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gT24gYSBtYW51YWwgbmF0aXZlIGFib3J0LCBJRTkgdGhyb3dzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZXJyb3JzIG9uIGFueSBwcm9wZXJ0eSBhY2Nlc3MgdGhhdCBpcyBub3QgcmVhZHlTdGF0ZVxuXHRcdFx0XHRcdFx0XHRcdGlmICggdHlwZW9mIHhoci5zdGF0dXMgIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggMCwgXCJlcnJvclwiICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIEZpbGU6IHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIDA7IHNlZSAjODYwNSwgIzE0MjA3XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblx0XHRcdFx0XHRcdFx0XHRcdHhoclN1Y2Nlc3NTdGF0dXNbIHhoci5zdGF0dXMgXSB8fCB4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHQsXG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJRTkgaGFzIG5vIFhIUjIgYnV0IHRocm93cyBvbiBiaW5hcnkgKHRyYWMtMTE0MjYpXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBGb3IgWEhSMiBub24tdGV4dCwgbGV0IHRoZSBjYWxsZXIgaGFuZGxlIGl0IChnaC0yNDk4KVxuXHRcdFx0XHRcdFx0XHRcdFx0KCB4aHIucmVzcG9uc2VUeXBlIHx8IFwidGV4dFwiICkgIT09IFwidGV4dFwiICB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHhoci5yZXNwb25zZVRleHQgIT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IGJpbmFyeTogeGhyLnJlc3BvbnNlIH0gOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IHRleHQ6IHhoci5yZXNwb25zZVRleHQgfSxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIExpc3RlbiB0byBldmVudHNcblx0XHRcdFx0eGhyLm9ubG9hZCA9IGNhbGxiYWNrKCk7XG5cdFx0XHRcdGVycm9yQ2FsbGJhY2sgPSB4aHIub25lcnJvciA9IHhoci5vbnRpbWVvdXQgPSBjYWxsYmFjayggXCJlcnJvclwiICk7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0XHRcdC8vIFVzZSBvbnJlYWR5c3RhdGVjaGFuZ2UgdG8gcmVwbGFjZSBvbmFib3J0XG5cdFx0XHRcdC8vIHRvIGhhbmRsZSB1bmNhdWdodCBhYm9ydHNcblx0XHRcdFx0aWYgKCB4aHIub25hYm9ydCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHhoci5vbmFib3J0ID0gZXJyb3JDYWxsYmFjaztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIENoZWNrIHJlYWR5U3RhdGUgYmVmb3JlIHRpbWVvdXQgYXMgaXQgY2hhbmdlc1xuXHRcdFx0XHRcdFx0aWYgKCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBbGxvdyBvbmVycm9yIHRvIGJlIGNhbGxlZCBmaXJzdCxcblx0XHRcdFx0XHRcdFx0Ly8gYnV0IHRoYXQgd2lsbCBub3QgaGFuZGxlIGEgbmF0aXZlIGFib3J0XG5cdFx0XHRcdFx0XHRcdC8vIEFsc28sIHNhdmUgZXJyb3JDYWxsYmFjayB0byBhIHZhcmlhYmxlXG5cdFx0XHRcdFx0XHRcdC8vIGFzIHhoci5vbmVycm9yIGNhbm5vdCBiZSBhY2Nlc3NlZFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yQ2FsbGJhY2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ3JlYXRlIHRoZSBhYm9ydCBjYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGNhbGxiYWNrKCBcImFib3J0XCIgKTtcblxuXHRcdFx0XHR0cnkge1xuXG5cdFx0XHRcdFx0Ly8gRG8gc2VuZCB0aGUgcmVxdWVzdCAodGhpcyBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uKVxuXHRcdFx0XHRcdHhoci5zZW5kKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhIHx8IG51bGwgKTtcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHQvLyAjMTQ2ODM6IE9ubHkgcmV0aHJvdyBpZiB0aGlzIGhhc24ndCBiZWVuIG5vdGlmaWVkIGFzIGFuIGVycm9yIHlldFxuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFByZXZlbnQgYXV0by1leGVjdXRpb24gb2Ygc2NyaXB0cyB3aGVuIG5vIGV4cGxpY2l0IGRhdGFUeXBlIHdhcyBwcm92aWRlZCAoU2VlIGdoLTI0MzIpXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLmNvbnRlbnRzLnNjcmlwdCA9IGZhbHNlO1xuXHR9XG59ICk7XG5cbi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGFjY2VwdHM6IHtcblx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBcIiArXG5cdFx0XHRcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXG5cdH0sXG5cdGNvbnRlbnRzOiB7XG5cdFx0c2NyaXB0OiAvXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi9cblx0fSxcblx0Y29udmVydGVyczoge1xuXHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHR9XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xuXHR9XG59ICk7XG5cbi8vIEJpbmQgc2NyaXB0IHRhZyBoYWNrIHRyYW5zcG9ydFxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXG5cdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gb3IgZm9yY2VkLWJ5LWF0dHJzIHJlcXVlc3RzXG5cdGlmICggcy5jcm9zc0RvbWFpbiB8fCBzLnNjcmlwdEF0dHJzICkge1xuXHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHNjcmlwdCA9IGpRdWVyeSggXCI8c2NyaXB0PlwiIClcblx0XHRcdFx0XHQuYXR0ciggcy5zY3JpcHRBdHRycyB8fCB7fSApXG5cdFx0XHRcdFx0LnByb3AoIHsgY2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LCBzcmM6IHMudXJsIH0gKVxuXHRcdFx0XHRcdC5vbiggXCJsb2FkIGVycm9yXCIsIGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gVXNlIG5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG91ciBkb21NYW5pcCBBSkFYIHRyaWNrZXJ5XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XG5cdFx0XHR9LFxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZS5ndWlkKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG4vLyBJbiBTYWZhcmkgOCBkb2N1bWVudHMgY3JlYXRlZCB2aWEgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzczMzdcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRib2R5LmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIjtcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG59ICkoKTtcblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0dmFyIGJhc2UsIHBhcnNlZCwgc2NyaXB0cztcblxuXHRpZiAoICFjb250ZXh0ICkge1xuXG5cdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRpZiAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcblx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0YmFzZSA9IGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJiYXNlXCIgKTtcblx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblx0fVxuXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBwcm9wcy50b3AgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHByb3BzLnRvcCArPSBcInB4XCI7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIHR5cGVvZiBwcm9wcy5sZWZ0ID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRwcm9wcy5sZWZ0ICs9IFwicHhcIjtcblx0XHRcdH1cblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdC8vIG9mZnNldCgpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIGJvcmRlciBib3ggdG8gdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdFx0Ly8gUHJlc2VydmUgY2hhaW5pbmcgZm9yIHNldHRlclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dmFyIHJlY3QsIHdpbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB6ZXJvcyBmb3IgZGlzY29ubmVjdGVkIGFuZCBoaWRkZW4gKGRpc3BsYXk6IG5vbmUpIGVsZW1lbnRzIChnaC0yMzEwKVxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGFcblx0XHQvLyBkaXNjb25uZWN0ZWQgbm9kZSBpbiBJRSB0aHJvd3MgYW4gZXJyb3Jcblx0XHRpZiAoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IGRvY3VtZW50LXJlbGF0aXZlIHBvc2l0aW9uIGJ5IGFkZGluZyB2aWV3cG9ydCBzY3JvbGwgdG8gdmlld3BvcnQtcmVsYXRpdmUgZ0JDUlxuXHRcdHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdHdpbiA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldztcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldCxcblx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbi5wYWdlWE9mZnNldFxuXHRcdH07XG5cdH0sXG5cblx0Ly8gcG9zaXRpb24oKSByZWxhdGVzIGFuIGVsZW1lbnQncyBtYXJnaW4gYm94IHRvIGl0cyBvZmZzZXQgcGFyZW50J3MgcGFkZGluZyBib3hcblx0Ly8gVGhpcyBjb3JyZXNwb25kcyB0byB0aGUgYmVoYXZpb3Igb2YgQ1NTIGFic29sdXRlIHBvc2l0aW9uaW5nXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LCBkb2MsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdC8vIHBvc2l0aW9uOmZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB0aGUgdmlld3BvcnQsIHdoaWNoIGl0c2VsZiBhbHdheXMgaGFzIHplcm8gb2Zmc2V0XG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXG5cdFx0XHQvLyBBc3N1bWUgcG9zaXRpb246Zml4ZWQgaW1wbGllcyBhdmFpbGFiaWxpdHkgb2YgZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHRoZSAqcmVhbCogb2Zmc2V0IHBhcmVudCwgd2hpY2ggY2FuIGJlIHRoZSBkb2N1bWVudCBvciBpdHMgcm9vdCBlbGVtZW50XG5cdFx0XHQvLyB3aGVuIGEgc3RhdGljYWxseSBwb3NpdGlvbmVkIGVsZW1lbnQgaXMgaWRlbnRpZmllZFxuXHRcdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdFx0b2Zmc2V0UGFyZW50ID0gZWxlbS5vZmZzZXRQYXJlbnQgfHwgZG9jLmRvY3VtZW50RWxlbWVudDtcblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmXG5cdFx0XHRcdCggb2Zmc2V0UGFyZW50ID09PSBkb2MuYm9keSB8fCBvZmZzZXRQYXJlbnQgPT09IGRvYy5kb2N1bWVudEVsZW1lbnQgKSAmJlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50ICE9PSBlbGVtICYmIG9mZnNldFBhcmVudC5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSBib3JkZXJzIGludG8gaXRzIG9mZnNldCwgc2luY2UgdGhleSBhcmUgb3V0c2lkZSBpdHMgY29udGVudCBvcmlnaW5cblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0galF1ZXJ5KCBvZmZzZXRQYXJlbnQgKS5vZmZzZXQoKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LnRvcCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gZG9jdW1lbnRFbGVtZW50IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XG5cdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cblx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdC8vIDIpIEZvciB0aGUgaGlkZGVuIG9yIGRldGFjaGVkIGVsZW1lbnRcblx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxuXHQvL1xuXHQvLyBidXQgdGhvc2UgZXhjZXB0aW9ucyB3ZXJlIG5ldmVyIHByZXNlbnRlZCBhcyBhIHJlYWwgbGlmZSB1c2UtY2FzZXNcblx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXG5cdC8vXG5cdC8vIFRoaXMgbG9naWMsIGhvd2V2ZXIsIGlzIG5vdCBndWFyYW50ZWVkIGFuZCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCBpbiB0aGUgZnV0dXJlXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblxuXHRcdFx0Ly8gQ29hbGVzY2UgZG9jdW1lbnRzIGFuZCB3aW5kb3dzXG5cdFx0XHR2YXIgd2luO1xuXHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtO1xuXHRcdFx0fSBlbHNlIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0d2luID0gZWxlbS5kZWZhdWx0Vmlldztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fTtcbn0gKTtcblxuLy8gU3VwcG9ydDogU2FmYXJpIDw9NyAtIDkuMSwgQ2hyb21lIDw9MzcgLSA0OVxuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuLy8gQmxpbmsgYnVnOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD01ODkzNDdcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIF9pLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcblx0XHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gJCggd2luZG93ICkub3V0ZXJXaWR0aC9IZWlnaHQgcmV0dXJuIHcvaCBpbmNsdWRpbmcgc2Nyb2xsYmFycyAoZ2gtMTcyOSlcblx0XHRcdFx0XHRyZXR1cm4gZnVuY05hbWUuaW5kZXhPZiggXCJvdXRlclwiICkgPT09IDAgP1xuXHRcdFx0XHRcdFx0ZWxlbVsgXCJpbm5lclwiICsgbmFtZSBdIDpcblx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlICk7XG5cdFx0fTtcblx0fSApO1xufSApO1xuXG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwiYWpheFN0YXJ0XCIsXG5cdFwiYWpheFN0b3BcIixcblx0XCJhamF4Q29tcGxldGVcIixcblx0XCJhamF4RXJyb3JcIixcblx0XCJhamF4U3VjY2Vzc1wiLFxuXHRcImFqYXhTZW5kXCJcbl0sIGZ1bmN0aW9uKCBfaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59ICk7XG5cblxuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH0sXG5cblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCAoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXG5cdFx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0XHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcblx0XHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG5cdFx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0XHR9O1xuXHR9ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuLy8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG52YXIgcnRyaW0gPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2c7XG5cbi8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxuLy8gYXJndW1lbnRzLlxuLy8galF1ZXJ5LnByb3h5IGlzIGRlcHJlY2F0ZWQgdG8gcHJvbW90ZSBzdGFuZGFyZHMgKHNwZWNpZmljYWxseSBGdW5jdGlvbiNiaW5kKVxuLy8gSG93ZXZlciwgaXQgaXMgbm90IHNsYXRlZCBmb3IgcmVtb3ZhbCBhbnkgdGltZSBzb29uXG5qUXVlcnkucHJveHkgPSBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7XG5cdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0dG1wID0gZm5bIGNvbnRleHQgXTtcblx0XHRjb250ZXh0ID0gZm47XG5cdFx0Zm4gPSB0bXA7XG5cdH1cblxuXHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRpZiAoICFpc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdH1cblxuXHQvLyBTaW11bGF0ZWQgYmluZFxuXHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAyICk7XG5cdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdH07XG5cblx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdHJldHVybiBwcm94eTtcbn07XG5cbmpRdWVyeS5ob2xkUmVhZHkgPSBmdW5jdGlvbiggaG9sZCApIHtcblx0aWYgKCBob2xkICkge1xuXHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0fVxufTtcbmpRdWVyeS5pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmpRdWVyeS5wYXJzZUpTT04gPSBKU09OLnBhcnNlO1xualF1ZXJ5Lm5vZGVOYW1lID0gbm9kZU5hbWU7XG5qUXVlcnkuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5qUXVlcnkuaXNXaW5kb3cgPSBpc1dpbmRvdztcbmpRdWVyeS5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG5qUXVlcnkudHlwZSA9IHRvVHlwZTtcblxualF1ZXJ5Lm5vdyA9IERhdGUubm93O1xuXG5qUXVlcnkuaXNOdW1lcmljID0gZnVuY3Rpb24oIG9iaiApIHtcblxuXHQvLyBBcyBvZiBqUXVlcnkgMy4wLCBpc051bWVyaWMgaXMgbGltaXRlZCB0b1xuXHQvLyBzdHJpbmdzIGFuZCBudW1iZXJzIChwcmltaXRpdmVzIG9yIG9iamVjdHMpXG5cdC8vIHRoYXQgY2FuIGJlIGNvZXJjZWQgdG8gZmluaXRlIG51bWJlcnMgKGdoLTI2NjIpXG5cdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXHRyZXR1cm4gKCB0eXBlID09PSBcIm51bWJlclwiIHx8IHR5cGUgPT09IFwic3RyaW5nXCIgKSAmJlxuXG5cdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKFwiXCIpXG5cdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxuXHRcdCFpc05hTiggb2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKTtcbn07XG5cbmpRdWVyeS50cmltID0gZnVuY3Rpb24oIHRleHQgKSB7XG5cdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFwiXCIgOlxuXHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCJcIiApO1xufTtcblxuXG5cbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2Vcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeTtcblx0fSApO1xufVxuXG5cblxuXG52YXJcblxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy4kID0gXyQ7XG5cdH1cblxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn07XG5cbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4vLyAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICgjMTM1NjYpXG5pZiAoIHR5cGVvZiBub0dsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xufVxuXG5cblxuXG5yZXR1cm4galF1ZXJ5O1xufSApO1xuIiwicmVxdWlyZShcIi4vY3VzdG9tTG9va0NvbnRyb2wuanNcIik7XG5yZXF1aXJlKFwiLi9pbmRleC5qc1wiKTtcbnJlcXVpcmUoXCIuL2FjdGlvbnMuanNcIik7XG5yZXF1aXJlKFwiLi9zdmcubWluLmpzXCIpO1xuXG5pbXBvcnQoXCIuLi9zdHlsZXNoZWV0cy90aGVtZS5zY3NzXCIpO1xuIiwiQUZSQU1FLmNvbXBvbmVudHNbXCJsb29rLWNvbnRyb2xzXCJdLkNvbXBvbmVudC5wcm90b3R5cGUub25Ub3VjaE1vdmUgPSBmdW5jdGlvbiAoXG4gIGV2dFxuKSB7XG4gIHZhciBkaXJlY3Rpb247XG4gIHZhciBjYW52YXMgPSB0aGlzLmVsLnNjZW5lRWwuY2FudmFzO1xuICB2YXIgZGVsdGFZO1xuICB2YXIgZGVsdGFYO1xuICB2YXIgeWF3T2JqZWN0ID0gdGhpcy55YXdPYmplY3Q7XG5cbiAgaWYgKCF0aGlzLnRvdWNoU3RhcnRlZCB8fCAhdGhpcy5kYXRhLnRvdWNoRW5hYmxlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGRlbHRhWSA9XG4gICAgKDIgKiBNYXRoLlBJICogKGV2dC50b3VjaGVzWzBdLnBhZ2VYIC0gdGhpcy50b3VjaFN0YXJ0LngpKSAvXG4gICAgY2FudmFzLmNsaWVudFdpZHRoO1xuXG4gIHZhciBkZWx0YVggPVxuICAgICgyICogTWF0aC5QSSAqIChldnQudG91Y2hlc1swXS5wYWdlWSAtIHRoaXMudG91Y2hTdGFydC55KSkgL1xuICAgIGNhbnZhcy5jbGllbnRIZWlnaHQ7XG5cbiAgZGlyZWN0aW9uID0gdGhpcy5kYXRhLnJldmVyc2VUb3VjaERyYWcgPyAxIDogLTE7XG4gIC8vIExpbWl0IHRvdWNoIG9yaWVudGFpb24gdG8gdG8geWF3ICh5IGF4aXMpLlxuICB5YXdPYmplY3Qucm90YXRpb24ueSAtPSBkZWx0YVkgKiAwLjUgKiBkaXJlY3Rpb247XG4gIHRoaXMucGl0Y2hPYmplY3Qucm90YXRpb24ueCAtPSBkZWx0YVggKiAwLjUgKiBkaXJlY3Rpb247XG5cbiAgdGhpcy50b3VjaFN0YXJ0ID0ge1xuICAgIHg6IGV2dC50b3VjaGVzWzBdLnBhZ2VYLFxuICAgIHk6IGV2dC50b3VjaGVzWzBdLnBhZ2VZLFxuICB9O1xufTtcbiIsIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcImZlYXRoZXJcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiZmVhdGhlclwiXSA9IGZhY3RvcnkoKTtcbn0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGdldDogZ2V0dGVyXG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbi8qKioqKiovIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKHtcblxuLyoqKi8gXCIuL2Rpc3QvaWNvbnMuanNvblwiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL2Rpc3QvaWNvbnMuanNvbiAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBleHBvcnRzIHByb3ZpZGVkOiBhY3Rpdml0eSwgYWlycGxheSwgYWxlcnQtY2lyY2xlLCBhbGVydC1vY3RhZ29uLCBhbGVydC10cmlhbmdsZSwgYWxpZ24tY2VudGVyLCBhbGlnbi1qdXN0aWZ5LCBhbGlnbi1sZWZ0LCBhbGlnbi1yaWdodCwgYW5jaG9yLCBhcGVydHVyZSwgYXJjaGl2ZSwgYXJyb3ctZG93bi1jaXJjbGUsIGFycm93LWRvd24tbGVmdCwgYXJyb3ctZG93bi1yaWdodCwgYXJyb3ctZG93biwgYXJyb3ctbGVmdC1jaXJjbGUsIGFycm93LWxlZnQsIGFycm93LXJpZ2h0LWNpcmNsZSwgYXJyb3ctcmlnaHQsIGFycm93LXVwLWNpcmNsZSwgYXJyb3ctdXAtbGVmdCwgYXJyb3ctdXAtcmlnaHQsIGFycm93LXVwLCBhdC1zaWduLCBhd2FyZCwgYmFyLWNoYXJ0LTIsIGJhci1jaGFydCwgYmF0dGVyeS1jaGFyZ2luZywgYmF0dGVyeSwgYmVsbC1vZmYsIGJlbGwsIGJsdWV0b290aCwgYm9sZCwgYm9vay1vcGVuLCBib29rLCBib29rbWFyaywgYm94LCBicmllZmNhc2UsIGNhbGVuZGFyLCBjYW1lcmEtb2ZmLCBjYW1lcmEsIGNhc3QsIGNoZWNrLWNpcmNsZSwgY2hlY2stc3F1YXJlLCBjaGVjaywgY2hldnJvbi1kb3duLCBjaGV2cm9uLWxlZnQsIGNoZXZyb24tcmlnaHQsIGNoZXZyb24tdXAsIGNoZXZyb25zLWRvd24sIGNoZXZyb25zLWxlZnQsIGNoZXZyb25zLXJpZ2h0LCBjaGV2cm9ucy11cCwgY2hyb21lLCBjaXJjbGUsIGNsaXBib2FyZCwgY2xvY2ssIGNsb3VkLWRyaXp6bGUsIGNsb3VkLWxpZ2h0bmluZywgY2xvdWQtb2ZmLCBjbG91ZC1yYWluLCBjbG91ZC1zbm93LCBjbG91ZCwgY29kZSwgY29kZXBlbiwgY29kZXNhbmRib3gsIGNvZmZlZSwgY29sdW1ucywgY29tbWFuZCwgY29tcGFzcywgY29weSwgY29ybmVyLWRvd24tbGVmdCwgY29ybmVyLWRvd24tcmlnaHQsIGNvcm5lci1sZWZ0LWRvd24sIGNvcm5lci1sZWZ0LXVwLCBjb3JuZXItcmlnaHQtZG93biwgY29ybmVyLXJpZ2h0LXVwLCBjb3JuZXItdXAtbGVmdCwgY29ybmVyLXVwLXJpZ2h0LCBjcHUsIGNyZWRpdC1jYXJkLCBjcm9wLCBjcm9zc2hhaXIsIGRhdGFiYXNlLCBkZWxldGUsIGRpc2MsIGRpdmlkZS1jaXJjbGUsIGRpdmlkZS1zcXVhcmUsIGRpdmlkZSwgZG9sbGFyLXNpZ24sIGRvd25sb2FkLWNsb3VkLCBkb3dubG9hZCwgZHJpYmJibGUsIGRyb3BsZXQsIGVkaXQtMiwgZWRpdC0zLCBlZGl0LCBleHRlcm5hbC1saW5rLCBleWUtb2ZmLCBleWUsIGZhY2Vib29rLCBmYXN0LWZvcndhcmQsIGZlYXRoZXIsIGZpZ21hLCBmaWxlLW1pbnVzLCBmaWxlLXBsdXMsIGZpbGUtdGV4dCwgZmlsZSwgZmlsbSwgZmlsdGVyLCBmbGFnLCBmb2xkZXItbWludXMsIGZvbGRlci1wbHVzLCBmb2xkZXIsIGZyYW1lciwgZnJvd24sIGdpZnQsIGdpdC1icmFuY2gsIGdpdC1jb21taXQsIGdpdC1tZXJnZSwgZ2l0LXB1bGwtcmVxdWVzdCwgZ2l0aHViLCBnaXRsYWIsIGdsb2JlLCBncmlkLCBoYXJkLWRyaXZlLCBoYXNoLCBoZWFkcGhvbmVzLCBoZWFydCwgaGVscC1jaXJjbGUsIGhleGFnb24sIGhvbWUsIGltYWdlLCBpbmJveCwgaW5mbywgaW5zdGFncmFtLCBpdGFsaWMsIGtleSwgbGF5ZXJzLCBsYXlvdXQsIGxpZmUtYnVveSwgbGluay0yLCBsaW5rLCBsaW5rZWRpbiwgbGlzdCwgbG9hZGVyLCBsb2NrLCBsb2ctaW4sIGxvZy1vdXQsIG1haWwsIG1hcC1waW4sIG1hcCwgbWF4aW1pemUtMiwgbWF4aW1pemUsIG1laCwgbWVudSwgbWVzc2FnZS1jaXJjbGUsIG1lc3NhZ2Utc3F1YXJlLCBtaWMtb2ZmLCBtaWMsIG1pbmltaXplLTIsIG1pbmltaXplLCBtaW51cy1jaXJjbGUsIG1pbnVzLXNxdWFyZSwgbWludXMsIG1vbml0b3IsIG1vb24sIG1vcmUtaG9yaXpvbnRhbCwgbW9yZS12ZXJ0aWNhbCwgbW91c2UtcG9pbnRlciwgbW92ZSwgbXVzaWMsIG5hdmlnYXRpb24tMiwgbmF2aWdhdGlvbiwgb2N0YWdvbiwgcGFja2FnZSwgcGFwZXJjbGlwLCBwYXVzZS1jaXJjbGUsIHBhdXNlLCBwZW4tdG9vbCwgcGVyY2VudCwgcGhvbmUtY2FsbCwgcGhvbmUtZm9yd2FyZGVkLCBwaG9uZS1pbmNvbWluZywgcGhvbmUtbWlzc2VkLCBwaG9uZS1vZmYsIHBob25lLW91dGdvaW5nLCBwaG9uZSwgcGllLWNoYXJ0LCBwbGF5LWNpcmNsZSwgcGxheSwgcGx1cy1jaXJjbGUsIHBsdXMtc3F1YXJlLCBwbHVzLCBwb2NrZXQsIHBvd2VyLCBwcmludGVyLCByYWRpbywgcmVmcmVzaC1jY3csIHJlZnJlc2gtY3csIHJlcGVhdCwgcmV3aW5kLCByb3RhdGUtY2N3LCByb3RhdGUtY3csIHJzcywgc2F2ZSwgc2Npc3NvcnMsIHNlYXJjaCwgc2VuZCwgc2VydmVyLCBzZXR0aW5ncywgc2hhcmUtMiwgc2hhcmUsIHNoaWVsZC1vZmYsIHNoaWVsZCwgc2hvcHBpbmctYmFnLCBzaG9wcGluZy1jYXJ0LCBzaHVmZmxlLCBzaWRlYmFyLCBza2lwLWJhY2ssIHNraXAtZm9yd2FyZCwgc2xhY2ssIHNsYXNoLCBzbGlkZXJzLCBzbWFydHBob25lLCBzbWlsZSwgc3BlYWtlciwgc3F1YXJlLCBzdGFyLCBzdG9wLWNpcmNsZSwgc3VuLCBzdW5yaXNlLCBzdW5zZXQsIHRhYmxldCwgdGFnLCB0YXJnZXQsIHRlcm1pbmFsLCB0aGVybW9tZXRlciwgdGh1bWJzLWRvd24sIHRodW1icy11cCwgdG9nZ2xlLWxlZnQsIHRvZ2dsZS1yaWdodCwgdG9vbCwgdHJhc2gtMiwgdHJhc2gsIHRyZWxsbywgdHJlbmRpbmctZG93biwgdHJlbmRpbmctdXAsIHRyaWFuZ2xlLCB0cnVjaywgdHYsIHR3aXRjaCwgdHdpdHRlciwgdHlwZSwgdW1icmVsbGEsIHVuZGVybGluZSwgdW5sb2NrLCB1cGxvYWQtY2xvdWQsIHVwbG9hZCwgdXNlci1jaGVjaywgdXNlci1taW51cywgdXNlci1wbHVzLCB1c2VyLXgsIHVzZXIsIHVzZXJzLCB2aWRlby1vZmYsIHZpZGVvLCB2b2ljZW1haWwsIHZvbHVtZS0xLCB2b2x1bWUtMiwgdm9sdW1lLXgsIHZvbHVtZSwgd2F0Y2gsIHdpZmktb2ZmLCB3aWZpLCB3aW5kLCB4LWNpcmNsZSwgeC1vY3RhZ29uLCB4LXNxdWFyZSwgeCwgeW91dHViZSwgemFwLW9mZiwgemFwLCB6b29tLWluLCB6b29tLW91dCwgZGVmYXVsdCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSkge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcImFjdGl2aXR5XCI6XCI8cG9seWxpbmUgcG9pbnRzPVxcXCIyMiAxMiAxOCAxMiAxNSAyMSA5IDMgNiAxMiAyIDEyXFxcIj48L3BvbHlsaW5lPlwiLFwiYWlycGxheVwiOlwiPHBhdGggZD1cXFwiTTUgMTdINGEyIDIgMCAwIDEtMi0yVjVhMiAyIDAgMCAxIDItMmgxNmEyIDIgMCAwIDEgMiAydjEwYTIgMiAwIDAgMS0yIDJoLTFcXFwiPjwvcGF0aD48cG9seWdvbiBwb2ludHM9XFxcIjEyIDE1IDE3IDIxIDcgMjEgMTIgMTVcXFwiPjwvcG9seWdvbj5cIixcImFsZXJ0LWNpcmNsZVwiOlwiPGNpcmNsZSBjeD1cXFwiMTJcXFwiIGN5PVxcXCIxMlxcXCIgcj1cXFwiMTBcXFwiPjwvY2lyY2xlPjxsaW5lIHgxPVxcXCIxMlxcXCIgeTE9XFxcIjhcXFwiIHgyPVxcXCIxMlxcXCIgeTI9XFxcIjEyXFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjEyXFxcIiB5MT1cXFwiMTZcXFwiIHgyPVxcXCIxMi4wMVxcXCIgeTI9XFxcIjE2XFxcIj48L2xpbmU+XCIsXCJhbGVydC1vY3RhZ29uXCI6XCI8cG9seWdvbiBwb2ludHM9XFxcIjcuODYgMiAxNi4xNCAyIDIyIDcuODYgMjIgMTYuMTQgMTYuMTQgMjIgNy44NiAyMiAyIDE2LjE0IDIgNy44NiA3Ljg2IDJcXFwiPjwvcG9seWdvbj48bGluZSB4MT1cXFwiMTJcXFwiIHkxPVxcXCI4XFxcIiB4Mj1cXFwiMTJcXFwiIHkyPVxcXCIxMlxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCIxMlxcXCIgeTE9XFxcIjE2XFxcIiB4Mj1cXFwiMTIuMDFcXFwiIHkyPVxcXCIxNlxcXCI+PC9saW5lPlwiLFwiYWxlcnQtdHJpYW5nbGVcIjpcIjxwYXRoIGQ9XFxcIk0xMC4yOSAzLjg2TDEuODIgMThhMiAyIDAgMCAwIDEuNzEgM2gxNi45NGEyIDIgMCAwIDAgMS43MS0zTDEzLjcxIDMuODZhMiAyIDAgMCAwLTMuNDIgMHpcXFwiPjwvcGF0aD48bGluZSB4MT1cXFwiMTJcXFwiIHkxPVxcXCI5XFxcIiB4Mj1cXFwiMTJcXFwiIHkyPVxcXCIxM1xcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCIxMlxcXCIgeTE9XFxcIjE3XFxcIiB4Mj1cXFwiMTIuMDFcXFwiIHkyPVxcXCIxN1xcXCI+PC9saW5lPlwiLFwiYWxpZ24tY2VudGVyXCI6XCI8bGluZSB4MT1cXFwiMThcXFwiIHkxPVxcXCIxMFxcXCIgeDI9XFxcIjZcXFwiIHkyPVxcXCIxMFxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCIyMVxcXCIgeTE9XFxcIjZcXFwiIHgyPVxcXCIzXFxcIiB5Mj1cXFwiNlxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCIyMVxcXCIgeTE9XFxcIjE0XFxcIiB4Mj1cXFwiM1xcXCIgeTI9XFxcIjE0XFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjE4XFxcIiB5MT1cXFwiMThcXFwiIHgyPVxcXCI2XFxcIiB5Mj1cXFwiMThcXFwiPjwvbGluZT5cIixcImFsaWduLWp1c3RpZnlcIjpcIjxsaW5lIHgxPVxcXCIyMVxcXCIgeTE9XFxcIjEwXFxcIiB4Mj1cXFwiM1xcXCIgeTI9XFxcIjEwXFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjIxXFxcIiB5MT1cXFwiNlxcXCIgeDI9XFxcIjNcXFwiIHkyPVxcXCI2XFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjIxXFxcIiB5MT1cXFwiMTRcXFwiIHgyPVxcXCIzXFxcIiB5Mj1cXFwiMTRcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiMjFcXFwiIHkxPVxcXCIxOFxcXCIgeDI9XFxcIjNcXFwiIHkyPVxcXCIxOFxcXCI+PC9saW5lPlwiLFwiYWxpZ24tbGVmdFwiOlwiPGxpbmUgeDE9XFxcIjE3XFxcIiB5MT1cXFwiMTBcXFwiIHgyPVxcXCIzXFxcIiB5Mj1cXFwiMTBcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiMjFcXFwiIHkxPVxcXCI2XFxcIiB4Mj1cXFwiM1xcXCIgeTI9XFxcIjZcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiMjFcXFwiIHkxPVxcXCIxNFxcXCIgeDI9XFxcIjNcXFwiIHkyPVxcXCIxNFxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCIxN1xcXCIgeTE9XFxcIjE4XFxcIiB4Mj1cXFwiM1xcXCIgeTI9XFxcIjE4XFxcIj48L2xpbmU+XCIsXCJhbGlnbi1yaWdodFwiOlwiPGxpbmUgeDE9XFxcIjIxXFxcIiB5MT1cXFwiMTBcXFwiIHgyPVxcXCI3XFxcIiB5Mj1cXFwiMTBcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiMjFcXFwiIHkxPVxcXCI2XFxcIiB4Mj1cXFwiM1xcXCIgeTI9XFxcIjZcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiMjFcXFwiIHkxPVxcXCIxNFxcXCIgeDI9XFxcIjNcXFwiIHkyPVxcXCIxNFxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCIyMVxcXCIgeTE9XFxcIjE4XFxcIiB4Mj1cXFwiN1xcXCIgeTI9XFxcIjE4XFxcIj48L2xpbmU+XCIsXCJhbmNob3JcIjpcIjxjaXJjbGUgY3g9XFxcIjEyXFxcIiBjeT1cXFwiNVxcXCIgcj1cXFwiM1xcXCI+PC9jaXJjbGU+PGxpbmUgeDE9XFxcIjEyXFxcIiB5MT1cXFwiMjJcXFwiIHgyPVxcXCIxMlxcXCIgeTI9XFxcIjhcXFwiPjwvbGluZT48cGF0aCBkPVxcXCJNNSAxMkgyYTEwIDEwIDAgMCAwIDIwIDBoLTNcXFwiPjwvcGF0aD5cIixcImFwZXJ0dXJlXCI6XCI8Y2lyY2xlIGN4PVxcXCIxMlxcXCIgY3k9XFxcIjEyXFxcIiByPVxcXCIxMFxcXCI+PC9jaXJjbGU+PGxpbmUgeDE9XFxcIjE0LjMxXFxcIiB5MT1cXFwiOFxcXCIgeDI9XFxcIjIwLjA1XFxcIiB5Mj1cXFwiMTcuOTRcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiOS42OVxcXCIgeTE9XFxcIjhcXFwiIHgyPVxcXCIyMS4xN1xcXCIgeTI9XFxcIjhcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiNy4zOFxcXCIgeTE9XFxcIjEyXFxcIiB4Mj1cXFwiMTMuMTJcXFwiIHkyPVxcXCIyLjA2XFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjkuNjlcXFwiIHkxPVxcXCIxNlxcXCIgeDI9XFxcIjMuOTVcXFwiIHkyPVxcXCI2LjA2XFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjE0LjMxXFxcIiB5MT1cXFwiMTZcXFwiIHgyPVxcXCIyLjgzXFxcIiB5Mj1cXFwiMTZcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiMTYuNjJcXFwiIHkxPVxcXCIxMlxcXCIgeDI9XFxcIjEwLjg4XFxcIiB5Mj1cXFwiMjEuOTRcXFwiPjwvbGluZT5cIixcImFyY2hpdmVcIjpcIjxwb2x5bGluZSBwb2ludHM9XFxcIjIxIDggMjEgMjEgMyAyMSAzIDhcXFwiPjwvcG9seWxpbmU+PHJlY3QgeD1cXFwiMVxcXCIgeT1cXFwiM1xcXCIgd2lkdGg9XFxcIjIyXFxcIiBoZWlnaHQ9XFxcIjVcXFwiPjwvcmVjdD48bGluZSB4MT1cXFwiMTBcXFwiIHkxPVxcXCIxMlxcXCIgeDI9XFxcIjE0XFxcIiB5Mj1cXFwiMTJcXFwiPjwvbGluZT5cIixcImFycm93LWRvd24tY2lyY2xlXCI6XCI8Y2lyY2xlIGN4PVxcXCIxMlxcXCIgY3k9XFxcIjEyXFxcIiByPVxcXCIxMFxcXCI+PC9jaXJjbGU+PHBvbHlsaW5lIHBvaW50cz1cXFwiOCAxMiAxMiAxNiAxNiAxMlxcXCI+PC9wb2x5bGluZT48bGluZSB4MT1cXFwiMTJcXFwiIHkxPVxcXCI4XFxcIiB4Mj1cXFwiMTJcXFwiIHkyPVxcXCIxNlxcXCI+PC9saW5lPlwiLFwiYXJyb3ctZG93bi1sZWZ0XCI6XCI8bGluZSB4MT1cXFwiMTdcXFwiIHkxPVxcXCI3XFxcIiB4Mj1cXFwiN1xcXCIgeTI9XFxcIjE3XFxcIj48L2xpbmU+PHBvbHlsaW5lIHBvaW50cz1cXFwiMTcgMTcgNyAxNyA3IDdcXFwiPjwvcG9seWxpbmU+XCIsXCJhcnJvdy1kb3duLXJpZ2h0XCI6XCI8bGluZSB4MT1cXFwiN1xcXCIgeTE9XFxcIjdcXFwiIHgyPVxcXCIxN1xcXCIgeTI9XFxcIjE3XFxcIj48L2xpbmU+PHBvbHlsaW5lIHBvaW50cz1cXFwiMTcgNyAxNyAxNyA3IDE3XFxcIj48L3BvbHlsaW5lPlwiLFwiYXJyb3ctZG93blwiOlwiPGxpbmUgeDE9XFxcIjEyXFxcIiB5MT1cXFwiNVxcXCIgeDI9XFxcIjEyXFxcIiB5Mj1cXFwiMTlcXFwiPjwvbGluZT48cG9seWxpbmUgcG9pbnRzPVxcXCIxOSAxMiAxMiAxOSA1IDEyXFxcIj48L3BvbHlsaW5lPlwiLFwiYXJyb3ctbGVmdC1jaXJjbGVcIjpcIjxjaXJjbGUgY3g9XFxcIjEyXFxcIiBjeT1cXFwiMTJcXFwiIHI9XFxcIjEwXFxcIj48L2NpcmNsZT48cG9seWxpbmUgcG9pbnRzPVxcXCIxMiA4IDggMTIgMTIgMTZcXFwiPjwvcG9seWxpbmU+PGxpbmUgeDE9XFxcIjE2XFxcIiB5MT1cXFwiMTJcXFwiIHgyPVxcXCI4XFxcIiB5Mj1cXFwiMTJcXFwiPjwvbGluZT5cIixcImFycm93LWxlZnRcIjpcIjxsaW5lIHgxPVxcXCIxOVxcXCIgeTE9XFxcIjEyXFxcIiB4Mj1cXFwiNVxcXCIgeTI9XFxcIjEyXFxcIj48L2xpbmU+PHBvbHlsaW5lIHBvaW50cz1cXFwiMTIgMTkgNSAxMiAxMiA1XFxcIj48L3BvbHlsaW5lPlwiLFwiYXJyb3ctcmlnaHQtY2lyY2xlXCI6XCI8Y2lyY2xlIGN4PVxcXCIxMlxcXCIgY3k9XFxcIjEyXFxcIiByPVxcXCIxMFxcXCI+PC9jaXJjbGU+PHBvbHlsaW5lIHBvaW50cz1cXFwiMTIgMTYgMTYgMTIgMTIgOFxcXCI+PC9wb2x5bGluZT48bGluZSB4MT1cXFwiOFxcXCIgeTE9XFxcIjEyXFxcIiB4Mj1cXFwiMTZcXFwiIHkyPVxcXCIxMlxcXCI+PC9saW5lPlwiLFwiYXJyb3ctcmlnaHRcIjpcIjxsaW5lIHgxPVxcXCI1XFxcIiB5MT1cXFwiMTJcXFwiIHgyPVxcXCIxOVxcXCIgeTI9XFxcIjEyXFxcIj48L2xpbmU+PHBvbHlsaW5lIHBvaW50cz1cXFwiMTIgNSAxOSAxMiAxMiAxOVxcXCI+PC9wb2x5bGluZT5cIixcImFycm93LXVwLWNpcmNsZVwiOlwiPGNpcmNsZSBjeD1cXFwiMTJcXFwiIGN5PVxcXCIxMlxcXCIgcj1cXFwiMTBcXFwiPjwvY2lyY2xlPjxwb2x5bGluZSBwb2ludHM9XFxcIjE2IDEyIDEyIDggOCAxMlxcXCI+PC9wb2x5bGluZT48bGluZSB4MT1cXFwiMTJcXFwiIHkxPVxcXCIxNlxcXCIgeDI9XFxcIjEyXFxcIiB5Mj1cXFwiOFxcXCI+PC9saW5lPlwiLFwiYXJyb3ctdXAtbGVmdFwiOlwiPGxpbmUgeDE9XFxcIjE3XFxcIiB5MT1cXFwiMTdcXFwiIHgyPVxcXCI3XFxcIiB5Mj1cXFwiN1xcXCI+PC9saW5lPjxwb2x5bGluZSBwb2ludHM9XFxcIjcgMTcgNyA3IDE3IDdcXFwiPjwvcG9seWxpbmU+XCIsXCJhcnJvdy11cC1yaWdodFwiOlwiPGxpbmUgeDE9XFxcIjdcXFwiIHkxPVxcXCIxN1xcXCIgeDI9XFxcIjE3XFxcIiB5Mj1cXFwiN1xcXCI+PC9saW5lPjxwb2x5bGluZSBwb2ludHM9XFxcIjcgNyAxNyA3IDE3IDE3XFxcIj48L3BvbHlsaW5lPlwiLFwiYXJyb3ctdXBcIjpcIjxsaW5lIHgxPVxcXCIxMlxcXCIgeTE9XFxcIjE5XFxcIiB4Mj1cXFwiMTJcXFwiIHkyPVxcXCI1XFxcIj48L2xpbmU+PHBvbHlsaW5lIHBvaW50cz1cXFwiNSAxMiAxMiA1IDE5IDEyXFxcIj48L3BvbHlsaW5lPlwiLFwiYXQtc2lnblwiOlwiPGNpcmNsZSBjeD1cXFwiMTJcXFwiIGN5PVxcXCIxMlxcXCIgcj1cXFwiNFxcXCI+PC9jaXJjbGU+PHBhdGggZD1cXFwiTTE2IDh2NWEzIDMgMCAwIDAgNiAwdi0xYTEwIDEwIDAgMSAwLTMuOTIgNy45NFxcXCI+PC9wYXRoPlwiLFwiYXdhcmRcIjpcIjxjaXJjbGUgY3g9XFxcIjEyXFxcIiBjeT1cXFwiOFxcXCIgcj1cXFwiN1xcXCI+PC9jaXJjbGU+PHBvbHlsaW5lIHBvaW50cz1cXFwiOC4yMSAxMy44OSA3IDIzIDEyIDIwIDE3IDIzIDE1Ljc5IDEzLjg4XFxcIj48L3BvbHlsaW5lPlwiLFwiYmFyLWNoYXJ0LTJcIjpcIjxsaW5lIHgxPVxcXCIxOFxcXCIgeTE9XFxcIjIwXFxcIiB4Mj1cXFwiMThcXFwiIHkyPVxcXCIxMFxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCIxMlxcXCIgeTE9XFxcIjIwXFxcIiB4Mj1cXFwiMTJcXFwiIHkyPVxcXCI0XFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjZcXFwiIHkxPVxcXCIyMFxcXCIgeDI9XFxcIjZcXFwiIHkyPVxcXCIxNFxcXCI+PC9saW5lPlwiLFwiYmFyLWNoYXJ0XCI6XCI8bGluZSB4MT1cXFwiMTJcXFwiIHkxPVxcXCIyMFxcXCIgeDI9XFxcIjEyXFxcIiB5Mj1cXFwiMTBcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiMThcXFwiIHkxPVxcXCIyMFxcXCIgeDI9XFxcIjE4XFxcIiB5Mj1cXFwiNFxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCI2XFxcIiB5MT1cXFwiMjBcXFwiIHgyPVxcXCI2XFxcIiB5Mj1cXFwiMTZcXFwiPjwvbGluZT5cIixcImJhdHRlcnktY2hhcmdpbmdcIjpcIjxwYXRoIGQ9XFxcIk01IDE4SDNhMiAyIDAgMCAxLTItMlY4YTIgMiAwIDAgMSAyLTJoMy4xOU0xNSA2aDJhMiAyIDAgMCAxIDIgMnY4YTIgMiAwIDAgMS0yIDJoLTMuMTlcXFwiPjwvcGF0aD48bGluZSB4MT1cXFwiMjNcXFwiIHkxPVxcXCIxM1xcXCIgeDI9XFxcIjIzXFxcIiB5Mj1cXFwiMTFcXFwiPjwvbGluZT48cG9seWxpbmUgcG9pbnRzPVxcXCIxMSA2IDcgMTIgMTMgMTIgOSAxOFxcXCI+PC9wb2x5bGluZT5cIixcImJhdHRlcnlcIjpcIjxyZWN0IHg9XFxcIjFcXFwiIHk9XFxcIjZcXFwiIHdpZHRoPVxcXCIxOFxcXCIgaGVpZ2h0PVxcXCIxMlxcXCIgcng9XFxcIjJcXFwiIHJ5PVxcXCIyXFxcIj48L3JlY3Q+PGxpbmUgeDE9XFxcIjIzXFxcIiB5MT1cXFwiMTNcXFwiIHgyPVxcXCIyM1xcXCIgeTI9XFxcIjExXFxcIj48L2xpbmU+XCIsXCJiZWxsLW9mZlwiOlwiPHBhdGggZD1cXFwiTTEzLjczIDIxYTIgMiAwIDAgMS0zLjQ2IDBcXFwiPjwvcGF0aD48cGF0aCBkPVxcXCJNMTguNjMgMTNBMTcuODkgMTcuODkgMCAwIDEgMTggOFxcXCI+PC9wYXRoPjxwYXRoIGQ9XFxcIk02LjI2IDYuMjZBNS44NiA1Ljg2IDAgMCAwIDYgOGMwIDctMyA5LTMgOWgxNFxcXCI+PC9wYXRoPjxwYXRoIGQ9XFxcIk0xOCA4YTYgNiAwIDAgMC05LjMzLTVcXFwiPjwvcGF0aD48bGluZSB4MT1cXFwiMVxcXCIgeTE9XFxcIjFcXFwiIHgyPVxcXCIyM1xcXCIgeTI9XFxcIjIzXFxcIj48L2xpbmU+XCIsXCJiZWxsXCI6XCI8cGF0aCBkPVxcXCJNMTggOEE2IDYgMCAwIDAgNiA4YzAgNy0zIDktMyA5aDE4cy0zLTItMy05XFxcIj48L3BhdGg+PHBhdGggZD1cXFwiTTEzLjczIDIxYTIgMiAwIDAgMS0zLjQ2IDBcXFwiPjwvcGF0aD5cIixcImJsdWV0b290aFwiOlwiPHBvbHlsaW5lIHBvaW50cz1cXFwiNi41IDYuNSAxNy41IDE3LjUgMTIgMjMgMTIgMSAxNy41IDYuNSA2LjUgMTcuNVxcXCI+PC9wb2x5bGluZT5cIixcImJvbGRcIjpcIjxwYXRoIGQ9XFxcIk02IDRoOGE0IDQgMCAwIDEgNCA0IDQgNCAwIDAgMS00IDRINnpcXFwiPjwvcGF0aD48cGF0aCBkPVxcXCJNNiAxMmg5YTQgNCAwIDAgMSA0IDQgNCA0IDAgMCAxLTQgNEg2elxcXCI+PC9wYXRoPlwiLFwiYm9vay1vcGVuXCI6XCI8cGF0aCBkPVxcXCJNMiAzaDZhNCA0IDAgMCAxIDQgNHYxNGEzIDMgMCAwIDAtMy0zSDJ6XFxcIj48L3BhdGg+PHBhdGggZD1cXFwiTTIyIDNoLTZhNCA0IDAgMCAwLTQgNHYxNGEzIDMgMCAwIDEgMy0zaDd6XFxcIj48L3BhdGg+XCIsXCJib29rXCI6XCI8cGF0aCBkPVxcXCJNNCAxOS41QTIuNSAyLjUgMCAwIDEgNi41IDE3SDIwXFxcIj48L3BhdGg+PHBhdGggZD1cXFwiTTYuNSAySDIwdjIwSDYuNUEyLjUgMi41IDAgMCAxIDQgMTkuNXYtMTVBMi41IDIuNSAwIDAgMSA2LjUgMnpcXFwiPjwvcGF0aD5cIixcImJvb2ttYXJrXCI6XCI8cGF0aCBkPVxcXCJNMTkgMjFsLTctNS03IDVWNWEyIDIgMCAwIDEgMi0yaDEwYTIgMiAwIDAgMSAyIDJ6XFxcIj48L3BhdGg+XCIsXCJib3hcIjpcIjxwYXRoIGQ9XFxcIk0yMSAxNlY4YTIgMiAwIDAgMC0xLTEuNzNsLTctNGEyIDIgMCAwIDAtMiAwbC03IDRBMiAyIDAgMCAwIDMgOHY4YTIgMiAwIDAgMCAxIDEuNzNsNyA0YTIgMiAwIDAgMCAyIDBsNy00QTIgMiAwIDAgMCAyMSAxNnpcXFwiPjwvcGF0aD48cG9seWxpbmUgcG9pbnRzPVxcXCIzLjI3IDYuOTYgMTIgMTIuMDEgMjAuNzMgNi45NlxcXCI+PC9wb2x5bGluZT48bGluZSB4MT1cXFwiMTJcXFwiIHkxPVxcXCIyMi4wOFxcXCIgeDI9XFxcIjEyXFxcIiB5Mj1cXFwiMTJcXFwiPjwvbGluZT5cIixcImJyaWVmY2FzZVwiOlwiPHJlY3QgeD1cXFwiMlxcXCIgeT1cXFwiN1xcXCIgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjE0XFxcIiByeD1cXFwiMlxcXCIgcnk9XFxcIjJcXFwiPjwvcmVjdD48cGF0aCBkPVxcXCJNMTYgMjFWNWEyIDIgMCAwIDAtMi0yaC00YTIgMiAwIDAgMC0yIDJ2MTZcXFwiPjwvcGF0aD5cIixcImNhbGVuZGFyXCI6XCI8cmVjdCB4PVxcXCIzXFxcIiB5PVxcXCI0XFxcIiB3aWR0aD1cXFwiMThcXFwiIGhlaWdodD1cXFwiMThcXFwiIHJ4PVxcXCIyXFxcIiByeT1cXFwiMlxcXCI+PC9yZWN0PjxsaW5lIHgxPVxcXCIxNlxcXCIgeTE9XFxcIjJcXFwiIHgyPVxcXCIxNlxcXCIgeTI9XFxcIjZcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiOFxcXCIgeTE9XFxcIjJcXFwiIHgyPVxcXCI4XFxcIiB5Mj1cXFwiNlxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCIzXFxcIiB5MT1cXFwiMTBcXFwiIHgyPVxcXCIyMVxcXCIgeTI9XFxcIjEwXFxcIj48L2xpbmU+XCIsXCJjYW1lcmEtb2ZmXCI6XCI8bGluZSB4MT1cXFwiMVxcXCIgeTE9XFxcIjFcXFwiIHgyPVxcXCIyM1xcXCIgeTI9XFxcIjIzXFxcIj48L2xpbmU+PHBhdGggZD1cXFwiTTIxIDIxSDNhMiAyIDAgMCAxLTItMlY4YTIgMiAwIDAgMSAyLTJoM20zLTNoNmwyIDNoNGEyIDIgMCAwIDEgMiAydjkuMzRtLTcuNzItMi4wNmE0IDQgMCAxIDEtNS41Ni01LjU2XFxcIj48L3BhdGg+XCIsXCJjYW1lcmFcIjpcIjxwYXRoIGQ9XFxcIk0yMyAxOWEyIDIgMCAwIDEtMiAySDNhMiAyIDAgMCAxLTItMlY4YTIgMiAwIDAgMSAyLTJoNGwyLTNoNmwyIDNoNGEyIDIgMCAwIDEgMiAyelxcXCI+PC9wYXRoPjxjaXJjbGUgY3g9XFxcIjEyXFxcIiBjeT1cXFwiMTNcXFwiIHI9XFxcIjRcXFwiPjwvY2lyY2xlPlwiLFwiY2FzdFwiOlwiPHBhdGggZD1cXFwiTTIgMTYuMUE1IDUgMCAwIDEgNS45IDIwTTIgMTIuMDVBOSA5IDAgMCAxIDkuOTUgMjBNMiA4VjZhMiAyIDAgMCAxIDItMmgxNmEyIDIgMCAwIDEgMiAydjEyYTIgMiAwIDAgMS0yIDJoLTZcXFwiPjwvcGF0aD48bGluZSB4MT1cXFwiMlxcXCIgeTE9XFxcIjIwXFxcIiB4Mj1cXFwiMi4wMVxcXCIgeTI9XFxcIjIwXFxcIj48L2xpbmU+XCIsXCJjaGVjay1jaXJjbGVcIjpcIjxwYXRoIGQ9XFxcIk0yMiAxMS4wOFYxMmExMCAxMCAwIDEgMS01LjkzLTkuMTRcXFwiPjwvcGF0aD48cG9seWxpbmUgcG9pbnRzPVxcXCIyMiA0IDEyIDE0LjAxIDkgMTEuMDFcXFwiPjwvcG9seWxpbmU+XCIsXCJjaGVjay1zcXVhcmVcIjpcIjxwb2x5bGluZSBwb2ludHM9XFxcIjkgMTEgMTIgMTQgMjIgNFxcXCI+PC9wb2x5bGluZT48cGF0aCBkPVxcXCJNMjEgMTJ2N2EyIDIgMCAwIDEtMiAySDVhMiAyIDAgMCAxLTItMlY1YTIgMiAwIDAgMSAyLTJoMTFcXFwiPjwvcGF0aD5cIixcImNoZWNrXCI6XCI8cG9seWxpbmUgcG9pbnRzPVxcXCIyMCA2IDkgMTcgNCAxMlxcXCI+PC9wb2x5bGluZT5cIixcImNoZXZyb24tZG93blwiOlwiPHBvbHlsaW5lIHBvaW50cz1cXFwiNiA5IDEyIDE1IDE4IDlcXFwiPjwvcG9seWxpbmU+XCIsXCJjaGV2cm9uLWxlZnRcIjpcIjxwb2x5bGluZSBwb2ludHM9XFxcIjE1IDE4IDkgMTIgMTUgNlxcXCI+PC9wb2x5bGluZT5cIixcImNoZXZyb24tcmlnaHRcIjpcIjxwb2x5bGluZSBwb2ludHM9XFxcIjkgMTggMTUgMTIgOSA2XFxcIj48L3BvbHlsaW5lPlwiLFwiY2hldnJvbi11cFwiOlwiPHBvbHlsaW5lIHBvaW50cz1cXFwiMTggMTUgMTIgOSA2IDE1XFxcIj48L3BvbHlsaW5lPlwiLFwiY2hldnJvbnMtZG93blwiOlwiPHBvbHlsaW5lIHBvaW50cz1cXFwiNyAxMyAxMiAxOCAxNyAxM1xcXCI+PC9wb2x5bGluZT48cG9seWxpbmUgcG9pbnRzPVxcXCI3IDYgMTIgMTEgMTcgNlxcXCI+PC9wb2x5bGluZT5cIixcImNoZXZyb25zLWxlZnRcIjpcIjxwb2x5bGluZSBwb2ludHM9XFxcIjExIDE3IDYgMTIgMTEgN1xcXCI+PC9wb2x5bGluZT48cG9seWxpbmUgcG9pbnRzPVxcXCIxOCAxNyAxMyAxMiAxOCA3XFxcIj48L3BvbHlsaW5lPlwiLFwiY2hldnJvbnMtcmlnaHRcIjpcIjxwb2x5bGluZSBwb2ludHM9XFxcIjEzIDE3IDE4IDEyIDEzIDdcXFwiPjwvcG9seWxpbmU+PHBvbHlsaW5lIHBvaW50cz1cXFwiNiAxNyAxMSAxMiA2IDdcXFwiPjwvcG9seWxpbmU+XCIsXCJjaGV2cm9ucy11cFwiOlwiPHBvbHlsaW5lIHBvaW50cz1cXFwiMTcgMTEgMTIgNiA3IDExXFxcIj48L3BvbHlsaW5lPjxwb2x5bGluZSBwb2ludHM9XFxcIjE3IDE4IDEyIDEzIDcgMThcXFwiPjwvcG9seWxpbmU+XCIsXCJjaHJvbWVcIjpcIjxjaXJjbGUgY3g9XFxcIjEyXFxcIiBjeT1cXFwiMTJcXFwiIHI9XFxcIjEwXFxcIj48L2NpcmNsZT48Y2lyY2xlIGN4PVxcXCIxMlxcXCIgY3k9XFxcIjEyXFxcIiByPVxcXCI0XFxcIj48L2NpcmNsZT48bGluZSB4MT1cXFwiMjEuMTdcXFwiIHkxPVxcXCI4XFxcIiB4Mj1cXFwiMTJcXFwiIHkyPVxcXCI4XFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjMuOTVcXFwiIHkxPVxcXCI2LjA2XFxcIiB4Mj1cXFwiOC41NFxcXCIgeTI9XFxcIjE0XFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjEwLjg4XFxcIiB5MT1cXFwiMjEuOTRcXFwiIHgyPVxcXCIxNS40NlxcXCIgeTI9XFxcIjE0XFxcIj48L2xpbmU+XCIsXCJjaXJjbGVcIjpcIjxjaXJjbGUgY3g9XFxcIjEyXFxcIiBjeT1cXFwiMTJcXFwiIHI9XFxcIjEwXFxcIj48L2NpcmNsZT5cIixcImNsaXBib2FyZFwiOlwiPHBhdGggZD1cXFwiTTE2IDRoMmEyIDIgMCAwIDEgMiAydjE0YTIgMiAwIDAgMS0yIDJINmEyIDIgMCAwIDEtMi0yVjZhMiAyIDAgMCAxIDItMmgyXFxcIj48L3BhdGg+PHJlY3QgeD1cXFwiOFxcXCIgeT1cXFwiMlxcXCIgd2lkdGg9XFxcIjhcXFwiIGhlaWdodD1cXFwiNFxcXCIgcng9XFxcIjFcXFwiIHJ5PVxcXCIxXFxcIj48L3JlY3Q+XCIsXCJjbG9ja1wiOlwiPGNpcmNsZSBjeD1cXFwiMTJcXFwiIGN5PVxcXCIxMlxcXCIgcj1cXFwiMTBcXFwiPjwvY2lyY2xlPjxwb2x5bGluZSBwb2ludHM9XFxcIjEyIDYgMTIgMTIgMTYgMTRcXFwiPjwvcG9seWxpbmU+XCIsXCJjbG91ZC1kcml6emxlXCI6XCI8bGluZSB4MT1cXFwiOFxcXCIgeTE9XFxcIjE5XFxcIiB4Mj1cXFwiOFxcXCIgeTI9XFxcIjIxXFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjhcXFwiIHkxPVxcXCIxM1xcXCIgeDI9XFxcIjhcXFwiIHkyPVxcXCIxNVxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCIxNlxcXCIgeTE9XFxcIjE5XFxcIiB4Mj1cXFwiMTZcXFwiIHkyPVxcXCIyMVxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCIxNlxcXCIgeTE9XFxcIjEzXFxcIiB4Mj1cXFwiMTZcXFwiIHkyPVxcXCIxNVxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCIxMlxcXCIgeTE9XFxcIjIxXFxcIiB4Mj1cXFwiMTJcXFwiIHkyPVxcXCIyM1xcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCIxMlxcXCIgeTE9XFxcIjE1XFxcIiB4Mj1cXFwiMTJcXFwiIHkyPVxcXCIxN1xcXCI+PC9saW5lPjxwYXRoIGQ9XFxcIk0yMCAxNi41OEE1IDUgMCAwIDAgMTggN2gtMS4yNkE4IDggMCAxIDAgNCAxNS4yNVxcXCI+PC9wYXRoPlwiLFwiY2xvdWQtbGlnaHRuaW5nXCI6XCI8cGF0aCBkPVxcXCJNMTkgMTYuOUE1IDUgMCAwIDAgMTggN2gtMS4yNmE4IDggMCAxIDAtMTEuNjIgOVxcXCI+PC9wYXRoPjxwb2x5bGluZSBwb2ludHM9XFxcIjEzIDExIDkgMTcgMTUgMTcgMTEgMjNcXFwiPjwvcG9seWxpbmU+XCIsXCJjbG91ZC1vZmZcIjpcIjxwYXRoIGQ9XFxcIk0yMi42MSAxNi45NUE1IDUgMCAwIDAgMTggMTBoLTEuMjZhOCA4IDAgMCAwLTcuMDUtNk01IDVhOCA4IDAgMCAwIDQgMTVoOWE1IDUgMCAwIDAgMS43LS4zXFxcIj48L3BhdGg+PGxpbmUgeDE9XFxcIjFcXFwiIHkxPVxcXCIxXFxcIiB4Mj1cXFwiMjNcXFwiIHkyPVxcXCIyM1xcXCI+PC9saW5lPlwiLFwiY2xvdWQtcmFpblwiOlwiPGxpbmUgeDE9XFxcIjE2XFxcIiB5MT1cXFwiMTNcXFwiIHgyPVxcXCIxNlxcXCIgeTI9XFxcIjIxXFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjhcXFwiIHkxPVxcXCIxM1xcXCIgeDI9XFxcIjhcXFwiIHkyPVxcXCIyMVxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCIxMlxcXCIgeTE9XFxcIjE1XFxcIiB4Mj1cXFwiMTJcXFwiIHkyPVxcXCIyM1xcXCI+PC9saW5lPjxwYXRoIGQ9XFxcIk0yMCAxNi41OEE1IDUgMCAwIDAgMTggN2gtMS4yNkE4IDggMCAxIDAgNCAxNS4yNVxcXCI+PC9wYXRoPlwiLFwiY2xvdWQtc25vd1wiOlwiPHBhdGggZD1cXFwiTTIwIDE3LjU4QTUgNSAwIDAgMCAxOCA4aC0xLjI2QTggOCAwIDEgMCA0IDE2LjI1XFxcIj48L3BhdGg+PGxpbmUgeDE9XFxcIjhcXFwiIHkxPVxcXCIxNlxcXCIgeDI9XFxcIjguMDFcXFwiIHkyPVxcXCIxNlxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCI4XFxcIiB5MT1cXFwiMjBcXFwiIHgyPVxcXCI4LjAxXFxcIiB5Mj1cXFwiMjBcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiMTJcXFwiIHkxPVxcXCIxOFxcXCIgeDI9XFxcIjEyLjAxXFxcIiB5Mj1cXFwiMThcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiMTJcXFwiIHkxPVxcXCIyMlxcXCIgeDI9XFxcIjEyLjAxXFxcIiB5Mj1cXFwiMjJcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiMTZcXFwiIHkxPVxcXCIxNlxcXCIgeDI9XFxcIjE2LjAxXFxcIiB5Mj1cXFwiMTZcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiMTZcXFwiIHkxPVxcXCIyMFxcXCIgeDI9XFxcIjE2LjAxXFxcIiB5Mj1cXFwiMjBcXFwiPjwvbGluZT5cIixcImNsb3VkXCI6XCI8cGF0aCBkPVxcXCJNMTggMTBoLTEuMjZBOCA4IDAgMSAwIDkgMjBoOWE1IDUgMCAwIDAgMC0xMHpcXFwiPjwvcGF0aD5cIixcImNvZGVcIjpcIjxwb2x5bGluZSBwb2ludHM9XFxcIjE2IDE4IDIyIDEyIDE2IDZcXFwiPjwvcG9seWxpbmU+PHBvbHlsaW5lIHBvaW50cz1cXFwiOCA2IDIgMTIgOCAxOFxcXCI+PC9wb2x5bGluZT5cIixcImNvZGVwZW5cIjpcIjxwb2x5Z29uIHBvaW50cz1cXFwiMTIgMiAyMiA4LjUgMjIgMTUuNSAxMiAyMiAyIDE1LjUgMiA4LjUgMTIgMlxcXCI+PC9wb2x5Z29uPjxsaW5lIHgxPVxcXCIxMlxcXCIgeTE9XFxcIjIyXFxcIiB4Mj1cXFwiMTJcXFwiIHkyPVxcXCIxNS41XFxcIj48L2xpbmU+PHBvbHlsaW5lIHBvaW50cz1cXFwiMjIgOC41IDEyIDE1LjUgMiA4LjVcXFwiPjwvcG9seWxpbmU+PHBvbHlsaW5lIHBvaW50cz1cXFwiMiAxNS41IDEyIDguNSAyMiAxNS41XFxcIj48L3BvbHlsaW5lPjxsaW5lIHgxPVxcXCIxMlxcXCIgeTE9XFxcIjJcXFwiIHgyPVxcXCIxMlxcXCIgeTI9XFxcIjguNVxcXCI+PC9saW5lPlwiLFwiY29kZXNhbmRib3hcIjpcIjxwYXRoIGQ9XFxcIk0yMSAxNlY4YTIgMiAwIDAgMC0xLTEuNzNsLTctNGEyIDIgMCAwIDAtMiAwbC03IDRBMiAyIDAgMCAwIDMgOHY4YTIgMiAwIDAgMCAxIDEuNzNsNyA0YTIgMiAwIDAgMCAyIDBsNy00QTIgMiAwIDAgMCAyMSAxNnpcXFwiPjwvcGF0aD48cG9seWxpbmUgcG9pbnRzPVxcXCI3LjUgNC4yMSAxMiA2LjgxIDE2LjUgNC4yMVxcXCI+PC9wb2x5bGluZT48cG9seWxpbmUgcG9pbnRzPVxcXCI3LjUgMTkuNzkgNy41IDE0LjYgMyAxMlxcXCI+PC9wb2x5bGluZT48cG9seWxpbmUgcG9pbnRzPVxcXCIyMSAxMiAxNi41IDE0LjYgMTYuNSAxOS43OVxcXCI+PC9wb2x5bGluZT48cG9seWxpbmUgcG9pbnRzPVxcXCIzLjI3IDYuOTYgMTIgMTIuMDEgMjAuNzMgNi45NlxcXCI+PC9wb2x5bGluZT48bGluZSB4MT1cXFwiMTJcXFwiIHkxPVxcXCIyMi4wOFxcXCIgeDI9XFxcIjEyXFxcIiB5Mj1cXFwiMTJcXFwiPjwvbGluZT5cIixcImNvZmZlZVwiOlwiPHBhdGggZD1cXFwiTTE4IDhoMWE0IDQgMCAwIDEgMCA4aC0xXFxcIj48L3BhdGg+PHBhdGggZD1cXFwiTTIgOGgxNnY5YTQgNCAwIDAgMS00IDRINmE0IDQgMCAwIDEtNC00Vjh6XFxcIj48L3BhdGg+PGxpbmUgeDE9XFxcIjZcXFwiIHkxPVxcXCIxXFxcIiB4Mj1cXFwiNlxcXCIgeTI9XFxcIjRcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiMTBcXFwiIHkxPVxcXCIxXFxcIiB4Mj1cXFwiMTBcXFwiIHkyPVxcXCI0XFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjE0XFxcIiB5MT1cXFwiMVxcXCIgeDI9XFxcIjE0XFxcIiB5Mj1cXFwiNFxcXCI+PC9saW5lPlwiLFwiY29sdW1uc1wiOlwiPHBhdGggZD1cXFwiTTEyIDNoN2EyIDIgMCAwIDEgMiAydjE0YTIgMiAwIDAgMS0yIDJoLTdtMC0xOEg1YTIgMiAwIDAgMC0yIDJ2MTRhMiAyIDAgMCAwIDIgMmg3bTAtMTh2MThcXFwiPjwvcGF0aD5cIixcImNvbW1hbmRcIjpcIjxwYXRoIGQ9XFxcIk0xOCAzYTMgMyAwIDAgMC0zIDN2MTJhMyAzIDAgMCAwIDMgMyAzIDMgMCAwIDAgMy0zIDMgMyAwIDAgMC0zLTNINmEzIDMgMCAwIDAtMyAzIDMgMyAwIDAgMCAzIDMgMyAzIDAgMCAwIDMtM1Y2YTMgMyAwIDAgMC0zLTMgMyAzIDAgMCAwLTMgMyAzIDMgMCAwIDAgMyAzaDEyYTMgMyAwIDAgMCAzLTMgMyAzIDAgMCAwLTMtM3pcXFwiPjwvcGF0aD5cIixcImNvbXBhc3NcIjpcIjxjaXJjbGUgY3g9XFxcIjEyXFxcIiBjeT1cXFwiMTJcXFwiIHI9XFxcIjEwXFxcIj48L2NpcmNsZT48cG9seWdvbiBwb2ludHM9XFxcIjE2LjI0IDcuNzYgMTQuMTIgMTQuMTIgNy43NiAxNi4yNCA5Ljg4IDkuODggMTYuMjQgNy43NlxcXCI+PC9wb2x5Z29uPlwiLFwiY29weVwiOlwiPHJlY3QgeD1cXFwiOVxcXCIgeT1cXFwiOVxcXCIgd2lkdGg9XFxcIjEzXFxcIiBoZWlnaHQ9XFxcIjEzXFxcIiByeD1cXFwiMlxcXCIgcnk9XFxcIjJcXFwiPjwvcmVjdD48cGF0aCBkPVxcXCJNNSAxNUg0YTIgMiAwIDAgMS0yLTJWNGEyIDIgMCAwIDEgMi0yaDlhMiAyIDAgMCAxIDIgMnYxXFxcIj48L3BhdGg+XCIsXCJjb3JuZXItZG93bi1sZWZ0XCI6XCI8cG9seWxpbmUgcG9pbnRzPVxcXCI5IDEwIDQgMTUgOSAyMFxcXCI+PC9wb2x5bGluZT48cGF0aCBkPVxcXCJNMjAgNHY3YTQgNCAwIDAgMS00IDRINFxcXCI+PC9wYXRoPlwiLFwiY29ybmVyLWRvd24tcmlnaHRcIjpcIjxwb2x5bGluZSBwb2ludHM9XFxcIjE1IDEwIDIwIDE1IDE1IDIwXFxcIj48L3BvbHlsaW5lPjxwYXRoIGQ9XFxcIk00IDR2N2E0IDQgMCAwIDAgNCA0aDEyXFxcIj48L3BhdGg+XCIsXCJjb3JuZXItbGVmdC1kb3duXCI6XCI8cG9seWxpbmUgcG9pbnRzPVxcXCIxNCAxNSA5IDIwIDQgMTVcXFwiPjwvcG9seWxpbmU+PHBhdGggZD1cXFwiTTIwIDRoLTdhNCA0IDAgMCAwLTQgNHYxMlxcXCI+PC9wYXRoPlwiLFwiY29ybmVyLWxlZnQtdXBcIjpcIjxwb2x5bGluZSBwb2ludHM9XFxcIjE0IDkgOSA0IDQgOVxcXCI+PC9wb2x5bGluZT48cGF0aCBkPVxcXCJNMjAgMjBoLTdhNCA0IDAgMCAxLTQtNFY0XFxcIj48L3BhdGg+XCIsXCJjb3JuZXItcmlnaHQtZG93blwiOlwiPHBvbHlsaW5lIHBvaW50cz1cXFwiMTAgMTUgMTUgMjAgMjAgMTVcXFwiPjwvcG9seWxpbmU+PHBhdGggZD1cXFwiTTQgNGg3YTQgNCAwIDAgMSA0IDR2MTJcXFwiPjwvcGF0aD5cIixcImNvcm5lci1yaWdodC11cFwiOlwiPHBvbHlsaW5lIHBvaW50cz1cXFwiMTAgOSAxNSA0IDIwIDlcXFwiPjwvcG9seWxpbmU+PHBhdGggZD1cXFwiTTQgMjBoN2E0IDQgMCAwIDAgNC00VjRcXFwiPjwvcGF0aD5cIixcImNvcm5lci11cC1sZWZ0XCI6XCI8cG9seWxpbmUgcG9pbnRzPVxcXCI5IDE0IDQgOSA5IDRcXFwiPjwvcG9seWxpbmU+PHBhdGggZD1cXFwiTTIwIDIwdi03YTQgNCAwIDAgMC00LTRINFxcXCI+PC9wYXRoPlwiLFwiY29ybmVyLXVwLXJpZ2h0XCI6XCI8cG9seWxpbmUgcG9pbnRzPVxcXCIxNSAxNCAyMCA5IDE1IDRcXFwiPjwvcG9seWxpbmU+PHBhdGggZD1cXFwiTTQgMjB2LTdhNCA0IDAgMCAxIDQtNGgxMlxcXCI+PC9wYXRoPlwiLFwiY3B1XCI6XCI8cmVjdCB4PVxcXCI0XFxcIiB5PVxcXCI0XFxcIiB3aWR0aD1cXFwiMTZcXFwiIGhlaWdodD1cXFwiMTZcXFwiIHJ4PVxcXCIyXFxcIiByeT1cXFwiMlxcXCI+PC9yZWN0PjxyZWN0IHg9XFxcIjlcXFwiIHk9XFxcIjlcXFwiIHdpZHRoPVxcXCI2XFxcIiBoZWlnaHQ9XFxcIjZcXFwiPjwvcmVjdD48bGluZSB4MT1cXFwiOVxcXCIgeTE9XFxcIjFcXFwiIHgyPVxcXCI5XFxcIiB5Mj1cXFwiNFxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCIxNVxcXCIgeTE9XFxcIjFcXFwiIHgyPVxcXCIxNVxcXCIgeTI9XFxcIjRcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiOVxcXCIgeTE9XFxcIjIwXFxcIiB4Mj1cXFwiOVxcXCIgeTI9XFxcIjIzXFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjE1XFxcIiB5MT1cXFwiMjBcXFwiIHgyPVxcXCIxNVxcXCIgeTI9XFxcIjIzXFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjIwXFxcIiB5MT1cXFwiOVxcXCIgeDI9XFxcIjIzXFxcIiB5Mj1cXFwiOVxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCIyMFxcXCIgeTE9XFxcIjE0XFxcIiB4Mj1cXFwiMjNcXFwiIHkyPVxcXCIxNFxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCIxXFxcIiB5MT1cXFwiOVxcXCIgeDI9XFxcIjRcXFwiIHkyPVxcXCI5XFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjFcXFwiIHkxPVxcXCIxNFxcXCIgeDI9XFxcIjRcXFwiIHkyPVxcXCIxNFxcXCI+PC9saW5lPlwiLFwiY3JlZGl0LWNhcmRcIjpcIjxyZWN0IHg9XFxcIjFcXFwiIHk9XFxcIjRcXFwiIHdpZHRoPVxcXCIyMlxcXCIgaGVpZ2h0PVxcXCIxNlxcXCIgcng9XFxcIjJcXFwiIHJ5PVxcXCIyXFxcIj48L3JlY3Q+PGxpbmUgeDE9XFxcIjFcXFwiIHkxPVxcXCIxMFxcXCIgeDI9XFxcIjIzXFxcIiB5Mj1cXFwiMTBcXFwiPjwvbGluZT5cIixcImNyb3BcIjpcIjxwYXRoIGQ9XFxcIk02LjEzIDFMNiAxNmEyIDIgMCAwIDAgMiAyaDE1XFxcIj48L3BhdGg+PHBhdGggZD1cXFwiTTEgNi4xM0wxNiA2YTIgMiAwIDAgMSAyIDJ2MTVcXFwiPjwvcGF0aD5cIixcImNyb3NzaGFpclwiOlwiPGNpcmNsZSBjeD1cXFwiMTJcXFwiIGN5PVxcXCIxMlxcXCIgcj1cXFwiMTBcXFwiPjwvY2lyY2xlPjxsaW5lIHgxPVxcXCIyMlxcXCIgeTE9XFxcIjEyXFxcIiB4Mj1cXFwiMThcXFwiIHkyPVxcXCIxMlxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCI2XFxcIiB5MT1cXFwiMTJcXFwiIHgyPVxcXCIyXFxcIiB5Mj1cXFwiMTJcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiMTJcXFwiIHkxPVxcXCI2XFxcIiB4Mj1cXFwiMTJcXFwiIHkyPVxcXCIyXFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjEyXFxcIiB5MT1cXFwiMjJcXFwiIHgyPVxcXCIxMlxcXCIgeTI9XFxcIjE4XFxcIj48L2xpbmU+XCIsXCJkYXRhYmFzZVwiOlwiPGVsbGlwc2UgY3g9XFxcIjEyXFxcIiBjeT1cXFwiNVxcXCIgcng9XFxcIjlcXFwiIHJ5PVxcXCIzXFxcIj48L2VsbGlwc2U+PHBhdGggZD1cXFwiTTIxIDEyYzAgMS42Ni00IDMtOSAzcy05LTEuMzQtOS0zXFxcIj48L3BhdGg+PHBhdGggZD1cXFwiTTMgNXYxNGMwIDEuNjYgNCAzIDkgM3M5LTEuMzQgOS0zVjVcXFwiPjwvcGF0aD5cIixcImRlbGV0ZVwiOlwiPHBhdGggZD1cXFwiTTIxIDRIOGwtNyA4IDcgOGgxM2EyIDIgMCAwIDAgMi0yVjZhMiAyIDAgMCAwLTItMnpcXFwiPjwvcGF0aD48bGluZSB4MT1cXFwiMThcXFwiIHkxPVxcXCI5XFxcIiB4Mj1cXFwiMTJcXFwiIHkyPVxcXCIxNVxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCIxMlxcXCIgeTE9XFxcIjlcXFwiIHgyPVxcXCIxOFxcXCIgeTI9XFxcIjE1XFxcIj48L2xpbmU+XCIsXCJkaXNjXCI6XCI8Y2lyY2xlIGN4PVxcXCIxMlxcXCIgY3k9XFxcIjEyXFxcIiByPVxcXCIxMFxcXCI+PC9jaXJjbGU+PGNpcmNsZSBjeD1cXFwiMTJcXFwiIGN5PVxcXCIxMlxcXCIgcj1cXFwiM1xcXCI+PC9jaXJjbGU+XCIsXCJkaXZpZGUtY2lyY2xlXCI6XCI8bGluZSB4MT1cXFwiOFxcXCIgeTE9XFxcIjEyXFxcIiB4Mj1cXFwiMTZcXFwiIHkyPVxcXCIxMlxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCIxMlxcXCIgeTE9XFxcIjE2XFxcIiB4Mj1cXFwiMTJcXFwiIHkyPVxcXCIxNlxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCIxMlxcXCIgeTE9XFxcIjhcXFwiIHgyPVxcXCIxMlxcXCIgeTI9XFxcIjhcXFwiPjwvbGluZT48Y2lyY2xlIGN4PVxcXCIxMlxcXCIgY3k9XFxcIjEyXFxcIiByPVxcXCIxMFxcXCI+PC9jaXJjbGU+XCIsXCJkaXZpZGUtc3F1YXJlXCI6XCI8cmVjdCB4PVxcXCIzXFxcIiB5PVxcXCIzXFxcIiB3aWR0aD1cXFwiMThcXFwiIGhlaWdodD1cXFwiMThcXFwiIHJ4PVxcXCIyXFxcIiByeT1cXFwiMlxcXCI+PC9yZWN0PjxsaW5lIHgxPVxcXCI4XFxcIiB5MT1cXFwiMTJcXFwiIHgyPVxcXCIxNlxcXCIgeTI9XFxcIjEyXFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjEyXFxcIiB5MT1cXFwiMTZcXFwiIHgyPVxcXCIxMlxcXCIgeTI9XFxcIjE2XFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjEyXFxcIiB5MT1cXFwiOFxcXCIgeDI9XFxcIjEyXFxcIiB5Mj1cXFwiOFxcXCI+PC9saW5lPlwiLFwiZGl2aWRlXCI6XCI8Y2lyY2xlIGN4PVxcXCIxMlxcXCIgY3k9XFxcIjZcXFwiIHI9XFxcIjJcXFwiPjwvY2lyY2xlPjxsaW5lIHgxPVxcXCI1XFxcIiB5MT1cXFwiMTJcXFwiIHgyPVxcXCIxOVxcXCIgeTI9XFxcIjEyXFxcIj48L2xpbmU+PGNpcmNsZSBjeD1cXFwiMTJcXFwiIGN5PVxcXCIxOFxcXCIgcj1cXFwiMlxcXCI+PC9jaXJjbGU+XCIsXCJkb2xsYXItc2lnblwiOlwiPGxpbmUgeDE9XFxcIjEyXFxcIiB5MT1cXFwiMVxcXCIgeDI9XFxcIjEyXFxcIiB5Mj1cXFwiMjNcXFwiPjwvbGluZT48cGF0aCBkPVxcXCJNMTcgNUg5LjVhMy41IDMuNSAwIDAgMCAwIDdoNWEzLjUgMy41IDAgMCAxIDAgN0g2XFxcIj48L3BhdGg+XCIsXCJkb3dubG9hZC1jbG91ZFwiOlwiPHBvbHlsaW5lIHBvaW50cz1cXFwiOCAxNyAxMiAyMSAxNiAxN1xcXCI+PC9wb2x5bGluZT48bGluZSB4MT1cXFwiMTJcXFwiIHkxPVxcXCIxMlxcXCIgeDI9XFxcIjEyXFxcIiB5Mj1cXFwiMjFcXFwiPjwvbGluZT48cGF0aCBkPVxcXCJNMjAuODggMTguMDlBNSA1IDAgMCAwIDE4IDloLTEuMjZBOCA4IDAgMSAwIDMgMTYuMjlcXFwiPjwvcGF0aD5cIixcImRvd25sb2FkXCI6XCI8cGF0aCBkPVxcXCJNMjEgMTV2NGEyIDIgMCAwIDEtMiAySDVhMiAyIDAgMCAxLTItMnYtNFxcXCI+PC9wYXRoPjxwb2x5bGluZSBwb2ludHM9XFxcIjcgMTAgMTIgMTUgMTcgMTBcXFwiPjwvcG9seWxpbmU+PGxpbmUgeDE9XFxcIjEyXFxcIiB5MT1cXFwiMTVcXFwiIHgyPVxcXCIxMlxcXCIgeTI9XFxcIjNcXFwiPjwvbGluZT5cIixcImRyaWJiYmxlXCI6XCI8Y2lyY2xlIGN4PVxcXCIxMlxcXCIgY3k9XFxcIjEyXFxcIiByPVxcXCIxMFxcXCI+PC9jaXJjbGU+PHBhdGggZD1cXFwiTTguNTYgMi43NWM0LjM3IDYuMDMgNi4wMiA5LjQyIDguMDMgMTcuNzJtMi41NC0xNS4zOGMtMy43MiA0LjM1LTguOTQgNS42Ni0xNi44OCA1Ljg1bTE5LjUgMS45Yy0zLjUtLjkzLTYuNjMtLjgyLTguOTQgMC0yLjU4LjkyLTUuMDEgMi44Ni03LjQ0IDYuMzJcXFwiPjwvcGF0aD5cIixcImRyb3BsZXRcIjpcIjxwYXRoIGQ9XFxcIk0xMiAyLjY5bDUuNjYgNS42NmE4IDggMCAxIDEtMTEuMzEgMHpcXFwiPjwvcGF0aD5cIixcImVkaXQtMlwiOlwiPHBhdGggZD1cXFwiTTE3IDNhMi44MjggMi44MjggMCAxIDEgNCA0TDcuNSAyMC41IDIgMjJsMS41LTUuNUwxNyAzelxcXCI+PC9wYXRoPlwiLFwiZWRpdC0zXCI6XCI8cGF0aCBkPVxcXCJNMTIgMjBoOVxcXCI+PC9wYXRoPjxwYXRoIGQ9XFxcIk0xNi41IDMuNWEyLjEyMSAyLjEyMSAwIDAgMSAzIDNMNyAxOWwtNCAxIDEtNEwxNi41IDMuNXpcXFwiPjwvcGF0aD5cIixcImVkaXRcIjpcIjxwYXRoIGQ9XFxcIk0xMSA0SDRhMiAyIDAgMCAwLTIgMnYxNGEyIDIgMCAwIDAgMiAyaDE0YTIgMiAwIDAgMCAyLTJ2LTdcXFwiPjwvcGF0aD48cGF0aCBkPVxcXCJNMTguNSAyLjVhMi4xMjEgMi4xMjEgMCAwIDEgMyAzTDEyIDE1bC00IDEgMS00IDkuNS05LjV6XFxcIj48L3BhdGg+XCIsXCJleHRlcm5hbC1saW5rXCI6XCI8cGF0aCBkPVxcXCJNMTggMTN2NmEyIDIgMCAwIDEtMiAySDVhMiAyIDAgMCAxLTItMlY4YTIgMiAwIDAgMSAyLTJoNlxcXCI+PC9wYXRoPjxwb2x5bGluZSBwb2ludHM9XFxcIjE1IDMgMjEgMyAyMSA5XFxcIj48L3BvbHlsaW5lPjxsaW5lIHgxPVxcXCIxMFxcXCIgeTE9XFxcIjE0XFxcIiB4Mj1cXFwiMjFcXFwiIHkyPVxcXCIzXFxcIj48L2xpbmU+XCIsXCJleWUtb2ZmXCI6XCI8cGF0aCBkPVxcXCJNMTcuOTQgMTcuOTRBMTAuMDcgMTAuMDcgMCAwIDEgMTIgMjBjLTcgMC0xMS04LTExLThhMTguNDUgMTguNDUgMCAwIDEgNS4wNi01Ljk0TTkuOSA0LjI0QTkuMTIgOS4xMiAwIDAgMSAxMiA0YzcgMCAxMSA4IDExIDhhMTguNSAxOC41IDAgMCAxLTIuMTYgMy4xOW0tNi43Mi0xLjA3YTMgMyAwIDEgMS00LjI0LTQuMjRcXFwiPjwvcGF0aD48bGluZSB4MT1cXFwiMVxcXCIgeTE9XFxcIjFcXFwiIHgyPVxcXCIyM1xcXCIgeTI9XFxcIjIzXFxcIj48L2xpbmU+XCIsXCJleWVcIjpcIjxwYXRoIGQ9XFxcIk0xIDEyczQtOCAxMS04IDExIDggMTEgOC00IDgtMTEgOC0xMS04LTExLTh6XFxcIj48L3BhdGg+PGNpcmNsZSBjeD1cXFwiMTJcXFwiIGN5PVxcXCIxMlxcXCIgcj1cXFwiM1xcXCI+PC9jaXJjbGU+XCIsXCJmYWNlYm9va1wiOlwiPHBhdGggZD1cXFwiTTE4IDJoLTNhNSA1IDAgMCAwLTUgNXYzSDd2NGgzdjhoNHYtOGgzbDEtNGgtNFY3YTEgMSAwIDAgMSAxLTFoM3pcXFwiPjwvcGF0aD5cIixcImZhc3QtZm9yd2FyZFwiOlwiPHBvbHlnb24gcG9pbnRzPVxcXCIxMyAxOSAyMiAxMiAxMyA1IDEzIDE5XFxcIj48L3BvbHlnb24+PHBvbHlnb24gcG9pbnRzPVxcXCIyIDE5IDExIDEyIDIgNSAyIDE5XFxcIj48L3BvbHlnb24+XCIsXCJmZWF0aGVyXCI6XCI8cGF0aCBkPVxcXCJNMjAuMjQgMTIuMjRhNiA2IDAgMCAwLTguNDktOC40OUw1IDEwLjVWMTloOC41elxcXCI+PC9wYXRoPjxsaW5lIHgxPVxcXCIxNlxcXCIgeTE9XFxcIjhcXFwiIHgyPVxcXCIyXFxcIiB5Mj1cXFwiMjJcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiMTcuNVxcXCIgeTE9XFxcIjE1XFxcIiB4Mj1cXFwiOVxcXCIgeTI9XFxcIjE1XFxcIj48L2xpbmU+XCIsXCJmaWdtYVwiOlwiPHBhdGggZD1cXFwiTTUgNS41QTMuNSAzLjUgMCAwIDEgOC41IDJIMTJ2N0g4LjVBMy41IDMuNSAwIDAgMSA1IDUuNXpcXFwiPjwvcGF0aD48cGF0aCBkPVxcXCJNMTIgMmgzLjVhMy41IDMuNSAwIDEgMSAwIDdIMTJWMnpcXFwiPjwvcGF0aD48cGF0aCBkPVxcXCJNMTIgMTIuNWEzLjUgMy41IDAgMSAxIDcgMCAzLjUgMy41IDAgMSAxLTcgMHpcXFwiPjwvcGF0aD48cGF0aCBkPVxcXCJNNSAxOS41QTMuNSAzLjUgMCAwIDEgOC41IDE2SDEydjMuNWEzLjUgMy41IDAgMSAxLTcgMHpcXFwiPjwvcGF0aD48cGF0aCBkPVxcXCJNNSAxMi41QTMuNSAzLjUgMCAwIDEgOC41IDlIMTJ2N0g4LjVBMy41IDMuNSAwIDAgMSA1IDEyLjV6XFxcIj48L3BhdGg+XCIsXCJmaWxlLW1pbnVzXCI6XCI8cGF0aCBkPVxcXCJNMTQgMkg2YTIgMiAwIDAgMC0yIDJ2MTZhMiAyIDAgMCAwIDIgMmgxMmEyIDIgMCAwIDAgMi0yVjh6XFxcIj48L3BhdGg+PHBvbHlsaW5lIHBvaW50cz1cXFwiMTQgMiAxNCA4IDIwIDhcXFwiPjwvcG9seWxpbmU+PGxpbmUgeDE9XFxcIjlcXFwiIHkxPVxcXCIxNVxcXCIgeDI9XFxcIjE1XFxcIiB5Mj1cXFwiMTVcXFwiPjwvbGluZT5cIixcImZpbGUtcGx1c1wiOlwiPHBhdGggZD1cXFwiTTE0IDJINmEyIDIgMCAwIDAtMiAydjE2YTIgMiAwIDAgMCAyIDJoMTJhMiAyIDAgMCAwIDItMlY4elxcXCI+PC9wYXRoPjxwb2x5bGluZSBwb2ludHM9XFxcIjE0IDIgMTQgOCAyMCA4XFxcIj48L3BvbHlsaW5lPjxsaW5lIHgxPVxcXCIxMlxcXCIgeTE9XFxcIjE4XFxcIiB4Mj1cXFwiMTJcXFwiIHkyPVxcXCIxMlxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCI5XFxcIiB5MT1cXFwiMTVcXFwiIHgyPVxcXCIxNVxcXCIgeTI9XFxcIjE1XFxcIj48L2xpbmU+XCIsXCJmaWxlLXRleHRcIjpcIjxwYXRoIGQ9XFxcIk0xNCAySDZhMiAyIDAgMCAwLTIgMnYxNmEyIDIgMCAwIDAgMiAyaDEyYTIgMiAwIDAgMCAyLTJWOHpcXFwiPjwvcGF0aD48cG9seWxpbmUgcG9pbnRzPVxcXCIxNCAyIDE0IDggMjAgOFxcXCI+PC9wb2x5bGluZT48bGluZSB4MT1cXFwiMTZcXFwiIHkxPVxcXCIxM1xcXCIgeDI9XFxcIjhcXFwiIHkyPVxcXCIxM1xcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCIxNlxcXCIgeTE9XFxcIjE3XFxcIiB4Mj1cXFwiOFxcXCIgeTI9XFxcIjE3XFxcIj48L2xpbmU+PHBvbHlsaW5lIHBvaW50cz1cXFwiMTAgOSA5IDkgOCA5XFxcIj48L3BvbHlsaW5lPlwiLFwiZmlsZVwiOlwiPHBhdGggZD1cXFwiTTEzIDJINmEyIDIgMCAwIDAtMiAydjE2YTIgMiAwIDAgMCAyIDJoMTJhMiAyIDAgMCAwIDItMlY5elxcXCI+PC9wYXRoPjxwb2x5bGluZSBwb2ludHM9XFxcIjEzIDIgMTMgOSAyMCA5XFxcIj48L3BvbHlsaW5lPlwiLFwiZmlsbVwiOlwiPHJlY3QgeD1cXFwiMlxcXCIgeT1cXFwiMlxcXCIgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiByeD1cXFwiMi4xOFxcXCIgcnk9XFxcIjIuMThcXFwiPjwvcmVjdD48bGluZSB4MT1cXFwiN1xcXCIgeTE9XFxcIjJcXFwiIHgyPVxcXCI3XFxcIiB5Mj1cXFwiMjJcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiMTdcXFwiIHkxPVxcXCIyXFxcIiB4Mj1cXFwiMTdcXFwiIHkyPVxcXCIyMlxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCIyXFxcIiB5MT1cXFwiMTJcXFwiIHgyPVxcXCIyMlxcXCIgeTI9XFxcIjEyXFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjJcXFwiIHkxPVxcXCI3XFxcIiB4Mj1cXFwiN1xcXCIgeTI9XFxcIjdcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiMlxcXCIgeTE9XFxcIjE3XFxcIiB4Mj1cXFwiN1xcXCIgeTI9XFxcIjE3XFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjE3XFxcIiB5MT1cXFwiMTdcXFwiIHgyPVxcXCIyMlxcXCIgeTI9XFxcIjE3XFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjE3XFxcIiB5MT1cXFwiN1xcXCIgeDI9XFxcIjIyXFxcIiB5Mj1cXFwiN1xcXCI+PC9saW5lPlwiLFwiZmlsdGVyXCI6XCI8cG9seWdvbiBwb2ludHM9XFxcIjIyIDMgMiAzIDEwIDEyLjQ2IDEwIDE5IDE0IDIxIDE0IDEyLjQ2IDIyIDNcXFwiPjwvcG9seWdvbj5cIixcImZsYWdcIjpcIjxwYXRoIGQ9XFxcIk00IDE1czEtMSA0LTEgNSAyIDggMiA0LTEgNC0xVjNzLTEgMS00IDEtNS0yLTgtMi00IDEtNCAxelxcXCI+PC9wYXRoPjxsaW5lIHgxPVxcXCI0XFxcIiB5MT1cXFwiMjJcXFwiIHgyPVxcXCI0XFxcIiB5Mj1cXFwiMTVcXFwiPjwvbGluZT5cIixcImZvbGRlci1taW51c1wiOlwiPHBhdGggZD1cXFwiTTIyIDE5YTIgMiAwIDAgMS0yIDJINGEyIDIgMCAwIDEtMi0yVjVhMiAyIDAgMCAxIDItMmg1bDIgM2g5YTIgMiAwIDAgMSAyIDJ6XFxcIj48L3BhdGg+PGxpbmUgeDE9XFxcIjlcXFwiIHkxPVxcXCIxNFxcXCIgeDI9XFxcIjE1XFxcIiB5Mj1cXFwiMTRcXFwiPjwvbGluZT5cIixcImZvbGRlci1wbHVzXCI6XCI8cGF0aCBkPVxcXCJNMjIgMTlhMiAyIDAgMCAxLTIgMkg0YTIgMiAwIDAgMS0yLTJWNWEyIDIgMCAwIDEgMi0yaDVsMiAzaDlhMiAyIDAgMCAxIDIgMnpcXFwiPjwvcGF0aD48bGluZSB4MT1cXFwiMTJcXFwiIHkxPVxcXCIxMVxcXCIgeDI9XFxcIjEyXFxcIiB5Mj1cXFwiMTdcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiOVxcXCIgeTE9XFxcIjE0XFxcIiB4Mj1cXFwiMTVcXFwiIHkyPVxcXCIxNFxcXCI+PC9saW5lPlwiLFwiZm9sZGVyXCI6XCI8cGF0aCBkPVxcXCJNMjIgMTlhMiAyIDAgMCAxLTIgMkg0YTIgMiAwIDAgMS0yLTJWNWEyIDIgMCAwIDEgMi0yaDVsMiAzaDlhMiAyIDAgMCAxIDIgMnpcXFwiPjwvcGF0aD5cIixcImZyYW1lclwiOlwiPHBhdGggZD1cXFwiTTUgMTZWOWgxNFYySDVsMTQgMTRoLTdtLTcgMGw3IDd2LTdtLTcgMGg3XFxcIj48L3BhdGg+XCIsXCJmcm93blwiOlwiPGNpcmNsZSBjeD1cXFwiMTJcXFwiIGN5PVxcXCIxMlxcXCIgcj1cXFwiMTBcXFwiPjwvY2lyY2xlPjxwYXRoIGQ9XFxcIk0xNiAxNnMtMS41LTItNC0yLTQgMi00IDJcXFwiPjwvcGF0aD48bGluZSB4MT1cXFwiOVxcXCIgeTE9XFxcIjlcXFwiIHgyPVxcXCI5LjAxXFxcIiB5Mj1cXFwiOVxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCIxNVxcXCIgeTE9XFxcIjlcXFwiIHgyPVxcXCIxNS4wMVxcXCIgeTI9XFxcIjlcXFwiPjwvbGluZT5cIixcImdpZnRcIjpcIjxwb2x5bGluZSBwb2ludHM9XFxcIjIwIDEyIDIwIDIyIDQgMjIgNCAxMlxcXCI+PC9wb2x5bGluZT48cmVjdCB4PVxcXCIyXFxcIiB5PVxcXCI3XFxcIiB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiNVxcXCI+PC9yZWN0PjxsaW5lIHgxPVxcXCIxMlxcXCIgeTE9XFxcIjIyXFxcIiB4Mj1cXFwiMTJcXFwiIHkyPVxcXCI3XFxcIj48L2xpbmU+PHBhdGggZD1cXFwiTTEyIDdINy41YTIuNSAyLjUgMCAwIDEgMC01QzExIDIgMTIgNyAxMiA3elxcXCI+PC9wYXRoPjxwYXRoIGQ9XFxcIk0xMiA3aDQuNWEyLjUgMi41IDAgMCAwIDAtNUMxMyAyIDEyIDcgMTIgN3pcXFwiPjwvcGF0aD5cIixcImdpdC1icmFuY2hcIjpcIjxsaW5lIHgxPVxcXCI2XFxcIiB5MT1cXFwiM1xcXCIgeDI9XFxcIjZcXFwiIHkyPVxcXCIxNVxcXCI+PC9saW5lPjxjaXJjbGUgY3g9XFxcIjE4XFxcIiBjeT1cXFwiNlxcXCIgcj1cXFwiM1xcXCI+PC9jaXJjbGU+PGNpcmNsZSBjeD1cXFwiNlxcXCIgY3k9XFxcIjE4XFxcIiByPVxcXCIzXFxcIj48L2NpcmNsZT48cGF0aCBkPVxcXCJNMTggOWE5IDkgMCAwIDEtOSA5XFxcIj48L3BhdGg+XCIsXCJnaXQtY29tbWl0XCI6XCI8Y2lyY2xlIGN4PVxcXCIxMlxcXCIgY3k9XFxcIjEyXFxcIiByPVxcXCI0XFxcIj48L2NpcmNsZT48bGluZSB4MT1cXFwiMS4wNVxcXCIgeTE9XFxcIjEyXFxcIiB4Mj1cXFwiN1xcXCIgeTI9XFxcIjEyXFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjE3LjAxXFxcIiB5MT1cXFwiMTJcXFwiIHgyPVxcXCIyMi45NlxcXCIgeTI9XFxcIjEyXFxcIj48L2xpbmU+XCIsXCJnaXQtbWVyZ2VcIjpcIjxjaXJjbGUgY3g9XFxcIjE4XFxcIiBjeT1cXFwiMThcXFwiIHI9XFxcIjNcXFwiPjwvY2lyY2xlPjxjaXJjbGUgY3g9XFxcIjZcXFwiIGN5PVxcXCI2XFxcIiByPVxcXCIzXFxcIj48L2NpcmNsZT48cGF0aCBkPVxcXCJNNiAyMVY5YTkgOSAwIDAgMCA5IDlcXFwiPjwvcGF0aD5cIixcImdpdC1wdWxsLXJlcXVlc3RcIjpcIjxjaXJjbGUgY3g9XFxcIjE4XFxcIiBjeT1cXFwiMThcXFwiIHI9XFxcIjNcXFwiPjwvY2lyY2xlPjxjaXJjbGUgY3g9XFxcIjZcXFwiIGN5PVxcXCI2XFxcIiByPVxcXCIzXFxcIj48L2NpcmNsZT48cGF0aCBkPVxcXCJNMTMgNmgzYTIgMiAwIDAgMSAyIDJ2N1xcXCI+PC9wYXRoPjxsaW5lIHgxPVxcXCI2XFxcIiB5MT1cXFwiOVxcXCIgeDI9XFxcIjZcXFwiIHkyPVxcXCIyMVxcXCI+PC9saW5lPlwiLFwiZ2l0aHViXCI6XCI8cGF0aCBkPVxcXCJNOSAxOWMtNSAxLjUtNS0yLjUtNy0zbTE0IDZ2LTMuODdhMy4zNyAzLjM3IDAgMCAwLS45NC0yLjYxYzMuMTQtLjM1IDYuNDQtMS41NCA2LjQ0LTdBNS40NCA1LjQ0IDAgMCAwIDIwIDQuNzcgNS4wNyA1LjA3IDAgMCAwIDE5LjkxIDFTMTguNzMuNjUgMTYgMi40OGExMy4zOCAxMy4zOCAwIDAgMC03IDBDNi4yNy42NSA1LjA5IDEgNS4wOSAxQTUuMDcgNS4wNyAwIDAgMCA1IDQuNzdhNS40NCA1LjQ0IDAgMCAwLTEuNSAzLjc4YzAgNS40MiAzLjMgNi42MSA2LjQ0IDdBMy4zNyAzLjM3IDAgMCAwIDkgMTguMTNWMjJcXFwiPjwvcGF0aD5cIixcImdpdGxhYlwiOlwiPHBhdGggZD1cXFwiTTIyLjY1IDE0LjM5TDEyIDIyLjEzIDEuMzUgMTQuMzlhLjg0Ljg0IDAgMCAxLS4zLS45NGwxLjIyLTMuNzggMi40NC03LjUxQS40Mi40MiAwIDAgMSA0LjgyIDJhLjQzLjQzIDAgMCAxIC41OCAwIC40Mi40MiAwIDAgMSAuMTEuMThsMi40NCA3LjQ5aDguMWwyLjQ0LTcuNTFBLjQyLjQyIDAgMCAxIDE4LjYgMmEuNDMuNDMgMCAwIDEgLjU4IDAgLjQyLjQyIDAgMCAxIC4xMS4xOGwyLjQ0IDcuNTFMMjMgMTMuNDVhLjg0Ljg0IDAgMCAxLS4zNS45NHpcXFwiPjwvcGF0aD5cIixcImdsb2JlXCI6XCI8Y2lyY2xlIGN4PVxcXCIxMlxcXCIgY3k9XFxcIjEyXFxcIiByPVxcXCIxMFxcXCI+PC9jaXJjbGU+PGxpbmUgeDE9XFxcIjJcXFwiIHkxPVxcXCIxMlxcXCIgeDI9XFxcIjIyXFxcIiB5Mj1cXFwiMTJcXFwiPjwvbGluZT48cGF0aCBkPVxcXCJNMTIgMmExNS4zIDE1LjMgMCAwIDEgNCAxMCAxNS4zIDE1LjMgMCAwIDEtNCAxMCAxNS4zIDE1LjMgMCAwIDEtNC0xMCAxNS4zIDE1LjMgMCAwIDEgNC0xMHpcXFwiPjwvcGF0aD5cIixcImdyaWRcIjpcIjxyZWN0IHg9XFxcIjNcXFwiIHk9XFxcIjNcXFwiIHdpZHRoPVxcXCI3XFxcIiBoZWlnaHQ9XFxcIjdcXFwiPjwvcmVjdD48cmVjdCB4PVxcXCIxNFxcXCIgeT1cXFwiM1xcXCIgd2lkdGg9XFxcIjdcXFwiIGhlaWdodD1cXFwiN1xcXCI+PC9yZWN0PjxyZWN0IHg9XFxcIjE0XFxcIiB5PVxcXCIxNFxcXCIgd2lkdGg9XFxcIjdcXFwiIGhlaWdodD1cXFwiN1xcXCI+PC9yZWN0PjxyZWN0IHg9XFxcIjNcXFwiIHk9XFxcIjE0XFxcIiB3aWR0aD1cXFwiN1xcXCIgaGVpZ2h0PVxcXCI3XFxcIj48L3JlY3Q+XCIsXCJoYXJkLWRyaXZlXCI6XCI8bGluZSB4MT1cXFwiMjJcXFwiIHkxPVxcXCIxMlxcXCIgeDI9XFxcIjJcXFwiIHkyPVxcXCIxMlxcXCI+PC9saW5lPjxwYXRoIGQ9XFxcIk01LjQ1IDUuMTFMMiAxMnY2YTIgMiAwIDAgMCAyIDJoMTZhMiAyIDAgMCAwIDItMnYtNmwtMy40NS02Ljg5QTIgMiAwIDAgMCAxNi43NiA0SDcuMjRhMiAyIDAgMCAwLTEuNzkgMS4xMXpcXFwiPjwvcGF0aD48bGluZSB4MT1cXFwiNlxcXCIgeTE9XFxcIjE2XFxcIiB4Mj1cXFwiNi4wMVxcXCIgeTI9XFxcIjE2XFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjEwXFxcIiB5MT1cXFwiMTZcXFwiIHgyPVxcXCIxMC4wMVxcXCIgeTI9XFxcIjE2XFxcIj48L2xpbmU+XCIsXCJoYXNoXCI6XCI8bGluZSB4MT1cXFwiNFxcXCIgeTE9XFxcIjlcXFwiIHgyPVxcXCIyMFxcXCIgeTI9XFxcIjlcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiNFxcXCIgeTE9XFxcIjE1XFxcIiB4Mj1cXFwiMjBcXFwiIHkyPVxcXCIxNVxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCIxMFxcXCIgeTE9XFxcIjNcXFwiIHgyPVxcXCI4XFxcIiB5Mj1cXFwiMjFcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiMTZcXFwiIHkxPVxcXCIzXFxcIiB4Mj1cXFwiMTRcXFwiIHkyPVxcXCIyMVxcXCI+PC9saW5lPlwiLFwiaGVhZHBob25lc1wiOlwiPHBhdGggZD1cXFwiTTMgMTh2LTZhOSA5IDAgMCAxIDE4IDB2NlxcXCI+PC9wYXRoPjxwYXRoIGQ9XFxcIk0yMSAxOWEyIDIgMCAwIDEtMiAyaC0xYTIgMiAwIDAgMS0yLTJ2LTNhMiAyIDAgMCAxIDItMmgzek0zIDE5YTIgMiAwIDAgMCAyIDJoMWEyIDIgMCAwIDAgMi0ydi0zYTIgMiAwIDAgMC0yLTJIM3pcXFwiPjwvcGF0aD5cIixcImhlYXJ0XCI6XCI8cGF0aCBkPVxcXCJNMjAuODQgNC42MWE1LjUgNS41IDAgMCAwLTcuNzggMEwxMiA1LjY3bC0xLjA2LTEuMDZhNS41IDUuNSAwIDAgMC03Ljc4IDcuNzhsMS4wNiAxLjA2TDEyIDIxLjIzbDcuNzgtNy43OCAxLjA2LTEuMDZhNS41IDUuNSAwIDAgMCAwLTcuNzh6XFxcIj48L3BhdGg+XCIsXCJoZWxwLWNpcmNsZVwiOlwiPGNpcmNsZSBjeD1cXFwiMTJcXFwiIGN5PVxcXCIxMlxcXCIgcj1cXFwiMTBcXFwiPjwvY2lyY2xlPjxwYXRoIGQ9XFxcIk05LjA5IDlhMyAzIDAgMCAxIDUuODMgMWMwIDItMyAzLTMgM1xcXCI+PC9wYXRoPjxsaW5lIHgxPVxcXCIxMlxcXCIgeTE9XFxcIjE3XFxcIiB4Mj1cXFwiMTIuMDFcXFwiIHkyPVxcXCIxN1xcXCI+PC9saW5lPlwiLFwiaGV4YWdvblwiOlwiPHBhdGggZD1cXFwiTTIxIDE2VjhhMiAyIDAgMCAwLTEtMS43M2wtNy00YTIgMiAwIDAgMC0yIDBsLTcgNEEyIDIgMCAwIDAgMyA4djhhMiAyIDAgMCAwIDEgMS43M2w3IDRhMiAyIDAgMCAwIDIgMGw3LTRBMiAyIDAgMCAwIDIxIDE2elxcXCI+PC9wYXRoPlwiLFwiaG9tZVwiOlwiPHBhdGggZD1cXFwiTTMgOWw5LTcgOSA3djExYTIgMiAwIDAgMS0yIDJINWEyIDIgMCAwIDEtMi0yelxcXCI+PC9wYXRoPjxwb2x5bGluZSBwb2ludHM9XFxcIjkgMjIgOSAxMiAxNSAxMiAxNSAyMlxcXCI+PC9wb2x5bGluZT5cIixcImltYWdlXCI6XCI8cmVjdCB4PVxcXCIzXFxcIiB5PVxcXCIzXFxcIiB3aWR0aD1cXFwiMThcXFwiIGhlaWdodD1cXFwiMThcXFwiIHJ4PVxcXCIyXFxcIiByeT1cXFwiMlxcXCI+PC9yZWN0PjxjaXJjbGUgY3g9XFxcIjguNVxcXCIgY3k9XFxcIjguNVxcXCIgcj1cXFwiMS41XFxcIj48L2NpcmNsZT48cG9seWxpbmUgcG9pbnRzPVxcXCIyMSAxNSAxNiAxMCA1IDIxXFxcIj48L3BvbHlsaW5lPlwiLFwiaW5ib3hcIjpcIjxwb2x5bGluZSBwb2ludHM9XFxcIjIyIDEyIDE2IDEyIDE0IDE1IDEwIDE1IDggMTIgMiAxMlxcXCI+PC9wb2x5bGluZT48cGF0aCBkPVxcXCJNNS40NSA1LjExTDIgMTJ2NmEyIDIgMCAwIDAgMiAyaDE2YTIgMiAwIDAgMCAyLTJ2LTZsLTMuNDUtNi44OUEyIDIgMCAwIDAgMTYuNzYgNEg3LjI0YTIgMiAwIDAgMC0xLjc5IDEuMTF6XFxcIj48L3BhdGg+XCIsXCJpbmZvXCI6XCI8Y2lyY2xlIGN4PVxcXCIxMlxcXCIgY3k9XFxcIjEyXFxcIiByPVxcXCIxMFxcXCI+PC9jaXJjbGU+PGxpbmUgeDE9XFxcIjEyXFxcIiB5MT1cXFwiMTZcXFwiIHgyPVxcXCIxMlxcXCIgeTI9XFxcIjEyXFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjEyXFxcIiB5MT1cXFwiOFxcXCIgeDI9XFxcIjEyLjAxXFxcIiB5Mj1cXFwiOFxcXCI+PC9saW5lPlwiLFwiaW5zdGFncmFtXCI6XCI8cmVjdCB4PVxcXCIyXFxcIiB5PVxcXCIyXFxcIiB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHJ4PVxcXCI1XFxcIiByeT1cXFwiNVxcXCI+PC9yZWN0PjxwYXRoIGQ9XFxcIk0xNiAxMS4zN0E0IDQgMCAxIDEgMTIuNjMgOCA0IDQgMCAwIDEgMTYgMTEuMzd6XFxcIj48L3BhdGg+PGxpbmUgeDE9XFxcIjE3LjVcXFwiIHkxPVxcXCI2LjVcXFwiIHgyPVxcXCIxNy41MVxcXCIgeTI9XFxcIjYuNVxcXCI+PC9saW5lPlwiLFwiaXRhbGljXCI6XCI8bGluZSB4MT1cXFwiMTlcXFwiIHkxPVxcXCI0XFxcIiB4Mj1cXFwiMTBcXFwiIHkyPVxcXCI0XFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjE0XFxcIiB5MT1cXFwiMjBcXFwiIHgyPVxcXCI1XFxcIiB5Mj1cXFwiMjBcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiMTVcXFwiIHkxPVxcXCI0XFxcIiB4Mj1cXFwiOVxcXCIgeTI9XFxcIjIwXFxcIj48L2xpbmU+XCIsXCJrZXlcIjpcIjxwYXRoIGQ9XFxcIk0yMSAybC0yIDJtLTcuNjEgNy42MWE1LjUgNS41IDAgMSAxLTcuNzc4IDcuNzc4IDUuNSA1LjUgMCAwIDEgNy43NzctNy43Nzd6bTAgMEwxNS41IDcuNW0wIDBsMyAzTDIyIDdsLTMtM20tMy41IDMuNUwxOSA0XFxcIj48L3BhdGg+XCIsXCJsYXllcnNcIjpcIjxwb2x5Z29uIHBvaW50cz1cXFwiMTIgMiAyIDcgMTIgMTIgMjIgNyAxMiAyXFxcIj48L3BvbHlnb24+PHBvbHlsaW5lIHBvaW50cz1cXFwiMiAxNyAxMiAyMiAyMiAxN1xcXCI+PC9wb2x5bGluZT48cG9seWxpbmUgcG9pbnRzPVxcXCIyIDEyIDEyIDE3IDIyIDEyXFxcIj48L3BvbHlsaW5lPlwiLFwibGF5b3V0XCI6XCI8cmVjdCB4PVxcXCIzXFxcIiB5PVxcXCIzXFxcIiB3aWR0aD1cXFwiMThcXFwiIGhlaWdodD1cXFwiMThcXFwiIHJ4PVxcXCIyXFxcIiByeT1cXFwiMlxcXCI+PC9yZWN0PjxsaW5lIHgxPVxcXCIzXFxcIiB5MT1cXFwiOVxcXCIgeDI9XFxcIjIxXFxcIiB5Mj1cXFwiOVxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCI5XFxcIiB5MT1cXFwiMjFcXFwiIHgyPVxcXCI5XFxcIiB5Mj1cXFwiOVxcXCI+PC9saW5lPlwiLFwibGlmZS1idW95XCI6XCI8Y2lyY2xlIGN4PVxcXCIxMlxcXCIgY3k9XFxcIjEyXFxcIiByPVxcXCIxMFxcXCI+PC9jaXJjbGU+PGNpcmNsZSBjeD1cXFwiMTJcXFwiIGN5PVxcXCIxMlxcXCIgcj1cXFwiNFxcXCI+PC9jaXJjbGU+PGxpbmUgeDE9XFxcIjQuOTNcXFwiIHkxPVxcXCI0LjkzXFxcIiB4Mj1cXFwiOS4xN1xcXCIgeTI9XFxcIjkuMTdcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiMTQuODNcXFwiIHkxPVxcXCIxNC44M1xcXCIgeDI9XFxcIjE5LjA3XFxcIiB5Mj1cXFwiMTkuMDdcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiMTQuODNcXFwiIHkxPVxcXCI5LjE3XFxcIiB4Mj1cXFwiMTkuMDdcXFwiIHkyPVxcXCI0LjkzXFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjE0LjgzXFxcIiB5MT1cXFwiOS4xN1xcXCIgeDI9XFxcIjE4LjM2XFxcIiB5Mj1cXFwiNS42NFxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCI0LjkzXFxcIiB5MT1cXFwiMTkuMDdcXFwiIHgyPVxcXCI5LjE3XFxcIiB5Mj1cXFwiMTQuODNcXFwiPjwvbGluZT5cIixcImxpbmstMlwiOlwiPHBhdGggZD1cXFwiTTE1IDdoM2E1IDUgMCAwIDEgNSA1IDUgNSAwIDAgMS01IDVoLTNtLTYgMEg2YTUgNSAwIDAgMS01LTUgNSA1IDAgMCAxIDUtNWgzXFxcIj48L3BhdGg+PGxpbmUgeDE9XFxcIjhcXFwiIHkxPVxcXCIxMlxcXCIgeDI9XFxcIjE2XFxcIiB5Mj1cXFwiMTJcXFwiPjwvbGluZT5cIixcImxpbmtcIjpcIjxwYXRoIGQ9XFxcIk0xMCAxM2E1IDUgMCAwIDAgNy41NC41NGwzLTNhNSA1IDAgMCAwLTcuMDctNy4wN2wtMS43MiAxLjcxXFxcIj48L3BhdGg+PHBhdGggZD1cXFwiTTE0IDExYTUgNSAwIDAgMC03LjU0LS41NGwtMyAzYTUgNSAwIDAgMCA3LjA3IDcuMDdsMS43MS0xLjcxXFxcIj48L3BhdGg+XCIsXCJsaW5rZWRpblwiOlwiPHBhdGggZD1cXFwiTTE2IDhhNiA2IDAgMCAxIDYgNnY3aC00di03YTIgMiAwIDAgMC0yLTIgMiAyIDAgMCAwLTIgMnY3aC00di03YTYgNiAwIDAgMSA2LTZ6XFxcIj48L3BhdGg+PHJlY3QgeD1cXFwiMlxcXCIgeT1cXFwiOVxcXCIgd2lkdGg9XFxcIjRcXFwiIGhlaWdodD1cXFwiMTJcXFwiPjwvcmVjdD48Y2lyY2xlIGN4PVxcXCI0XFxcIiBjeT1cXFwiNFxcXCIgcj1cXFwiMlxcXCI+PC9jaXJjbGU+XCIsXCJsaXN0XCI6XCI8bGluZSB4MT1cXFwiOFxcXCIgeTE9XFxcIjZcXFwiIHgyPVxcXCIyMVxcXCIgeTI9XFxcIjZcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiOFxcXCIgeTE9XFxcIjEyXFxcIiB4Mj1cXFwiMjFcXFwiIHkyPVxcXCIxMlxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCI4XFxcIiB5MT1cXFwiMThcXFwiIHgyPVxcXCIyMVxcXCIgeTI9XFxcIjE4XFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjNcXFwiIHkxPVxcXCI2XFxcIiB4Mj1cXFwiMy4wMVxcXCIgeTI9XFxcIjZcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiM1xcXCIgeTE9XFxcIjEyXFxcIiB4Mj1cXFwiMy4wMVxcXCIgeTI9XFxcIjEyXFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjNcXFwiIHkxPVxcXCIxOFxcXCIgeDI9XFxcIjMuMDFcXFwiIHkyPVxcXCIxOFxcXCI+PC9saW5lPlwiLFwibG9hZGVyXCI6XCI8bGluZSB4MT1cXFwiMTJcXFwiIHkxPVxcXCIyXFxcIiB4Mj1cXFwiMTJcXFwiIHkyPVxcXCI2XFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjEyXFxcIiB5MT1cXFwiMThcXFwiIHgyPVxcXCIxMlxcXCIgeTI9XFxcIjIyXFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjQuOTNcXFwiIHkxPVxcXCI0LjkzXFxcIiB4Mj1cXFwiNy43NlxcXCIgeTI9XFxcIjcuNzZcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiMTYuMjRcXFwiIHkxPVxcXCIxNi4yNFxcXCIgeDI9XFxcIjE5LjA3XFxcIiB5Mj1cXFwiMTkuMDdcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiMlxcXCIgeTE9XFxcIjEyXFxcIiB4Mj1cXFwiNlxcXCIgeTI9XFxcIjEyXFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjE4XFxcIiB5MT1cXFwiMTJcXFwiIHgyPVxcXCIyMlxcXCIgeTI9XFxcIjEyXFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjQuOTNcXFwiIHkxPVxcXCIxOS4wN1xcXCIgeDI9XFxcIjcuNzZcXFwiIHkyPVxcXCIxNi4yNFxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCIxNi4yNFxcXCIgeTE9XFxcIjcuNzZcXFwiIHgyPVxcXCIxOS4wN1xcXCIgeTI9XFxcIjQuOTNcXFwiPjwvbGluZT5cIixcImxvY2tcIjpcIjxyZWN0IHg9XFxcIjNcXFwiIHk9XFxcIjExXFxcIiB3aWR0aD1cXFwiMThcXFwiIGhlaWdodD1cXFwiMTFcXFwiIHJ4PVxcXCIyXFxcIiByeT1cXFwiMlxcXCI+PC9yZWN0PjxwYXRoIGQ9XFxcIk03IDExVjdhNSA1IDAgMCAxIDEwIDB2NFxcXCI+PC9wYXRoPlwiLFwibG9nLWluXCI6XCI8cGF0aCBkPVxcXCJNMTUgM2g0YTIgMiAwIDAgMSAyIDJ2MTRhMiAyIDAgMCAxLTIgMmgtNFxcXCI+PC9wYXRoPjxwb2x5bGluZSBwb2ludHM9XFxcIjEwIDE3IDE1IDEyIDEwIDdcXFwiPjwvcG9seWxpbmU+PGxpbmUgeDE9XFxcIjE1XFxcIiB5MT1cXFwiMTJcXFwiIHgyPVxcXCIzXFxcIiB5Mj1cXFwiMTJcXFwiPjwvbGluZT5cIixcImxvZy1vdXRcIjpcIjxwYXRoIGQ9XFxcIk05IDIxSDVhMiAyIDAgMCAxLTItMlY1YTIgMiAwIDAgMSAyLTJoNFxcXCI+PC9wYXRoPjxwb2x5bGluZSBwb2ludHM9XFxcIjE2IDE3IDIxIDEyIDE2IDdcXFwiPjwvcG9seWxpbmU+PGxpbmUgeDE9XFxcIjIxXFxcIiB5MT1cXFwiMTJcXFwiIHgyPVxcXCI5XFxcIiB5Mj1cXFwiMTJcXFwiPjwvbGluZT5cIixcIm1haWxcIjpcIjxwYXRoIGQ9XFxcIk00IDRoMTZjMS4xIDAgMiAuOSAyIDJ2MTJjMCAxLjEtLjkgMi0yIDJINGMtMS4xIDAtMi0uOS0yLTJWNmMwLTEuMS45LTIgMi0yelxcXCI+PC9wYXRoPjxwb2x5bGluZSBwb2ludHM9XFxcIjIyLDYgMTIsMTMgMiw2XFxcIj48L3BvbHlsaW5lPlwiLFwibWFwLXBpblwiOlwiPHBhdGggZD1cXFwiTTIxIDEwYzAgNy05IDEzLTkgMTNzLTktNi05LTEzYTkgOSAwIDAgMSAxOCAwelxcXCI+PC9wYXRoPjxjaXJjbGUgY3g9XFxcIjEyXFxcIiBjeT1cXFwiMTBcXFwiIHI9XFxcIjNcXFwiPjwvY2lyY2xlPlwiLFwibWFwXCI6XCI8cG9seWdvbiBwb2ludHM9XFxcIjEgNiAxIDIyIDggMTggMTYgMjIgMjMgMTggMjMgMiAxNiA2IDggMiAxIDZcXFwiPjwvcG9seWdvbj48bGluZSB4MT1cXFwiOFxcXCIgeTE9XFxcIjJcXFwiIHgyPVxcXCI4XFxcIiB5Mj1cXFwiMThcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiMTZcXFwiIHkxPVxcXCI2XFxcIiB4Mj1cXFwiMTZcXFwiIHkyPVxcXCIyMlxcXCI+PC9saW5lPlwiLFwibWF4aW1pemUtMlwiOlwiPHBvbHlsaW5lIHBvaW50cz1cXFwiMTUgMyAyMSAzIDIxIDlcXFwiPjwvcG9seWxpbmU+PHBvbHlsaW5lIHBvaW50cz1cXFwiOSAyMSAzIDIxIDMgMTVcXFwiPjwvcG9seWxpbmU+PGxpbmUgeDE9XFxcIjIxXFxcIiB5MT1cXFwiM1xcXCIgeDI9XFxcIjE0XFxcIiB5Mj1cXFwiMTBcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiM1xcXCIgeTE9XFxcIjIxXFxcIiB4Mj1cXFwiMTBcXFwiIHkyPVxcXCIxNFxcXCI+PC9saW5lPlwiLFwibWF4aW1pemVcIjpcIjxwYXRoIGQ9XFxcIk04IDNINWEyIDIgMCAwIDAtMiAydjNtMTggMFY1YTIgMiAwIDAgMC0yLTJoLTNtMCAxOGgzYTIgMiAwIDAgMCAyLTJ2LTNNMyAxNnYzYTIgMiAwIDAgMCAyIDJoM1xcXCI+PC9wYXRoPlwiLFwibWVoXCI6XCI8Y2lyY2xlIGN4PVxcXCIxMlxcXCIgY3k9XFxcIjEyXFxcIiByPVxcXCIxMFxcXCI+PC9jaXJjbGU+PGxpbmUgeDE9XFxcIjhcXFwiIHkxPVxcXCIxNVxcXCIgeDI9XFxcIjE2XFxcIiB5Mj1cXFwiMTVcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiOVxcXCIgeTE9XFxcIjlcXFwiIHgyPVxcXCI5LjAxXFxcIiB5Mj1cXFwiOVxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCIxNVxcXCIgeTE9XFxcIjlcXFwiIHgyPVxcXCIxNS4wMVxcXCIgeTI9XFxcIjlcXFwiPjwvbGluZT5cIixcIm1lbnVcIjpcIjxsaW5lIHgxPVxcXCIzXFxcIiB5MT1cXFwiMTJcXFwiIHgyPVxcXCIyMVxcXCIgeTI9XFxcIjEyXFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjNcXFwiIHkxPVxcXCI2XFxcIiB4Mj1cXFwiMjFcXFwiIHkyPVxcXCI2XFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjNcXFwiIHkxPVxcXCIxOFxcXCIgeDI9XFxcIjIxXFxcIiB5Mj1cXFwiMThcXFwiPjwvbGluZT5cIixcIm1lc3NhZ2UtY2lyY2xlXCI6XCI8cGF0aCBkPVxcXCJNMjEgMTEuNWE4LjM4IDguMzggMCAwIDEtLjkgMy44IDguNSA4LjUgMCAwIDEtNy42IDQuNyA4LjM4IDguMzggMCAwIDEtMy44LS45TDMgMjFsMS45LTUuN2E4LjM4IDguMzggMCAwIDEtLjktMy44IDguNSA4LjUgMCAwIDEgNC43LTcuNiA4LjM4IDguMzggMCAwIDEgMy44LS45aC41YTguNDggOC40OCAwIDAgMSA4IDh2LjV6XFxcIj48L3BhdGg+XCIsXCJtZXNzYWdlLXNxdWFyZVwiOlwiPHBhdGggZD1cXFwiTTIxIDE1YTIgMiAwIDAgMS0yIDJIN2wtNCA0VjVhMiAyIDAgMCAxIDItMmgxNGEyIDIgMCAwIDEgMiAyelxcXCI+PC9wYXRoPlwiLFwibWljLW9mZlwiOlwiPGxpbmUgeDE9XFxcIjFcXFwiIHkxPVxcXCIxXFxcIiB4Mj1cXFwiMjNcXFwiIHkyPVxcXCIyM1xcXCI+PC9saW5lPjxwYXRoIGQ9XFxcIk05IDl2M2EzIDMgMCAwIDAgNS4xMiAyLjEyTTE1IDkuMzRWNGEzIDMgMCAwIDAtNS45NC0uNlxcXCI+PC9wYXRoPjxwYXRoIGQ9XFxcIk0xNyAxNi45NUE3IDcgMCAwIDEgNSAxMnYtMm0xNCAwdjJhNyA3IDAgMCAxLS4xMSAxLjIzXFxcIj48L3BhdGg+PGxpbmUgeDE9XFxcIjEyXFxcIiB5MT1cXFwiMTlcXFwiIHgyPVxcXCIxMlxcXCIgeTI9XFxcIjIzXFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjhcXFwiIHkxPVxcXCIyM1xcXCIgeDI9XFxcIjE2XFxcIiB5Mj1cXFwiMjNcXFwiPjwvbGluZT5cIixcIm1pY1wiOlwiPHBhdGggZD1cXFwiTTEyIDFhMyAzIDAgMCAwLTMgM3Y4YTMgMyAwIDAgMCA2IDBWNGEzIDMgMCAwIDAtMy0zelxcXCI+PC9wYXRoPjxwYXRoIGQ9XFxcIk0xOSAxMHYyYTcgNyAwIDAgMS0xNCAwdi0yXFxcIj48L3BhdGg+PGxpbmUgeDE9XFxcIjEyXFxcIiB5MT1cXFwiMTlcXFwiIHgyPVxcXCIxMlxcXCIgeTI9XFxcIjIzXFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjhcXFwiIHkxPVxcXCIyM1xcXCIgeDI9XFxcIjE2XFxcIiB5Mj1cXFwiMjNcXFwiPjwvbGluZT5cIixcIm1pbmltaXplLTJcIjpcIjxwb2x5bGluZSBwb2ludHM9XFxcIjQgMTQgMTAgMTQgMTAgMjBcXFwiPjwvcG9seWxpbmU+PHBvbHlsaW5lIHBvaW50cz1cXFwiMjAgMTAgMTQgMTAgMTQgNFxcXCI+PC9wb2x5bGluZT48bGluZSB4MT1cXFwiMTRcXFwiIHkxPVxcXCIxMFxcXCIgeDI9XFxcIjIxXFxcIiB5Mj1cXFwiM1xcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCIzXFxcIiB5MT1cXFwiMjFcXFwiIHgyPVxcXCIxMFxcXCIgeTI9XFxcIjE0XFxcIj48L2xpbmU+XCIsXCJtaW5pbWl6ZVwiOlwiPHBhdGggZD1cXFwiTTggM3YzYTIgMiAwIDAgMS0yIDJIM20xOCAwaC0zYTIgMiAwIDAgMS0yLTJWM20wIDE4di0zYTIgMiAwIDAgMSAyLTJoM00zIDE2aDNhMiAyIDAgMCAxIDIgMnYzXFxcIj48L3BhdGg+XCIsXCJtaW51cy1jaXJjbGVcIjpcIjxjaXJjbGUgY3g9XFxcIjEyXFxcIiBjeT1cXFwiMTJcXFwiIHI9XFxcIjEwXFxcIj48L2NpcmNsZT48bGluZSB4MT1cXFwiOFxcXCIgeTE9XFxcIjEyXFxcIiB4Mj1cXFwiMTZcXFwiIHkyPVxcXCIxMlxcXCI+PC9saW5lPlwiLFwibWludXMtc3F1YXJlXCI6XCI8cmVjdCB4PVxcXCIzXFxcIiB5PVxcXCIzXFxcIiB3aWR0aD1cXFwiMThcXFwiIGhlaWdodD1cXFwiMThcXFwiIHJ4PVxcXCIyXFxcIiByeT1cXFwiMlxcXCI+PC9yZWN0PjxsaW5lIHgxPVxcXCI4XFxcIiB5MT1cXFwiMTJcXFwiIHgyPVxcXCIxNlxcXCIgeTI9XFxcIjEyXFxcIj48L2xpbmU+XCIsXCJtaW51c1wiOlwiPGxpbmUgeDE9XFxcIjVcXFwiIHkxPVxcXCIxMlxcXCIgeDI9XFxcIjE5XFxcIiB5Mj1cXFwiMTJcXFwiPjwvbGluZT5cIixcIm1vbml0b3JcIjpcIjxyZWN0IHg9XFxcIjJcXFwiIHk9XFxcIjNcXFwiIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIxNFxcXCIgcng9XFxcIjJcXFwiIHJ5PVxcXCIyXFxcIj48L3JlY3Q+PGxpbmUgeDE9XFxcIjhcXFwiIHkxPVxcXCIyMVxcXCIgeDI9XFxcIjE2XFxcIiB5Mj1cXFwiMjFcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiMTJcXFwiIHkxPVxcXCIxN1xcXCIgeDI9XFxcIjEyXFxcIiB5Mj1cXFwiMjFcXFwiPjwvbGluZT5cIixcIm1vb25cIjpcIjxwYXRoIGQ9XFxcIk0yMSAxMi43OUE5IDkgMCAxIDEgMTEuMjEgMyA3IDcgMCAwIDAgMjEgMTIuNzl6XFxcIj48L3BhdGg+XCIsXCJtb3JlLWhvcml6b250YWxcIjpcIjxjaXJjbGUgY3g9XFxcIjEyXFxcIiBjeT1cXFwiMTJcXFwiIHI9XFxcIjFcXFwiPjwvY2lyY2xlPjxjaXJjbGUgY3g9XFxcIjE5XFxcIiBjeT1cXFwiMTJcXFwiIHI9XFxcIjFcXFwiPjwvY2lyY2xlPjxjaXJjbGUgY3g9XFxcIjVcXFwiIGN5PVxcXCIxMlxcXCIgcj1cXFwiMVxcXCI+PC9jaXJjbGU+XCIsXCJtb3JlLXZlcnRpY2FsXCI6XCI8Y2lyY2xlIGN4PVxcXCIxMlxcXCIgY3k9XFxcIjEyXFxcIiByPVxcXCIxXFxcIj48L2NpcmNsZT48Y2lyY2xlIGN4PVxcXCIxMlxcXCIgY3k9XFxcIjVcXFwiIHI9XFxcIjFcXFwiPjwvY2lyY2xlPjxjaXJjbGUgY3g9XFxcIjEyXFxcIiBjeT1cXFwiMTlcXFwiIHI9XFxcIjFcXFwiPjwvY2lyY2xlPlwiLFwibW91c2UtcG9pbnRlclwiOlwiPHBhdGggZD1cXFwiTTMgM2w3LjA3IDE2Ljk3IDIuNTEtNy4zOSA3LjM5LTIuNTFMMyAzelxcXCI+PC9wYXRoPjxwYXRoIGQ9XFxcIk0xMyAxM2w2IDZcXFwiPjwvcGF0aD5cIixcIm1vdmVcIjpcIjxwb2x5bGluZSBwb2ludHM9XFxcIjUgOSAyIDEyIDUgMTVcXFwiPjwvcG9seWxpbmU+PHBvbHlsaW5lIHBvaW50cz1cXFwiOSA1IDEyIDIgMTUgNVxcXCI+PC9wb2x5bGluZT48cG9seWxpbmUgcG9pbnRzPVxcXCIxNSAxOSAxMiAyMiA5IDE5XFxcIj48L3BvbHlsaW5lPjxwb2x5bGluZSBwb2ludHM9XFxcIjE5IDkgMjIgMTIgMTkgMTVcXFwiPjwvcG9seWxpbmU+PGxpbmUgeDE9XFxcIjJcXFwiIHkxPVxcXCIxMlxcXCIgeDI9XFxcIjIyXFxcIiB5Mj1cXFwiMTJcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiMTJcXFwiIHkxPVxcXCIyXFxcIiB4Mj1cXFwiMTJcXFwiIHkyPVxcXCIyMlxcXCI+PC9saW5lPlwiLFwibXVzaWNcIjpcIjxwYXRoIGQ9XFxcIk05IDE4VjVsMTItMnYxM1xcXCI+PC9wYXRoPjxjaXJjbGUgY3g9XFxcIjZcXFwiIGN5PVxcXCIxOFxcXCIgcj1cXFwiM1xcXCI+PC9jaXJjbGU+PGNpcmNsZSBjeD1cXFwiMThcXFwiIGN5PVxcXCIxNlxcXCIgcj1cXFwiM1xcXCI+PC9jaXJjbGU+XCIsXCJuYXZpZ2F0aW9uLTJcIjpcIjxwb2x5Z29uIHBvaW50cz1cXFwiMTIgMiAxOSAyMSAxMiAxNyA1IDIxIDEyIDJcXFwiPjwvcG9seWdvbj5cIixcIm5hdmlnYXRpb25cIjpcIjxwb2x5Z29uIHBvaW50cz1cXFwiMyAxMSAyMiAyIDEzIDIxIDExIDEzIDMgMTFcXFwiPjwvcG9seWdvbj5cIixcIm9jdGFnb25cIjpcIjxwb2x5Z29uIHBvaW50cz1cXFwiNy44NiAyIDE2LjE0IDIgMjIgNy44NiAyMiAxNi4xNCAxNi4xNCAyMiA3Ljg2IDIyIDIgMTYuMTQgMiA3Ljg2IDcuODYgMlxcXCI+PC9wb2x5Z29uPlwiLFwicGFja2FnZVwiOlwiPGxpbmUgeDE9XFxcIjE2LjVcXFwiIHkxPVxcXCI5LjRcXFwiIHgyPVxcXCI3LjVcXFwiIHkyPVxcXCI0LjIxXFxcIj48L2xpbmU+PHBhdGggZD1cXFwiTTIxIDE2VjhhMiAyIDAgMCAwLTEtMS43M2wtNy00YTIgMiAwIDAgMC0yIDBsLTcgNEEyIDIgMCAwIDAgMyA4djhhMiAyIDAgMCAwIDEgMS43M2w3IDRhMiAyIDAgMCAwIDIgMGw3LTRBMiAyIDAgMCAwIDIxIDE2elxcXCI+PC9wYXRoPjxwb2x5bGluZSBwb2ludHM9XFxcIjMuMjcgNi45NiAxMiAxMi4wMSAyMC43MyA2Ljk2XFxcIj48L3BvbHlsaW5lPjxsaW5lIHgxPVxcXCIxMlxcXCIgeTE9XFxcIjIyLjA4XFxcIiB4Mj1cXFwiMTJcXFwiIHkyPVxcXCIxMlxcXCI+PC9saW5lPlwiLFwicGFwZXJjbGlwXCI6XCI8cGF0aCBkPVxcXCJNMjEuNDQgMTEuMDVsLTkuMTkgOS4xOWE2IDYgMCAwIDEtOC40OS04LjQ5bDkuMTktOS4xOWE0IDQgMCAwIDEgNS42NiA1LjY2bC05LjIgOS4xOWEyIDIgMCAwIDEtMi44My0yLjgzbDguNDktOC40OFxcXCI+PC9wYXRoPlwiLFwicGF1c2UtY2lyY2xlXCI6XCI8Y2lyY2xlIGN4PVxcXCIxMlxcXCIgY3k9XFxcIjEyXFxcIiByPVxcXCIxMFxcXCI+PC9jaXJjbGU+PGxpbmUgeDE9XFxcIjEwXFxcIiB5MT1cXFwiMTVcXFwiIHgyPVxcXCIxMFxcXCIgeTI9XFxcIjlcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiMTRcXFwiIHkxPVxcXCIxNVxcXCIgeDI9XFxcIjE0XFxcIiB5Mj1cXFwiOVxcXCI+PC9saW5lPlwiLFwicGF1c2VcIjpcIjxyZWN0IHg9XFxcIjZcXFwiIHk9XFxcIjRcXFwiIHdpZHRoPVxcXCI0XFxcIiBoZWlnaHQ9XFxcIjE2XFxcIj48L3JlY3Q+PHJlY3QgeD1cXFwiMTRcXFwiIHk9XFxcIjRcXFwiIHdpZHRoPVxcXCI0XFxcIiBoZWlnaHQ9XFxcIjE2XFxcIj48L3JlY3Q+XCIsXCJwZW4tdG9vbFwiOlwiPHBhdGggZD1cXFwiTTEyIDE5bDctNyAzIDMtNyA3LTMtM3pcXFwiPjwvcGF0aD48cGF0aCBkPVxcXCJNMTggMTNsLTEuNS03LjVMMiAybDMuNSAxNC41TDEzIDE4bDUtNXpcXFwiPjwvcGF0aD48cGF0aCBkPVxcXCJNMiAybDcuNTg2IDcuNTg2XFxcIj48L3BhdGg+PGNpcmNsZSBjeD1cXFwiMTFcXFwiIGN5PVxcXCIxMVxcXCIgcj1cXFwiMlxcXCI+PC9jaXJjbGU+XCIsXCJwZXJjZW50XCI6XCI8bGluZSB4MT1cXFwiMTlcXFwiIHkxPVxcXCI1XFxcIiB4Mj1cXFwiNVxcXCIgeTI9XFxcIjE5XFxcIj48L2xpbmU+PGNpcmNsZSBjeD1cXFwiNi41XFxcIiBjeT1cXFwiNi41XFxcIiByPVxcXCIyLjVcXFwiPjwvY2lyY2xlPjxjaXJjbGUgY3g9XFxcIjE3LjVcXFwiIGN5PVxcXCIxNy41XFxcIiByPVxcXCIyLjVcXFwiPjwvY2lyY2xlPlwiLFwicGhvbmUtY2FsbFwiOlwiPHBhdGggZD1cXFwiTTE1LjA1IDVBNSA1IDAgMCAxIDE5IDguOTVNMTUuMDUgMUE5IDkgMCAwIDEgMjMgOC45NG0tMSA3Ljk4djNhMiAyIDAgMCAxLTIuMTggMiAxOS43OSAxOS43OSAwIDAgMS04LjYzLTMuMDcgMTkuNSAxOS41IDAgMCAxLTYtNiAxOS43OSAxOS43OSAwIDAgMS0zLjA3LTguNjdBMiAyIDAgMCAxIDQuMTEgMmgzYTIgMiAwIDAgMSAyIDEuNzIgMTIuODQgMTIuODQgMCAwIDAgLjcgMi44MSAyIDIgMCAwIDEtLjQ1IDIuMTFMOC4wOSA5LjkxYTE2IDE2IDAgMCAwIDYgNmwxLjI3LTEuMjdhMiAyIDAgMCAxIDIuMTEtLjQ1IDEyLjg0IDEyLjg0IDAgMCAwIDIuODEuN0EyIDIgMCAwIDEgMjIgMTYuOTJ6XFxcIj48L3BhdGg+XCIsXCJwaG9uZS1mb3J3YXJkZWRcIjpcIjxwb2x5bGluZSBwb2ludHM9XFxcIjE5IDEgMjMgNSAxOSA5XFxcIj48L3BvbHlsaW5lPjxsaW5lIHgxPVxcXCIxNVxcXCIgeTE9XFxcIjVcXFwiIHgyPVxcXCIyM1xcXCIgeTI9XFxcIjVcXFwiPjwvbGluZT48cGF0aCBkPVxcXCJNMjIgMTYuOTJ2M2EyIDIgMCAwIDEtMi4xOCAyIDE5Ljc5IDE5Ljc5IDAgMCAxLTguNjMtMy4wNyAxOS41IDE5LjUgMCAwIDEtNi02IDE5Ljc5IDE5Ljc5IDAgMCAxLTMuMDctOC42N0EyIDIgMCAwIDEgNC4xMSAyaDNhMiAyIDAgMCAxIDIgMS43MiAxMi44NCAxMi44NCAwIDAgMCAuNyAyLjgxIDIgMiAwIDAgMS0uNDUgMi4xMUw4LjA5IDkuOTFhMTYgMTYgMCAwIDAgNiA2bDEuMjctMS4yN2EyIDIgMCAwIDEgMi4xMS0uNDUgMTIuODQgMTIuODQgMCAwIDAgMi44MS43QTIgMiAwIDAgMSAyMiAxNi45MnpcXFwiPjwvcGF0aD5cIixcInBob25lLWluY29taW5nXCI6XCI8cG9seWxpbmUgcG9pbnRzPVxcXCIxNiAyIDE2IDggMjIgOFxcXCI+PC9wb2x5bGluZT48bGluZSB4MT1cXFwiMjNcXFwiIHkxPVxcXCIxXFxcIiB4Mj1cXFwiMTZcXFwiIHkyPVxcXCI4XFxcIj48L2xpbmU+PHBhdGggZD1cXFwiTTIyIDE2LjkydjNhMiAyIDAgMCAxLTIuMTggMiAxOS43OSAxOS43OSAwIDAgMS04LjYzLTMuMDcgMTkuNSAxOS41IDAgMCAxLTYtNiAxOS43OSAxOS43OSAwIDAgMS0zLjA3LTguNjdBMiAyIDAgMCAxIDQuMTEgMmgzYTIgMiAwIDAgMSAyIDEuNzIgMTIuODQgMTIuODQgMCAwIDAgLjcgMi44MSAyIDIgMCAwIDEtLjQ1IDIuMTFMOC4wOSA5LjkxYTE2IDE2IDAgMCAwIDYgNmwxLjI3LTEuMjdhMiAyIDAgMCAxIDIuMTEtLjQ1IDEyLjg0IDEyLjg0IDAgMCAwIDIuODEuN0EyIDIgMCAwIDEgMjIgMTYuOTJ6XFxcIj48L3BhdGg+XCIsXCJwaG9uZS1taXNzZWRcIjpcIjxsaW5lIHgxPVxcXCIyM1xcXCIgeTE9XFxcIjFcXFwiIHgyPVxcXCIxN1xcXCIgeTI9XFxcIjdcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiMTdcXFwiIHkxPVxcXCIxXFxcIiB4Mj1cXFwiMjNcXFwiIHkyPVxcXCI3XFxcIj48L2xpbmU+PHBhdGggZD1cXFwiTTIyIDE2LjkydjNhMiAyIDAgMCAxLTIuMTggMiAxOS43OSAxOS43OSAwIDAgMS04LjYzLTMuMDcgMTkuNSAxOS41IDAgMCAxLTYtNiAxOS43OSAxOS43OSAwIDAgMS0zLjA3LTguNjdBMiAyIDAgMCAxIDQuMTEgMmgzYTIgMiAwIDAgMSAyIDEuNzIgMTIuODQgMTIuODQgMCAwIDAgLjcgMi44MSAyIDIgMCAwIDEtLjQ1IDIuMTFMOC4wOSA5LjkxYTE2IDE2IDAgMCAwIDYgNmwxLjI3LTEuMjdhMiAyIDAgMCAxIDIuMTEtLjQ1IDEyLjg0IDEyLjg0IDAgMCAwIDIuODEuN0EyIDIgMCAwIDEgMjIgMTYuOTJ6XFxcIj48L3BhdGg+XCIsXCJwaG9uZS1vZmZcIjpcIjxwYXRoIGQ9XFxcIk0xMC42OCAxMy4zMWExNiAxNiAwIDAgMCAzLjQxIDIuNmwxLjI3LTEuMjdhMiAyIDAgMCAxIDIuMTEtLjQ1IDEyLjg0IDEyLjg0IDAgMCAwIDIuODEuNyAyIDIgMCAwIDEgMS43MiAydjNhMiAyIDAgMCAxLTIuMTggMiAxOS43OSAxOS43OSAwIDAgMS04LjYzLTMuMDcgMTkuNDIgMTkuNDIgMCAwIDEtMy4zMy0yLjY3bS0yLjY3LTMuMzRhMTkuNzkgMTkuNzkgMCAwIDEtMy4wNy04LjYzQTIgMiAwIDAgMSA0LjExIDJoM2EyIDIgMCAwIDEgMiAxLjcyIDEyLjg0IDEyLjg0IDAgMCAwIC43IDIuODEgMiAyIDAgMCAxLS40NSAyLjExTDguMDkgOS45MVxcXCI+PC9wYXRoPjxsaW5lIHgxPVxcXCIyM1xcXCIgeTE9XFxcIjFcXFwiIHgyPVxcXCIxXFxcIiB5Mj1cXFwiMjNcXFwiPjwvbGluZT5cIixcInBob25lLW91dGdvaW5nXCI6XCI8cG9seWxpbmUgcG9pbnRzPVxcXCIyMyA3IDIzIDEgMTcgMVxcXCI+PC9wb2x5bGluZT48bGluZSB4MT1cXFwiMTZcXFwiIHkxPVxcXCI4XFxcIiB4Mj1cXFwiMjNcXFwiIHkyPVxcXCIxXFxcIj48L2xpbmU+PHBhdGggZD1cXFwiTTIyIDE2LjkydjNhMiAyIDAgMCAxLTIuMTggMiAxOS43OSAxOS43OSAwIDAgMS04LjYzLTMuMDcgMTkuNSAxOS41IDAgMCAxLTYtNiAxOS43OSAxOS43OSAwIDAgMS0zLjA3LTguNjdBMiAyIDAgMCAxIDQuMTEgMmgzYTIgMiAwIDAgMSAyIDEuNzIgMTIuODQgMTIuODQgMCAwIDAgLjcgMi44MSAyIDIgMCAwIDEtLjQ1IDIuMTFMOC4wOSA5LjkxYTE2IDE2IDAgMCAwIDYgNmwxLjI3LTEuMjdhMiAyIDAgMCAxIDIuMTEtLjQ1IDEyLjg0IDEyLjg0IDAgMCAwIDIuODEuN0EyIDIgMCAwIDEgMjIgMTYuOTJ6XFxcIj48L3BhdGg+XCIsXCJwaG9uZVwiOlwiPHBhdGggZD1cXFwiTTIyIDE2LjkydjNhMiAyIDAgMCAxLTIuMTggMiAxOS43OSAxOS43OSAwIDAgMS04LjYzLTMuMDcgMTkuNSAxOS41IDAgMCAxLTYtNiAxOS43OSAxOS43OSAwIDAgMS0zLjA3LTguNjdBMiAyIDAgMCAxIDQuMTEgMmgzYTIgMiAwIDAgMSAyIDEuNzIgMTIuODQgMTIuODQgMCAwIDAgLjcgMi44MSAyIDIgMCAwIDEtLjQ1IDIuMTFMOC4wOSA5LjkxYTE2IDE2IDAgMCAwIDYgNmwxLjI3LTEuMjdhMiAyIDAgMCAxIDIuMTEtLjQ1IDEyLjg0IDEyLjg0IDAgMCAwIDIuODEuN0EyIDIgMCAwIDEgMjIgMTYuOTJ6XFxcIj48L3BhdGg+XCIsXCJwaWUtY2hhcnRcIjpcIjxwYXRoIGQ9XFxcIk0yMS4yMSAxNS44OUExMCAxMCAwIDEgMSA4IDIuODNcXFwiPjwvcGF0aD48cGF0aCBkPVxcXCJNMjIgMTJBMTAgMTAgMCAwIDAgMTIgMnYxMHpcXFwiPjwvcGF0aD5cIixcInBsYXktY2lyY2xlXCI6XCI8Y2lyY2xlIGN4PVxcXCIxMlxcXCIgY3k9XFxcIjEyXFxcIiByPVxcXCIxMFxcXCI+PC9jaXJjbGU+PHBvbHlnb24gcG9pbnRzPVxcXCIxMCA4IDE2IDEyIDEwIDE2IDEwIDhcXFwiPjwvcG9seWdvbj5cIixcInBsYXlcIjpcIjxwb2x5Z29uIHBvaW50cz1cXFwiNSAzIDE5IDEyIDUgMjEgNSAzXFxcIj48L3BvbHlnb24+XCIsXCJwbHVzLWNpcmNsZVwiOlwiPGNpcmNsZSBjeD1cXFwiMTJcXFwiIGN5PVxcXCIxMlxcXCIgcj1cXFwiMTBcXFwiPjwvY2lyY2xlPjxsaW5lIHgxPVxcXCIxMlxcXCIgeTE9XFxcIjhcXFwiIHgyPVxcXCIxMlxcXCIgeTI9XFxcIjE2XFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjhcXFwiIHkxPVxcXCIxMlxcXCIgeDI9XFxcIjE2XFxcIiB5Mj1cXFwiMTJcXFwiPjwvbGluZT5cIixcInBsdXMtc3F1YXJlXCI6XCI8cmVjdCB4PVxcXCIzXFxcIiB5PVxcXCIzXFxcIiB3aWR0aD1cXFwiMThcXFwiIGhlaWdodD1cXFwiMThcXFwiIHJ4PVxcXCIyXFxcIiByeT1cXFwiMlxcXCI+PC9yZWN0PjxsaW5lIHgxPVxcXCIxMlxcXCIgeTE9XFxcIjhcXFwiIHgyPVxcXCIxMlxcXCIgeTI9XFxcIjE2XFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjhcXFwiIHkxPVxcXCIxMlxcXCIgeDI9XFxcIjE2XFxcIiB5Mj1cXFwiMTJcXFwiPjwvbGluZT5cIixcInBsdXNcIjpcIjxsaW5lIHgxPVxcXCIxMlxcXCIgeTE9XFxcIjVcXFwiIHgyPVxcXCIxMlxcXCIgeTI9XFxcIjE5XFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjVcXFwiIHkxPVxcXCIxMlxcXCIgeDI9XFxcIjE5XFxcIiB5Mj1cXFwiMTJcXFwiPjwvbGluZT5cIixcInBvY2tldFwiOlwiPHBhdGggZD1cXFwiTTQgM2gxNmEyIDIgMCAwIDEgMiAydjZhMTAgMTAgMCAwIDEtMTAgMTBBMTAgMTAgMCAwIDEgMiAxMVY1YTIgMiAwIDAgMSAyLTJ6XFxcIj48L3BhdGg+PHBvbHlsaW5lIHBvaW50cz1cXFwiOCAxMCAxMiAxNCAxNiAxMFxcXCI+PC9wb2x5bGluZT5cIixcInBvd2VyXCI6XCI8cGF0aCBkPVxcXCJNMTguMzYgNi42NGE5IDkgMCAxIDEtMTIuNzMgMFxcXCI+PC9wYXRoPjxsaW5lIHgxPVxcXCIxMlxcXCIgeTE9XFxcIjJcXFwiIHgyPVxcXCIxMlxcXCIgeTI9XFxcIjEyXFxcIj48L2xpbmU+XCIsXCJwcmludGVyXCI6XCI8cG9seWxpbmUgcG9pbnRzPVxcXCI2IDkgNiAyIDE4IDIgMTggOVxcXCI+PC9wb2x5bGluZT48cGF0aCBkPVxcXCJNNiAxOEg0YTIgMiAwIDAgMS0yLTJ2LTVhMiAyIDAgMCAxIDItMmgxNmEyIDIgMCAwIDEgMiAydjVhMiAyIDAgMCAxLTIgMmgtMlxcXCI+PC9wYXRoPjxyZWN0IHg9XFxcIjZcXFwiIHk9XFxcIjE0XFxcIiB3aWR0aD1cXFwiMTJcXFwiIGhlaWdodD1cXFwiOFxcXCI+PC9yZWN0PlwiLFwicmFkaW9cIjpcIjxjaXJjbGUgY3g9XFxcIjEyXFxcIiBjeT1cXFwiMTJcXFwiIHI9XFxcIjJcXFwiPjwvY2lyY2xlPjxwYXRoIGQ9XFxcIk0xNi4yNCA3Ljc2YTYgNiAwIDAgMSAwIDguNDltLTguNDgtLjAxYTYgNiAwIDAgMSAwLTguNDltMTEuMzEtMi44MmExMCAxMCAwIDAgMSAwIDE0LjE0bS0xNC4xNCAwYTEwIDEwIDAgMCAxIDAtMTQuMTRcXFwiPjwvcGF0aD5cIixcInJlZnJlc2gtY2N3XCI6XCI8cG9seWxpbmUgcG9pbnRzPVxcXCIxIDQgMSAxMCA3IDEwXFxcIj48L3BvbHlsaW5lPjxwb2x5bGluZSBwb2ludHM9XFxcIjIzIDIwIDIzIDE0IDE3IDE0XFxcIj48L3BvbHlsaW5lPjxwYXRoIGQ9XFxcIk0yMC40OSA5QTkgOSAwIDAgMCA1LjY0IDUuNjRMMSAxMG0yMiA0bC00LjY0IDQuMzZBOSA5IDAgMCAxIDMuNTEgMTVcXFwiPjwvcGF0aD5cIixcInJlZnJlc2gtY3dcIjpcIjxwb2x5bGluZSBwb2ludHM9XFxcIjIzIDQgMjMgMTAgMTcgMTBcXFwiPjwvcG9seWxpbmU+PHBvbHlsaW5lIHBvaW50cz1cXFwiMSAyMCAxIDE0IDcgMTRcXFwiPjwvcG9seWxpbmU+PHBhdGggZD1cXFwiTTMuNTEgOWE5IDkgMCAwIDEgMTQuODUtMy4zNkwyMyAxME0xIDE0bDQuNjQgNC4zNkE5IDkgMCAwIDAgMjAuNDkgMTVcXFwiPjwvcGF0aD5cIixcInJlcGVhdFwiOlwiPHBvbHlsaW5lIHBvaW50cz1cXFwiMTcgMSAyMSA1IDE3IDlcXFwiPjwvcG9seWxpbmU+PHBhdGggZD1cXFwiTTMgMTFWOWE0IDQgMCAwIDEgNC00aDE0XFxcIj48L3BhdGg+PHBvbHlsaW5lIHBvaW50cz1cXFwiNyAyMyAzIDE5IDcgMTVcXFwiPjwvcG9seWxpbmU+PHBhdGggZD1cXFwiTTIxIDEzdjJhNCA0IDAgMCAxLTQgNEgzXFxcIj48L3BhdGg+XCIsXCJyZXdpbmRcIjpcIjxwb2x5Z29uIHBvaW50cz1cXFwiMTEgMTkgMiAxMiAxMSA1IDExIDE5XFxcIj48L3BvbHlnb24+PHBvbHlnb24gcG9pbnRzPVxcXCIyMiAxOSAxMyAxMiAyMiA1IDIyIDE5XFxcIj48L3BvbHlnb24+XCIsXCJyb3RhdGUtY2N3XCI6XCI8cG9seWxpbmUgcG9pbnRzPVxcXCIxIDQgMSAxMCA3IDEwXFxcIj48L3BvbHlsaW5lPjxwYXRoIGQ9XFxcIk0zLjUxIDE1YTkgOSAwIDEgMCAyLjEzLTkuMzZMMSAxMFxcXCI+PC9wYXRoPlwiLFwicm90YXRlLWN3XCI6XCI8cG9seWxpbmUgcG9pbnRzPVxcXCIyMyA0IDIzIDEwIDE3IDEwXFxcIj48L3BvbHlsaW5lPjxwYXRoIGQ9XFxcIk0yMC40OSAxNWE5IDkgMCAxIDEtMi4xMi05LjM2TDIzIDEwXFxcIj48L3BhdGg+XCIsXCJyc3NcIjpcIjxwYXRoIGQ9XFxcIk00IDExYTkgOSAwIDAgMSA5IDlcXFwiPjwvcGF0aD48cGF0aCBkPVxcXCJNNCA0YTE2IDE2IDAgMCAxIDE2IDE2XFxcIj48L3BhdGg+PGNpcmNsZSBjeD1cXFwiNVxcXCIgY3k9XFxcIjE5XFxcIiByPVxcXCIxXFxcIj48L2NpcmNsZT5cIixcInNhdmVcIjpcIjxwYXRoIGQ9XFxcIk0xOSAyMUg1YTIgMiAwIDAgMS0yLTJWNWEyIDIgMCAwIDEgMi0yaDExbDUgNXYxMWEyIDIgMCAwIDEtMiAyelxcXCI+PC9wYXRoPjxwb2x5bGluZSBwb2ludHM9XFxcIjE3IDIxIDE3IDEzIDcgMTMgNyAyMVxcXCI+PC9wb2x5bGluZT48cG9seWxpbmUgcG9pbnRzPVxcXCI3IDMgNyA4IDE1IDhcXFwiPjwvcG9seWxpbmU+XCIsXCJzY2lzc29yc1wiOlwiPGNpcmNsZSBjeD1cXFwiNlxcXCIgY3k9XFxcIjZcXFwiIHI9XFxcIjNcXFwiPjwvY2lyY2xlPjxjaXJjbGUgY3g9XFxcIjZcXFwiIGN5PVxcXCIxOFxcXCIgcj1cXFwiM1xcXCI+PC9jaXJjbGU+PGxpbmUgeDE9XFxcIjIwXFxcIiB5MT1cXFwiNFxcXCIgeDI9XFxcIjguMTJcXFwiIHkyPVxcXCIxNS44OFxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCIxNC40N1xcXCIgeTE9XFxcIjE0LjQ4XFxcIiB4Mj1cXFwiMjBcXFwiIHkyPVxcXCIyMFxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCI4LjEyXFxcIiB5MT1cXFwiOC4xMlxcXCIgeDI9XFxcIjEyXFxcIiB5Mj1cXFwiMTJcXFwiPjwvbGluZT5cIixcInNlYXJjaFwiOlwiPGNpcmNsZSBjeD1cXFwiMTFcXFwiIGN5PVxcXCIxMVxcXCIgcj1cXFwiOFxcXCI+PC9jaXJjbGU+PGxpbmUgeDE9XFxcIjIxXFxcIiB5MT1cXFwiMjFcXFwiIHgyPVxcXCIxNi42NVxcXCIgeTI9XFxcIjE2LjY1XFxcIj48L2xpbmU+XCIsXCJzZW5kXCI6XCI8bGluZSB4MT1cXFwiMjJcXFwiIHkxPVxcXCIyXFxcIiB4Mj1cXFwiMTFcXFwiIHkyPVxcXCIxM1xcXCI+PC9saW5lPjxwb2x5Z29uIHBvaW50cz1cXFwiMjIgMiAxNSAyMiAxMSAxMyAyIDkgMjIgMlxcXCI+PC9wb2x5Z29uPlwiLFwic2VydmVyXCI6XCI8cmVjdCB4PVxcXCIyXFxcIiB5PVxcXCIyXFxcIiB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiOFxcXCIgcng9XFxcIjJcXFwiIHJ5PVxcXCIyXFxcIj48L3JlY3Q+PHJlY3QgeD1cXFwiMlxcXCIgeT1cXFwiMTRcXFwiIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCI4XFxcIiByeD1cXFwiMlxcXCIgcnk9XFxcIjJcXFwiPjwvcmVjdD48bGluZSB4MT1cXFwiNlxcXCIgeTE9XFxcIjZcXFwiIHgyPVxcXCI2LjAxXFxcIiB5Mj1cXFwiNlxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCI2XFxcIiB5MT1cXFwiMThcXFwiIHgyPVxcXCI2LjAxXFxcIiB5Mj1cXFwiMThcXFwiPjwvbGluZT5cIixcInNldHRpbmdzXCI6XCI8Y2lyY2xlIGN4PVxcXCIxMlxcXCIgY3k9XFxcIjEyXFxcIiByPVxcXCIzXFxcIj48L2NpcmNsZT48cGF0aCBkPVxcXCJNMTkuNCAxNWExLjY1IDEuNjUgMCAwIDAgLjMzIDEuODJsLjA2LjA2YTIgMiAwIDAgMSAwIDIuODMgMiAyIDAgMCAxLTIuODMgMGwtLjA2LS4wNmExLjY1IDEuNjUgMCAwIDAtMS44Mi0uMzMgMS42NSAxLjY1IDAgMCAwLTEgMS41MVYyMWEyIDIgMCAwIDEtMiAyIDIgMiAwIDAgMS0yLTJ2LS4wOUExLjY1IDEuNjUgMCAwIDAgOSAxOS40YTEuNjUgMS42NSAwIDAgMC0xLjgyLjMzbC0uMDYuMDZhMiAyIDAgMCAxLTIuODMgMCAyIDIgMCAwIDEgMC0yLjgzbC4wNi0uMDZhMS42NSAxLjY1IDAgMCAwIC4zMy0xLjgyIDEuNjUgMS42NSAwIDAgMC0xLjUxLTFIM2EyIDIgMCAwIDEtMi0yIDIgMiAwIDAgMSAyLTJoLjA5QTEuNjUgMS42NSAwIDAgMCA0LjYgOWExLjY1IDEuNjUgMCAwIDAtLjMzLTEuODJsLS4wNi0uMDZhMiAyIDAgMCAxIDAtMi44MyAyIDIgMCAwIDEgMi44MyAwbC4wNi4wNmExLjY1IDEuNjUgMCAwIDAgMS44Mi4zM0g5YTEuNjUgMS42NSAwIDAgMCAxLTEuNTFWM2EyIDIgMCAwIDEgMi0yIDIgMiAwIDAgMSAyIDJ2LjA5YTEuNjUgMS42NSAwIDAgMCAxIDEuNTEgMS42NSAxLjY1IDAgMCAwIDEuODItLjMzbC4wNi0uMDZhMiAyIDAgMCAxIDIuODMgMCAyIDIgMCAwIDEgMCAyLjgzbC0uMDYuMDZhMS42NSAxLjY1IDAgMCAwLS4zMyAxLjgyVjlhMS42NSAxLjY1IDAgMCAwIDEuNTEgMUgyMWEyIDIgMCAwIDEgMiAyIDIgMiAwIDAgMS0yIDJoLS4wOWExLjY1IDEuNjUgMCAwIDAtMS41MSAxelxcXCI+PC9wYXRoPlwiLFwic2hhcmUtMlwiOlwiPGNpcmNsZSBjeD1cXFwiMThcXFwiIGN5PVxcXCI1XFxcIiByPVxcXCIzXFxcIj48L2NpcmNsZT48Y2lyY2xlIGN4PVxcXCI2XFxcIiBjeT1cXFwiMTJcXFwiIHI9XFxcIjNcXFwiPjwvY2lyY2xlPjxjaXJjbGUgY3g9XFxcIjE4XFxcIiBjeT1cXFwiMTlcXFwiIHI9XFxcIjNcXFwiPjwvY2lyY2xlPjxsaW5lIHgxPVxcXCI4LjU5XFxcIiB5MT1cXFwiMTMuNTFcXFwiIHgyPVxcXCIxNS40MlxcXCIgeTI9XFxcIjE3LjQ5XFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjE1LjQxXFxcIiB5MT1cXFwiNi41MVxcXCIgeDI9XFxcIjguNTlcXFwiIHkyPVxcXCIxMC40OVxcXCI+PC9saW5lPlwiLFwic2hhcmVcIjpcIjxwYXRoIGQ9XFxcIk00IDEydjhhMiAyIDAgMCAwIDIgMmgxMmEyIDIgMCAwIDAgMi0ydi04XFxcIj48L3BhdGg+PHBvbHlsaW5lIHBvaW50cz1cXFwiMTYgNiAxMiAyIDggNlxcXCI+PC9wb2x5bGluZT48bGluZSB4MT1cXFwiMTJcXFwiIHkxPVxcXCIyXFxcIiB4Mj1cXFwiMTJcXFwiIHkyPVxcXCIxNVxcXCI+PC9saW5lPlwiLFwic2hpZWxkLW9mZlwiOlwiPHBhdGggZD1cXFwiTTE5LjY5IDE0YTYuOSA2LjkgMCAwIDAgLjMxLTJWNWwtOC0zLTMuMTYgMS4xOFxcXCI+PC9wYXRoPjxwYXRoIGQ9XFxcIk00LjczIDQuNzNMNCA1djdjMCA2IDggMTAgOCAxMGEyMC4yOSAyMC4yOSAwIDAgMCA1LjYyLTQuMzhcXFwiPjwvcGF0aD48bGluZSB4MT1cXFwiMVxcXCIgeTE9XFxcIjFcXFwiIHgyPVxcXCIyM1xcXCIgeTI9XFxcIjIzXFxcIj48L2xpbmU+XCIsXCJzaGllbGRcIjpcIjxwYXRoIGQ9XFxcIk0xMiAyMnM4LTQgOC0xMFY1bC04LTMtOCAzdjdjMCA2IDggMTAgOCAxMHpcXFwiPjwvcGF0aD5cIixcInNob3BwaW5nLWJhZ1wiOlwiPHBhdGggZD1cXFwiTTYgMkwzIDZ2MTRhMiAyIDAgMCAwIDIgMmgxNGEyIDIgMCAwIDAgMi0yVjZsLTMtNHpcXFwiPjwvcGF0aD48bGluZSB4MT1cXFwiM1xcXCIgeTE9XFxcIjZcXFwiIHgyPVxcXCIyMVxcXCIgeTI9XFxcIjZcXFwiPjwvbGluZT48cGF0aCBkPVxcXCJNMTYgMTBhNCA0IDAgMCAxLTggMFxcXCI+PC9wYXRoPlwiLFwic2hvcHBpbmctY2FydFwiOlwiPGNpcmNsZSBjeD1cXFwiOVxcXCIgY3k9XFxcIjIxXFxcIiByPVxcXCIxXFxcIj48L2NpcmNsZT48Y2lyY2xlIGN4PVxcXCIyMFxcXCIgY3k9XFxcIjIxXFxcIiByPVxcXCIxXFxcIj48L2NpcmNsZT48cGF0aCBkPVxcXCJNMSAxaDRsMi42OCAxMy4zOWEyIDIgMCAwIDAgMiAxLjYxaDkuNzJhMiAyIDAgMCAwIDItMS42MUwyMyA2SDZcXFwiPjwvcGF0aD5cIixcInNodWZmbGVcIjpcIjxwb2x5bGluZSBwb2ludHM9XFxcIjE2IDMgMjEgMyAyMSA4XFxcIj48L3BvbHlsaW5lPjxsaW5lIHgxPVxcXCI0XFxcIiB5MT1cXFwiMjBcXFwiIHgyPVxcXCIyMVxcXCIgeTI9XFxcIjNcXFwiPjwvbGluZT48cG9seWxpbmUgcG9pbnRzPVxcXCIyMSAxNiAyMSAyMSAxNiAyMVxcXCI+PC9wb2x5bGluZT48bGluZSB4MT1cXFwiMTVcXFwiIHkxPVxcXCIxNVxcXCIgeDI9XFxcIjIxXFxcIiB5Mj1cXFwiMjFcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiNFxcXCIgeTE9XFxcIjRcXFwiIHgyPVxcXCI5XFxcIiB5Mj1cXFwiOVxcXCI+PC9saW5lPlwiLFwic2lkZWJhclwiOlwiPHJlY3QgeD1cXFwiM1xcXCIgeT1cXFwiM1xcXCIgd2lkdGg9XFxcIjE4XFxcIiBoZWlnaHQ9XFxcIjE4XFxcIiByeD1cXFwiMlxcXCIgcnk9XFxcIjJcXFwiPjwvcmVjdD48bGluZSB4MT1cXFwiOVxcXCIgeTE9XFxcIjNcXFwiIHgyPVxcXCI5XFxcIiB5Mj1cXFwiMjFcXFwiPjwvbGluZT5cIixcInNraXAtYmFja1wiOlwiPHBvbHlnb24gcG9pbnRzPVxcXCIxOSAyMCA5IDEyIDE5IDQgMTkgMjBcXFwiPjwvcG9seWdvbj48bGluZSB4MT1cXFwiNVxcXCIgeTE9XFxcIjE5XFxcIiB4Mj1cXFwiNVxcXCIgeTI9XFxcIjVcXFwiPjwvbGluZT5cIixcInNraXAtZm9yd2FyZFwiOlwiPHBvbHlnb24gcG9pbnRzPVxcXCI1IDQgMTUgMTIgNSAyMCA1IDRcXFwiPjwvcG9seWdvbj48bGluZSB4MT1cXFwiMTlcXFwiIHkxPVxcXCI1XFxcIiB4Mj1cXFwiMTlcXFwiIHkyPVxcXCIxOVxcXCI+PC9saW5lPlwiLFwic2xhY2tcIjpcIjxwYXRoIGQ9XFxcIk0xNC41IDEwYy0uODMgMC0xLjUtLjY3LTEuNS0xLjV2LTVjMC0uODMuNjctMS41IDEuNS0xLjVzMS41LjY3IDEuNSAxLjV2NWMwIC44My0uNjcgMS41LTEuNSAxLjV6XFxcIj48L3BhdGg+PHBhdGggZD1cXFwiTTIwLjUgMTBIMTlWOC41YzAtLjgzLjY3LTEuNSAxLjUtMS41czEuNS42NyAxLjUgMS41LS42NyAxLjUtMS41IDEuNXpcXFwiPjwvcGF0aD48cGF0aCBkPVxcXCJNOS41IDE0Yy44MyAwIDEuNS42NyAxLjUgMS41djVjMCAuODMtLjY3IDEuNS0xLjUgMS41UzggMjEuMzMgOCAyMC41di01YzAtLjgzLjY3LTEuNSAxLjUtMS41elxcXCI+PC9wYXRoPjxwYXRoIGQ9XFxcIk0zLjUgMTRINXYxLjVjMCAuODMtLjY3IDEuNS0xLjUgMS41UzIgMTYuMzMgMiAxNS41IDIuNjcgMTQgMy41IDE0elxcXCI+PC9wYXRoPjxwYXRoIGQ9XFxcIk0xNCAxNC41YzAtLjgzLjY3LTEuNSAxLjUtMS41aDVjLjgzIDAgMS41LjY3IDEuNSAxLjVzLS42NyAxLjUtMS41IDEuNWgtNWMtLjgzIDAtMS41LS42Ny0xLjUtMS41elxcXCI+PC9wYXRoPjxwYXRoIGQ9XFxcIk0xNS41IDE5SDE0djEuNWMwIC44My42NyAxLjUgMS41IDEuNXMxLjUtLjY3IDEuNS0xLjUtLjY3LTEuNS0xLjUtMS41elxcXCI+PC9wYXRoPjxwYXRoIGQ9XFxcIk0xMCA5LjVDMTAgOC42NyA5LjMzIDggOC41IDhoLTVDMi42NyA4IDIgOC42NyAyIDkuNVMyLjY3IDExIDMuNSAxMWg1Yy44MyAwIDEuNS0uNjcgMS41LTEuNXpcXFwiPjwvcGF0aD48cGF0aCBkPVxcXCJNOC41IDVIMTBWMy41QzEwIDIuNjcgOS4zMyAyIDguNSAyUzcgMi42NyA3IDMuNSA3LjY3IDUgOC41IDV6XFxcIj48L3BhdGg+XCIsXCJzbGFzaFwiOlwiPGNpcmNsZSBjeD1cXFwiMTJcXFwiIGN5PVxcXCIxMlxcXCIgcj1cXFwiMTBcXFwiPjwvY2lyY2xlPjxsaW5lIHgxPVxcXCI0LjkzXFxcIiB5MT1cXFwiNC45M1xcXCIgeDI9XFxcIjE5LjA3XFxcIiB5Mj1cXFwiMTkuMDdcXFwiPjwvbGluZT5cIixcInNsaWRlcnNcIjpcIjxsaW5lIHgxPVxcXCI0XFxcIiB5MT1cXFwiMjFcXFwiIHgyPVxcXCI0XFxcIiB5Mj1cXFwiMTRcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiNFxcXCIgeTE9XFxcIjEwXFxcIiB4Mj1cXFwiNFxcXCIgeTI9XFxcIjNcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiMTJcXFwiIHkxPVxcXCIyMVxcXCIgeDI9XFxcIjEyXFxcIiB5Mj1cXFwiMTJcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiMTJcXFwiIHkxPVxcXCI4XFxcIiB4Mj1cXFwiMTJcXFwiIHkyPVxcXCIzXFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjIwXFxcIiB5MT1cXFwiMjFcXFwiIHgyPVxcXCIyMFxcXCIgeTI9XFxcIjE2XFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjIwXFxcIiB5MT1cXFwiMTJcXFwiIHgyPVxcXCIyMFxcXCIgeTI9XFxcIjNcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiMVxcXCIgeTE9XFxcIjE0XFxcIiB4Mj1cXFwiN1xcXCIgeTI9XFxcIjE0XFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjlcXFwiIHkxPVxcXCI4XFxcIiB4Mj1cXFwiMTVcXFwiIHkyPVxcXCI4XFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjE3XFxcIiB5MT1cXFwiMTZcXFwiIHgyPVxcXCIyM1xcXCIgeTI9XFxcIjE2XFxcIj48L2xpbmU+XCIsXCJzbWFydHBob25lXCI6XCI8cmVjdCB4PVxcXCI1XFxcIiB5PVxcXCIyXFxcIiB3aWR0aD1cXFwiMTRcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHJ4PVxcXCIyXFxcIiByeT1cXFwiMlxcXCI+PC9yZWN0PjxsaW5lIHgxPVxcXCIxMlxcXCIgeTE9XFxcIjE4XFxcIiB4Mj1cXFwiMTIuMDFcXFwiIHkyPVxcXCIxOFxcXCI+PC9saW5lPlwiLFwic21pbGVcIjpcIjxjaXJjbGUgY3g9XFxcIjEyXFxcIiBjeT1cXFwiMTJcXFwiIHI9XFxcIjEwXFxcIj48L2NpcmNsZT48cGF0aCBkPVxcXCJNOCAxNHMxLjUgMiA0IDIgNC0yIDQtMlxcXCI+PC9wYXRoPjxsaW5lIHgxPVxcXCI5XFxcIiB5MT1cXFwiOVxcXCIgeDI9XFxcIjkuMDFcXFwiIHkyPVxcXCI5XFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjE1XFxcIiB5MT1cXFwiOVxcXCIgeDI9XFxcIjE1LjAxXFxcIiB5Mj1cXFwiOVxcXCI+PC9saW5lPlwiLFwic3BlYWtlclwiOlwiPHJlY3QgeD1cXFwiNFxcXCIgeT1cXFwiMlxcXCIgd2lkdGg9XFxcIjE2XFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiByeD1cXFwiMlxcXCIgcnk9XFxcIjJcXFwiPjwvcmVjdD48Y2lyY2xlIGN4PVxcXCIxMlxcXCIgY3k9XFxcIjE0XFxcIiByPVxcXCI0XFxcIj48L2NpcmNsZT48bGluZSB4MT1cXFwiMTJcXFwiIHkxPVxcXCI2XFxcIiB4Mj1cXFwiMTIuMDFcXFwiIHkyPVxcXCI2XFxcIj48L2xpbmU+XCIsXCJzcXVhcmVcIjpcIjxyZWN0IHg9XFxcIjNcXFwiIHk9XFxcIjNcXFwiIHdpZHRoPVxcXCIxOFxcXCIgaGVpZ2h0PVxcXCIxOFxcXCIgcng9XFxcIjJcXFwiIHJ5PVxcXCIyXFxcIj48L3JlY3Q+XCIsXCJzdGFyXCI6XCI8cG9seWdvbiBwb2ludHM9XFxcIjEyIDIgMTUuMDkgOC4yNiAyMiA5LjI3IDE3IDE0LjE0IDE4LjE4IDIxLjAyIDEyIDE3Ljc3IDUuODIgMjEuMDIgNyAxNC4xNCAyIDkuMjcgOC45MSA4LjI2IDEyIDJcXFwiPjwvcG9seWdvbj5cIixcInN0b3AtY2lyY2xlXCI6XCI8Y2lyY2xlIGN4PVxcXCIxMlxcXCIgY3k9XFxcIjEyXFxcIiByPVxcXCIxMFxcXCI+PC9jaXJjbGU+PHJlY3QgeD1cXFwiOVxcXCIgeT1cXFwiOVxcXCIgd2lkdGg9XFxcIjZcXFwiIGhlaWdodD1cXFwiNlxcXCI+PC9yZWN0PlwiLFwic3VuXCI6XCI8Y2lyY2xlIGN4PVxcXCIxMlxcXCIgY3k9XFxcIjEyXFxcIiByPVxcXCI1XFxcIj48L2NpcmNsZT48bGluZSB4MT1cXFwiMTJcXFwiIHkxPVxcXCIxXFxcIiB4Mj1cXFwiMTJcXFwiIHkyPVxcXCIzXFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjEyXFxcIiB5MT1cXFwiMjFcXFwiIHgyPVxcXCIxMlxcXCIgeTI9XFxcIjIzXFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjQuMjJcXFwiIHkxPVxcXCI0LjIyXFxcIiB4Mj1cXFwiNS42NFxcXCIgeTI9XFxcIjUuNjRcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiMTguMzZcXFwiIHkxPVxcXCIxOC4zNlxcXCIgeDI9XFxcIjE5Ljc4XFxcIiB5Mj1cXFwiMTkuNzhcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiMVxcXCIgeTE9XFxcIjEyXFxcIiB4Mj1cXFwiM1xcXCIgeTI9XFxcIjEyXFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjIxXFxcIiB5MT1cXFwiMTJcXFwiIHgyPVxcXCIyM1xcXCIgeTI9XFxcIjEyXFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjQuMjJcXFwiIHkxPVxcXCIxOS43OFxcXCIgeDI9XFxcIjUuNjRcXFwiIHkyPVxcXCIxOC4zNlxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCIxOC4zNlxcXCIgeTE9XFxcIjUuNjRcXFwiIHgyPVxcXCIxOS43OFxcXCIgeTI9XFxcIjQuMjJcXFwiPjwvbGluZT5cIixcInN1bnJpc2VcIjpcIjxwYXRoIGQ9XFxcIk0xNyAxOGE1IDUgMCAwIDAtMTAgMFxcXCI+PC9wYXRoPjxsaW5lIHgxPVxcXCIxMlxcXCIgeTE9XFxcIjJcXFwiIHgyPVxcXCIxMlxcXCIgeTI9XFxcIjlcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiNC4yMlxcXCIgeTE9XFxcIjEwLjIyXFxcIiB4Mj1cXFwiNS42NFxcXCIgeTI9XFxcIjExLjY0XFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjFcXFwiIHkxPVxcXCIxOFxcXCIgeDI9XFxcIjNcXFwiIHkyPVxcXCIxOFxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCIyMVxcXCIgeTE9XFxcIjE4XFxcIiB4Mj1cXFwiMjNcXFwiIHkyPVxcXCIxOFxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCIxOC4zNlxcXCIgeTE9XFxcIjExLjY0XFxcIiB4Mj1cXFwiMTkuNzhcXFwiIHkyPVxcXCIxMC4yMlxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCIyM1xcXCIgeTE9XFxcIjIyXFxcIiB4Mj1cXFwiMVxcXCIgeTI9XFxcIjIyXFxcIj48L2xpbmU+PHBvbHlsaW5lIHBvaW50cz1cXFwiOCA2IDEyIDIgMTYgNlxcXCI+PC9wb2x5bGluZT5cIixcInN1bnNldFwiOlwiPHBhdGggZD1cXFwiTTE3IDE4YTUgNSAwIDAgMC0xMCAwXFxcIj48L3BhdGg+PGxpbmUgeDE9XFxcIjEyXFxcIiB5MT1cXFwiOVxcXCIgeDI9XFxcIjEyXFxcIiB5Mj1cXFwiMlxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCI0LjIyXFxcIiB5MT1cXFwiMTAuMjJcXFwiIHgyPVxcXCI1LjY0XFxcIiB5Mj1cXFwiMTEuNjRcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiMVxcXCIgeTE9XFxcIjE4XFxcIiB4Mj1cXFwiM1xcXCIgeTI9XFxcIjE4XFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjIxXFxcIiB5MT1cXFwiMThcXFwiIHgyPVxcXCIyM1xcXCIgeTI9XFxcIjE4XFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjE4LjM2XFxcIiB5MT1cXFwiMTEuNjRcXFwiIHgyPVxcXCIxOS43OFxcXCIgeTI9XFxcIjEwLjIyXFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjIzXFxcIiB5MT1cXFwiMjJcXFwiIHgyPVxcXCIxXFxcIiB5Mj1cXFwiMjJcXFwiPjwvbGluZT48cG9seWxpbmUgcG9pbnRzPVxcXCIxNiA1IDEyIDkgOCA1XFxcIj48L3BvbHlsaW5lPlwiLFwidGFibGV0XCI6XCI8cmVjdCB4PVxcXCI0XFxcIiB5PVxcXCIyXFxcIiB3aWR0aD1cXFwiMTZcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHJ4PVxcXCIyXFxcIiByeT1cXFwiMlxcXCI+PC9yZWN0PjxsaW5lIHgxPVxcXCIxMlxcXCIgeTE9XFxcIjE4XFxcIiB4Mj1cXFwiMTIuMDFcXFwiIHkyPVxcXCIxOFxcXCI+PC9saW5lPlwiLFwidGFnXCI6XCI8cGF0aCBkPVxcXCJNMjAuNTkgMTMuNDFsLTcuMTcgNy4xN2EyIDIgMCAwIDEtMi44MyAwTDIgMTJWMmgxMGw4LjU5IDguNTlhMiAyIDAgMCAxIDAgMi44MnpcXFwiPjwvcGF0aD48bGluZSB4MT1cXFwiN1xcXCIgeTE9XFxcIjdcXFwiIHgyPVxcXCI3LjAxXFxcIiB5Mj1cXFwiN1xcXCI+PC9saW5lPlwiLFwidGFyZ2V0XCI6XCI8Y2lyY2xlIGN4PVxcXCIxMlxcXCIgY3k9XFxcIjEyXFxcIiByPVxcXCIxMFxcXCI+PC9jaXJjbGU+PGNpcmNsZSBjeD1cXFwiMTJcXFwiIGN5PVxcXCIxMlxcXCIgcj1cXFwiNlxcXCI+PC9jaXJjbGU+PGNpcmNsZSBjeD1cXFwiMTJcXFwiIGN5PVxcXCIxMlxcXCIgcj1cXFwiMlxcXCI+PC9jaXJjbGU+XCIsXCJ0ZXJtaW5hbFwiOlwiPHBvbHlsaW5lIHBvaW50cz1cXFwiNCAxNyAxMCAxMSA0IDVcXFwiPjwvcG9seWxpbmU+PGxpbmUgeDE9XFxcIjEyXFxcIiB5MT1cXFwiMTlcXFwiIHgyPVxcXCIyMFxcXCIgeTI9XFxcIjE5XFxcIj48L2xpbmU+XCIsXCJ0aGVybW9tZXRlclwiOlwiPHBhdGggZD1cXFwiTTE0IDE0Ljc2VjMuNWEyLjUgMi41IDAgMCAwLTUgMHYxMS4yNmE0LjUgNC41IDAgMSAwIDUgMHpcXFwiPjwvcGF0aD5cIixcInRodW1icy1kb3duXCI6XCI8cGF0aCBkPVxcXCJNMTAgMTV2NGEzIDMgMCAwIDAgMyAzbDQtOVYySDUuNzJhMiAyIDAgMCAwLTIgMS43bC0xLjM4IDlhMiAyIDAgMCAwIDIgMi4zem03LTEzaDIuNjdBMi4zMSAyLjMxIDAgMCAxIDIyIDR2N2EyLjMxIDIuMzEgMCAwIDEtMi4zMyAySDE3XFxcIj48L3BhdGg+XCIsXCJ0aHVtYnMtdXBcIjpcIjxwYXRoIGQ9XFxcIk0xNCA5VjVhMyAzIDAgMCAwLTMtM2wtNCA5djExaDExLjI4YTIgMiAwIDAgMCAyLTEuN2wxLjM4LTlhMiAyIDAgMCAwLTItMi4zek03IDIySDRhMiAyIDAgMCAxLTItMnYtN2EyIDIgMCAwIDEgMi0yaDNcXFwiPjwvcGF0aD5cIixcInRvZ2dsZS1sZWZ0XCI6XCI8cmVjdCB4PVxcXCIxXFxcIiB5PVxcXCI1XFxcIiB3aWR0aD1cXFwiMjJcXFwiIGhlaWdodD1cXFwiMTRcXFwiIHJ4PVxcXCI3XFxcIiByeT1cXFwiN1xcXCI+PC9yZWN0PjxjaXJjbGUgY3g9XFxcIjhcXFwiIGN5PVxcXCIxMlxcXCIgcj1cXFwiM1xcXCI+PC9jaXJjbGU+XCIsXCJ0b2dnbGUtcmlnaHRcIjpcIjxyZWN0IHg9XFxcIjFcXFwiIHk9XFxcIjVcXFwiIHdpZHRoPVxcXCIyMlxcXCIgaGVpZ2h0PVxcXCIxNFxcXCIgcng9XFxcIjdcXFwiIHJ5PVxcXCI3XFxcIj48L3JlY3Q+PGNpcmNsZSBjeD1cXFwiMTZcXFwiIGN5PVxcXCIxMlxcXCIgcj1cXFwiM1xcXCI+PC9jaXJjbGU+XCIsXCJ0b29sXCI6XCI8cGF0aCBkPVxcXCJNMTQuNyA2LjNhMSAxIDAgMCAwIDAgMS40bDEuNiAxLjZhMSAxIDAgMCAwIDEuNCAwbDMuNzctMy43N2E2IDYgMCAwIDEtNy45NCA3Ljk0bC02LjkxIDYuOTFhMi4xMiAyLjEyIDAgMCAxLTMtM2w2LjkxLTYuOTFhNiA2IDAgMCAxIDcuOTQtNy45NGwtMy43NiAzLjc2elxcXCI+PC9wYXRoPlwiLFwidHJhc2gtMlwiOlwiPHBvbHlsaW5lIHBvaW50cz1cXFwiMyA2IDUgNiAyMSA2XFxcIj48L3BvbHlsaW5lPjxwYXRoIGQ9XFxcIk0xOSA2djE0YTIgMiAwIDAgMS0yIDJIN2EyIDIgMCAwIDEtMi0yVjZtMyAwVjRhMiAyIDAgMCAxIDItMmg0YTIgMiAwIDAgMSAyIDJ2MlxcXCI+PC9wYXRoPjxsaW5lIHgxPVxcXCIxMFxcXCIgeTE9XFxcIjExXFxcIiB4Mj1cXFwiMTBcXFwiIHkyPVxcXCIxN1xcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCIxNFxcXCIgeTE9XFxcIjExXFxcIiB4Mj1cXFwiMTRcXFwiIHkyPVxcXCIxN1xcXCI+PC9saW5lPlwiLFwidHJhc2hcIjpcIjxwb2x5bGluZSBwb2ludHM9XFxcIjMgNiA1IDYgMjEgNlxcXCI+PC9wb2x5bGluZT48cGF0aCBkPVxcXCJNMTkgNnYxNGEyIDIgMCAwIDEtMiAySDdhMiAyIDAgMCAxLTItMlY2bTMgMFY0YTIgMiAwIDAgMSAyLTJoNGEyIDIgMCAwIDEgMiAydjJcXFwiPjwvcGF0aD5cIixcInRyZWxsb1wiOlwiPHJlY3QgeD1cXFwiM1xcXCIgeT1cXFwiM1xcXCIgd2lkdGg9XFxcIjE4XFxcIiBoZWlnaHQ9XFxcIjE4XFxcIiByeD1cXFwiMlxcXCIgcnk9XFxcIjJcXFwiPjwvcmVjdD48cmVjdCB4PVxcXCI3XFxcIiB5PVxcXCI3XFxcIiB3aWR0aD1cXFwiM1xcXCIgaGVpZ2h0PVxcXCI5XFxcIj48L3JlY3Q+PHJlY3QgeD1cXFwiMTRcXFwiIHk9XFxcIjdcXFwiIHdpZHRoPVxcXCIzXFxcIiBoZWlnaHQ9XFxcIjVcXFwiPjwvcmVjdD5cIixcInRyZW5kaW5nLWRvd25cIjpcIjxwb2x5bGluZSBwb2ludHM9XFxcIjIzIDE4IDEzLjUgOC41IDguNSAxMy41IDEgNlxcXCI+PC9wb2x5bGluZT48cG9seWxpbmUgcG9pbnRzPVxcXCIxNyAxOCAyMyAxOCAyMyAxMlxcXCI+PC9wb2x5bGluZT5cIixcInRyZW5kaW5nLXVwXCI6XCI8cG9seWxpbmUgcG9pbnRzPVxcXCIyMyA2IDEzLjUgMTUuNSA4LjUgMTAuNSAxIDE4XFxcIj48L3BvbHlsaW5lPjxwb2x5bGluZSBwb2ludHM9XFxcIjE3IDYgMjMgNiAyMyAxMlxcXCI+PC9wb2x5bGluZT5cIixcInRyaWFuZ2xlXCI6XCI8cGF0aCBkPVxcXCJNMTAuMjkgMy44NkwxLjgyIDE4YTIgMiAwIDAgMCAxLjcxIDNoMTYuOTRhMiAyIDAgMCAwIDEuNzEtM0wxMy43MSAzLjg2YTIgMiAwIDAgMC0zLjQyIDB6XFxcIj48L3BhdGg+XCIsXCJ0cnVja1wiOlwiPHJlY3QgeD1cXFwiMVxcXCIgeT1cXFwiM1xcXCIgd2lkdGg9XFxcIjE1XFxcIiBoZWlnaHQ9XFxcIjEzXFxcIj48L3JlY3Q+PHBvbHlnb24gcG9pbnRzPVxcXCIxNiA4IDIwIDggMjMgMTEgMjMgMTYgMTYgMTYgMTYgOFxcXCI+PC9wb2x5Z29uPjxjaXJjbGUgY3g9XFxcIjUuNVxcXCIgY3k9XFxcIjE4LjVcXFwiIHI9XFxcIjIuNVxcXCI+PC9jaXJjbGU+PGNpcmNsZSBjeD1cXFwiMTguNVxcXCIgY3k9XFxcIjE4LjVcXFwiIHI9XFxcIjIuNVxcXCI+PC9jaXJjbGU+XCIsXCJ0dlwiOlwiPHJlY3QgeD1cXFwiMlxcXCIgeT1cXFwiN1xcXCIgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjE1XFxcIiByeD1cXFwiMlxcXCIgcnk9XFxcIjJcXFwiPjwvcmVjdD48cG9seWxpbmUgcG9pbnRzPVxcXCIxNyAyIDEyIDcgNyAyXFxcIj48L3BvbHlsaW5lPlwiLFwidHdpdGNoXCI6XCI8cGF0aCBkPVxcXCJNMjEgMkgzdjE2aDV2NGw0LTRoNWw0LTRWMnptLTEwIDlWN201IDRWN1xcXCI+PC9wYXRoPlwiLFwidHdpdHRlclwiOlwiPHBhdGggZD1cXFwiTTIzIDNhMTAuOSAxMC45IDAgMCAxLTMuMTQgMS41MyA0LjQ4IDQuNDggMCAwIDAtNy44NiAzdjFBMTAuNjYgMTAuNjYgMCAwIDEgMyA0cy00IDkgNSAxM2ExMS42NCAxMS42NCAwIDAgMS03IDJjOSA1IDIwIDAgMjAtMTEuNWE0LjUgNC41IDAgMCAwLS4wOC0uODNBNy43MiA3LjcyIDAgMCAwIDIzIDN6XFxcIj48L3BhdGg+XCIsXCJ0eXBlXCI6XCI8cG9seWxpbmUgcG9pbnRzPVxcXCI0IDcgNCA0IDIwIDQgMjAgN1xcXCI+PC9wb2x5bGluZT48bGluZSB4MT1cXFwiOVxcXCIgeTE9XFxcIjIwXFxcIiB4Mj1cXFwiMTVcXFwiIHkyPVxcXCIyMFxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCIxMlxcXCIgeTE9XFxcIjRcXFwiIHgyPVxcXCIxMlxcXCIgeTI9XFxcIjIwXFxcIj48L2xpbmU+XCIsXCJ1bWJyZWxsYVwiOlwiPHBhdGggZD1cXFwiTTIzIDEyYTExLjA1IDExLjA1IDAgMCAwLTIyIDB6bS01IDdhMyAzIDAgMCAxLTYgMHYtN1xcXCI+PC9wYXRoPlwiLFwidW5kZXJsaW5lXCI6XCI8cGF0aCBkPVxcXCJNNiAzdjdhNiA2IDAgMCAwIDYgNiA2IDYgMCAwIDAgNi02VjNcXFwiPjwvcGF0aD48bGluZSB4MT1cXFwiNFxcXCIgeTE9XFxcIjIxXFxcIiB4Mj1cXFwiMjBcXFwiIHkyPVxcXCIyMVxcXCI+PC9saW5lPlwiLFwidW5sb2NrXCI6XCI8cmVjdCB4PVxcXCIzXFxcIiB5PVxcXCIxMVxcXCIgd2lkdGg9XFxcIjE4XFxcIiBoZWlnaHQ9XFxcIjExXFxcIiByeD1cXFwiMlxcXCIgcnk9XFxcIjJcXFwiPjwvcmVjdD48cGF0aCBkPVxcXCJNNyAxMVY3YTUgNSAwIDAgMSA5LjktMVxcXCI+PC9wYXRoPlwiLFwidXBsb2FkLWNsb3VkXCI6XCI8cG9seWxpbmUgcG9pbnRzPVxcXCIxNiAxNiAxMiAxMiA4IDE2XFxcIj48L3BvbHlsaW5lPjxsaW5lIHgxPVxcXCIxMlxcXCIgeTE9XFxcIjEyXFxcIiB4Mj1cXFwiMTJcXFwiIHkyPVxcXCIyMVxcXCI+PC9saW5lPjxwYXRoIGQ9XFxcIk0yMC4zOSAxOC4zOUE1IDUgMCAwIDAgMTggOWgtMS4yNkE4IDggMCAxIDAgMyAxNi4zXFxcIj48L3BhdGg+PHBvbHlsaW5lIHBvaW50cz1cXFwiMTYgMTYgMTIgMTIgOCAxNlxcXCI+PC9wb2x5bGluZT5cIixcInVwbG9hZFwiOlwiPHBhdGggZD1cXFwiTTIxIDE1djRhMiAyIDAgMCAxLTIgMkg1YTIgMiAwIDAgMS0yLTJ2LTRcXFwiPjwvcGF0aD48cG9seWxpbmUgcG9pbnRzPVxcXCIxNyA4IDEyIDMgNyA4XFxcIj48L3BvbHlsaW5lPjxsaW5lIHgxPVxcXCIxMlxcXCIgeTE9XFxcIjNcXFwiIHgyPVxcXCIxMlxcXCIgeTI9XFxcIjE1XFxcIj48L2xpbmU+XCIsXCJ1c2VyLWNoZWNrXCI6XCI8cGF0aCBkPVxcXCJNMTYgMjF2LTJhNCA0IDAgMCAwLTQtNEg1YTQgNCAwIDAgMC00IDR2MlxcXCI+PC9wYXRoPjxjaXJjbGUgY3g9XFxcIjguNVxcXCIgY3k9XFxcIjdcXFwiIHI9XFxcIjRcXFwiPjwvY2lyY2xlPjxwb2x5bGluZSBwb2ludHM9XFxcIjE3IDExIDE5IDEzIDIzIDlcXFwiPjwvcG9seWxpbmU+XCIsXCJ1c2VyLW1pbnVzXCI6XCI8cGF0aCBkPVxcXCJNMTYgMjF2LTJhNCA0IDAgMCAwLTQtNEg1YTQgNCAwIDAgMC00IDR2MlxcXCI+PC9wYXRoPjxjaXJjbGUgY3g9XFxcIjguNVxcXCIgY3k9XFxcIjdcXFwiIHI9XFxcIjRcXFwiPjwvY2lyY2xlPjxsaW5lIHgxPVxcXCIyM1xcXCIgeTE9XFxcIjExXFxcIiB4Mj1cXFwiMTdcXFwiIHkyPVxcXCIxMVxcXCI+PC9saW5lPlwiLFwidXNlci1wbHVzXCI6XCI8cGF0aCBkPVxcXCJNMTYgMjF2LTJhNCA0IDAgMCAwLTQtNEg1YTQgNCAwIDAgMC00IDR2MlxcXCI+PC9wYXRoPjxjaXJjbGUgY3g9XFxcIjguNVxcXCIgY3k9XFxcIjdcXFwiIHI9XFxcIjRcXFwiPjwvY2lyY2xlPjxsaW5lIHgxPVxcXCIyMFxcXCIgeTE9XFxcIjhcXFwiIHgyPVxcXCIyMFxcXCIgeTI9XFxcIjE0XFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjIzXFxcIiB5MT1cXFwiMTFcXFwiIHgyPVxcXCIxN1xcXCIgeTI9XFxcIjExXFxcIj48L2xpbmU+XCIsXCJ1c2VyLXhcIjpcIjxwYXRoIGQ9XFxcIk0xNiAyMXYtMmE0IDQgMCAwIDAtNC00SDVhNCA0IDAgMCAwLTQgNHYyXFxcIj48L3BhdGg+PGNpcmNsZSBjeD1cXFwiOC41XFxcIiBjeT1cXFwiN1xcXCIgcj1cXFwiNFxcXCI+PC9jaXJjbGU+PGxpbmUgeDE9XFxcIjE4XFxcIiB5MT1cXFwiOFxcXCIgeDI9XFxcIjIzXFxcIiB5Mj1cXFwiMTNcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiMjNcXFwiIHkxPVxcXCI4XFxcIiB4Mj1cXFwiMThcXFwiIHkyPVxcXCIxM1xcXCI+PC9saW5lPlwiLFwidXNlclwiOlwiPHBhdGggZD1cXFwiTTIwIDIxdi0yYTQgNCAwIDAgMC00LTRIOGE0IDQgMCAwIDAtNCA0djJcXFwiPjwvcGF0aD48Y2lyY2xlIGN4PVxcXCIxMlxcXCIgY3k9XFxcIjdcXFwiIHI9XFxcIjRcXFwiPjwvY2lyY2xlPlwiLFwidXNlcnNcIjpcIjxwYXRoIGQ9XFxcIk0xNyAyMXYtMmE0IDQgMCAwIDAtNC00SDVhNCA0IDAgMCAwLTQgNHYyXFxcIj48L3BhdGg+PGNpcmNsZSBjeD1cXFwiOVxcXCIgY3k9XFxcIjdcXFwiIHI9XFxcIjRcXFwiPjwvY2lyY2xlPjxwYXRoIGQ9XFxcIk0yMyAyMXYtMmE0IDQgMCAwIDAtMy0zLjg3XFxcIj48L3BhdGg+PHBhdGggZD1cXFwiTTE2IDMuMTNhNCA0IDAgMCAxIDAgNy43NVxcXCI+PC9wYXRoPlwiLFwidmlkZW8tb2ZmXCI6XCI8cGF0aCBkPVxcXCJNMTYgMTZ2MWEyIDIgMCAwIDEtMiAySDNhMiAyIDAgMCAxLTItMlY3YTIgMiAwIDAgMSAyLTJoMm01LjY2IDBIMTRhMiAyIDAgMCAxIDIgMnYzLjM0bDEgMUwyMyA3djEwXFxcIj48L3BhdGg+PGxpbmUgeDE9XFxcIjFcXFwiIHkxPVxcXCIxXFxcIiB4Mj1cXFwiMjNcXFwiIHkyPVxcXCIyM1xcXCI+PC9saW5lPlwiLFwidmlkZW9cIjpcIjxwb2x5Z29uIHBvaW50cz1cXFwiMjMgNyAxNiAxMiAyMyAxNyAyMyA3XFxcIj48L3BvbHlnb24+PHJlY3QgeD1cXFwiMVxcXCIgeT1cXFwiNVxcXCIgd2lkdGg9XFxcIjE1XFxcIiBoZWlnaHQ9XFxcIjE0XFxcIiByeD1cXFwiMlxcXCIgcnk9XFxcIjJcXFwiPjwvcmVjdD5cIixcInZvaWNlbWFpbFwiOlwiPGNpcmNsZSBjeD1cXFwiNS41XFxcIiBjeT1cXFwiMTEuNVxcXCIgcj1cXFwiNC41XFxcIj48L2NpcmNsZT48Y2lyY2xlIGN4PVxcXCIxOC41XFxcIiBjeT1cXFwiMTEuNVxcXCIgcj1cXFwiNC41XFxcIj48L2NpcmNsZT48bGluZSB4MT1cXFwiNS41XFxcIiB5MT1cXFwiMTZcXFwiIHgyPVxcXCIxOC41XFxcIiB5Mj1cXFwiMTZcXFwiPjwvbGluZT5cIixcInZvbHVtZS0xXCI6XCI8cG9seWdvbiBwb2ludHM9XFxcIjExIDUgNiA5IDIgOSAyIDE1IDYgMTUgMTEgMTkgMTEgNVxcXCI+PC9wb2x5Z29uPjxwYXRoIGQ9XFxcIk0xNS41NCA4LjQ2YTUgNSAwIDAgMSAwIDcuMDdcXFwiPjwvcGF0aD5cIixcInZvbHVtZS0yXCI6XCI8cG9seWdvbiBwb2ludHM9XFxcIjExIDUgNiA5IDIgOSAyIDE1IDYgMTUgMTEgMTkgMTEgNVxcXCI+PC9wb2x5Z29uPjxwYXRoIGQ9XFxcIk0xOS4wNyA0LjkzYTEwIDEwIDAgMCAxIDAgMTQuMTRNMTUuNTQgOC40NmE1IDUgMCAwIDEgMCA3LjA3XFxcIj48L3BhdGg+XCIsXCJ2b2x1bWUteFwiOlwiPHBvbHlnb24gcG9pbnRzPVxcXCIxMSA1IDYgOSAyIDkgMiAxNSA2IDE1IDExIDE5IDExIDVcXFwiPjwvcG9seWdvbj48bGluZSB4MT1cXFwiMjNcXFwiIHkxPVxcXCI5XFxcIiB4Mj1cXFwiMTdcXFwiIHkyPVxcXCIxNVxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCIxN1xcXCIgeTE9XFxcIjlcXFwiIHgyPVxcXCIyM1xcXCIgeTI9XFxcIjE1XFxcIj48L2xpbmU+XCIsXCJ2b2x1bWVcIjpcIjxwb2x5Z29uIHBvaW50cz1cXFwiMTEgNSA2IDkgMiA5IDIgMTUgNiAxNSAxMSAxOSAxMSA1XFxcIj48L3BvbHlnb24+XCIsXCJ3YXRjaFwiOlwiPGNpcmNsZSBjeD1cXFwiMTJcXFwiIGN5PVxcXCIxMlxcXCIgcj1cXFwiN1xcXCI+PC9jaXJjbGU+PHBvbHlsaW5lIHBvaW50cz1cXFwiMTIgOSAxMiAxMiAxMy41IDEzLjVcXFwiPjwvcG9seWxpbmU+PHBhdGggZD1cXFwiTTE2LjUxIDE3LjM1bC0uMzUgMy44M2EyIDIgMCAwIDEtMiAxLjgySDkuODNhMiAyIDAgMCAxLTItMS44MmwtLjM1LTMuODNtLjAxLTEwLjdsLjM1LTMuODNBMiAyIDAgMCAxIDkuODMgMWg0LjM1YTIgMiAwIDAgMSAyIDEuODJsLjM1IDMuODNcXFwiPjwvcGF0aD5cIixcIndpZmktb2ZmXCI6XCI8bGluZSB4MT1cXFwiMVxcXCIgeTE9XFxcIjFcXFwiIHgyPVxcXCIyM1xcXCIgeTI9XFxcIjIzXFxcIj48L2xpbmU+PHBhdGggZD1cXFwiTTE2LjcyIDExLjA2QTEwLjk0IDEwLjk0IDAgMCAxIDE5IDEyLjU1XFxcIj48L3BhdGg+PHBhdGggZD1cXFwiTTUgMTIuNTVhMTAuOTQgMTAuOTQgMCAwIDEgNS4xNy0yLjM5XFxcIj48L3BhdGg+PHBhdGggZD1cXFwiTTEwLjcxIDUuMDVBMTYgMTYgMCAwIDEgMjIuNTggOVxcXCI+PC9wYXRoPjxwYXRoIGQ9XFxcIk0xLjQyIDlhMTUuOTEgMTUuOTEgMCAwIDEgNC43LTIuODhcXFwiPjwvcGF0aD48cGF0aCBkPVxcXCJNOC41MyAxNi4xMWE2IDYgMCAwIDEgNi45NSAwXFxcIj48L3BhdGg+PGxpbmUgeDE9XFxcIjEyXFxcIiB5MT1cXFwiMjBcXFwiIHgyPVxcXCIxMi4wMVxcXCIgeTI9XFxcIjIwXFxcIj48L2xpbmU+XCIsXCJ3aWZpXCI6XCI8cGF0aCBkPVxcXCJNNSAxMi41NWExMSAxMSAwIDAgMSAxNC4wOCAwXFxcIj48L3BhdGg+PHBhdGggZD1cXFwiTTEuNDIgOWExNiAxNiAwIDAgMSAyMS4xNiAwXFxcIj48L3BhdGg+PHBhdGggZD1cXFwiTTguNTMgMTYuMTFhNiA2IDAgMCAxIDYuOTUgMFxcXCI+PC9wYXRoPjxsaW5lIHgxPVxcXCIxMlxcXCIgeTE9XFxcIjIwXFxcIiB4Mj1cXFwiMTIuMDFcXFwiIHkyPVxcXCIyMFxcXCI+PC9saW5lPlwiLFwid2luZFwiOlwiPHBhdGggZD1cXFwiTTkuNTkgNC41OUEyIDIgMCAxIDEgMTEgOEgybTEwLjU5IDExLjQxQTIgMiAwIDEgMCAxNCAxNkgybTE1LjczLTguMjdBMi41IDIuNSAwIDEgMSAxOS41IDEySDJcXFwiPjwvcGF0aD5cIixcIngtY2lyY2xlXCI6XCI8Y2lyY2xlIGN4PVxcXCIxMlxcXCIgY3k9XFxcIjEyXFxcIiByPVxcXCIxMFxcXCI+PC9jaXJjbGU+PGxpbmUgeDE9XFxcIjE1XFxcIiB5MT1cXFwiOVxcXCIgeDI9XFxcIjlcXFwiIHkyPVxcXCIxNVxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCI5XFxcIiB5MT1cXFwiOVxcXCIgeDI9XFxcIjE1XFxcIiB5Mj1cXFwiMTVcXFwiPjwvbGluZT5cIixcIngtb2N0YWdvblwiOlwiPHBvbHlnb24gcG9pbnRzPVxcXCI3Ljg2IDIgMTYuMTQgMiAyMiA3Ljg2IDIyIDE2LjE0IDE2LjE0IDIyIDcuODYgMjIgMiAxNi4xNCAyIDcuODYgNy44NiAyXFxcIj48L3BvbHlnb24+PGxpbmUgeDE9XFxcIjE1XFxcIiB5MT1cXFwiOVxcXCIgeDI9XFxcIjlcXFwiIHkyPVxcXCIxNVxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCI5XFxcIiB5MT1cXFwiOVxcXCIgeDI9XFxcIjE1XFxcIiB5Mj1cXFwiMTVcXFwiPjwvbGluZT5cIixcIngtc3F1YXJlXCI6XCI8cmVjdCB4PVxcXCIzXFxcIiB5PVxcXCIzXFxcIiB3aWR0aD1cXFwiMThcXFwiIGhlaWdodD1cXFwiMThcXFwiIHJ4PVxcXCIyXFxcIiByeT1cXFwiMlxcXCI+PC9yZWN0PjxsaW5lIHgxPVxcXCI5XFxcIiB5MT1cXFwiOVxcXCIgeDI9XFxcIjE1XFxcIiB5Mj1cXFwiMTVcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiMTVcXFwiIHkxPVxcXCI5XFxcIiB4Mj1cXFwiOVxcXCIgeTI9XFxcIjE1XFxcIj48L2xpbmU+XCIsXCJ4XCI6XCI8bGluZSB4MT1cXFwiMThcXFwiIHkxPVxcXCI2XFxcIiB4Mj1cXFwiNlxcXCIgeTI9XFxcIjE4XFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjZcXFwiIHkxPVxcXCI2XFxcIiB4Mj1cXFwiMThcXFwiIHkyPVxcXCIxOFxcXCI+PC9saW5lPlwiLFwieW91dHViZVwiOlwiPHBhdGggZD1cXFwiTTIyLjU0IDYuNDJhMi43OCAyLjc4IDAgMCAwLTEuOTQtMkMxOC44OCA0IDEyIDQgMTIgNHMtNi44OCAwLTguNi40NmEyLjc4IDIuNzggMCAwIDAtMS45NCAyQTI5IDI5IDAgMCAwIDEgMTEuNzVhMjkgMjkgMCAwIDAgLjQ2IDUuMzNBMi43OCAyLjc4IDAgMCAwIDMuNCAxOWMxLjcyLjQ2IDguNi40NiA4LjYuNDZzNi44OCAwIDguNi0uNDZhMi43OCAyLjc4IDAgMCAwIDEuOTQtMiAyOSAyOSAwIDAgMCAuNDYtNS4yNSAyOSAyOSAwIDAgMC0uNDYtNS4zM3pcXFwiPjwvcGF0aD48cG9seWdvbiBwb2ludHM9XFxcIjkuNzUgMTUuMDIgMTUuNSAxMS43NSA5Ljc1IDguNDggOS43NSAxNS4wMlxcXCI+PC9wb2x5Z29uPlwiLFwiemFwLW9mZlwiOlwiPHBvbHlsaW5lIHBvaW50cz1cXFwiMTIuNDEgNi43NSAxMyAyIDEwLjU3IDQuOTJcXFwiPjwvcG9seWxpbmU+PHBvbHlsaW5lIHBvaW50cz1cXFwiMTguNTcgMTIuOTEgMjEgMTAgMTUuNjYgMTBcXFwiPjwvcG9seWxpbmU+PHBvbHlsaW5lIHBvaW50cz1cXFwiOCA4IDMgMTQgMTIgMTQgMTEgMjIgMTYgMTZcXFwiPjwvcG9seWxpbmU+PGxpbmUgeDE9XFxcIjFcXFwiIHkxPVxcXCIxXFxcIiB4Mj1cXFwiMjNcXFwiIHkyPVxcXCIyM1xcXCI+PC9saW5lPlwiLFwiemFwXCI6XCI8cG9seWdvbiBwb2ludHM9XFxcIjEzIDIgMyAxNCAxMiAxNCAxMSAyMiAyMSAxMCAxMiAxMCAxMyAyXFxcIj48L3BvbHlnb24+XCIsXCJ6b29tLWluXCI6XCI8Y2lyY2xlIGN4PVxcXCIxMVxcXCIgY3k9XFxcIjExXFxcIiByPVxcXCI4XFxcIj48L2NpcmNsZT48bGluZSB4MT1cXFwiMjFcXFwiIHkxPVxcXCIyMVxcXCIgeDI9XFxcIjE2LjY1XFxcIiB5Mj1cXFwiMTYuNjVcXFwiPjwvbGluZT48bGluZSB4MT1cXFwiMTFcXFwiIHkxPVxcXCI4XFxcIiB4Mj1cXFwiMTFcXFwiIHkyPVxcXCIxNFxcXCI+PC9saW5lPjxsaW5lIHgxPVxcXCI4XFxcIiB5MT1cXFwiMTFcXFwiIHgyPVxcXCIxNFxcXCIgeTI9XFxcIjExXFxcIj48L2xpbmU+XCIsXCJ6b29tLW91dFwiOlwiPGNpcmNsZSBjeD1cXFwiMTFcXFwiIGN5PVxcXCIxMVxcXCIgcj1cXFwiOFxcXCI+PC9jaXJjbGU+PGxpbmUgeDE9XFxcIjIxXFxcIiB5MT1cXFwiMjFcXFwiIHgyPVxcXCIxNi42NVxcXCIgeTI9XFxcIjE2LjY1XFxcIj48L2xpbmU+PGxpbmUgeDE9XFxcIjhcXFwiIHkxPVxcXCIxMVxcXCIgeDI9XFxcIjE0XFxcIiB5Mj1cXFwiMTFcXFwiPjwvbGluZT5cIn07XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvZGVkdXBlLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvZGVkdXBlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXzsvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE2IEplZCBXYXRzb24uXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG4gIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgY2xhc3NOYW1lcyA9IChmdW5jdGlvbiAoKSB7XG5cdFx0Ly8gZG9uJ3QgaW5oZXJpdCBmcm9tIE9iamVjdCBzbyB3ZSBjYW4gc2tpcCBoYXNPd25Qcm9wZXJ0eSBjaGVjayBsYXRlclxuXHRcdC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTU1MTgzMjgvY3JlYXRpbmctanMtb2JqZWN0LXdpdGgtb2JqZWN0LWNyZWF0ZW51bGwjYW5zd2VyLTIxMDc5MjMyXG5cdFx0ZnVuY3Rpb24gU3RvcmFnZU9iamVjdCgpIHt9XG5cdFx0U3RvcmFnZU9iamVjdC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5cdFx0ZnVuY3Rpb24gX3BhcnNlQXJyYXkgKHJlc3VsdFNldCwgYXJyYXkpIHtcblx0XHRcdHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcblx0XHRcdFx0X3BhcnNlKHJlc3VsdFNldCwgYXJyYXlbaV0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuXHRcdGZ1bmN0aW9uIF9wYXJzZU51bWJlciAocmVzdWx0U2V0LCBudW0pIHtcblx0XHRcdHJlc3VsdFNldFtudW1dID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBfcGFyc2VPYmplY3QgKHJlc3VsdFNldCwgb2JqZWN0KSB7XG5cdFx0XHRmb3IgKHZhciBrIGluIG9iamVjdCkge1xuXHRcdFx0XHRpZiAoaGFzT3duLmNhbGwob2JqZWN0LCBrKSkge1xuXHRcdFx0XHRcdC8vIHNldCB2YWx1ZSB0byBmYWxzZSBpbnN0ZWFkIG9mIGRlbGV0aW5nIGl0IHRvIGF2b2lkIGNoYW5naW5nIG9iamVjdCBzdHJ1Y3R1cmVcblx0XHRcdFx0XHQvLyBodHRwczovL3d3dy5zbWFzaGluZ21hZ2F6aW5lLmNvbS8yMDEyLzExL3dyaXRpbmctZmFzdC1tZW1vcnktZWZmaWNpZW50LWphdmFzY3JpcHQvI2RlLXJlZmVyZW5jaW5nLW1pc2NvbmNlcHRpb25zXG5cdFx0XHRcdFx0cmVzdWx0U2V0W2tdID0gISFvYmplY3Rba107XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHR2YXIgU1BBQ0UgPSAvXFxzKy87XG5cdFx0ZnVuY3Rpb24gX3BhcnNlU3RyaW5nIChyZXN1bHRTZXQsIHN0cikge1xuXHRcdFx0dmFyIGFycmF5ID0gc3RyLnNwbGl0KFNQQUNFKTtcblx0XHRcdHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcblx0XHRcdFx0cmVzdWx0U2V0W2FycmF5W2ldXSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gX3BhcnNlIChyZXN1bHRTZXQsIGFyZykge1xuXHRcdFx0aWYgKCFhcmcpIHJldHVybjtcblx0XHRcdHZhciBhcmdUeXBlID0gdHlwZW9mIGFyZztcblxuXHRcdFx0Ly8gJ2ZvbyBiYXInXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycpIHtcblx0XHRcdFx0X3BhcnNlU3RyaW5nKHJlc3VsdFNldCwgYXJnKTtcblxuXHRcdFx0Ly8gWydmb28nLCAnYmFyJywgLi4uXVxuXHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcblx0XHRcdFx0X3BhcnNlQXJyYXkocmVzdWx0U2V0LCBhcmcpO1xuXG5cdFx0XHQvLyB7ICdmb28nOiB0cnVlLCAuLi4gfVxuXHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRfcGFyc2VPYmplY3QocmVzdWx0U2V0LCBhcmcpO1xuXG5cdFx0XHQvLyAnMTMwJ1xuXHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRfcGFyc2VOdW1iZXIocmVzdWx0U2V0LCBhcmcpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIF9jbGFzc05hbWVzICgpIHtcblx0XHRcdC8vIGRvbid0IGxlYWsgYXJndW1lbnRzXG5cdFx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vcGV0a2FhbnRvbm92L2JsdWViaXJkL3dpa2kvT3B0aW1pemF0aW9uLWtpbGxlcnMjMzItbGVha2luZy1hcmd1bWVudHNcblx0XHRcdHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuXHRcdFx0dmFyIGFyZ3MgPSBBcnJheShsZW4pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0XHRhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgY2xhc3NTZXQgPSBuZXcgU3RvcmFnZU9iamVjdCgpO1xuXHRcdFx0X3BhcnNlQXJyYXkoY2xhc3NTZXQsIGFyZ3MpO1xuXG5cdFx0XHR2YXIgbGlzdCA9IFtdO1xuXG5cdFx0XHRmb3IgKHZhciBrIGluIGNsYXNzU2V0KSB7XG5cdFx0XHRcdGlmIChjbGFzc1NldFtrXSkge1xuXHRcdFx0XHRcdGxpc3QucHVzaChrKVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBsaXN0LmpvaW4oJyAnKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gX2NsYXNzTmFtZXM7XG5cdH0pKCk7XG5cblx0aWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHRydWUpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0IShfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fID0gW10sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fID0gKGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pLmFwcGx5KGV4cG9ydHMsIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18pLFxuXHRcdFx0XHRfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyAhPT0gdW5kZWZpbmVkICYmIChtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fKSk7XG5cdH0gZWxzZSB7fVxufSgpKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2VzL2FycmF5L2Zyb20uanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZXMvYXJyYXkvZnJvbS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vLi4vbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vLi4vbW9kdWxlcy9lcy5hcnJheS5mcm9tICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZyb20uanNcIik7XG52YXIgcGF0aCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uLy4uL2ludGVybmFscy9wYXRoICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGF0aC5qc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXRoLkFycmF5LmZyb207XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1mdW5jdGlvbi5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtZnVuY3Rpb24uanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FuLW9iamVjdC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYW4tb2JqZWN0LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvaXMtb2JqZWN0ICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtb2JqZWN0LmpzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkge1xuICAgIHRocm93IFR5cGVFcnJvcihTdHJpbmcoaXQpICsgJyBpcyBub3QgYW4gb2JqZWN0Jyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1mcm9tLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktZnJvbS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYmluZCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9iaW5kLWNvbnRleHQgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9iaW5kLWNvbnRleHQuanNcIik7XG52YXIgdG9PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvdG8tb2JqZWN0ICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tb2JqZWN0LmpzXCIpO1xudmFyIGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jYWxsLXdpdGgtc2FmZS1pdGVyYXRpb24tY2xvc2luZy5qc1wiKTtcbnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kLmpzXCIpO1xudmFyIHRvTGVuZ3RoID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWxlbmd0aC5qc1wiKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHkgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHkuanNcIik7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QuanNcIik7XG5cbi8vIGBBcnJheS5mcm9tYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LmZyb21cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gIHZhciBDID0gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBtYXBmbiA9IGFyZ3VtZW50c0xlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gZ2V0SXRlcmF0b3JNZXRob2QoTyk7XG4gIHZhciBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gIGlmIChtYXBwaW5nKSBtYXBmbiA9IGJpbmQobWFwZm4sIGFyZ3VtZW50c0xlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQsIDIpO1xuICAvLyBpZiB0aGUgdGFyZ2V0IGlzIG5vdCBpdGVyYWJsZSBvciBpdCdzIGFuIGFycmF5IHdpdGggdGhlIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2UgYSBzaW1wbGUgY2FzZVxuICBpZiAoaXRlcmF0b3JNZXRob2QgIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcmF0b3JNZXRob2QoaXRlcmF0b3JNZXRob2QpKSkge1xuICAgIGl0ZXJhdG9yID0gaXRlcmF0b3JNZXRob2QuY2FsbChPKTtcbiAgICByZXN1bHQgPSBuZXcgQygpO1xuICAgIGZvciAoOyEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaW5kZXgrKykge1xuICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZ1xuICAgICAgICA/IGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKVxuICAgICAgICA6IHN0ZXAudmFsdWVcbiAgICAgICk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICByZXN1bHQgPSBuZXcgQyhsZW5ndGgpO1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdKTtcbiAgICB9XG4gIH1cbiAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4O1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pbmNsdWRlcy5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pbmNsdWRlcy5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgdG9JbmRleGVkT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0ICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QuanNcIik7XG52YXIgdG9MZW5ndGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tbGVuZ3RoLmpzXCIpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4LmpzXCIpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgaW5kZXhPZiwgaW5jbHVkZXMgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxuLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2JpbmQtY29udGV4dC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYmluZC1jb250ZXh0LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgYUZ1bmN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24gKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLWZ1bmN0aW9uLmpzXCIpO1xuXG4vLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQpO1xuICAgIH07XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NhbGwtd2l0aC1zYWZlLWl0ZXJhdGlvbi1jbG9zaW5nLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NhbGwtd2l0aC1zYWZlLWl0ZXJhdGlvbi1jbG9zaW5nLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9hbi1vYmplY3QgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1vYmplY3QuanNcIik7XG5cbi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIEVOVFJJRVMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gRU5UUklFUyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHZhciByZXR1cm5NZXRob2QgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgaWYgKHJldHVybk1ldGhvZCAhPT0gdW5kZWZpbmVkKSBhbk9iamVjdChyZXR1cm5NZXRob2QuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbi5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgd2VsbEtub3duU3ltYm9sID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wuanNcIik7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIGNhbGxlZCA9IDA7XG4gIHZhciBpdGVyYXRvcldpdGhSZXR1cm4gPSB7XG4gICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHsgZG9uZTogISFjYWxsZWQrKyB9O1xuICAgIH0sXG4gICAgJ3JldHVybic6IGZ1bmN0aW9uICgpIHtcbiAgICAgIFNBRkVfQ0xPU0lORyA9IHRydWU7XG4gICAgfVxuICB9O1xuICBpdGVyYXRvcldpdGhSZXR1cm5bSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuICBBcnJheS5mcm9tKGl0ZXJhdG9yV2l0aFJldHVybiwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYywgU0tJUF9DTE9TSU5HKSB7XG4gIGlmICghU0tJUF9DTE9TSU5HICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIElURVJBVElPTl9TVVBQT1JUID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIG9iamVjdCA9IHt9O1xuICAgIG9iamVjdFtJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogSVRFUkFUSU9OX1NVUFBPUlQgPSB0cnVlIH07XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcbiAgICBleGVjKG9iamVjdCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIElURVJBVElPTl9TVVBQT1JUO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLXJhdy5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLXJhdy5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NsYXNzb2YuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgY2xhc3NvZlJhdyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9jbGFzc29mLXJhdyAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NsYXNzb2YtcmF3LmpzXCIpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLmpzXCIpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQ09SUkVDVF9BUkdVTUVOVFMgPSBjbGFzc29mUmF3KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG4vLyBnZXR0aW5nIHRhZyBmcm9tIEVTNisgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgdGFnLCByZXN1bHQ7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mICh0YWcgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRPX1NUUklOR19UQUcpKSA9PSAnc3RyaW5nJyA/IHRhZ1xuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQ09SUkVDVF9BUkdVTUVOVFMgPyBjbGFzc29mUmF3KE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKHJlc3VsdCA9IGNsYXNzb2ZSYXcoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiByZXN1bHQ7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcy5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgaGFzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2hhcyAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hhcy5qc1wiKTtcbnZhciBvd25LZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL293bi1rZXlzICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb3duLWtleXMuanNcIik7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzXCIpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5LmpzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuICB2YXIga2V5cyA9IG93bktleXMoc291cmNlKTtcbiAgdmFyIGRlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbiAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAoIWhhcyh0YXJnZXQsIGtleSkpIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgfVxufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXIuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGZhaWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2ZhaWxzICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZmFpbHMuanNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICBGLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IG51bGw7XG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2YobmV3IEYoKSkgIT09IEYucHJvdG90eXBlO1xufSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLWl0ZXJhdG9yLWNvbnN0cnVjdG9yLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtaXRlcmF0b3ItY29uc3RydWN0b3IuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvcnMtY29yZS5qc1wiKS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBjcmVhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZSAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1jcmVhdGUuanNcIik7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3IuanNcIik7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZy5qc1wiKTtcbnZhciBJdGVyYXRvcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvaXRlcmF0b3JzICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3JzLmpzXCIpO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEl0ZXJhdG9yQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIEl0ZXJhdG9yQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JDb25zdHJ1Y3RvciwgVE9fU1RSSU5HX1RBRywgZmFsc2UsIHRydWUpO1xuICBJdGVyYXRvcnNbVE9fU1RSSU5HX1RBR10gPSByZXR1cm5UaGlzO1xuICByZXR1cm4gSXRlcmF0b3JDb25zdHJ1Y3Rvcjtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3IuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3IuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHkuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciB0b1ByaW1pdGl2ZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy90by1wcmltaXRpdmUgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wcmltaXRpdmUuanNcIik7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eSAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkuanNcIik7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3IuanNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICB2YXIgcHJvcGVydHlLZXkgPSB0b1ByaW1pdGl2ZShrZXkpO1xuICBpZiAocHJvcGVydHlLZXkgaW4gb2JqZWN0KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwgcHJvcGVydHlLZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtwcm9wZXJ0eUtleV0gPSB2YWx1ZTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVmaW5lLWl0ZXJhdG9yLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3IuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgJCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9leHBvcnQgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9leHBvcnQuanNcIik7XG52YXIgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9jcmVhdGUtaXRlcmF0b3ItY29uc3RydWN0b3IgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtaXRlcmF0b3ItY29uc3RydWN0b3IuanNcIik7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZi5qc1wiKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZiAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mLmpzXCIpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcuanNcIik7XG52YXIgaGlkZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9oaWRlICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGlkZS5qc1wiKTtcbnZhciByZWRlZmluZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9yZWRlZmluZSAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZGVmaW5lLmpzXCIpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLmpzXCIpO1xudmFyIElTX1BVUkUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvaXMtcHVyZSAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXB1cmUuanNcIik7XG52YXIgSXRlcmF0b3JzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycyAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy5qc1wiKTtcbnZhciBJdGVyYXRvcnNDb3JlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUuanNcIik7XG5cbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IEl0ZXJhdG9yc0NvcmUuSXRlcmF0b3JQcm90b3R5cGU7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IEl0ZXJhdG9yc0NvcmUuQlVHR1lfU0FGQVJJX0lURVJBVE9SUztcbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xudmFyIEVOVFJJRVMgPSAnZW50cmllcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmFibGUsIE5BTUUsIEl0ZXJhdG9yQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG5cbiAgdmFyIGdldEl0ZXJhdGlvbk1ldGhvZCA9IGZ1bmN0aW9uIChLSU5EKSB7XG4gICAgaWYgKEtJTkQgPT09IERFRkFVTFQgJiYgZGVmYXVsdEl0ZXJhdG9yKSByZXR1cm4gZGVmYXVsdEl0ZXJhdG9yO1xuICAgIGlmICghQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBLSU5EIGluIEl0ZXJhYmxlUHJvdG90eXBlKSByZXR1cm4gSXRlcmFibGVQcm90b3R5cGVbS0lORF07XG4gICAgc3dpdGNoIChLSU5EKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgICAgY2FzZSBFTlRSSUVTOiByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMpOyB9O1xuICB9O1xuXG4gIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgSU5DT1JSRUNUX1ZBTFVFU19OQU1FID0gZmFsc2U7XG4gIHZhciBJdGVyYWJsZVByb3RvdHlwZSA9IEl0ZXJhYmxlLnByb3RvdHlwZTtcbiAgdmFyIG5hdGl2ZUl0ZXJhdG9yID0gSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdXG4gICAgfHwgSXRlcmFibGVQcm90b3R5cGVbJ0BAaXRlcmF0b3InXVxuICAgIHx8IERFRkFVTFQgJiYgSXRlcmFibGVQcm90b3R5cGVbREVGQVVMVF07XG4gIHZhciBkZWZhdWx0SXRlcmF0b3IgPSAhQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBuYXRpdmVJdGVyYXRvciB8fCBnZXRJdGVyYXRpb25NZXRob2QoREVGQVVMVCk7XG4gIHZhciBhbnlOYXRpdmVJdGVyYXRvciA9IE5BTUUgPT0gJ0FycmF5JyA/IEl0ZXJhYmxlUHJvdG90eXBlLmVudHJpZXMgfHwgbmF0aXZlSXRlcmF0b3IgOiBuYXRpdmVJdGVyYXRvcjtcbiAgdmFyIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgbWV0aG9kcywgS0VZO1xuXG4gIC8vIGZpeCBuYXRpdmVcbiAgaWYgKGFueU5hdGl2ZUl0ZXJhdG9yKSB7XG4gICAgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoYW55TmF0aXZlSXRlcmF0b3IuY2FsbChuZXcgSXRlcmFibGUoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgaWYgKCFJU19QVVJFICYmIGdldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSkgIT09IEl0ZXJhdG9yUHJvdG90eXBlKSB7XG4gICAgICAgIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgICAgICAgIHNldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSXRlcmF0b3JQcm90b3R5cGUpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBoaWRlKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIFRPX1NUUklOR19UQUcsIHRydWUsIHRydWUpO1xuICAgICAgaWYgKElTX1BVUkUpIEl0ZXJhdG9yc1tUT19TVFJJTkdfVEFHXSA9IHJldHVyblRoaXM7XG4gICAgfVxuICB9XG5cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoREVGQVVMVCA9PSBWQUxVRVMgJiYgbmF0aXZlSXRlcmF0b3IgJiYgbmF0aXZlSXRlcmF0b3IubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgSU5DT1JSRUNUX1ZBTFVFU19OQU1FID0gdHJ1ZTtcbiAgICBkZWZhdWx0SXRlcmF0b3IgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuYXRpdmVJdGVyYXRvci5jYWxsKHRoaXMpOyB9O1xuICB9XG5cbiAgLy8gZGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUlTX1BVUkUgfHwgRk9SQ0VEKSAmJiBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl0gIT09IGRlZmF1bHRJdGVyYXRvcikge1xuICAgIGhpZGUoSXRlcmFibGVQcm90b3R5cGUsIElURVJBVE9SLCBkZWZhdWx0SXRlcmF0b3IpO1xuICB9XG4gIEl0ZXJhdG9yc1tOQU1FXSA9IGRlZmF1bHRJdGVyYXRvcjtcblxuICAvLyBleHBvcnQgYWRkaXRpb25hbCBtZXRob2RzXG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogZ2V0SXRlcmF0aW9uTWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyBkZWZhdWx0SXRlcmF0b3IgOiBnZXRJdGVyYXRpb25NZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiBnZXRJdGVyYXRpb25NZXRob2QoRU5UUklFUylcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoS0VZIGluIG1ldGhvZHMpIHtcbiAgICAgIGlmIChCVUdHWV9TQUZBUklfSVRFUkFUT1JTIHx8IElOQ09SUkVDVF9WQUxVRVNfTkFNRSB8fCAhKEtFWSBpbiBJdGVyYWJsZVByb3RvdHlwZSkpIHtcbiAgICAgICAgcmVkZWZpbmUoSXRlcmFibGVQcm90b3R5cGUsIEtFWSwgbWV0aG9kc1tLRVldKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgJCh7IHRhcmdldDogTkFNRSwgcHJvdG86IHRydWUsIGZvcmNlZDogQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfSwgbWV0aG9kcyk7XG4gIH1cblxuICByZXR1cm4gbWV0aG9kcztcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVzY3JpcHRvcnMuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVzY3JpcHRvcnMuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGZhaWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2ZhaWxzICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZmFpbHMuanNcIik7XG5cbi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgZ2xvYmFsID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2dsb2JhbCAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dsb2JhbC5qc1wiKTtcbnZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9pcy1vYmplY3QgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1vYmplY3QuanNcIik7XG5cbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIGV4aXN0ID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gZXhpc3QgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW51bS1idWcta2V5cy5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbi8vIElFOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSBbXG4gICdjb25zdHJ1Y3RvcicsXG4gICdoYXNPd25Qcm9wZXJ0eScsXG4gICdpc1Byb3RvdHlwZU9mJyxcbiAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcbiAgJ3RvTG9jYWxlU3RyaW5nJyxcbiAgJ3RvU3RyaW5nJyxcbiAgJ3ZhbHVlT2YnXG5dO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2V4cG9ydC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZXhwb3J0LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgZ2xvYmFsID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2dsb2JhbCAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dsb2JhbC5qc1wiKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvciAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanNcIikuZjtcbnZhciBoaWRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2hpZGUgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oaWRlLmpzXCIpO1xudmFyIHJlZGVmaW5lID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3JlZGVmaW5lICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVkZWZpbmUuanNcIik7XG52YXIgc2V0R2xvYmFsID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtZ2xvYmFsLmpzXCIpO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzLmpzXCIpO1xudmFyIGlzRm9yY2VkID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWZvcmNlZC5qc1wiKTtcblxuLypcbiAgb3B0aW9ucy50YXJnZXQgICAgICAtIG5hbWUgb2YgdGhlIHRhcmdldCBvYmplY3RcbiAgb3B0aW9ucy5nbG9iYWwgICAgICAtIHRhcmdldCBpcyB0aGUgZ2xvYmFsIG9iamVjdFxuICBvcHRpb25zLnN0YXQgICAgICAgIC0gZXhwb3J0IGFzIHN0YXRpYyBtZXRob2RzIG9mIHRhcmdldFxuICBvcHRpb25zLnByb3RvICAgICAgIC0gZXhwb3J0IGFzIHByb3RvdHlwZSBtZXRob2RzIG9mIHRhcmdldFxuICBvcHRpb25zLnJlYWwgICAgICAgIC0gcmVhbCBwcm90b3R5cGUgbWV0aG9kIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy5mb3JjZWQgICAgICAtIGV4cG9ydCBldmVuIGlmIHRoZSBuYXRpdmUgZmVhdHVyZSBpcyBhdmFpbGFibGVcbiAgb3B0aW9ucy5iaW5kICAgICAgICAtIGJpbmQgbWV0aG9kcyB0byB0aGUgdGFyZ2V0LCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMud3JhcCAgICAgICAgLSB3cmFwIGNvbnN0cnVjdG9ycyB0byBwcmV2ZW50aW5nIGdsb2JhbCBwb2xsdXRpb24sIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy51bnNhZmUgICAgICAtIHVzZSB0aGUgc2ltcGxlIGFzc2lnbm1lbnQgb2YgcHJvcGVydHkgaW5zdGVhZCBvZiBkZWxldGUgKyBkZWZpbmVQcm9wZXJ0eVxuICBvcHRpb25zLnNoYW0gICAgICAgIC0gYWRkIGEgZmxhZyB0byBub3QgY29tcGxldGVseSBmdWxsIHBvbHlmaWxsc1xuICBvcHRpb25zLmVudW1lcmFibGUgIC0gZXhwb3J0IGFzIGVudW1lcmFibGUgcHJvcGVydHlcbiAgb3B0aW9ucy5ub1RhcmdldEdldCAtIHByZXZlbnQgY2FsbGluZyBhIGdldHRlciBvbiB0YXJnZXRcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRpb25zLCBzb3VyY2UpIHtcbiAgdmFyIFRBUkdFVCA9IG9wdGlvbnMudGFyZ2V0O1xuICB2YXIgR0xPQkFMID0gb3B0aW9ucy5nbG9iYWw7XG4gIHZhciBTVEFUSUMgPSBvcHRpb25zLnN0YXQ7XG4gIHZhciBGT1JDRUQsIHRhcmdldCwga2V5LCB0YXJnZXRQcm9wZXJ0eSwgc291cmNlUHJvcGVydHksIGRlc2NyaXB0b3I7XG4gIGlmIChHTE9CQUwpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWw7XG4gIH0gZWxzZSBpZiAoU1RBVElDKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsW1RBUkdFVF0gfHwgc2V0R2xvYmFsKFRBUkdFVCwge30pO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldCA9IChnbG9iYWxbVEFSR0VUXSB8fCB7fSkucHJvdG90eXBlO1xuICB9XG4gIGlmICh0YXJnZXQpIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIHNvdXJjZVByb3BlcnR5ID0gc291cmNlW2tleV07XG4gICAgaWYgKG9wdGlvbnMubm9UYXJnZXRHZXQpIHtcbiAgICAgIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpO1xuICAgICAgdGFyZ2V0UHJvcGVydHkgPSBkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IudmFsdWU7XG4gICAgfSBlbHNlIHRhcmdldFByb3BlcnR5ID0gdGFyZ2V0W2tleV07XG4gICAgRk9SQ0VEID0gaXNGb3JjZWQoR0xPQkFMID8ga2V5IDogVEFSR0VUICsgKFNUQVRJQyA/ICcuJyA6ICcjJykgKyBrZXksIG9wdGlvbnMuZm9yY2VkKTtcbiAgICAvLyBjb250YWluZWQgaW4gdGFyZ2V0XG4gICAgaWYgKCFGT1JDRUQgJiYgdGFyZ2V0UHJvcGVydHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHR5cGVvZiBzb3VyY2VQcm9wZXJ0eSA9PT0gdHlwZW9mIHRhcmdldFByb3BlcnR5KSBjb250aW51ZTtcbiAgICAgIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMoc291cmNlUHJvcGVydHksIHRhcmdldFByb3BlcnR5KTtcbiAgICB9XG4gICAgLy8gYWRkIGEgZmxhZyB0byBub3QgY29tcGxldGVseSBmdWxsIHBvbHlmaWxsc1xuICAgIGlmIChvcHRpb25zLnNoYW0gfHwgKHRhcmdldFByb3BlcnR5ICYmIHRhcmdldFByb3BlcnR5LnNoYW0pKSB7XG4gICAgICBoaWRlKHNvdXJjZVByb3BlcnR5LCAnc2hhbScsIHRydWUpO1xuICAgIH1cbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNvdXJjZVByb3BlcnR5LCBvcHRpb25zKTtcbiAgfVxufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mYWlscy5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mYWlscy5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLXRvLXN0cmluZy5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tdG8tc3RyaW5nLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgc2hhcmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3NoYXJlZCAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC5qc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBzaGFyZWQoJ25hdGl2ZS1mdW5jdGlvbi10by1zdHJpbmcnLCBGdW5jdGlvbi50b1N0cmluZyk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgY2xhc3NvZiA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9jbGFzc29mICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi5qc1wiKTtcbnZhciBJdGVyYXRvcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvaXRlcmF0b3JzICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3JzLmpzXCIpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLmpzXCIpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2xvYmFsLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nbG9iYWwuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwpIHt2YXIgTyA9ICdvYmplY3QnO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAmJiBpdC5NYXRoID09IE1hdGggJiYgaXQ7XG59O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxubW9kdWxlLmV4cG9ydHMgPVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgY2hlY2sodHlwZW9mIGdsb2JhbFRoaXMgPT0gTyAmJiBnbG9iYWxUaGlzKSB8fFxuICBjaGVjayh0eXBlb2Ygd2luZG93ID09IE8gJiYgd2luZG93KSB8fFxuICBjaGVjayh0eXBlb2Ygc2VsZiA9PSBPICYmIHNlbGYpIHx8XG4gIGNoZWNrKHR5cGVvZiBnbG9iYWwgPT0gTyAmJiBnbG9iYWwpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwodGhpcywgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi8uLi8uLi93ZWJwYWNrL2J1aWxkaW4vZ2xvYmFsLmpzICovIFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2dsb2JhbC5qc1wiKSkpXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hhcy5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGFzLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGlkZGVuLWtleXMuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGlkZGVuLWtleXMuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oaWRlLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGlkZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBERVNDUklQVE9SUyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9kZXNjcmlwdG9ycyAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Rlc2NyaXB0b3JzLmpzXCIpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5LmpzXCIpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvciAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIGtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9odG1sLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaHRtbC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBnbG9iYWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZ2xvYmFsICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2xvYmFsLmpzXCIpO1xuXG52YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XG5cbm1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBERVNDUklQVE9SUyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9kZXNjcmlwdG9ycyAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Rlc2NyaXB0b3JzLmpzXCIpO1xudmFyIGZhaWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2ZhaWxzICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZmFpbHMuanNcIik7XG52YXIgY3JlYXRlRWxlbWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50LmpzXCIpO1xuXG4vLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFERVNDUklQVE9SUyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGNyZWF0ZUVsZW1lbnQoJ2RpdicpLCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH1cbiAgfSkuYSAhPSA3O1xufSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBmYWlscyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9mYWlscyAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZhaWxzLmpzXCIpO1xudmFyIGNsYXNzb2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLXJhdy5qc1wiKTtcblxudmFyIHNwbGl0ID0gJycuc3BsaXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyB0aHJvd3MgYW4gZXJyb3IgaW4gcmhpbm8sIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9yaGluby9pc3N1ZXMvMzQ2XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgcmV0dXJuICFPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKTtcbn0pID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjbGFzc29mKGl0KSA9PSAnU3RyaW5nJyA/IHNwbGl0LmNhbGwoaXQsICcnKSA6IE9iamVjdChpdCk7XG59IDogT2JqZWN0O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBOQVRJVkVfV0VBS19NQVAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwLmpzXCIpO1xudmFyIGdsb2JhbCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9nbG9iYWwgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nbG9iYWwuanNcIik7XG52YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvaXMtb2JqZWN0ICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtb2JqZWN0LmpzXCIpO1xudmFyIGhpZGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvaGlkZSAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hpZGUuanNcIik7XG52YXIgb2JqZWN0SGFzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2hhcyAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hhcy5qc1wiKTtcbnZhciBzaGFyZWRLZXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvc2hhcmVkLWtleSAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1rZXkuanNcIik7XG52YXIgaGlkZGVuS2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9oaWRkZW4ta2V5cyAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hpZGRlbi1rZXlzLmpzXCIpO1xuXG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xudmFyIHNldCwgZ2V0LCBoYXM7XG5cbnZhciBlbmZvcmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBoYXMoaXQpID8gZ2V0KGl0KSA6IHNldChpdCwge30pO1xufTtcblxudmFyIGdldHRlckZvciA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgc3RhdGU7XG4gICAgaWYgKCFpc09iamVjdChpdCkgfHwgKHN0YXRlID0gZ2V0KGl0KSkudHlwZSAhPT0gVFlQRSkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCcpO1xuICAgIH0gcmV0dXJuIHN0YXRlO1xuICB9O1xufTtcblxuaWYgKE5BVElWRV9XRUFLX01BUCkge1xuICB2YXIgc3RvcmUgPSBuZXcgV2Vha01hcCgpO1xuICB2YXIgd21nZXQgPSBzdG9yZS5nZXQ7XG4gIHZhciB3bWhhcyA9IHN0b3JlLmhhcztcbiAgdmFyIHdtc2V0ID0gc3RvcmUuc2V0O1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgd21zZXQuY2FsbChzdG9yZSwgaXQsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWdldC5jYWxsKHN0b3JlLCBpdCkgfHwge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWhhcy5jYWxsKHN0b3JlLCBpdCk7XG4gIH07XG59IGVsc2Uge1xuICB2YXIgU1RBVEUgPSBzaGFyZWRLZXkoJ3N0YXRlJyk7XG4gIGhpZGRlbktleXNbU1RBVEVdID0gdHJ1ZTtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIGhpZGUoaXQsIFNUQVRFLCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gb2JqZWN0SGFzKGl0LCBTVEFURSkgPyBpdFtTVEFURV0gOiB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIG9iamVjdEhhcyhpdCwgU1RBVEUpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXQsXG4gIGdldDogZ2V0LFxuICBoYXM6IGhhcyxcbiAgZW5mb3JjZTogZW5mb3JjZSxcbiAgZ2V0dGVyRm9yOiBnZXR0ZXJGb3Jcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciB3ZWxsS25vd25TeW1ib2wgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC5qc1wiKTtcbnZhciBJdGVyYXRvcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvaXRlcmF0b3JzICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3JzLmpzXCIpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG90eXBlW0lURVJBVE9SXSA9PT0gaXQpO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1mb3JjZWQuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWZvcmNlZC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGZhaWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2ZhaWxzICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZmFpbHMuanNcIik7XG5cbnZhciByZXBsYWNlbWVudCA9IC8jfFxcLnByb3RvdHlwZVxcLi87XG5cbnZhciBpc0ZvcmNlZCA9IGZ1bmN0aW9uIChmZWF0dXJlLCBkZXRlY3Rpb24pIHtcbiAgdmFyIHZhbHVlID0gZGF0YVtub3JtYWxpemUoZmVhdHVyZSldO1xuICByZXR1cm4gdmFsdWUgPT0gUE9MWUZJTEwgPyB0cnVlXG4gICAgOiB2YWx1ZSA9PSBOQVRJVkUgPyBmYWxzZVxuICAgIDogdHlwZW9mIGRldGVjdGlvbiA9PSAnZnVuY3Rpb24nID8gZmFpbHMoZGV0ZWN0aW9uKVxuICAgIDogISFkZXRlY3Rpb247XG59O1xuXG52YXIgbm9ybWFsaXplID0gaXNGb3JjZWQubm9ybWFsaXplID0gZnVuY3Rpb24gKHN0cmluZykge1xuICByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZXBsYWNlbWVudCwgJy4nKS50b0xvd2VyQ2FzZSgpO1xufTtcblxudmFyIGRhdGEgPSBpc0ZvcmNlZC5kYXRhID0ge307XG52YXIgTkFUSVZFID0gaXNGb3JjZWQuTkFUSVZFID0gJ04nO1xudmFyIFBPTFlGSUxMID0gaXNGb3JjZWQuUE9MWUZJTEwgPSAnUCc7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGb3JjZWQ7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtb2JqZWN0LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1vYmplY3QuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXB1cmUuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1wdXJlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvcnMtY29yZS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvcnMtY29yZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGdldFByb3RvdHlwZU9mID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YuanNcIik7XG52YXIgaGlkZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9oaWRlICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGlkZS5qc1wiKTtcbnZhciBoYXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvaGFzICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGFzLmpzXCIpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLmpzXCIpO1xudmFyIElTX1BVUkUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvaXMtcHVyZSAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXB1cmUuanNcIik7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gZmFsc2U7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxuLy8gYCVJdGVyYXRvclByb3RvdHlwZSVgIG9iamVjdFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtJWl0ZXJhdG9ycHJvdG90eXBlJS1vYmplY3RcbnZhciBJdGVyYXRvclByb3RvdHlwZSwgUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlLCBhcnJheUl0ZXJhdG9yO1xuXG5pZiAoW10ua2V5cykge1xuICBhcnJheUl0ZXJhdG9yID0gW10ua2V5cygpO1xuICAvLyBTYWZhcmkgOCBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbiAgaWYgKCEoJ25leHQnIGluIGFycmF5SXRlcmF0b3IpKSBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gdHJ1ZTtcbiAgZWxzZSB7XG4gICAgUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoZ2V0UHJvdG90eXBlT2YoYXJyYXlJdGVyYXRvcikpO1xuICAgIGlmIChQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUpIEl0ZXJhdG9yUHJvdG90eXBlID0gUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG59XG5cbmlmIChJdGVyYXRvclByb3RvdHlwZSA9PSB1bmRlZmluZWQpIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5pZiAoIUlTX1BVUkUgJiYgIWhhcyhJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IpKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBJdGVyYXRvclByb3RvdHlwZTogSXRlcmF0b3JQcm90b3R5cGUsXG4gIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlM6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlNcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3JzLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvcnMuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0ge307XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgZmFpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZmFpbHMgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mYWlscy5qc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gQ2hyb21lIDM4IFN5bWJvbCBoYXMgaW5jb3JyZWN0IHRvU3RyaW5nIGNvbnZlcnNpb25cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHJldHVybiAhU3RyaW5nKFN5bWJvbCgpKTtcbn0pO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS13ZWFrLW1hcC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgZ2xvYmFsID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2dsb2JhbCAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dsb2JhbC5qc1wiKTtcbnZhciBuYXRpdmVGdW5jdGlvblRvU3RyaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXRvLXN0cmluZyAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLXRvLXN0cmluZy5qc1wiKTtcblxudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcblxubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QobmF0aXZlRnVuY3Rpb25Ub1N0cmluZy5jYWxsKFdlYWtNYXApKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtY3JlYXRlLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9hbi1vYmplY3QgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1vYmplY3QuanNcIik7XG52YXIgZGVmaW5lUHJvcGVydGllcyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMuanNcIik7XG52YXIgZW51bUJ1Z0tleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cyAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VudW0tYnVnLWtleXMuanNcIik7XG52YXIgaGlkZGVuS2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9oaWRkZW4ta2V5cyAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hpZGRlbi1rZXlzLmpzXCIpO1xudmFyIGh0bWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvaHRtbCAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2h0bWwuanNcIik7XG52YXIgZG9jdW1lbnRDcmVhdGVFbGVtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50ICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQuanNcIik7XG52YXIgc2hhcmVkS2V5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXkgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQta2V5LmpzXCIpO1xudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xuXG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgdmFyIGxlbmd0aCA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgc2NyaXB0ID0gJ3NjcmlwdCc7XG4gIHZhciBndCA9ICc+JztcbiAgdmFyIGpzID0gJ2phdmEnICsgc2NyaXB0ICsgJzonO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBodG1sLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSBTdHJpbmcoanMpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgc2NyaXB0ICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnLycgKyBzY3JpcHQgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAobGVuZ3RoLS0pIGRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbbGVuZ3RoXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG4vLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkZWZpbmVQcm9wZXJ0aWVzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuXG5oaWRkZW5LZXlzW0lFX1BST1RPXSA9IHRydWU7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBERVNDUklQVE9SUyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9kZXNjcmlwdG9ycyAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Rlc2NyaXB0b3JzLmpzXCIpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5LmpzXCIpO1xudmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2FuLW9iamVjdCAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FuLW9iamVjdC5qc1wiKTtcbnZhciBvYmplY3RLZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMuanNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoTywga2V5ID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW2tleV0pO1xuICByZXR1cm4gTztcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgREVTQ1JJUFRPUlMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZXNjcmlwdG9ycy5qc1wiKTtcbnZhciBJRThfRE9NX0RFRklORSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZSAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lLmpzXCIpO1xudmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2FuLW9iamVjdCAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FuLW9iamVjdC5qc1wiKTtcbnZhciB0b1ByaW1pdGl2ZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy90by1wcmltaXRpdmUgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wcmltaXRpdmUuanNcIik7XG5cbnZhciBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCcpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIERFU0NSSVBUT1JTID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVzY3JpcHRvcnMuanNcIik7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZS5qc1wiKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3IgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvci5qc1wiKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdC5qc1wiKTtcbnZhciB0b1ByaW1pdGl2ZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy90by1wcmltaXRpdmUgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wcmltaXRpdmUuanNcIik7XG52YXIgaGFzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2hhcyAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hhcy5qc1wiKTtcbnZhciBJRThfRE9NX0RFRklORSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZSAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lLmpzXCIpO1xuXG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoIXByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciBpbnRlcm5hbE9iamVjdEtleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbC5qc1wiKTtcbnZhciBlbnVtQnVnS2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW51bS1idWcta2V5cy5qc1wiKTtcblxudmFyIGhpZGRlbktleXMgPSBlbnVtQnVnS2V5cy5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZi5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZi5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgaGFzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2hhcyAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hhcy5qc1wiKTtcbnZhciB0b09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy90by1vYmplY3QgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1vYmplY3QuanNcIik7XG52YXIgc2hhcmVkS2V5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXkgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQta2V5LmpzXCIpO1xudmFyIENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXIgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXIuanNcIik7XG5cbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuXG4vLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxubW9kdWxlLmV4cG9ydHMgPSBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG90eXBlIDogbnVsbDtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGhhcyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9oYXMgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oYXMuanNcIik7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0ICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QuanNcIik7XG52YXIgYXJyYXlJbmNsdWRlcyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcyAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzLmpzXCIpO1xudmFyIGhpZGRlbktleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oaWRkZW4ta2V5cy5qc1wiKTtcblxudmFyIGFycmF5SW5kZXhPZiA9IGFycmF5SW5jbHVkZXMoZmFsc2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSAhaGFzKGhpZGRlbktleXMsIGtleSkgJiYgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGludGVybmFsT2JqZWN0S2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsLmpzXCIpO1xudmFyIGVudW1CdWdLZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzLmpzXCIpO1xuXG4vLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gTmFzaG9ybiB+IEpESzggYnVnXG52YXIgTkFTSE9STl9CVUcgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgIW5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoeyAxOiAyIH0sIDEpO1xuXG5leHBvcnRzLmYgPSBOQVNIT1JOX0JVRyA/IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcywgVik7XG4gIHJldHVybiAhIWRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5lbnVtZXJhYmxlO1xufSA6IG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciB2YWxpZGF0ZVNldFByb3RvdHlwZU9mQXJndW1lbnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3ZhbGlkYXRlLXNldC1wcm90b3R5cGUtb2YtYXJndW1lbnRzICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdmFsaWRhdGUtc2V0LXByb3RvdHlwZS1vZi1hcmd1bWVudHMuanNcIik7XG5cbi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNvcnJlY3RTZXR0ZXIgPSBmYWxzZTtcbiAgdmFyIHRlc3QgPSB7fTtcbiAgdmFyIHNldHRlcjtcbiAgdHJ5IHtcbiAgICBzZXR0ZXIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQ7XG4gICAgc2V0dGVyLmNhbGwodGVzdCwgW10pO1xuICAgIGNvcnJlY3RTZXR0ZXIgPSB0ZXN0IGluc3RhbmNlb2YgQXJyYXk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgdmFsaWRhdGVTZXRQcm90b3R5cGVPZkFyZ3VtZW50cyhPLCBwcm90byk7XG4gICAgaWYgKGNvcnJlY3RTZXR0ZXIpIHNldHRlci5jYWxsKE8sIHByb3RvKTtcbiAgICBlbHNlIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgcmV0dXJuIE87XG4gIH07XG59KCkgOiB1bmRlZmluZWQpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL293bi1rZXlzLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL293bi1rZXlzLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBnbG9iYWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZ2xvYmFsICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2xvYmFsLmpzXCIpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qc1wiKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scyAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMuanNcIik7XG52YXIgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvYW4tb2JqZWN0ICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYW4tb2JqZWN0LmpzXCIpO1xuXG52YXIgUmVmbGVjdCA9IGdsb2JhbC5SZWZsZWN0O1xuXG4vLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG5tb2R1bGUuZXhwb3J0cyA9IFJlZmxlY3QgJiYgUmVmbGVjdC5vd25LZXlzIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wYXRoLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGF0aC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2dsb2JhbCAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dsb2JhbC5qc1wiKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWRlZmluZS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWRlZmluZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgZ2xvYmFsID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2dsb2JhbCAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dsb2JhbC5qc1wiKTtcbnZhciBzaGFyZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvc2hhcmVkICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLmpzXCIpO1xudmFyIGhpZGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvaGlkZSAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hpZGUuanNcIik7XG52YXIgaGFzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2hhcyAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hhcy5qc1wiKTtcbnZhciBzZXRHbG9iYWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC1nbG9iYWwuanNcIik7XG52YXIgbmF0aXZlRnVuY3Rpb25Ub1N0cmluZyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9mdW5jdGlvbi10by1zdHJpbmcgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi10by1zdHJpbmcuanNcIik7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZSAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlLmpzXCIpO1xuXG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIGVuZm9yY2VJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5lbmZvcmNlO1xudmFyIFRFTVBMQVRFID0gU3RyaW5nKG5hdGl2ZUZ1bmN0aW9uVG9TdHJpbmcpLnNwbGl0KCd0b1N0cmluZycpO1xuXG5zaGFyZWQoJ2luc3BlY3RTb3VyY2UnLCBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIG5hdGl2ZUZ1bmN0aW9uVG9TdHJpbmcuY2FsbChpdCk7XG59KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgdmFyIHVuc2FmZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMudW5zYWZlIDogZmFsc2U7XG4gIHZhciBzaW1wbGUgPSBvcHRpb25zID8gISFvcHRpb25zLmVudW1lcmFibGUgOiBmYWxzZTtcbiAgdmFyIG5vVGFyZ2V0R2V0ID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5ub1RhcmdldEdldCA6IGZhbHNlO1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIGtleSA9PSAnc3RyaW5nJyAmJiAhaGFzKHZhbHVlLCAnbmFtZScpKSBoaWRlKHZhbHVlLCAnbmFtZScsIGtleSk7XG4gICAgZW5mb3JjZUludGVybmFsU3RhdGUodmFsdWUpLnNvdXJjZSA9IFRFTVBMQVRFLmpvaW4odHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/IGtleSA6ICcnKTtcbiAgfVxuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gICAgZWxzZSBzZXRHbG9iYWwoa2V5LCB2YWx1ZSk7XG4gICAgcmV0dXJuO1xuICB9IGVsc2UgaWYgKCF1bnNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICB9IGVsc2UgaWYgKCFub1RhcmdldEdldCAmJiBPW2tleV0pIHtcbiAgICBzaW1wbGUgPSB0cnVlO1xuICB9XG4gIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICBlbHNlIGhpZGUoTywga2V5LCB2YWx1ZSk7XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIGdldEludGVybmFsU3RhdGUodGhpcykuc291cmNlIHx8IG5hdGl2ZUZ1bmN0aW9uVG9TdHJpbmcuY2FsbCh0aGlzKTtcbn0pO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG4vLyBgUmVxdWlyZU9iamVjdENvZXJjaWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZXF1aXJlb2JqZWN0Y29lcmNpYmxlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtZ2xvYmFsLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LWdsb2JhbC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBnbG9iYWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZ2xvYmFsICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2xvYmFsLmpzXCIpO1xudmFyIGhpZGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvaGlkZSAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hpZGUuanNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgdHJ5IHtcbiAgICBoaWRlKGdsb2JhbCwga2V5LCB2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZ2xvYmFsW2tleV0gPSB2YWx1ZTtcbiAgfSByZXR1cm4gdmFsdWU7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5ICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eS5qc1wiKS5mO1xudmFyIGhhcyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9oYXMgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oYXMuanNcIik7XG52YXIgd2VsbEtub3duU3ltYm9sID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wuanNcIik7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgVEFHLCBTVEFUSUMpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBTVEFUSUMgPyBpdCA6IGl0LnByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRykpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShpdCwgVE9fU1RSSU5HX1RBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiBUQUcgfSk7XG4gIH1cbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLWtleS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1rZXkuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgc2hhcmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3NoYXJlZCAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC5qc1wiKTtcbnZhciB1aWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvdWlkICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdWlkLmpzXCIpO1xuXG52YXIga2V5cyA9IHNoYXJlZCgna2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGtleXNba2V5XSB8fCAoa2V5c1trZXldID0gdWlkKGtleSkpO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGdsb2JhbCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9nbG9iYWwgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nbG9iYWwuanNcIik7XG52YXIgc2V0R2xvYmFsID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtZ2xvYmFsLmpzXCIpO1xudmFyIElTX1BVUkUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvaXMtcHVyZSAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXB1cmUuanNcIik7XG5cbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IHNldEdsb2JhbChTSEFSRUQsIHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246ICczLjEuMycsXG4gIG1vZGU6IElTX1BVUkUgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxOSBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy1hdC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLWF0LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgdG9JbnRlZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3RvLWludGVnZXIgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1pbnRlZ2VyLmpzXCIpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlLmpzXCIpO1xuXG4vLyBDT05WRVJUX1RPX1NUUklORzogdHJ1ZSAgLT4gU3RyaW5nI2F0XG4vLyBDT05WRVJUX1RPX1NUUklORzogZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBwb3MsIENPTlZFUlRfVE9fU1RSSU5HKSB7XG4gIHZhciBTID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhhdCkpO1xuICB2YXIgcG9zaXRpb24gPSB0b0ludGVnZXIocG9zKTtcbiAgdmFyIHNpemUgPSBTLmxlbmd0aDtcbiAgdmFyIGZpcnN0LCBzZWNvbmQ7XG4gIGlmIChwb3NpdGlvbiA8IDAgfHwgcG9zaXRpb24gPj0gc2l6ZSkgcmV0dXJuIENPTlZFUlRfVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gIGZpcnN0ID0gUy5jaGFyQ29kZUF0KHBvc2l0aW9uKTtcbiAgcmV0dXJuIGZpcnN0IDwgMHhEODAwIHx8IGZpcnN0ID4gMHhEQkZGIHx8IHBvc2l0aW9uICsgMSA9PT0gc2l6ZVxuICAgIHx8IChzZWNvbmQgPSBTLmNoYXJDb2RlQXQocG9zaXRpb24gKyAxKSkgPCAweERDMDAgfHwgc2Vjb25kID4gMHhERkZGXG4gICAgICA/IENPTlZFUlRfVE9fU1RSSU5HID8gUy5jaGFyQXQocG9zaXRpb24pIDogZmlyc3RcbiAgICAgIDogQ09OVkVSVF9UT19TVFJJTkcgPyBTLnNsaWNlKHBvc2l0aW9uLCBwb3NpdGlvbiArIDIpIDogKGZpcnN0IC0gMHhEODAwIDw8IDEwKSArIChzZWNvbmQgLSAweERDMDApICsgMHgxMDAwMDtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXguanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIHRvSW50ZWdlciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy90by1pbnRlZ2VyICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW50ZWdlci5qc1wiKTtcblxudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBIZWxwZXIgZm9yIGEgcG9wdWxhciByZXBlYXRpbmcgY2FzZSBvZiB0aGUgc3BlYzpcbi8vIExldCBpbnRlZ2VyIGJlID8gVG9JbnRlZ2VyKGluZGV4KS5cbi8vIElmIGludGVnZXIgPCAwLCBsZXQgcmVzdWx0IGJlIG1heCgobGVuZ3RoICsgaW50ZWdlciksIDApOyBlbHNlIGxldCByZXN1bHQgYmUgbWluKGxlbmd0aCwgbGVuZ3RoKS5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgdmFyIGludGVnZXIgPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW50ZWdlciA8IDAgPyBtYXgoaW50ZWdlciArIGxlbmd0aCwgMCkgOiBtaW4oaW50ZWdlciwgbGVuZ3RoKTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJbmRleGVkT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0ICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QuanNcIik7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUuanNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJbmRleGVkT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoaXQpKTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW50ZWdlci5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWludGVnZXIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbi8vIGBUb0ludGVnZXJgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9pbnRlZ2VyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gaXNOYU4oYXJndW1lbnQgPSArYXJndW1lbnQpID8gMCA6IChhcmd1bWVudCA+IDAgPyBmbG9vciA6IGNlaWwpKGFyZ3VtZW50KTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tbGVuZ3RoLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1sZW5ndGguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciB0b0ludGVnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvdG8taW50ZWdlciAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWludGVnZXIuanNcIik7XG5cbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gYFRvTGVuZ3RoYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvbGVuZ3RoXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gYXJndW1lbnQgPiAwID8gbWluKHRvSW50ZWdlcihhcmd1bWVudCksIDB4MUZGRkZGRkZGRkZGRkYpIDogMDsgLy8gMiAqKiA1MyAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1vYmplY3QuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLW9iamVjdC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlLmpzXCIpO1xuXG4vLyBgVG9PYmplY3RgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9vYmplY3Rcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudCkpO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wcmltaXRpdmUuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXByaW1pdGl2ZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2lzLW9iamVjdCAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLW9iamVjdC5qc1wiKTtcblxuLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBTKSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gaXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91aWQuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VpZC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxudmFyIGlkID0gMDtcbnZhciBwb3N0Zml4ID0gTWF0aC5yYW5kb20oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcG9zdGZpeCkudG9TdHJpbmcoMzYpKTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdmFsaWRhdGUtc2V0LXByb3RvdHlwZS1vZi1hcmd1bWVudHMuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdmFsaWRhdGUtc2V0LXByb3RvdHlwZS1vZi1hcmd1bWVudHMuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2lzLW9iamVjdCAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLW9iamVjdC5qc1wiKTtcbnZhciBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9hbi1vYmplY3QgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1vYmplY3QuanNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIHByb3RvKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBpZiAoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCkge1xuICAgIHRocm93IFR5cGVFcnJvcihcIkNhbid0IHNldCBcIiArIFN0cmluZyhwcm90bykgKyAnIGFzIGEgcHJvdG90eXBlJyk7XG4gIH1cbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGdsb2JhbCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9nbG9iYWwgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nbG9iYWwuanNcIik7XG52YXIgc2hhcmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3NoYXJlZCAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC5qc1wiKTtcbnZhciB1aWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvdWlkICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdWlkLmpzXCIpO1xudmFyIE5BVElWRV9TWU1CT0wgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wuanNcIik7XG5cbnZhciBTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyIHN0b3JlID0gc2hhcmVkKCd3a3MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID0gTkFUSVZFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV1cbiAgICB8fCAoTkFUSVZFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZnJvbS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZnJvbS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgJCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9leHBvcnQgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9leHBvcnQuanNcIik7XG52YXIgZnJvbSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9hcnJheS1mcm9tICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktZnJvbS5qc1wiKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uICovIFwiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uLmpzXCIpO1xuXG52YXIgSU5DT1JSRUNUX0lURVJBVElPTiA9ICFjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gIEFycmF5LmZyb20oaXRlcmFibGUpO1xufSk7XG5cbi8vIGBBcnJheS5mcm9tYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LmZyb21cbiQoeyB0YXJnZXQ6ICdBcnJheScsIHN0YXQ6IHRydWUsIGZvcmNlZDogSU5DT1JSRUNUX0lURVJBVElPTiB9LCB7XG4gIGZyb206IGZyb21cbn0pO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBjb2RlUG9pbnRBdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9zdHJpbmctYXQgKi8gXCIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctYXQuanNcIik7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZSAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlLmpzXCIpO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvciAqLyBcIi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvci5qc1wiKTtcblxudmFyIFNUUklOR19JVEVSQVRPUiA9ICdTdHJpbmcgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoU1RSSU5HX0lURVJBVE9SKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS1AQGl0ZXJhdG9yXG5kZWZpbmVJdGVyYXRvcihTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgdHlwZTogU1RSSU5HX0lURVJBVE9SLFxuICAgIHN0cmluZzogU3RyaW5nKGl0ZXJhdGVkKSxcbiAgICBpbmRleDogMFxuICB9KTtcbi8vIGAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtJXN0cmluZ2l0ZXJhdG9ycHJvdG90eXBlJS5uZXh0XG59LCBmdW5jdGlvbiBuZXh0KCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgc3RyaW5nID0gc3RhdGUuc3RyaW5nO1xuICB2YXIgaW5kZXggPSBzdGF0ZS5pbmRleDtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gc3RyaW5nLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9IGNvZGVQb2ludEF0KHN0cmluZywgaW5kZXgsIHRydWUpO1xuICBzdGF0ZS5pbmRleCArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxudmFyIGc7XHJcblxyXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxyXG5nID0gKGZ1bmN0aW9uKCkge1xyXG5cdHJldHVybiB0aGlzO1xyXG59KSgpO1xyXG5cclxudHJ5IHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcclxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsIGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaCAoZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvZGVmYXVsdC1hdHRycy5qc29uXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9kZWZhdWx0LWF0dHJzLmpzb24gKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGV4cG9ydHMgcHJvdmlkZWQ6IHhtbG5zLCB3aWR0aCwgaGVpZ2h0LCB2aWV3Qm94LCBmaWxsLCBzdHJva2UsIHN0cm9rZS13aWR0aCwgc3Ryb2tlLWxpbmVjYXAsIHN0cm9rZS1saW5lam9pbiwgZGVmYXVsdCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSkge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcInhtbG5zXCI6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFwid2lkdGhcIjoyNCxcImhlaWdodFwiOjI0LFwidmlld0JveFwiOlwiMCAwIDI0IDI0XCIsXCJmaWxsXCI6XCJub25lXCIsXCJzdHJva2VcIjpcImN1cnJlbnRDb2xvclwiLFwic3Ryb2tlLXdpZHRoXCI6MixcInN0cm9rZS1saW5lY2FwXCI6XCJyb3VuZFwiLFwic3Ryb2tlLWxpbmVqb2luXCI6XCJyb3VuZFwifTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvaWNvbi5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2ljb24uanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2RlZHVwZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIGNsYXNzbmFtZXMvZGVkdXBlICovIFwiLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9kZWR1cGUuanNcIik7XG5cbnZhciBfZGVkdXBlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZHVwZSk7XG5cbnZhciBfZGVmYXVsdEF0dHJzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9kZWZhdWx0LWF0dHJzLmpzb24gKi8gXCIuL3NyYy9kZWZhdWx0LWF0dHJzLmpzb25cIik7XG5cbnZhciBfZGVmYXVsdEF0dHJzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZmF1bHRBdHRycyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBJY29uID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBJY29uKG5hbWUsIGNvbnRlbnRzKSB7XG4gICAgdmFyIHRhZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IFtdO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEljb24pO1xuXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmNvbnRlbnRzID0gY29udGVudHM7XG4gICAgdGhpcy50YWdzID0gdGFncztcbiAgICB0aGlzLmF0dHJzID0gX2V4dGVuZHMoe30sIF9kZWZhdWx0QXR0cnMyLmRlZmF1bHQsIHsgY2xhc3M6ICdmZWF0aGVyIGZlYXRoZXItJyArIG5hbWUgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGFuIFNWRyBzdHJpbmcuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhdHRyc1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhJY29uLCBbe1xuICAgIGtleTogJ3RvU3ZnJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdmcoKSB7XG4gICAgICB2YXIgYXR0cnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgICB2YXIgY29tYmluZWRBdHRycyA9IF9leHRlbmRzKHt9LCB0aGlzLmF0dHJzLCBhdHRycywgeyBjbGFzczogKDAsIF9kZWR1cGUyLmRlZmF1bHQpKHRoaXMuYXR0cnMuY2xhc3MsIGF0dHJzLmNsYXNzKSB9KTtcblxuICAgICAgcmV0dXJuICc8c3ZnICcgKyBhdHRyc1RvU3RyaW5nKGNvbWJpbmVkQXR0cnMpICsgJz4nICsgdGhpcy5jb250ZW50cyArICc8L3N2Zz4nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYW4gYEljb25gLlxuICAgICAqXG4gICAgICogQWRkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuIElmIG9sZCBjb2RlIGV4cGVjdHMgYGZlYXRoZXIuaWNvbnMuPG5hbWU+YFxuICAgICAqIHRvIGJlIGEgc3RyaW5nLCBgdG9TdHJpbmcoKWAgd2lsbCBnZXQgaW1wbGljaXRseSBjYWxsZWQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd0b1N0cmluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY29udGVudHM7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEljb247XG59KCk7XG5cbi8qKlxuICogQ29udmVydCBhdHRyaWJ1dGVzIG9iamVjdCB0byBzdHJpbmcgb2YgSFRNTCBhdHRyaWJ1dGVzLlxuICogQHBhcmFtIHtPYmplY3R9IGF0dHJzXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5cblxuZnVuY3Rpb24gYXR0cnNUb1N0cmluZyhhdHRycykge1xuICByZXR1cm4gT2JqZWN0LmtleXMoYXR0cnMpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGtleSArICc9XCInICsgYXR0cnNba2V5XSArICdcIic7XG4gIH0pLmpvaW4oJyAnKTtcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gSWNvbjtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvaWNvbnMuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvaWNvbnMuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9pY29uID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9pY29uICovIFwiLi9zcmMvaWNvbi5qc1wiKTtcblxudmFyIF9pY29uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ljb24pO1xuXG52YXIgX2ljb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vZGlzdC9pY29ucy5qc29uICovIFwiLi9kaXN0L2ljb25zLmpzb25cIik7XG5cbnZhciBfaWNvbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaWNvbnMpO1xuXG52YXIgX3RhZ3MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3RhZ3MuanNvbiAqLyBcIi4vc3JjL3RhZ3MuanNvblwiKTtcblxudmFyIF90YWdzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RhZ3MpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBPYmplY3Qua2V5cyhfaWNvbnMyLmRlZmF1bHQpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBuZXcgX2ljb24yLmRlZmF1bHQoa2V5LCBfaWNvbnMyLmRlZmF1bHRba2V5XSwgX3RhZ3MyLmRlZmF1bHRba2V5XSk7XG59KS5yZWR1Y2UoZnVuY3Rpb24gKG9iamVjdCwgaWNvbikge1xuICBvYmplY3RbaWNvbi5uYW1lXSA9IGljb247XG4gIHJldHVybiBvYmplY3Q7XG59LCB7fSk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL2luZGV4LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2luZGV4LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBfaWNvbnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ljb25zICovIFwiLi9zcmMvaWNvbnMuanNcIik7XG5cbnZhciBfaWNvbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaWNvbnMpO1xuXG52YXIgX3RvU3ZnID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi90by1zdmcgKi8gXCIuL3NyYy90by1zdmcuanNcIik7XG5cbnZhciBfdG9TdmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdG9TdmcpO1xuXG52YXIgX3JlcGxhY2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3JlcGxhY2UgKi8gXCIuL3NyYy9yZXBsYWNlLmpzXCIpO1xuXG52YXIgX3JlcGxhY2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVwbGFjZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbm1vZHVsZS5leHBvcnRzID0geyBpY29uczogX2ljb25zMi5kZWZhdWx0LCB0b1N2ZzogX3RvU3ZnMi5kZWZhdWx0LCByZXBsYWNlOiBfcmVwbGFjZTIuZGVmYXVsdCB9O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9yZXBsYWNlLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvcmVwbGFjZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IC8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG5cbnZhciBfZGVkdXBlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgY2xhc3NuYW1lcy9kZWR1cGUgKi8gXCIuL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2RlZHVwZS5qc1wiKTtcblxudmFyIF9kZWR1cGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVkdXBlKTtcblxudmFyIF9pY29ucyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vaWNvbnMgKi8gXCIuL3NyYy9pY29ucy5qc1wiKTtcblxudmFyIF9pY29uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pY29ucyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogUmVwbGFjZSBhbGwgSFRNTCBlbGVtZW50cyB0aGF0IGhhdmUgYSBgZGF0YS1mZWF0aGVyYCBhdHRyaWJ1dGUgd2l0aCBTVkcgbWFya3VwXG4gKiBjb3JyZXNwb25kaW5nIHRvIHRoZSBlbGVtZW50J3MgYGRhdGEtZmVhdGhlcmAgYXR0cmlidXRlIHZhbHVlLlxuICogQHBhcmFtIHtPYmplY3R9IGF0dHJzXG4gKi9cbmZ1bmN0aW9uIHJlcGxhY2UoKSB7XG4gIHZhciBhdHRycyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2BmZWF0aGVyLnJlcGxhY2UoKWAgb25seSB3b3JrcyBpbiBhIGJyb3dzZXIgZW52aXJvbm1lbnQuJyk7XG4gIH1cblxuICB2YXIgZWxlbWVudHNUb1JlcGxhY2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1mZWF0aGVyXScpO1xuXG4gIEFycmF5LmZyb20oZWxlbWVudHNUb1JlcGxhY2UpLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gcmVwbGFjZUVsZW1lbnQoZWxlbWVudCwgYXR0cnMpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBSZXBsYWNlIGEgc2luZ2xlIEhUTUwgZWxlbWVudCB3aXRoIFNWRyBtYXJrdXBcbiAqIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGVsZW1lbnQncyBgZGF0YS1mZWF0aGVyYCBhdHRyaWJ1dGUgdmFsdWUuXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gYXR0cnNcbiAqL1xuZnVuY3Rpb24gcmVwbGFjZUVsZW1lbnQoZWxlbWVudCkge1xuICB2YXIgYXR0cnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gIHZhciBlbGVtZW50QXR0cnMgPSBnZXRBdHRycyhlbGVtZW50KTtcbiAgdmFyIG5hbWUgPSBlbGVtZW50QXR0cnNbJ2RhdGEtZmVhdGhlciddO1xuICBkZWxldGUgZWxlbWVudEF0dHJzWydkYXRhLWZlYXRoZXInXTtcblxuICB2YXIgc3ZnU3RyaW5nID0gX2ljb25zMi5kZWZhdWx0W25hbWVdLnRvU3ZnKF9leHRlbmRzKHt9LCBhdHRycywgZWxlbWVudEF0dHJzLCB7IGNsYXNzOiAoMCwgX2RlZHVwZTIuZGVmYXVsdCkoYXR0cnMuY2xhc3MsIGVsZW1lbnRBdHRycy5jbGFzcykgfSkpO1xuICB2YXIgc3ZnRG9jdW1lbnQgPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKHN2Z1N0cmluZywgJ2ltYWdlL3N2Zyt4bWwnKTtcbiAgdmFyIHN2Z0VsZW1lbnQgPSBzdmdEb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdzdmcnKTtcblxuICBlbGVtZW50LnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKHN2Z0VsZW1lbnQsIGVsZW1lbnQpO1xufVxuXG4vKipcbiAqIEdldCB0aGUgYXR0cmlidXRlcyBvZiBhbiBIVE1MIGVsZW1lbnQuXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBnZXRBdHRycyhlbGVtZW50KSB7XG4gIHJldHVybiBBcnJheS5mcm9tKGVsZW1lbnQuYXR0cmlidXRlcykucmVkdWNlKGZ1bmN0aW9uIChhdHRycywgYXR0cikge1xuICAgIGF0dHJzW2F0dHIubmFtZV0gPSBhdHRyLnZhbHVlO1xuICAgIHJldHVybiBhdHRycztcbiAgfSwge30pO1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSByZXBsYWNlO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy90YWdzLmpzb25cIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3RhZ3MuanNvbiAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogYWN0aXZpdHksIGFpcnBsYXksIGFsZXJ0LWNpcmNsZSwgYWxlcnQtb2N0YWdvbiwgYWxlcnQtdHJpYW5nbGUsIGFsaWduLWNlbnRlciwgYWxpZ24tanVzdGlmeSwgYWxpZ24tbGVmdCwgYWxpZ24tcmlnaHQsIGFuY2hvciwgYXJjaGl2ZSwgYXQtc2lnbiwgYXdhcmQsIGFwZXJ0dXJlLCBiYXItY2hhcnQsIGJhci1jaGFydC0yLCBiYXR0ZXJ5LCBiYXR0ZXJ5LWNoYXJnaW5nLCBiZWxsLCBiZWxsLW9mZiwgYmx1ZXRvb3RoLCBib29rLW9wZW4sIGJvb2ssIGJvb2ttYXJrLCBib3gsIGJyaWVmY2FzZSwgY2FsZW5kYXIsIGNhbWVyYSwgY2FzdCwgY2lyY2xlLCBjbGlwYm9hcmQsIGNsb2NrLCBjbG91ZC1kcml6emxlLCBjbG91ZC1saWdodG5pbmcsIGNsb3VkLXJhaW4sIGNsb3VkLXNub3csIGNsb3VkLCBjb2RlcGVuLCBjb2Rlc2FuZGJveCwgY29kZSwgY29mZmVlLCBjb2x1bW5zLCBjb21tYW5kLCBjb21wYXNzLCBjb3B5LCBjb3JuZXItZG93bi1sZWZ0LCBjb3JuZXItZG93bi1yaWdodCwgY29ybmVyLWxlZnQtZG93biwgY29ybmVyLWxlZnQtdXAsIGNvcm5lci1yaWdodC1kb3duLCBjb3JuZXItcmlnaHQtdXAsIGNvcm5lci11cC1sZWZ0LCBjb3JuZXItdXAtcmlnaHQsIGNwdSwgY3JlZGl0LWNhcmQsIGNyb3AsIGNyb3NzaGFpciwgZGF0YWJhc2UsIGRlbGV0ZSwgZGlzYywgZG9sbGFyLXNpZ24sIGRyb3BsZXQsIGVkaXQsIGVkaXQtMiwgZWRpdC0zLCBleWUsIGV5ZS1vZmYsIGV4dGVybmFsLWxpbmssIGZhY2Vib29rLCBmYXN0LWZvcndhcmQsIGZpZ21hLCBmaWxlLW1pbnVzLCBmaWxlLXBsdXMsIGZpbGUtdGV4dCwgZmlsbSwgZmlsdGVyLCBmbGFnLCBmb2xkZXItbWludXMsIGZvbGRlci1wbHVzLCBmb2xkZXIsIGZyYW1lciwgZnJvd24sIGdpZnQsIGdpdC1icmFuY2gsIGdpdC1jb21taXQsIGdpdC1tZXJnZSwgZ2l0LXB1bGwtcmVxdWVzdCwgZ2l0aHViLCBnaXRsYWIsIGdsb2JlLCBoYXJkLWRyaXZlLCBoYXNoLCBoZWFkcGhvbmVzLCBoZWFydCwgaGVscC1jaXJjbGUsIGhleGFnb24sIGhvbWUsIGltYWdlLCBpbmJveCwgaW5zdGFncmFtLCBrZXksIGxheWVycywgbGF5b3V0LCBsaWZlLWJvdXksIGxpbmssIGxpbmstMiwgbGlua2VkaW4sIGxpc3QsIGxvY2ssIGxvZy1pbiwgbG9nLW91dCwgbWFpbCwgbWFwLXBpbiwgbWFwLCBtYXhpbWl6ZSwgbWF4aW1pemUtMiwgbWVoLCBtZW51LCBtZXNzYWdlLWNpcmNsZSwgbWVzc2FnZS1zcXVhcmUsIG1pYy1vZmYsIG1pYywgbWluaW1pemUsIG1pbmltaXplLTIsIG1pbnVzLCBtb25pdG9yLCBtb29uLCBtb3JlLWhvcml6b250YWwsIG1vcmUtdmVydGljYWwsIG1vdXNlLXBvaW50ZXIsIG1vdmUsIG11c2ljLCBuYXZpZ2F0aW9uLCBuYXZpZ2F0aW9uLTIsIG9jdGFnb24sIHBhY2thZ2UsIHBhcGVyY2xpcCwgcGF1c2UsIHBhdXNlLWNpcmNsZSwgcGVuLXRvb2wsIHBlcmNlbnQsIHBob25lLWNhbGwsIHBob25lLWZvcndhcmRlZCwgcGhvbmUtaW5jb21pbmcsIHBob25lLW1pc3NlZCwgcGhvbmUtb2ZmLCBwaG9uZS1vdXRnb2luZywgcGhvbmUsIHBsYXksIHBpZS1jaGFydCwgcGxheS1jaXJjbGUsIHBsdXMsIHBsdXMtY2lyY2xlLCBwbHVzLXNxdWFyZSwgcG9ja2V0LCBwb3dlciwgcHJpbnRlciwgcmFkaW8sIHJlZnJlc2gtY3csIHJlZnJlc2gtY2N3LCByZXBlYXQsIHJld2luZCwgcm90YXRlLWNjdywgcm90YXRlLWN3LCByc3MsIHNhdmUsIHNjaXNzb3JzLCBzZWFyY2gsIHNlbmQsIHNldHRpbmdzLCBzaGFyZS0yLCBzaGllbGQsIHNoaWVsZC1vZmYsIHNob3BwaW5nLWJhZywgc2hvcHBpbmctY2FydCwgc2h1ZmZsZSwgc2tpcC1iYWNrLCBza2lwLWZvcndhcmQsIHNsYWNrLCBzbGFzaCwgc2xpZGVycywgc21hcnRwaG9uZSwgc21pbGUsIHNwZWFrZXIsIHN0YXIsIHN0b3AtY2lyY2xlLCBzdW4sIHN1bnJpc2UsIHN1bnNldCwgdGFibGV0LCB0YWcsIHRhcmdldCwgdGVybWluYWwsIHRoZXJtb21ldGVyLCB0aHVtYnMtZG93biwgdGh1bWJzLXVwLCB0b2dnbGUtbGVmdCwgdG9nZ2xlLXJpZ2h0LCB0b29sLCB0cmFzaCwgdHJhc2gtMiwgdHJpYW5nbGUsIHRydWNrLCB0diwgdHdpdGNoLCB0d2l0dGVyLCB0eXBlLCB1bWJyZWxsYSwgdW5sb2NrLCB1c2VyLWNoZWNrLCB1c2VyLW1pbnVzLCB1c2VyLXBsdXMsIHVzZXIteCwgdXNlciwgdXNlcnMsIHZpZGVvLW9mZiwgdmlkZW8sIHZvaWNlbWFpbCwgdm9sdW1lLCB2b2x1bWUtMSwgdm9sdW1lLTIsIHZvbHVtZS14LCB3YXRjaCwgd2lmaS1vZmYsIHdpZmksIHdpbmQsIHgtY2lyY2xlLCB4LW9jdGFnb24sIHgtc3F1YXJlLCB4LCB5b3V0dWJlLCB6YXAtb2ZmLCB6YXAsIHpvb20taW4sIHpvb20tb3V0LCBkZWZhdWx0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlKSB7XG5cbm1vZHVsZS5leHBvcnRzID0ge1wiYWN0aXZpdHlcIjpbXCJwdWxzZVwiLFwiaGVhbHRoXCIsXCJhY3Rpb25cIixcIm1vdGlvblwiXSxcImFpcnBsYXlcIjpbXCJzdHJlYW1cIixcImNhc3RcIixcIm1pcnJvcmluZ1wiXSxcImFsZXJ0LWNpcmNsZVwiOltcIndhcm5pbmdcIixcImFsZXJ0XCIsXCJkYW5nZXJcIl0sXCJhbGVydC1vY3RhZ29uXCI6W1wid2FybmluZ1wiLFwiYWxlcnRcIixcImRhbmdlclwiXSxcImFsZXJ0LXRyaWFuZ2xlXCI6W1wid2FybmluZ1wiLFwiYWxlcnRcIixcImRhbmdlclwiXSxcImFsaWduLWNlbnRlclwiOltcInRleHQgYWxpZ25tZW50XCIsXCJjZW50ZXJcIl0sXCJhbGlnbi1qdXN0aWZ5XCI6W1widGV4dCBhbGlnbm1lbnRcIixcImp1c3RpZmllZFwiXSxcImFsaWduLWxlZnRcIjpbXCJ0ZXh0IGFsaWdubWVudFwiLFwibGVmdFwiXSxcImFsaWduLXJpZ2h0XCI6W1widGV4dCBhbGlnbm1lbnRcIixcInJpZ2h0XCJdLFwiYW5jaG9yXCI6W10sXCJhcmNoaXZlXCI6W1wiaW5kZXhcIixcImJveFwiXSxcImF0LXNpZ25cIjpbXCJtZW50aW9uXCIsXCJhdFwiLFwiZW1haWxcIixcIm1lc3NhZ2VcIl0sXCJhd2FyZFwiOltcImFjaGlldmVtZW50XCIsXCJiYWRnZVwiXSxcImFwZXJ0dXJlXCI6W1wiY2FtZXJhXCIsXCJwaG90b1wiXSxcImJhci1jaGFydFwiOltcInN0YXRpc3RpY3NcIixcImRpYWdyYW1cIixcImdyYXBoXCJdLFwiYmFyLWNoYXJ0LTJcIjpbXCJzdGF0aXN0aWNzXCIsXCJkaWFncmFtXCIsXCJncmFwaFwiXSxcImJhdHRlcnlcIjpbXCJwb3dlclwiLFwiZWxlY3RyaWNpdHlcIl0sXCJiYXR0ZXJ5LWNoYXJnaW5nXCI6W1wicG93ZXJcIixcImVsZWN0cmljaXR5XCJdLFwiYmVsbFwiOltcImFsYXJtXCIsXCJub3RpZmljYXRpb25cIixcInNvdW5kXCJdLFwiYmVsbC1vZmZcIjpbXCJhbGFybVwiLFwibm90aWZpY2F0aW9uXCIsXCJzaWxlbnRcIl0sXCJibHVldG9vdGhcIjpbXCJ3aXJlbGVzc1wiXSxcImJvb2stb3BlblwiOltcInJlYWRcIixcImxpYnJhcnlcIl0sXCJib29rXCI6W1wicmVhZFwiLFwiZGljdGlvbmFyeVwiLFwiYm9va2xldFwiLFwibWFnYXppbmVcIixcImxpYnJhcnlcIl0sXCJib29rbWFya1wiOltcInJlYWRcIixcImNsaXBcIixcIm1hcmtlclwiLFwidGFnXCJdLFwiYm94XCI6W1wiY3ViZVwiXSxcImJyaWVmY2FzZVwiOltcIndvcmtcIixcImJhZ1wiLFwiYmFnZ2FnZVwiLFwiZm9sZGVyXCJdLFwiY2FsZW5kYXJcIjpbXCJkYXRlXCJdLFwiY2FtZXJhXCI6W1wicGhvdG9cIl0sXCJjYXN0XCI6W1wiY2hyb21lY2FzdFwiLFwiYWlycGxheVwiXSxcImNpcmNsZVwiOltcIm9mZlwiLFwiemVyb1wiLFwicmVjb3JkXCJdLFwiY2xpcGJvYXJkXCI6W1wiY29weVwiXSxcImNsb2NrXCI6W1widGltZVwiLFwid2F0Y2hcIixcImFsYXJtXCJdLFwiY2xvdWQtZHJpenpsZVwiOltcIndlYXRoZXJcIixcInNob3dlclwiXSxcImNsb3VkLWxpZ2h0bmluZ1wiOltcIndlYXRoZXJcIixcImJvbHRcIl0sXCJjbG91ZC1yYWluXCI6W1wid2VhdGhlclwiXSxcImNsb3VkLXNub3dcIjpbXCJ3ZWF0aGVyXCIsXCJibGl6emFyZFwiXSxcImNsb3VkXCI6W1wid2VhdGhlclwiXSxcImNvZGVwZW5cIjpbXCJsb2dvXCJdLFwiY29kZXNhbmRib3hcIjpbXCJsb2dvXCJdLFwiY29kZVwiOltcInNvdXJjZVwiLFwicHJvZ3JhbW1pbmdcIl0sXCJjb2ZmZWVcIjpbXCJkcmlua1wiLFwiY3VwXCIsXCJtdWdcIixcInRlYVwiLFwiY2FmZVwiLFwiaG90XCIsXCJiZXZlcmFnZVwiXSxcImNvbHVtbnNcIjpbXCJsYXlvdXRcIl0sXCJjb21tYW5kXCI6W1wia2V5Ym9hcmRcIixcImNtZFwiLFwidGVybWluYWxcIixcInByb21wdFwiXSxcImNvbXBhc3NcIjpbXCJuYXZpZ2F0aW9uXCIsXCJzYWZhcmlcIixcInRyYXZlbFwiLFwiZGlyZWN0aW9uXCJdLFwiY29weVwiOltcImNsb25lXCIsXCJkdXBsaWNhdGVcIl0sXCJjb3JuZXItZG93bi1sZWZ0XCI6W1wiYXJyb3dcIixcInJldHVyblwiXSxcImNvcm5lci1kb3duLXJpZ2h0XCI6W1wiYXJyb3dcIl0sXCJjb3JuZXItbGVmdC1kb3duXCI6W1wiYXJyb3dcIl0sXCJjb3JuZXItbGVmdC11cFwiOltcImFycm93XCJdLFwiY29ybmVyLXJpZ2h0LWRvd25cIjpbXCJhcnJvd1wiXSxcImNvcm5lci1yaWdodC11cFwiOltcImFycm93XCJdLFwiY29ybmVyLXVwLWxlZnRcIjpbXCJhcnJvd1wiXSxcImNvcm5lci11cC1yaWdodFwiOltcImFycm93XCJdLFwiY3B1XCI6W1wicHJvY2Vzc29yXCIsXCJ0ZWNobm9sb2d5XCJdLFwiY3JlZGl0LWNhcmRcIjpbXCJwdXJjaGFzZVwiLFwicGF5bWVudFwiLFwiY2NcIl0sXCJjcm9wXCI6W1wicGhvdG9cIixcImltYWdlXCJdLFwiY3Jvc3NoYWlyXCI6W1wiYWltXCIsXCJ0YXJnZXRcIl0sXCJkYXRhYmFzZVwiOltcInN0b3JhZ2VcIixcIm1lbW9yeVwiXSxcImRlbGV0ZVwiOltcInJlbW92ZVwiXSxcImRpc2NcIjpbXCJhbGJ1bVwiLFwiY2RcIixcImR2ZFwiLFwibXVzaWNcIl0sXCJkb2xsYXItc2lnblwiOltcImN1cnJlbmN5XCIsXCJtb25leVwiLFwicGF5bWVudFwiXSxcImRyb3BsZXRcIjpbXCJ3YXRlclwiXSxcImVkaXRcIjpbXCJwZW5jaWxcIixcImNoYW5nZVwiXSxcImVkaXQtMlwiOltcInBlbmNpbFwiLFwiY2hhbmdlXCJdLFwiZWRpdC0zXCI6W1wicGVuY2lsXCIsXCJjaGFuZ2VcIl0sXCJleWVcIjpbXCJ2aWV3XCIsXCJ3YXRjaFwiXSxcImV5ZS1vZmZcIjpbXCJ2aWV3XCIsXCJ3YXRjaFwiLFwiaGlkZVwiLFwiaGlkZGVuXCJdLFwiZXh0ZXJuYWwtbGlua1wiOltcIm91dGJvdW5kXCJdLFwiZmFjZWJvb2tcIjpbXCJsb2dvXCIsXCJzb2NpYWxcIl0sXCJmYXN0LWZvcndhcmRcIjpbXCJtdXNpY1wiXSxcImZpZ21hXCI6W1wibG9nb1wiLFwiZGVzaWduXCIsXCJ0b29sXCJdLFwiZmlsZS1taW51c1wiOltcImRlbGV0ZVwiLFwicmVtb3ZlXCIsXCJlcmFzZVwiXSxcImZpbGUtcGx1c1wiOltcImFkZFwiLFwiY3JlYXRlXCIsXCJuZXdcIl0sXCJmaWxlLXRleHRcIjpbXCJkYXRhXCIsXCJ0eHRcIixcInBkZlwiXSxcImZpbG1cIjpbXCJtb3ZpZVwiLFwidmlkZW9cIl0sXCJmaWx0ZXJcIjpbXCJmdW5uZWxcIixcImhvcHBlclwiXSxcImZsYWdcIjpbXCJyZXBvcnRcIl0sXCJmb2xkZXItbWludXNcIjpbXCJkaXJlY3RvcnlcIl0sXCJmb2xkZXItcGx1c1wiOltcImRpcmVjdG9yeVwiXSxcImZvbGRlclwiOltcImRpcmVjdG9yeVwiXSxcImZyYW1lclwiOltcImxvZ29cIixcImRlc2lnblwiLFwidG9vbFwiXSxcImZyb3duXCI6W1wiZW1vamlcIixcImZhY2VcIixcImJhZFwiLFwic2FkXCIsXCJlbW90aW9uXCJdLFwiZ2lmdFwiOltcInByZXNlbnRcIixcImJveFwiLFwiYmlydGhkYXlcIixcInBhcnR5XCJdLFwiZ2l0LWJyYW5jaFwiOltcImNvZGVcIixcInZlcnNpb24gY29udHJvbFwiXSxcImdpdC1jb21taXRcIjpbXCJjb2RlXCIsXCJ2ZXJzaW9uIGNvbnRyb2xcIl0sXCJnaXQtbWVyZ2VcIjpbXCJjb2RlXCIsXCJ2ZXJzaW9uIGNvbnRyb2xcIl0sXCJnaXQtcHVsbC1yZXF1ZXN0XCI6W1wiY29kZVwiLFwidmVyc2lvbiBjb250cm9sXCJdLFwiZ2l0aHViXCI6W1wibG9nb1wiLFwidmVyc2lvbiBjb250cm9sXCJdLFwiZ2l0bGFiXCI6W1wibG9nb1wiLFwidmVyc2lvbiBjb250cm9sXCJdLFwiZ2xvYmVcIjpbXCJ3b3JsZFwiLFwiYnJvd3NlclwiLFwibGFuZ3VhZ2VcIixcInRyYW5zbGF0ZVwiXSxcImhhcmQtZHJpdmVcIjpbXCJjb21wdXRlclwiLFwic2VydmVyXCIsXCJtZW1vcnlcIixcImRhdGFcIl0sXCJoYXNoXCI6W1wiaGFzaHRhZ1wiLFwibnVtYmVyXCIsXCJwb3VuZFwiXSxcImhlYWRwaG9uZXNcIjpbXCJtdXNpY1wiLFwiYXVkaW9cIixcInNvdW5kXCJdLFwiaGVhcnRcIjpbXCJsaWtlXCIsXCJsb3ZlXCIsXCJlbW90aW9uXCJdLFwiaGVscC1jaXJjbGVcIjpbXCJxdWVzdGlvbiBtYXJrXCJdLFwiaGV4YWdvblwiOltcInNoYXBlXCIsXCJub2RlLmpzXCIsXCJsb2dvXCJdLFwiaG9tZVwiOltcImhvdXNlXCIsXCJsaXZpbmdcIl0sXCJpbWFnZVwiOltcInBpY3R1cmVcIl0sXCJpbmJveFwiOltcImVtYWlsXCJdLFwiaW5zdGFncmFtXCI6W1wibG9nb1wiLFwiY2FtZXJhXCJdLFwia2V5XCI6W1wicGFzc3dvcmRcIixcImxvZ2luXCIsXCJhdXRoZW50aWNhdGlvblwiLFwic2VjdXJlXCJdLFwibGF5ZXJzXCI6W1wic3RhY2tcIl0sXCJsYXlvdXRcIjpbXCJ3aW5kb3dcIixcIndlYnBhZ2VcIl0sXCJsaWZlLWJvdXlcIjpbXCJoZWxwXCIsXCJsaWZlIHJpbmdcIixcInN1cHBvcnRcIl0sXCJsaW5rXCI6W1wiY2hhaW5cIixcInVybFwiXSxcImxpbmstMlwiOltcImNoYWluXCIsXCJ1cmxcIl0sXCJsaW5rZWRpblwiOltcImxvZ29cIixcInNvY2lhbCBtZWRpYVwiXSxcImxpc3RcIjpbXCJvcHRpb25zXCJdLFwibG9ja1wiOltcInNlY3VyaXR5XCIsXCJwYXNzd29yZFwiLFwic2VjdXJlXCJdLFwibG9nLWluXCI6W1wic2lnbiBpblwiLFwiYXJyb3dcIixcImVudGVyXCJdLFwibG9nLW91dFwiOltcInNpZ24gb3V0XCIsXCJhcnJvd1wiLFwiZXhpdFwiXSxcIm1haWxcIjpbXCJlbWFpbFwiLFwibWVzc2FnZVwiXSxcIm1hcC1waW5cIjpbXCJsb2NhdGlvblwiLFwibmF2aWdhdGlvblwiLFwidHJhdmVsXCIsXCJtYXJrZXJcIl0sXCJtYXBcIjpbXCJsb2NhdGlvblwiLFwibmF2aWdhdGlvblwiLFwidHJhdmVsXCJdLFwibWF4aW1pemVcIjpbXCJmdWxsc2NyZWVuXCJdLFwibWF4aW1pemUtMlwiOltcImZ1bGxzY3JlZW5cIixcImFycm93c1wiLFwiZXhwYW5kXCJdLFwibWVoXCI6W1wiZW1vamlcIixcImZhY2VcIixcIm5ldXRyYWxcIixcImVtb3Rpb25cIl0sXCJtZW51XCI6W1wiYmFyc1wiLFwibmF2aWdhdGlvblwiLFwiaGFtYnVyZ2VyXCJdLFwibWVzc2FnZS1jaXJjbGVcIjpbXCJjb21tZW50XCIsXCJjaGF0XCJdLFwibWVzc2FnZS1zcXVhcmVcIjpbXCJjb21tZW50XCIsXCJjaGF0XCJdLFwibWljLW9mZlwiOltcInJlY29yZFwiLFwic291bmRcIixcIm11dGVcIl0sXCJtaWNcIjpbXCJyZWNvcmRcIixcInNvdW5kXCIsXCJsaXN0ZW5cIl0sXCJtaW5pbWl6ZVwiOltcImV4aXQgZnVsbHNjcmVlblwiLFwiY2xvc2VcIl0sXCJtaW5pbWl6ZS0yXCI6W1wiZXhpdCBmdWxsc2NyZWVuXCIsXCJhcnJvd3NcIixcImNsb3NlXCJdLFwibWludXNcIjpbXCJzdWJ0cmFjdFwiXSxcIm1vbml0b3JcIjpbXCJ0dlwiLFwic2NyZWVuXCIsXCJkaXNwbGF5XCJdLFwibW9vblwiOltcImRhcmtcIixcIm5pZ2h0XCJdLFwibW9yZS1ob3Jpem9udGFsXCI6W1wiZWxsaXBzaXNcIl0sXCJtb3JlLXZlcnRpY2FsXCI6W1wiZWxsaXBzaXNcIl0sXCJtb3VzZS1wb2ludGVyXCI6W1wiYXJyb3dcIixcImN1cnNvclwiXSxcIm1vdmVcIjpbXCJhcnJvd3NcIl0sXCJtdXNpY1wiOltcIm5vdGVcIl0sXCJuYXZpZ2F0aW9uXCI6W1wibG9jYXRpb25cIixcInRyYXZlbFwiXSxcIm5hdmlnYXRpb24tMlwiOltcImxvY2F0aW9uXCIsXCJ0cmF2ZWxcIl0sXCJvY3RhZ29uXCI6W1wic3RvcFwiXSxcInBhY2thZ2VcIjpbXCJib3hcIixcImNvbnRhaW5lclwiXSxcInBhcGVyY2xpcFwiOltcImF0dGFjaG1lbnRcIl0sXCJwYXVzZVwiOltcIm11c2ljXCIsXCJzdG9wXCJdLFwicGF1c2UtY2lyY2xlXCI6W1wibXVzaWNcIixcImF1ZGlvXCIsXCJzdG9wXCJdLFwicGVuLXRvb2xcIjpbXCJ2ZWN0b3JcIixcImRyYXdpbmdcIl0sXCJwZXJjZW50XCI6W1wiZGlzY291bnRcIl0sXCJwaG9uZS1jYWxsXCI6W1wicmluZ1wiXSxcInBob25lLWZvcndhcmRlZFwiOltcImNhbGxcIl0sXCJwaG9uZS1pbmNvbWluZ1wiOltcImNhbGxcIl0sXCJwaG9uZS1taXNzZWRcIjpbXCJjYWxsXCJdLFwicGhvbmUtb2ZmXCI6W1wiY2FsbFwiLFwibXV0ZVwiXSxcInBob25lLW91dGdvaW5nXCI6W1wiY2FsbFwiXSxcInBob25lXCI6W1wiY2FsbFwiXSxcInBsYXlcIjpbXCJtdXNpY1wiLFwic3RhcnRcIl0sXCJwaWUtY2hhcnRcIjpbXCJzdGF0aXN0aWNzXCIsXCJkaWFncmFtXCJdLFwicGxheS1jaXJjbGVcIjpbXCJtdXNpY1wiLFwic3RhcnRcIl0sXCJwbHVzXCI6W1wiYWRkXCIsXCJuZXdcIl0sXCJwbHVzLWNpcmNsZVwiOltcImFkZFwiLFwibmV3XCJdLFwicGx1cy1zcXVhcmVcIjpbXCJhZGRcIixcIm5ld1wiXSxcInBvY2tldFwiOltcImxvZ29cIixcInNhdmVcIl0sXCJwb3dlclwiOltcIm9uXCIsXCJvZmZcIl0sXCJwcmludGVyXCI6W1wiZmF4XCIsXCJvZmZpY2VcIixcImRldmljZVwiXSxcInJhZGlvXCI6W1wic2lnbmFsXCJdLFwicmVmcmVzaC1jd1wiOltcInN5bmNocm9uaXNlXCIsXCJhcnJvd3NcIl0sXCJyZWZyZXNoLWNjd1wiOltcImFycm93c1wiXSxcInJlcGVhdFwiOltcImxvb3BcIixcImFycm93c1wiXSxcInJld2luZFwiOltcIm11c2ljXCJdLFwicm90YXRlLWNjd1wiOltcImFycm93XCJdLFwicm90YXRlLWN3XCI6W1wiYXJyb3dcIl0sXCJyc3NcIjpbXCJmZWVkXCIsXCJzdWJzY3JpYmVcIl0sXCJzYXZlXCI6W1wiZmxvcHB5IGRpc2tcIl0sXCJzY2lzc29yc1wiOltcImN1dFwiXSxcInNlYXJjaFwiOltcImZpbmRcIixcIm1hZ25pZmllclwiLFwibWFnbmlmeWluZyBnbGFzc1wiXSxcInNlbmRcIjpbXCJtZXNzYWdlXCIsXCJtYWlsXCIsXCJlbWFpbFwiLFwicGFwZXIgYWlycGxhbmVcIixcInBhcGVyIGFlcm9wbGFuZVwiXSxcInNldHRpbmdzXCI6W1wiY29nXCIsXCJlZGl0XCIsXCJnZWFyXCIsXCJwcmVmZXJlbmNlc1wiXSxcInNoYXJlLTJcIjpbXCJuZXR3b3JrXCIsXCJjb25uZWN0aW9uc1wiXSxcInNoaWVsZFwiOltcInNlY3VyaXR5XCIsXCJzZWN1cmVcIl0sXCJzaGllbGQtb2ZmXCI6W1wic2VjdXJpdHlcIixcImluc2VjdXJlXCJdLFwic2hvcHBpbmctYmFnXCI6W1wiZWNvbW1lcmNlXCIsXCJjYXJ0XCIsXCJwdXJjaGFzZVwiLFwic3RvcmVcIl0sXCJzaG9wcGluZy1jYXJ0XCI6W1wiZWNvbW1lcmNlXCIsXCJjYXJ0XCIsXCJwdXJjaGFzZVwiLFwic3RvcmVcIl0sXCJzaHVmZmxlXCI6W1wibXVzaWNcIl0sXCJza2lwLWJhY2tcIjpbXCJtdXNpY1wiXSxcInNraXAtZm9yd2FyZFwiOltcIm11c2ljXCJdLFwic2xhY2tcIjpbXCJsb2dvXCJdLFwic2xhc2hcIjpbXCJiYW5cIixcIm5vXCJdLFwic2xpZGVyc1wiOltcInNldHRpbmdzXCIsXCJjb250cm9sc1wiXSxcInNtYXJ0cGhvbmVcIjpbXCJjZWxscGhvbmVcIixcImRldmljZVwiXSxcInNtaWxlXCI6W1wiZW1vamlcIixcImZhY2VcIixcImhhcHB5XCIsXCJnb29kXCIsXCJlbW90aW9uXCJdLFwic3BlYWtlclwiOltcImF1ZGlvXCIsXCJtdXNpY1wiXSxcInN0YXJcIjpbXCJib29rbWFya1wiLFwiZmF2b3JpdGVcIixcImxpa2VcIl0sXCJzdG9wLWNpcmNsZVwiOltcIm1lZGlhXCIsXCJtdXNpY1wiXSxcInN1blwiOltcImJyaWdodG5lc3NcIixcIndlYXRoZXJcIixcImxpZ2h0XCJdLFwic3VucmlzZVwiOltcIndlYXRoZXJcIixcInRpbWVcIixcIm1vcm5pbmdcIixcImRheVwiXSxcInN1bnNldFwiOltcIndlYXRoZXJcIixcInRpbWVcIixcImV2ZW5pbmdcIixcIm5pZ2h0XCJdLFwidGFibGV0XCI6W1wiZGV2aWNlXCJdLFwidGFnXCI6W1wibGFiZWxcIl0sXCJ0YXJnZXRcIjpbXCJsb2dvXCIsXCJidWxsc2V5ZVwiXSxcInRlcm1pbmFsXCI6W1wiY29kZVwiLFwiY29tbWFuZCBsaW5lXCIsXCJwcm9tcHRcIl0sXCJ0aGVybW9tZXRlclwiOltcInRlbXBlcmF0dXJlXCIsXCJjZWxzaXVzXCIsXCJmYWhyZW5oZWl0XCIsXCJ3ZWF0aGVyXCJdLFwidGh1bWJzLWRvd25cIjpbXCJkaXNsaWtlXCIsXCJiYWRcIixcImVtb3Rpb25cIl0sXCJ0aHVtYnMtdXBcIjpbXCJsaWtlXCIsXCJnb29kXCIsXCJlbW90aW9uXCJdLFwidG9nZ2xlLWxlZnRcIjpbXCJvblwiLFwib2ZmXCIsXCJzd2l0Y2hcIl0sXCJ0b2dnbGUtcmlnaHRcIjpbXCJvblwiLFwib2ZmXCIsXCJzd2l0Y2hcIl0sXCJ0b29sXCI6W1wic2V0dGluZ3NcIixcInNwYW5uZXJcIl0sXCJ0cmFzaFwiOltcImdhcmJhZ2VcIixcImRlbGV0ZVwiLFwicmVtb3ZlXCIsXCJiaW5cIl0sXCJ0cmFzaC0yXCI6W1wiZ2FyYmFnZVwiLFwiZGVsZXRlXCIsXCJyZW1vdmVcIixcImJpblwiXSxcInRyaWFuZ2xlXCI6W1wiZGVsdGFcIl0sXCJ0cnVja1wiOltcImRlbGl2ZXJ5XCIsXCJ2YW5cIixcInNoaXBwaW5nXCIsXCJ0cmFuc3BvcnRcIixcImxvcnJ5XCJdLFwidHZcIjpbXCJ0ZWxldmlzaW9uXCIsXCJzdHJlYW1cIl0sXCJ0d2l0Y2hcIjpbXCJsb2dvXCJdLFwidHdpdHRlclwiOltcImxvZ29cIixcInNvY2lhbFwiXSxcInR5cGVcIjpbXCJ0ZXh0XCJdLFwidW1icmVsbGFcIjpbXCJyYWluXCIsXCJ3ZWF0aGVyXCJdLFwidW5sb2NrXCI6W1wic2VjdXJpdHlcIl0sXCJ1c2VyLWNoZWNrXCI6W1wiZm9sbG93ZWRcIixcInN1YnNjcmliZWRcIl0sXCJ1c2VyLW1pbnVzXCI6W1wiZGVsZXRlXCIsXCJyZW1vdmVcIixcInVuZm9sbG93XCIsXCJ1bnN1YnNjcmliZVwiXSxcInVzZXItcGx1c1wiOltcIm5ld1wiLFwiYWRkXCIsXCJjcmVhdGVcIixcImZvbGxvd1wiLFwic3Vic2NyaWJlXCJdLFwidXNlci14XCI6W1wiZGVsZXRlXCIsXCJyZW1vdmVcIixcInVuZm9sbG93XCIsXCJ1bnN1YnNjcmliZVwiLFwidW5hdmFpbGFibGVcIl0sXCJ1c2VyXCI6W1wicGVyc29uXCIsXCJhY2NvdW50XCJdLFwidXNlcnNcIjpbXCJncm91cFwiXSxcInZpZGVvLW9mZlwiOltcImNhbWVyYVwiLFwibW92aWVcIixcImZpbG1cIl0sXCJ2aWRlb1wiOltcImNhbWVyYVwiLFwibW92aWVcIixcImZpbG1cIl0sXCJ2b2ljZW1haWxcIjpbXCJwaG9uZVwiXSxcInZvbHVtZVwiOltcIm11c2ljXCIsXCJzb3VuZFwiLFwibXV0ZVwiXSxcInZvbHVtZS0xXCI6W1wibXVzaWNcIixcInNvdW5kXCJdLFwidm9sdW1lLTJcIjpbXCJtdXNpY1wiLFwic291bmRcIl0sXCJ2b2x1bWUteFwiOltcIm11c2ljXCIsXCJzb3VuZFwiLFwibXV0ZVwiXSxcIndhdGNoXCI6W1wiY2xvY2tcIixcInRpbWVcIl0sXCJ3aWZpLW9mZlwiOltcImRpc2FibGVkXCJdLFwid2lmaVwiOltcImNvbm5lY3Rpb25cIixcInNpZ25hbFwiLFwid2lyZWxlc3NcIl0sXCJ3aW5kXCI6W1wid2VhdGhlclwiLFwiYWlyXCJdLFwieC1jaXJjbGVcIjpbXCJjYW5jZWxcIixcImNsb3NlXCIsXCJkZWxldGVcIixcInJlbW92ZVwiLFwidGltZXNcIixcImNsZWFyXCJdLFwieC1vY3RhZ29uXCI6W1wiZGVsZXRlXCIsXCJzdG9wXCIsXCJhbGVydFwiLFwid2FybmluZ1wiLFwidGltZXNcIixcImNsZWFyXCJdLFwieC1zcXVhcmVcIjpbXCJjYW5jZWxcIixcImNsb3NlXCIsXCJkZWxldGVcIixcInJlbW92ZVwiLFwidGltZXNcIixcImNsZWFyXCJdLFwieFwiOltcImNhbmNlbFwiLFwiY2xvc2VcIixcImRlbGV0ZVwiLFwicmVtb3ZlXCIsXCJ0aW1lc1wiLFwiY2xlYXJcIl0sXCJ5b3V0dWJlXCI6W1wibG9nb1wiLFwidmlkZW9cIixcInBsYXlcIl0sXCJ6YXAtb2ZmXCI6W1wiZmxhc2hcIixcImNhbWVyYVwiLFwibGlnaHRuaW5nXCJdLFwiemFwXCI6W1wiZmxhc2hcIixcImNhbWVyYVwiLFwibGlnaHRuaW5nXCJdLFwiem9vbS1pblwiOltcIm1hZ25pZnlpbmcgZ2xhc3NcIl0sXCJ6b29tLW91dFwiOltcIm1hZ25pZnlpbmcgZ2xhc3NcIl19O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy90by1zdmcuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3RvLXN2Zy5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9pY29ucyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vaWNvbnMgKi8gXCIuL3NyYy9pY29ucy5qc1wiKTtcblxudmFyIF9pY29uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pY29ucyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogQ3JlYXRlIGFuIFNWRyBzdHJpbmcuXG4gKiBAZGVwcmVjYXRlZFxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7T2JqZWN0fSBhdHRyc1xuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gdG9TdmcobmFtZSkge1xuICB2YXIgYXR0cnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gIGNvbnNvbGUud2FybignZmVhdGhlci50b1N2ZygpIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgZmVhdGhlci5pY29uc1tuYW1lXS50b1N2ZygpIGluc3RlYWQuJyk7XG5cbiAgaWYgKCFuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgcmVxdWlyZWQgYGtleWAgKGljb24gbmFtZSkgcGFyYW1ldGVyIGlzIG1pc3NpbmcuJyk7XG4gIH1cblxuICBpZiAoIV9pY29uczIuZGVmYXVsdFtuYW1lXSkge1xuICAgIHRocm93IG5ldyBFcnJvcignTm8gaWNvbiBtYXRjaGluZyBcXCcnICsgbmFtZSArICdcXCcuIFNlZSB0aGUgY29tcGxldGUgbGlzdCBvZiBpY29ucyBhdCBodHRwczovL2ZlYXRoZXJpY29ucy5jb20nKTtcbiAgfVxuXG4gIHJldHVybiBfaWNvbnMyLmRlZmF1bHRbbmFtZV0udG9TdmcoYXR0cnMpO1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSB0b1N2ZztcblxuLyoqKi8gfSksXG5cbi8qKiovIDA6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiBtdWx0aSBjb3JlLWpzL2VzL2FycmF5L2Zyb20gLi9zcmMvaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbl9fd2VicGFja19yZXF1aXJlX18oLyohIGNvcmUtanMvZXMvYXJyYXkvZnJvbSAqL1wiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9lcy9hcnJheS9mcm9tLmpzXCIpO1xubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAvaG9tZS90cmF2aXMvYnVpbGQvZmVhdGhlcmljb25zL2ZlYXRoZXIvc3JjL2luZGV4LmpzICovXCIuL3NyYy9pbmRleC5qc1wiKTtcblxuXG4vKioqLyB9KVxuXG4vKioqKioqLyB9KTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmVhdGhlci5qcy5tYXAiLCJpbXBvcnQgeyB2aWV3RGF0YSB9IGZyb20gXCIuL3ZpZXdEYXRhLmpzXCI7XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXG4gIFwiRE9NQ29udGVudExvYWRlZFwiLFxuICBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IHRpZCA9IDA7XG4gICAgJChcIiNwcmV2aW91cy1idG5cIikuY2xpY2socHJldmlvdXNWaWV3KTtcbiAgICAkKFwiI25leHQtYnRuXCIpLmNsaWNrKG5leHRWaWV3KTtcbiAgICAkKFwiI3pvb20taW4tYnRuXCIpLm1vdXNlZG93bigoKSA9PiAodGlkID0gc2V0SW50ZXJ2YWwoKCkgPT4gem9vbShcImluXCIpLCA1KSkpO1xuICAgICQoXCIjem9vbS1vdXQtYnRuXCIpLm1vdXNlZG93bihcbiAgICAgICgpID0+ICh0aWQgPSBzZXRJbnRlcnZhbCgoKSA9PiB6b29tKFwib3V0XCIpLCA1KSlcbiAgICApO1xuICAgICQoXCIjem9vbS1pbi1idG4sICN6b29tLW91dC1idG5cIikub24oXCJtb3VzZWxlYXZlIG1vdXNldXBcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiBjbGVhclRpbWVvdXQodGlkKSwgNTAwKTtcbiAgICB9KTtcblxuICAgICQoXCIubmF2LWxpbmtcIikub24oXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgaWYgKCQoXCJpZnJhbWUjeXQtcGxheWVyXCIpLmxlbmd0aCAhPSAwKSB7XG4gICAgICAgICQoXCIuc2tpcC12aWRlby1idXR0b25cIikuY2xpY2soKTtcbiAgICAgIH1cbiAgICAgIGxldCBlbmFibGVWaWRlbyA9ICQoZS5jdXJyZW50VGFyZ2V0KS5kYXRhKFwiZW5hYmxlLXZpZGVvXCIpO1xuICAgICAgZ29Ub1NjcmVlbigkKGUuY3VycmVudFRhcmdldCkuZGF0YShcInZpZXctaWRcIikpO1xuICAgIH0pO1xuXG4gICAgJChcIi5uYXYtaXRlbS1ncm91cFwiKS5vbihcIm1vdXNlbGVhdmVcIiwgKGUpID0+IHtcbiAgICAgIHdpbmRvdy5zci5jbGVhbigkKFwiLnZpZXctc2VsZWN0b3IsIC52aWV3LXNlbGVjdG9yIHNwYW5cIikpO1xuICAgICAgJChcIi52aWV3LXNlbGVjdG9yLCAudmlldy1zZWxlY3RvciBzcGFuXCIpLmNzcyhcInZpc2liaWxpdHlcIiwgXCJoaWRkZW5cIik7XG4gICAgfSk7XG5cbiAgICAkKFwiLm5hdi1pdGVtLWdyb3VwXCIpLm9uKFwiY2xpY2sgbW91c2VlbnRlclwiLCAoZSkgPT4ge1xuICAgICAgbGV0IHZpZXdTZWxlY3RvciA9ICQoZS5jdXJyZW50VGFyZ2V0KS5jaGlsZHJlbihcIi52aWV3LXNlbGVjdG9yXCIpO1xuICAgICAgaWYgKHZpZXdTZWxlY3Rvci5jc3MoXCJ2aXNpYmlsaXR5XCIpID09PSBcImhpZGRlblwiKSB7XG4gICAgICAgIC8vIGNsZWFuIHZpc2libGUgb25lc1xuICAgICAgICB3aW5kb3cuc3IuY2xlYW4oJChcIi52aWV3LXNlbGVjdG9yLCAudmlldy1zZWxlY3RvciBzcGFuXCIpKTtcbiAgICAgICAgJChcIi52aWV3LXNlbGVjdG9yLCAudmlldy1zZWxlY3RvciBzcGFuXCIpLmNzcyhcInZpc2liaWxpdHlcIiwgXCJoaWRkZW5cIik7XG4gICAgICAgIC8vIGV4cGFuZCBjbGlja2VkIG9uZVxuICAgICAgICB3aW5kb3cuc3IucmV2ZWFsKHZpZXdTZWxlY3Rvciwge1xuICAgICAgICAgIG9yaWdpbjogXCJyaWdodFwiLFxuICAgICAgICAgIGRpc3RhbmNlOiBcIjUwcHhcIixcbiAgICAgICAgfSk7XG4gICAgICAgIHdpbmRvdy5zci5yZXZlYWwodmlld1NlbGVjdG9yLmNoaWxkcmVuKFwic3BhblwiKSwge1xuICAgICAgICAgIGRlbGF5OiAxMDAsXG4gICAgICAgICAgaW50ZXJ2YWw6IDUwLFxuICAgICAgICAgIG9yaWdpbjogXCJyaWdodFwiLFxuICAgICAgICAgIGRpc3RhbmNlOiBcIjUwcHhcIixcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cuc3IuY2xlYW4odmlld1NlbGVjdG9yKTtcbiAgICAgICAgd2luZG93LnNyLmNsZWFuKHZpZXdTZWxlY3Rvci5jaGlsZHJlbihcInNwYW5cIikpO1xuICAgICAgICAkKFwiLnZpZXctc2VsZWN0b3IsIC52aWV3LXNlbGVjdG9yIHNwYW5cIikuY3NzKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgICQoXCIuc2tpcC12aWRlby1idXR0b25cIikuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgJChcIiN5dC12aWRlb1wiKS5mYWRlT3V0KCk7XG4gICAgICAkKFwiI3l0LXBsYXllclwiKS5yZW1vdmUoKTtcbiAgICAgICQoXCIjeXQtdmlkZW9cIikuYXBwZW5kKCc8ZGl2IGlkPVwieXQtcGxheWVyXCI+PC9kaXY+Jyk7XG4gICAgICAkKHRoaXMpLmNzcyhcInZpc2liaWxpdHlcIiwgXCJoaWRkZW5cIik7XG4gICAgICAkKFwiLmNvbnRyb2xzXCIpLmZhZGVJbigpO1xuICAgICAgJChcIi5sb2dvXCIpLmZhZGVJbigpO1xuICAgICAgd2luZG93LmNoYW5nZVZpZXdOYW1lKFxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYS10b3VyXCIpLmNvbXBvbmVudHMudG91ci5kYXRhLmN1cnJlbnRfcGFub19pZFxuICAgICAgKTtcbiAgICB9KTtcblxuICAgICQoXCIjdmlldy1uYW1lPiN0aXRsZVwiKS5vbihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIGxldCB0b3VyQ29tcG9uZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImEtdG91clwiKS5jb21wb25lbnRzLnRvdXI7XG4gICAgICBsZXQgdmlld0lkID0gdG91ckNvbXBvbmVudC5kYXRhLmN1cnJlbnRfcGFub19pZDtcbiAgICAgIGxldCBpbml0Vmlld0lkID0gdG91ckNvbXBvbmVudC5nZXRJbml0aWFsVmlld0lkKCk7XG4gICAgICBpZiAodmlld0lkICYmIHZpZXdJZCAhPSBpbml0Vmlld0lkKSB7XG4gICAgICAgIGlmICgkKFwiaWZyYW1lI3l0LXBsYXllclwiKS5sZW5ndGggIT0gMCkge1xuICAgICAgICAgICQoXCIuc2tpcC12aWRlby1idXR0b25cIikuY2xpY2soKTtcbiAgICAgICAgfVxuICAgICAgICBnb1RvU2NyZWVuKGluaXRWaWV3SWQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgJChcIiNkZXNjcmlwdGlvbi10ZXh0XCIpLm9uKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgaWYgKCQoXCJpZnJhbWUjeXQtcGxheWVyXCIpLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIGxldCB0b3VyQ29tcG9uZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImEtdG91clwiKS5jb21wb25lbnRzLnRvdXI7XG4gICAgICAgIGxldCB2aWV3SWQgPSB0b3VyQ29tcG9uZW50LmRhdGEuY3VycmVudF9wYW5vX2lkLnNwbGl0KFwiX1wiKTtcbiAgICAgICAgaWYgKHZpZXdJZFsxXSA9PSBcIlRFUlwiIHx8IHZpZXdJZFsxXSA9PSBcIlNFTUlcIiB8fCB2aWV3SWRbMV0gPT0gXCJERVRcIikge1xuICAgICAgICAgIGlmICh2aWV3SWRbMl0gPT0gXCJDRU5URVJcIikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2aWV3SWRbMl0gPSBcIkNFTlRFUlwiO1xuICAgICAgICAgIGdvVG9TY3JlZW4odmlld0lkLmpvaW4oXCJfXCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgICQod2luZG93KS5vbihcIndoZWVsIHRvdWNobW92ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBkZWx0YSA9IE1hdGguc2lnbihldmVudC5kZWx0YVkpO1xuICAgICAgY29uc29sZS5sb2coZGVsdGEpO1xuICAgICAgaWYgKGRlbHRhID09IDEpIHtcbiAgICAgICAgJCh3aW5kb3cpLm9mZihcIndoZWVsIHRvdWNobW92ZVwiKTtcbiAgICAgICAgaGlkZUludHJvKCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgJChcIi5hbWVuaXRpZXMsIC5pbnRyb1wiKS5vbmUoXCJjbGlja1wiLCBoaWRlSW50cm8pO1xuICB9LFxuICBmYWxzZVxuKTtcblxubGV0IHJvdGF0ZUhvcml6b250YWwgPSAodmFsdWUpID0+IHtcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNyaWdcIikub2JqZWN0M0Qucm90YXRlWSh2YWx1ZSk7XG59O1xuXG5sZXQgaGlkZUludHJvID0gKCkgPT4ge1xuICAkKFwiLmludHJvXCIpLmZhZGVPdXQoKTtcbiAgbGV0IHRvdXJDb21wb25lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYS10b3VyXCIpLmNvbXBvbmVudHNbXCJ0b3VyXCJdO1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICB0b3VyQ29tcG9uZW50LnNldEhvdHNwb3RzVmlzaWJsZSgpO1xuICB9LCAxMDApO1xuICB3aW5kb3cuc3IucmV2ZWFsKFwiLmFtZW5pdHlcIiwge1xuICAgIGRlbGF5OiAyMDAsXG4gICAgaW50ZXJ2YWw6IDEwMCxcbiAgICBvcmlnaW46IFwibGVmdFwiLFxuICAgIGRpc3RhbmNlOiBcIjUwcHhcIixcbiAgfSk7XG4gIHdpbmRvdy5zci5yZXZlYWwoXCIuY29udHJvbFwiLCB7XG4gICAgZGVsYXk6IDIwMCxcbiAgICBpbnRlcnZhbDogMTAwLFxuICAgIHNjYWxlOiAwLjg1LFxuICB9KTtcbiAgJChcIiN2aWV3LW5hbWVcIikuZGVsYXkoMjAwKS5mYWRlSW4oKTtcbiAgJChcImh0bWwsIGJvZHlcIikuY3NzKHtcbiAgICBvdmVyZmxvdzogXCJoaWRkZW5cIixcbiAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICB9KTtcbiAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgJCh3aW5kb3cpLm9uKFwid2hlZWxcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCQoXCJpZnJhbWUjeXQtcGxheWVyXCIpLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIGNvbnN0IGRlbHRhID0gTWF0aC5zaWduKGV2ZW50LmRlbHRhWSk7XG4gICAgICAgIGlmIChkZWx0YSA9PSAxKSB7XG4gICAgICAgICAgem9vbShcImluXCIpO1xuICAgICAgICB9IGVsc2UgaWYgKGRlbHRhID09IC0xKSB7XG4gICAgICAgICAgem9vbShcIm91dFwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9LCAxNTAwKTtcbn07XG5cbmxldCB6b29tID0gKG1vZGUpID0+IHtcbiAgbGV0IGNhbWVyYSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJhLWNhbWVyYVwiKTtcbiAgbGV0IHpvb21MZXZlbCA9IGNhbWVyYS5nZXRBdHRyaWJ1dGUoXCJ6b29tXCIpO1xuICBpZiAobW9kZSA9PSBcImluXCIpIHtcbiAgICB6b29tTGV2ZWwgPSB6b29tTGV2ZWwgPCAzID8gcGFyc2VGbG9hdCh6b29tTGV2ZWwpICsgMC4wMiA6IDM7XG4gIH0gZWxzZSB7XG4gICAgem9vbUxldmVsID0gem9vbUxldmVsID4gMC44ID8gcGFyc2VGbG9hdCh6b29tTGV2ZWwpIC0gMC4wMiA6IDAuODtcbiAgfVxuICBjYW1lcmEuc2V0QXR0cmlidXRlKFwiem9vbVwiLCB6b29tTGV2ZWwpO1xufTtcblxubGV0IG5leHRWaWV3ID0gKCkgPT4ge1xuICBsZXQgcGFub3JhbWEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYS1wYW5vcmFtYSNtYWluXCIpO1xuICBsZXQgbmV4dFNjZW5lSWQgPSBwYW5vcmFtYS5jb21wb25lbnRzW1wicGFub3JhbWFcIl0uZGF0YS5uZXh0O1xuXG4gIGlmIChuZXh0U2NlbmVJZCkge1xuICAgIGdvVG9TY3JlZW4obmV4dFNjZW5lSWQpO1xuICB9XG59O1xuXG5sZXQgcHJldmlvdXNWaWV3ID0gKCkgPT4ge1xuICBsZXQgdG91ciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJhLXRvdXJcIikuY29tcG9uZW50cy50b3VyO1xuICBsZXQgcHJldmlvdXNfcGFub19pZHMgPSBbLi4udG91ci5kYXRhLnByZXZpb3VzX3Bhbm9faWRzXTtcbiAgbGV0IG5leHRJZCA9IHByZXZpb3VzX3Bhbm9faWRzLnBvcCgpO1xuICBpZiAobmV4dElkKSB7XG4gICAgdG91ci5lbC5zZXRBdHRyaWJ1dGUoXCJ0b3VyXCIsIFwicHJldmlvdXNfcGFub19pZHNcIiwgcHJldmlvdXNfcGFub19pZHMpO1xuICAgIHRvdXIubG9hZFNjZW5lSWQobmV4dElkKTtcbiAgfVxufTtcblxubGV0IGdvVG9TY3JlZW4gPSAoc2NyZWVuSWQpID0+IHtcbiAgaWYgKHNjcmVlbklkKSB7XG4gICAgdmFyIHRvdXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYS10b3VyXCIpLmNvbXBvbmVudHMudG91cjtcbiAgICB0b3VyLnB1c2hQcmV2aW91c1Bhbm9JZHMoKTtcbiAgICB0b3VyLmxvYWRTY2VuZUlkKHNjcmVlbklkLCBmYWxzZSk7XG4gIH1cbn07XG5cbndpbmRvdy5kaXNwbGF5RGltZW50aW9uID0gKGlkKSA9PiB7XG4gICQoXCIjZGltZW50aW9uLWluZm9cIikuZW1wdHkoKTtcbiAgbGV0IHNwbGl0TmFtZSA9IGlkLnNwbGl0KFwiX1wiKTtcbiAgbGV0IGVuZGluZ0lkID0gaWQuc2xpY2UoLTIpO1xuICBpZiAoXG4gICAgZW5kaW5nSWQgPT0gXCJFUlwiIHx8XG4gICAgZW5kaW5nSWQgPT0gXCJDMVwiIHx8XG4gICAgZW5kaW5nSWQgPT0gXCJDMlwiIHx8XG4gICAgZW5kaW5nSWQgPT0gXCJDM1wiXG4gICkge1xuICAgIGxldCBzcmMgPSBgYXNzZXRzL2luZm8vJHtpZC5zcGxpdChcIl9cIikuc2xpY2UoMCwgMikuam9pbihcIl9cIil9LnBuZ2A7XG4gICAgJChcIiNkaW1lbnRpb24taW5mb1wiKS5hcHBlbmQoYDxpbWcgc3JjPVwiJHtzcmN9XCIgYWx0PVwiRGltZW50aW9uXCIgLz5gKTtcbiAgfVxuICBsZXQgdmlkZW9MaW5rID0gJChcIiN2aWRlby1wbGF5LWxpbmtcIik7XG4gIGlmIChcbiAgICBzcGxpdE5hbWVbMV0gPT0gXCJURVJcIiB8fFxuICAgIHNwbGl0TmFtZVsxXSA9PSBcIlNFTUlcIiB8fFxuICAgIHNwbGl0TmFtZVsxXSA9PSBcIkRFVFwiXG4gICkge1xuICAgIGxldCB0b3VyQ29tcG9uZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImEtdG91clwiKS5jb21wb25lbnRzLnRvdXI7XG4gICAgbGV0IHZpZXdJZCA9IHRvdXJDb21wb25lbnQuZGF0YS5jdXJyZW50X3Bhbm9faWQ7XG4gICAgbGV0IHZpZGVvSWQgPSB2aWV3RGF0YVt2aWV3SWRdLnZpZGVvSWQ7XG4gICAgbGV0IHZpZGVvVXJsID0gYGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkLyR7dmlkZW9JZH0/ZnM9MSZhdXRvcGxheT0xYDtcbiAgICB2aWRlb0xpbmsuZmFkZUluKCk7XG4gICAgdmlkZW9MaW5rLnBhcmVudCgpLmF0dHIoXCJocmVmXCIsIHZpZGVvVXJsKTtcbiAgfSBlbHNlIHtcbiAgICB2aWRlb0xpbmsuZmFkZU91dCgpO1xuICB9XG59O1xuXG53aW5kb3cuY2hhbmdlVmlld05hbWUgPSAoaWQpID0+IHtcbiAgdmFyIHRleHQgPSB2aWV3RGF0YVtpZF0udmlld0Rpc3BsYXlUZXh0O1xuICBpZiAodGV4dCAmJiAkKFwiaWZyYW1lI3l0LXBsYXllclwiKS5sZW5ndGggPT0gMCkge1xuICAgICQoXCIjZGVzY3JpcHRpb24tdGV4dFwiKS50ZXh0KHRleHQpO1xuICB9XG5cbiAgaWYgKGlkID09IFwiTVAzX09WRVJWSUVXXCIgfHwgaWQgPT0gXCJCQl9PVkVSVklFV1wiKSB7XG4gICAgJChcIiN2aWV3LW5hbWVcIikuY2hpbGRyZW4oKS5yZW1vdmVDbGFzcyhcImVmZmVjdC11bmRlcmxpbmVcIik7XG4gICAgJChcIiN2aWV3LW5hbWUgaDNcIikucmVtb3ZlQXR0cihcImRhdGEtYmFsbG9vbi1wb3NcIik7XG4gICAgJChcIiN2aWV3LW5hbWUgcFwiKS5yZW1vdmVBdHRyKFwiZGF0YS1iYWxsb29uLXBvc1wiKTtcbiAgfSBlbHNlIHtcbiAgICAkKFwiI3ZpZXctbmFtZVwiKS5jaGlsZHJlbigpLmFkZENsYXNzKFwiZWZmZWN0LXVuZGVybGluZVwiKTtcbiAgICAkKFwiI3ZpZXctbmFtZSBoM1wiKS5hdHRyKFwiZGF0YS1iYWxsb29uLXBvc1wiLCBcInJpZ2h0XCIpO1xuICAgICQoXCIjdmlldy1uYW1lIHBcIikuYXR0cihcImRhdGEtYmFsbG9vbi1wb3NcIiwgXCJyaWdodFwiKTtcbiAgfVxufTtcblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlwcmVzc1wiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgaWYgKGV2ZW50LmtleUNvZGUgPT0gMzIpIHtcbiAgICBpZiAoJChcImlmcmFtZSN5dC1wbGF5ZXJcIikubGVuZ3RoICE9IDApIHtcbiAgICAgIGlmICh3aW5kb3cueXRQbGF5ZXIuZ2V0UGxheWVyU3RhdGUoKSA9PSAxKSB7XG4gICAgICAgIHdpbmRvdy55dFBsYXllci5wYXVzZVZpZGVvKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cueXRQbGF5ZXIucGxheVZpZGVvKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcbiIsIiFmdW5jdGlvbih0KXtmdW5jdGlvbiBlKHIpe2lmKG5bcl0pcmV0dXJuIG5bcl0uZXhwb3J0czt2YXIgbz1uW3JdPXtpOnIsbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gdFtyXS5jYWxsKG8uZXhwb3J0cyxvLG8uZXhwb3J0cyxlKSxvLmw9ITAsby5leHBvcnRzfXZhciBuPXt9O2UubT10LGUuYz1uLGUuaT1mdW5jdGlvbih0KXtyZXR1cm4gdH0sZS5kPWZ1bmN0aW9uKHQsbixyKXtlLm8odCxuKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsbix7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITAsZ2V0OnJ9KX0sZS5uPWZ1bmN0aW9uKHQpe3ZhciBuPXQmJnQuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiB0LmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIHR9O3JldHVybiBlLmQobixcImFcIixuKSxufSxlLm89ZnVuY3Rpb24odCxlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsZSl9LGUucD1cIlwiLGUoZS5zPTQ2KX0oW2Z1bmN0aW9uKHQsZSl7dmFyIG49dC5leHBvcnRzPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJndpbmRvdy5NYXRoPT1NYXRoP3dpbmRvdzpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZi5NYXRoPT1NYXRoP3NlbGY6RnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1wibnVtYmVyXCI9PXR5cGVvZiBfX2cmJihfX2c9bil9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKDM3KShcIndrc1wiKSxvPW4oNDApLGk9bigwKS5TeW1ib2wsdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBpOyh0LmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuIHJbdF18fChyW3RdPXUmJmlbdF18fCh1P2k6bykoXCJTeW1ib2wuXCIrdCkpfSkuc3RvcmU9cn0sZnVuY3Rpb24odCxlKXt2YXIgbj10LmV4cG9ydHM9e3ZlcnNpb246XCIyLjYuMTFcIn07XCJudW1iZXJcIj09dHlwZW9mIF9fZSYmKF9fZT1uKX0sZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oOCk7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe2lmKCFyKHQpKXRocm93IFR5cGVFcnJvcih0K1wiIGlzIG5vdCBhbiBvYmplY3QhXCIpO3JldHVybiB0fX0sZnVuY3Rpb24odCxlLG4pe3QuZXhwb3J0cz0hbigxNikoZnVuY3Rpb24oKXtyZXR1cm4gNyE9T2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LFwiYVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gN319KS5hfSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKDApLG89bigyKSxpPW4oNyksdT1uKDYpLGE9bigxMyksYz1mdW5jdGlvbih0LGUsbil7dmFyIHMsZixsLHA9dCZjLkYsdj10JmMuRyxkPXQmYy5TLGg9dCZjLlAseT10JmMuQixtPXQmYy5XLHg9dj9vOm9bZV18fChvW2VdPXt9KSxnPXgucHJvdG90eXBlLF89dj9yOmQ/cltlXToocltlXXx8e30pLnByb3RvdHlwZTt2JiYobj1lKTtmb3IocyBpbiBuKShmPSFwJiZfJiZ2b2lkIDAhPT1fW3NdKSYmYSh4LHMpfHwobD1mP19bc106bltzXSx4W3NdPXYmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIF9bc10/bltzXTp5JiZmP2kobCxyKTptJiZfW3NdPT1sP2Z1bmN0aW9uKHQpe3ZhciBlPWZ1bmN0aW9uKGUsbixyKXtpZih0aGlzIGluc3RhbmNlb2YgdCl7c3dpdGNoKGFyZ3VtZW50cy5sZW5ndGgpe2Nhc2UgMDpyZXR1cm4gbmV3IHQ7Y2FzZSAxOnJldHVybiBuZXcgdChlKTtjYXNlIDI6cmV0dXJuIG5ldyB0KGUsbil9cmV0dXJuIG5ldyB0KGUsbixyKX1yZXR1cm4gdC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9O3JldHVybiBlLnByb3RvdHlwZT10LnByb3RvdHlwZSxlfShsKTpoJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBsP2koRnVuY3Rpb24uY2FsbCxsKTpsLGgmJigoeC52aXJ0dWFsfHwoeC52aXJ0dWFsPXt9KSlbc109bCx0JmMuUiYmZyYmIWdbc10mJnUoZyxzLGwpKSl9O2MuRj0xLGMuRz0yLGMuUz00LGMuUD04LGMuQj0xNixjLlc9MzIsYy5VPTY0LGMuUj0xMjgsdC5leHBvcnRzPWN9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKDEwKSxvPW4oMTkpO3QuZXhwb3J0cz1uKDQpP2Z1bmN0aW9uKHQsZSxuKXtyZXR1cm4gci5mKHQsZSxvKDEsbikpfTpmdW5jdGlvbih0LGUsbil7cmV0dXJuIHRbZV09bix0fX0sZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oMTEpO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUsbil7aWYocih0KSx2b2lkIDA9PT1lKXJldHVybiB0O3N3aXRjaChuKXtjYXNlIDE6cmV0dXJuIGZ1bmN0aW9uKG4pe3JldHVybiB0LmNhbGwoZSxuKX07Y2FzZSAyOnJldHVybiBmdW5jdGlvbihuLHIpe3JldHVybiB0LmNhbGwoZSxuLHIpfTtjYXNlIDM6cmV0dXJuIGZ1bmN0aW9uKG4scixvKXtyZXR1cm4gdC5jYWxsKGUsbixyLG8pfX1yZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdC5hcHBseShlLGFyZ3VtZW50cyl9fX0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIHQ/bnVsbCE9PXQ6XCJmdW5jdGlvblwiPT10eXBlb2YgdH19LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXt9fSxmdW5jdGlvbih0LGUsbil7dmFyIHI9bigzKSxvPW4oNjApLGk9big3NyksdT1PYmplY3QuZGVmaW5lUHJvcGVydHk7ZS5mPW4oNCk/T2JqZWN0LmRlZmluZVByb3BlcnR5OmZ1bmN0aW9uKHQsZSxuKXtpZihyKHQpLGU9aShlLCEwKSxyKG4pLG8pdHJ5e3JldHVybiB1KHQsZSxuKX1jYXRjaCh0KXt9aWYoXCJnZXRcImluIG58fFwic2V0XCJpbiBuKXRocm93IFR5cGVFcnJvcihcIkFjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIVwiKTtyZXR1cm5cInZhbHVlXCJpbiBuJiYodFtlXT1uLnZhbHVlKSx0fX0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBUeXBlRXJyb3IodCtcIiBpcyBub3QgYSBmdW5jdGlvbiFcIik7cmV0dXJuIHR9fSxmdW5jdGlvbih0LGUpe3ZhciBuPXt9LnRvU3RyaW5nO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gbi5jYWxsKHQpLnNsaWNlKDgsLTEpfX0sZnVuY3Rpb24odCxlKXt2YXIgbj17fS5oYXNPd25Qcm9wZXJ0eTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtyZXR1cm4gbi5jYWxsKHQsZSl9fSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0KXtpZih2b2lkIDA9PXQpdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiK3QpO3JldHVybiB0fX0sZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oOCksbz1uKDApLmRvY3VtZW50LGk9cihvKSYmcihvLmNyZWF0ZUVsZW1lbnQpO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gaT9vLmNyZWF0ZUVsZW1lbnQodCk6e319fSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0KXt0cnl7cmV0dXJuISF0KCl9Y2F0Y2godCl7cmV0dXJuITB9fX0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ITB9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKHQpe3ZhciBlLG47dGhpcy5wcm9taXNlPW5ldyB0KGZ1bmN0aW9uKHQscil7aWYodm9pZCAwIT09ZXx8dm9pZCAwIT09bil0aHJvdyBUeXBlRXJyb3IoXCJCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvclwiKTtlPXQsbj1yfSksdGhpcy5yZXNvbHZlPW8oZSksdGhpcy5yZWplY3Q9byhuKX12YXIgbz1uKDExKTt0LmV4cG9ydHMuZj1mdW5jdGlvbih0KXtyZXR1cm4gbmV3IHIodCl9fSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe3JldHVybntlbnVtZXJhYmxlOiEoMSZ0KSxjb25maWd1cmFibGU6ISgyJnQpLHdyaXRhYmxlOiEoNCZ0KSx2YWx1ZTplfX19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKDEwKS5mLG89bigxMyksaT1uKDEpKFwidG9TdHJpbmdUYWdcIik7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxuKXt0JiYhbyh0PW4/dDp0LnByb3RvdHlwZSxpKSYmcih0LGkse2NvbmZpZ3VyYWJsZTohMCx2YWx1ZTplfSl9fSxmdW5jdGlvbih0LGUsbil7dmFyIHI9bigzNykoXCJrZXlzXCIpLG89big0MCk7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiByW3RdfHwoclt0XT1vKHQpKX19LGZ1bmN0aW9uKHQsZSl7dmFyIG49TWF0aC5jZWlsLHI9TWF0aC5mbG9vcjt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuIGlzTmFOKHQ9K3QpPzA6KHQ+MD9yOm4pKHQpfX0sZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oMjkpLG89bigxNCk7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiByKG8odCkpfX0sZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oMjIpLG89TWF0aC5taW47dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiB0PjA/byhyKHQpLDkwMDcxOTkyNTQ3NDA5OTEpOjB9fSxmdW5jdGlvbih0LGUsbil7dmFyIHI9bigxNCk7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiBPYmplY3Qocih0KSl9fSxmdW5jdGlvbih0LGUsbil7dmFyIHI9bigxMiksbz1uKDEpKFwidG9TdHJpbmdUYWdcIiksaT1cIkFyZ3VtZW50c1wiPT1yKGZ1bmN0aW9uKCl7cmV0dXJuIGFyZ3VtZW50c30oKSksdT1mdW5jdGlvbih0LGUpe3RyeXtyZXR1cm4gdFtlXX1jYXRjaCh0KXt9fTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7dmFyIGUsbixhO3JldHVybiB2b2lkIDA9PT10P1wiVW5kZWZpbmVkXCI6bnVsbD09PXQ/XCJOdWxsXCI6XCJzdHJpbmdcIj09dHlwZW9mKG49dShlPU9iamVjdCh0KSxvKSk/bjppP3IoZSk6XCJPYmplY3RcIj09KGE9cihlKSkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGUuY2FsbGVlP1wiQXJndW1lbnRzXCI6YX19LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPVwiY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mXCIuc3BsaXQoXCIsXCIpfSxmdW5jdGlvbih0LGUsbil7dmFyIHI9bigwKS5kb2N1bWVudDt0LmV4cG9ydHM9ciYmci5kb2N1bWVudEVsZW1lbnR9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKDEyKTt0LmV4cG9ydHM9T2JqZWN0KFwielwiKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKT9PYmplY3Q6ZnVuY3Rpb24odCl7cmV0dXJuXCJTdHJpbmdcIj09cih0KT90LnNwbGl0KFwiXCIpOk9iamVjdCh0KX19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKDkpLG89bigxKShcIml0ZXJhdG9yXCIpLGk9QXJyYXkucHJvdG90eXBlO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwIT09dCYmKHIuQXJyYXk9PT10fHxpW29dPT09dCl9fSxmdW5jdGlvbih0LGUsbil7dmFyIHI9bigzKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlLG4sbyl7dHJ5e3JldHVybiBvP2UocihuKVswXSxuWzFdKTplKG4pfWNhdGNoKGUpe3ZhciBpPXQucmV0dXJuO3Rocm93IHZvaWQgMCE9PWkmJnIoaS5jYWxsKHQpKSxlfX19LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1uKDE3KSxvPW4oNSksaT1uKDczKSx1PW4oNiksYT1uKDkpLGM9big2Mikscz1uKDIwKSxmPW4oNjkpLGw9bigxKShcIml0ZXJhdG9yXCIpLHA9IShbXS5rZXlzJiZcIm5leHRcImluW10ua2V5cygpKSx2PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9O3QuZXhwb3J0cz1mdW5jdGlvbih0LGUsbixkLGgseSxtKXtjKG4sZSxkKTt2YXIgeCxnLF8sYj1mdW5jdGlvbih0KXtpZighcCYmdCBpbiBBKXJldHVybiBBW3RdO3N3aXRjaCh0KXtjYXNlXCJrZXlzXCI6Y2FzZVwidmFsdWVzXCI6cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBuKHRoaXMsdCl9fXJldHVybiBmdW5jdGlvbigpe3JldHVybiBuZXcgbih0aGlzLHQpfX0sdz1lK1wiIEl0ZXJhdG9yXCIsTT1cInZhbHVlc1wiPT1oLEU9ITEsQT10LnByb3RvdHlwZSxTPUFbbF18fEFbXCJAQGl0ZXJhdG9yXCJdfHxoJiZBW2hdLFQ9U3x8YihoKSxqPWg/TT9iKFwiZW50cmllc1wiKTpUOnZvaWQgMCxPPVwiQXJyYXlcIj09ZT9BLmVudHJpZXN8fFM6UztpZihPJiYoXz1mKE8uY2FsbChuZXcgdCkpKSE9PU9iamVjdC5wcm90b3R5cGUmJl8ubmV4dCYmKHMoXyx3LCEwKSxyfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBfW2xdfHx1KF8sbCx2KSksTSYmUyYmXCJ2YWx1ZXNcIiE9PVMubmFtZSYmKEU9ITAsVD1mdW5jdGlvbigpe3JldHVybiBTLmNhbGwodGhpcyl9KSxyJiYhbXx8IXAmJiFFJiZBW2xdfHx1KEEsbCxUKSxhW2VdPVQsYVt3XT12LGgpaWYoeD17dmFsdWVzOk0/VDpiKFwidmFsdWVzXCIpLGtleXM6eT9UOmIoXCJrZXlzXCIpLGVudHJpZXM6an0sbSlmb3IoZyBpbiB4KWcgaW4gQXx8aShBLGcseFtnXSk7ZWxzZSBvKG8uUCtvLkYqKHB8fEUpLGUseCk7cmV0dXJuIHh9fSxmdW5jdGlvbih0LGUsbil7dmFyIHI9bigxKShcIml0ZXJhdG9yXCIpLG89ITE7dHJ5e3ZhciBpPVs3XVtyXSgpO2kucmV0dXJuPWZ1bmN0aW9uKCl7bz0hMH0sQXJyYXkuZnJvbShpLGZ1bmN0aW9uKCl7dGhyb3cgMn0pfWNhdGNoKHQpe310LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtpZighZSYmIW8pcmV0dXJuITE7dmFyIG49ITE7dHJ5e3ZhciBpPVs3XSx1PWlbcl0oKTt1Lm5leHQ9ZnVuY3Rpb24oKXtyZXR1cm57ZG9uZTpuPSEwfX0saVtyXT1mdW5jdGlvbigpe3JldHVybiB1fSx0KGkpfWNhdGNoKHQpe31yZXR1cm4gbn19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKDcwKSxvPW4oMjcpO3QuZXhwb3J0cz1PYmplY3Qua2V5c3x8ZnVuY3Rpb24odCl7cmV0dXJuIHIodCxvKX19LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3RyeXtyZXR1cm57ZTohMSx2OnQoKX19Y2F0Y2godCl7cmV0dXJue2U6ITAsdjp0fX19fSxmdW5jdGlvbih0LGUsbil7dmFyIHI9bigzKSxvPW4oOCksaT1uKDE4KTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtpZihyKHQpLG8oZSkmJmUuY29uc3RydWN0b3I9PT10KXJldHVybiBlO3ZhciBuPWkuZih0KTtyZXR1cm4oMCxuLnJlc29sdmUpKGUpLG4ucHJvbWlzZX19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKDIpLG89bigwKSxpPW9bXCJfX2NvcmUtanNfc2hhcmVkX19cIl18fChvW1wiX19jb3JlLWpzX3NoYXJlZF9fXCJdPXt9KTsodC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGlbdF18fChpW3RdPXZvaWQgMCE9PWU/ZTp7fSl9KShcInZlcnNpb25zXCIsW10pLnB1c2goe3ZlcnNpb246ci52ZXJzaW9uLG1vZGU6bigxNyk/XCJwdXJlXCI6XCJnbG9iYWxcIixjb3B5cmlnaHQ6XCLCqSAyMDE5IERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpXCJ9KX0sZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oMyksbz1uKDExKSxpPW4oMSkoXCJzcGVjaWVzXCIpO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe3ZhciBuLHU9cih0KS5jb25zdHJ1Y3RvcjtyZXR1cm4gdm9pZCAwPT09dXx8dm9pZCAwPT0obj1yKHUpW2ldKT9lOm8obil9fSxmdW5jdGlvbih0LGUsbil7dmFyIHIsbyxpLHU9big3KSxhPW4oNjEpLGM9bigyOCkscz1uKDE1KSxmPW4oMCksbD1mLnByb2Nlc3MscD1mLnNldEltbWVkaWF0ZSx2PWYuY2xlYXJJbW1lZGlhdGUsZD1mLk1lc3NhZ2VDaGFubmVsLGg9Zi5EaXNwYXRjaCx5PTAsbT17fSx4PWZ1bmN0aW9uKCl7dmFyIHQ9K3RoaXM7aWYobS5oYXNPd25Qcm9wZXJ0eSh0KSl7dmFyIGU9bVt0XTtkZWxldGUgbVt0XSxlKCl9fSxnPWZ1bmN0aW9uKHQpe3guY2FsbCh0LmRhdGEpfTtwJiZ2fHwocD1mdW5jdGlvbih0KXtmb3IodmFyIGU9W10sbj0xO2FyZ3VtZW50cy5sZW5ndGg+bjspZS5wdXNoKGFyZ3VtZW50c1tuKytdKTtyZXR1cm4gbVsrK3ldPWZ1bmN0aW9uKCl7YShcImZ1bmN0aW9uXCI9PXR5cGVvZiB0P3Q6RnVuY3Rpb24odCksZSl9LHIoeSkseX0sdj1mdW5jdGlvbih0KXtkZWxldGUgbVt0XX0sXCJwcm9jZXNzXCI9PW4oMTIpKGwpP3I9ZnVuY3Rpb24odCl7bC5uZXh0VGljayh1KHgsdCwxKSl9OmgmJmgubm93P3I9ZnVuY3Rpb24odCl7aC5ub3codSh4LHQsMSkpfTpkPyhvPW5ldyBkLGk9by5wb3J0MixvLnBvcnQxLm9ubWVzc2FnZT1nLHI9dShpLnBvc3RNZXNzYWdlLGksMSkpOmYuYWRkRXZlbnRMaXN0ZW5lciYmXCJmdW5jdGlvblwiPT10eXBlb2YgcG9zdE1lc3NhZ2UmJiFmLmltcG9ydFNjcmlwdHM/KHI9ZnVuY3Rpb24odCl7Zi5wb3N0TWVzc2FnZSh0K1wiXCIsXCIqXCIpfSxmLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsZywhMSkpOnI9XCJvbnJlYWR5c3RhdGVjaGFuZ2VcImluIHMoXCJzY3JpcHRcIik/ZnVuY3Rpb24odCl7Yy5hcHBlbmRDaGlsZChzKFwic2NyaXB0XCIpKS5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXtjLnJlbW92ZUNoaWxkKHRoaXMpLHguY2FsbCh0KX19OmZ1bmN0aW9uKHQpe3NldFRpbWVvdXQodSh4LHQsMSksMCl9KSx0LmV4cG9ydHM9e3NldDpwLGNsZWFyOnZ9fSxmdW5jdGlvbih0LGUpe3ZhciBuPTAscj1NYXRoLnJhbmRvbSgpO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm5cIlN5bWJvbChcIi5jb25jYXQodm9pZCAwPT09dD9cIlwiOnQsXCIpX1wiLCgrK24rcikudG9TdHJpbmcoMzYpKX19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKDI2KSxvPW4oMSkoXCJpdGVyYXRvclwiKSxpPW4oOSk7dC5leHBvcnRzPW4oMikuZ2V0SXRlcmF0b3JNZXRob2Q9ZnVuY3Rpb24odCl7aWYodm9pZCAwIT10KXJldHVybiB0W29dfHx0W1wiQEBpdGVyYXRvclwiXXx8aVtyKHQpXX19LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1uKDc1KSghMCk7bigzMikoU3RyaW5nLFwiU3RyaW5nXCIsZnVuY3Rpb24odCl7dGhpcy5fdD1TdHJpbmcodCksdGhpcy5faT0wfSxmdW5jdGlvbigpe3ZhciB0LGU9dGhpcy5fdCxuPXRoaXMuX2k7cmV0dXJuIG4+PWUubGVuZ3RoP3t2YWx1ZTp2b2lkIDAsZG9uZTohMH06KHQ9cihlLG4pLHRoaXMuX2krPXQubGVuZ3RoLHt2YWx1ZTp0LGRvbmU6ITF9KX0pfSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcih0KXt2YXIgZT1NYXRoLlBJLzE4MCxuPTQ4LHI9NTcsbz00NCxpPTMyLHU9NDU7dC50cmFuc2Zvcm1TVkdQYXRoPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGEoKXtmb3IodmFyIGU9dm9pZCAwLGE9dm9pZCAwLGM9ITEsbD12b2lkIDA7czxmJiYoKGE9dC5jaGFyQ29kZUF0KHMpKT09PW98fGE9PT1pKTspcysrO2ZvcihlPWE9PT11P3MrKzpzO3M8ZjspaWYoYT10LmNoYXJDb2RlQXQocyksbjw9YSYmYTw9cilzKys7ZWxzZXtpZig0NiE9PWEpcmV0dXJuIGw9dC5zdWJzdHJpbmcoZSxzKSxjP3BhcnNlRmxvYXQobCk6cGFyc2VJbnQobCk7cysrLGM9ITB9cmV0dXJuIGw9dC5zdWJzdHJpbmcoZSksYz9wYXJzZUZsb2F0KGwpOnBhcnNlSW50KGwpfXZhciBjPW5ldyBBRlJBTUUuVEhSRUUuU2hhcGUscz0xLGY9dC5sZW5ndGgsbD12b2lkIDAscD0wLHY9MCxkPTAsaD0wLHk9bnVsbCxtPW51bGwseD0wLGc9MCxfPTAsYj0wLHc9MCxNPTAsRT0wLEE9MCxTPTAsVD12b2lkIDAsaj12b2lkIDAsTz12b2lkIDA7Zm9yKGw9dFswXTtzPD1mOyl7c3dpdGNoKE89ITAsbCl7Y2FzZVwiTVwiOnA9YSgpLHY9YSgpLGMubW92ZVRvKHAsdiksbD1cIkxcIjticmVhaztjYXNlXCJtXCI6cCs9YSgpLHYrPWEoKSxjLm1vdmVUbyhwLHYpLGw9XCJsXCI7YnJlYWs7Y2FzZVwiWlwiOmNhc2VcInpcIjpPPSExLHA9PT15JiZ2PT09bXx8Yy5saW5lVG8oeSxtKTticmVhaztjYXNlXCJMXCI6Y2FzZVwiSFwiOmNhc2VcIlZcIjpkPVwiVlwiPT09bD9wOmEoKSxoPVwiSFwiPT09bD92OmEoKSxjLmxpbmVUbyhkLGgpLHA9ZCx2PWg7YnJlYWs7Y2FzZVwibFwiOmNhc2VcImhcIjpjYXNlXCJ2XCI6ZD1cInZcIj09PWw/cDpwK2EoKSxoPVwiaFwiPT09bD92OnYrYSgpLGMubGluZVRvKGQsaCkscD1kLHY9aDticmVhaztjYXNlXCJDXCI6eD1hKCksXz1hKCk7Y2FzZVwiU1wiOlwiU1wiPT09bCYmKHg9MipwLWcsXz0yKnYtYiksZz1hKCksYj1hKCksZD1hKCksaD1hKCksYy5iZXppZXJDdXJ2ZVRvKHgsXyxnLGIsZCxoKSxwPWQsdj1oO2JyZWFrO2Nhc2VcImNcIjp4PXArYSgpLF89dithKCk7Y2FzZVwic1wiOlwic1wiPT09bCYmKHg9MipwLWcsXz0yKnYtYiksZz1wK2EoKSxiPXYrYSgpLGQ9cCthKCksaD12K2EoKSxjLmJlemllckN1cnZlVG8oeCxfLGcsYixkLGgpLHA9ZCx2PWg7YnJlYWs7Y2FzZVwiUVwiOng9YSgpLF89YSgpO2Nhc2VcIlRcIjpcIlRcIj09PWwmJih4PTIqcC14LF89Mip2LV8pLGQ9YSgpLGg9YSgpLGMucXVhZHJhdGljQ3VydmVUbyh4LF8sZCxoKSxwPWQsdj1oO2JyZWFrO2Nhc2VcInFcIjp4PXArYSgpLF89dithKCk7Y2FzZVwidFwiOlwidFwiPT09bCYmKHg9MipwLXgsXz0yKnYtXyksZD1wK2EoKSxoPXYrYSgpLGMucXVhZHJhdGljQ3VydmVUbyh4LF8sZCxoKSxwPWQsdj1oO2JyZWFrO2Nhc2VcIkFcIjp3PWEoKSxNPWEoKSxFPWEoKSplLEE9YSgpLFM9YSgpLGQ9YSgpLGg9YSgpLHchPT1NJiZjb25zb2xlLndhcm4oXCJGb3JjaW5nIGVsbGlwdGljYWwgYXJjIHRvIGJlIGEgY2lyY3VsYXIgb25lIDooXCIsdyxNKSx4PU1hdGguY29zKEUpKihwLWQpLzIrTWF0aC5zaW4oRSkqKHYtaCkvMixfPS1NYXRoLnNpbihFKSoocC1kKS8yK01hdGguY29zKEUpKih2LWgpLzI7dmFyIFA9TWF0aC5zcXJ0KCh3KncqTSpNLXcqdypfKl8tTSpNKngqeCkvKHcqdypfKl8rTSpNKngqeCkpO0E9PT1TJiYoUD0tUCksZz1QKncqXy9NLGI9UCotTSp4L3csVD1NYXRoLmNvcyhFKSpnLU1hdGguc2luKEUpKmIrKHArZCkvMixqPU1hdGguc2luKEUpKmcrTWF0aC5jb3MoRSkqYisoditoKS8yO3ZhciBSPW5ldyBBRlJBTUUuVEhSRUUuVmVjdG9yMigxLDApLEM9bmV3IEFGUkFNRS5USFJFRS5WZWN0b3IyKCh4LWcpL3csKF8tYikvTSksRj1NYXRoLmFjb3MoUi5kb3QoQykvUi5sZW5ndGgoKS9DLmxlbmd0aCgpKTtSLngqQy55LVIueSpDLng8MCYmKEY9LUYpLFIueD0oLXgtZykvdyxSLnk9KC1fLWIpL007dmFyIEw9TWF0aC5hY29zKEMuZG90KFIpL0MubGVuZ3RoKCkvUi5sZW5ndGgoKSk7Qy54KlIueS1DLnkqUi54PDAmJihMPS1MKSwhUyYmTD4wJiYoTC09MipNYXRoLlBJKSxTJiZMPDAmJihMKz0yKk1hdGguUEkpLGMuYWJzYXJjKFQsaix3LEYsRitMLFMpLHA9ZCx2PWh9bnVsbD09PXkmJih5PXAsbT12KSxPJiZmdW5jdGlvbigpe2Zvcih2YXIgZT12b2lkIDA7czxmJiYoKGU9dC5jaGFyQ29kZUF0KHMpKT09PW98fGU9PT1pKTspcysrO3JldHVybihlPXQuY2hhckNvZGVBdChzKSk9PT11fHxuPD1lJiZlPD1yfSgpfHwobD10W3MrK10pfXJldHVybiBjfX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmRlZmF1bHQ9cn0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPW4oNTApLGk9cihvKSx1PW4oODgpLGE9cih1KSxjPW4oNDcpLHM9cihjKSxmPWZ1bmN0aW9uKHQpe3JldHVybiBuZXcgaS5kZWZhdWx0KGZ1bmN0aW9uKGUsbil7cmV0dXJuKDAsYS5kZWZhdWx0KSh0LGZ1bmN0aW9uKHQscil7aWYodCl0aHJvdyBuKHQpO3JldHVybiBlKCgwLHMuZGVmYXVsdCkocikpfSl9KX07ZS5kZWZhdWx0PWZ9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtlLl9fZXNNb2R1bGU9ITA7dmFyIHI9big0OSksbz1mdW5jdGlvbih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19KHIpO2UuZGVmYXVsdD1vLmRlZmF1bHR8fGZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0xO2U8YXJndW1lbnRzLmxlbmd0aDtlKyspe3ZhciBuPWFyZ3VtZW50c1tlXTtmb3IodmFyIHIgaW4gbilPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobixyKSYmKHRbcl09bltyXSl9cmV0dXJuIHR9fSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19dmFyIG89big0NSksaT1yKG8pLHU9big0NCksYT1yKHUpLGM9big0Mykscz1yKGMpO2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBBRlJBTUUpdGhyb3cgbmV3IEVycm9yKFwiQ29tcG9uZW50IGF0dGVtcHRlZCB0byByZWdpc3RlciBiZWZvcmUgQUZSQU1FIHdhcyBhdmFpbGFibGUuXCIpO0FGUkFNRS5yZWdpc3RlclByaW1pdGl2ZShcImEtc3ZnXCIse2RlZmF1bHRDb21wb25lbnRzOntzdmc6e319LG1hcHBpbmdzOntzcmM6XCJzdmcuc3JjXCIsXCJwcm9wb3J0aW9uYWwtc2NhbGVcIjpcInN2Zy5wcm9wb3J0aW9uYWxTY2FsZVwiLFwib3ZlcnJpZGUtY29sb3JcIjpcInN2Zy5vdmVycmlkZUNvbG9yXCIsXCJ6LWZhY3RvclwiOlwic3ZnLnpGYWN0b3JcIixleHRydWRlOlwic3ZnLmV4dHJ1ZGVcIn19KSxBRlJBTUUucmVnaXN0ZXJDb21wb25lbnQoXCJzdmdcIix7c2NoZW1hOntzcmM6e3R5cGU6XCJzdHJpbmdcIn0scHJvcG9ydGlvbmFsU2NhbGU6e3R5cGU6XCJudW1iZXJcIixkZWZhdWx0OjF9LGV4dHJ1ZGU6e3R5cGU6XCJudW1iZXJcIixkZWZhdWx0Oi4xfSx6RmFjdG9yOnt0eXBlOlwibnVtYmVyXCIsZGVmYXVsdDouMDA1fSxvdmVycmlkZUNvbG9yOnt0eXBlOlwic3RyaW5nXCJ9fSwkZDNnOnt9LGluaXQ6ZnVuY3Rpb24oKXt0aGlzLmVsLnNldE9iamVjdDNEKFwibWVzaFwiLG5ldyBBRlJBTUUuVEhSRUUuT2JqZWN0M0QpLCgwLHMuZGVmYXVsdCkodGhpcy4kZDNnKX0sdXBkYXRlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztpZih0aGlzLmRhdGEuc3JjKXt2YXIgZT1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuZGF0YS5zcmMpLmF0dHJpYnV0ZXMuc3JjLnZhbHVlLG49bmV3IEFGUkFNRS5USFJFRS5Hcm91cDtyZXR1cm4gdGhpcy5kYXRhLmV4dHJ1ZGU9MD09PXRoaXMuZGF0YS5leHRydWRlPy4wMDE6dGhpcy5kYXRhLmV4dHJ1ZGUsdGhpcy5kYXRhLnpGYWN0b3I9MD09PXRoaXMuZGF0YS56RmFjdG9yPy4wMDE6dGhpcy5kYXRhLnpGYWN0b3IsKDAsYS5kZWZhdWx0KShlKS50aGVuKGZ1bmN0aW9uKGUpe2lmKGUubGVuZ3RoPjApe2UubWFwKGZ1bmN0aW9uKGUpe3JldHVybigwLGkuZGVmYXVsdCkoe30sZSx7bWF0ZXJpYWw6bmV3IEFGUkFNRS5USFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7c2hhZGVyOlwiZmxhdFwiLHNpZGU6QUZSQU1FLlRIUkVFLkRvdWJsZVNpZGUsY29sb3I6dC5kYXRhLm92ZXJyaWRlQ29sb3I/dC5kYXRhLm92ZXJyaWRlQ29sb3I6ZS5maWxsfSl9KX0pLm1hcChmdW5jdGlvbihlKXtyZXR1cm4oMCxpLmRlZmF1bHQpKHt9LGUse3NoYXBlOnQuJGQzZy50cmFuc2Zvcm1TVkdQYXRoKGUucGF0aCl9KX0pLm1hcChmdW5jdGlvbihlKXtyZXR1cm4oMCxpLmRlZmF1bHQpKHt9LGUse3NoYXBlOm5ldyBBRlJBTUUuVEhSRUUuRXh0cnVkZUJ1ZmZlckdlb21ldHJ5KGUuc2hhcGUse2Ftb3VudDp0LmRhdGEuZXh0cnVkZSxiZXZlbEVuYWJsZWQ6ITF9KX0pfSkubWFwKGZ1bmN0aW9uKHQpe3JldHVybiBuZXcgQUZSQU1FLlRIUkVFLk1lc2godC5zaGFwZSx0Lm1hdGVyaWFsKX0pLmZvckVhY2goZnVuY3Rpb24oZSxyLG8pe2Uuc2NhbGUueD0uMDA5NSp0LmRhdGEucHJvcG9ydGlvbmFsU2NhbGUsZS5zY2FsZS55PS4wMDk1KnQuZGF0YS5wcm9wb3J0aW9uYWxTY2FsZSxlLnNjYWxlLno9dC5kYXRhLm92ZXJyaWRlQ29sb3I/dC5kYXRhLmV4dHJ1ZGU6dC5kYXRhLmV4dHJ1ZGUrcip0LmRhdGEuekZhY3RvcixlLnJvdGF0aW9uLng9TWF0aC5QSSxuLmFkZChlKX0pLHQuZWwuc2V0T2JqZWN0M0QoXCJtZXNoXCIsbiksdC5lbC5nZXRPYmplY3QzRChcIm1lc2hcIikucG9zaXRpb24uej0wO3ZhciByPXttaW46bmV3IEFGUkFNRS5USFJFRS5WZWN0b3IzKE51bWJlci5NQVhfVkFMVUUpLG1heDpuZXcgQUZSQU1FLlRIUkVFLlZlY3RvcjMoTnVtYmVyLk1JTl9WQUxVRSl9LG89bmV3IEFGUkFNRS5USFJFRS5WZWN0b3IzO24uY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgbj1lLmdlb21ldHJ5O24uY29tcHV0ZUJvdW5kaW5nQm94KCk7dmFyIG89bi5ib3VuZGluZ0JveC5nZXRDZW50ZXIoKTtyLm1pbi54PU1hdGgubWluKG8ueCxyLm1pbi54KSxyLm1pbi55PU1hdGgubWluKG8ueSxyLm1pbi55KSxyLm1pbi56PXQuZGF0YS5leHRydWRlLHIubWF4Lng9TWF0aC5tYXgoby54LHIubWF4LngpLHIubWF4Lnk9TWF0aC5tYXgoMipvLnksci5tYXgueSksci5tYXguej10LmRhdGEuZXh0cnVkZX0pLG8uYWRkVmVjdG9ycyhyLm1pbixyLm1heCksby5tdWx0aXBseVNjYWxhcigtLjUpLG4uY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbih0KXt0Lmdlb21ldHJ5LmFwcGx5TWF0cml4KChuZXcgQUZSQU1FLlRIUkVFLk1hdHJpeDQpLm1ha2VUcmFuc2xhdGlvbihvLngsby55LG8ueikpLHQuZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nQm94KCl9KX19KX19fSl9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcj1uKDUxKSxvPWZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX0ociksaT1mdW5jdGlvbih0KXtpZih2b2lkIDAhPT1zZWxmLkRPTVBhcnNlcilyZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJuKG5ldyBzZWxmLkRPTVBhcnNlcikucGFyc2VGcm9tU3RyaW5nKHQsXCJhcHBsaWNhdGlvbi94bWxcIil9fSx1PWZ1bmN0aW9uKHQpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0JiYodD1pKCkpLCF0fHxcImZ1bmN0aW9uXCIhPXR5cGVvZiB0LmdldEVsZW1lbnRzQnlUYWdOYW1lKXRocm93IG5ldyBFcnJvcihcImNvdWxkIG5vdCBnZXQgYW4gWE1MIGRvY3VtZW50IGZyb20gdGhlIHNwZWNpZmllZCBTVkcgY29udGVudHNcIik7cmV0dXJuW10uc2xpY2UuY2FsbCh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwicGF0aFwiKSkucmVkdWNlKGZ1bmN0aW9uKHQsZSl7dmFyIG49ZS5nZXRBdHRyaWJ1dGUoXCJkXCIpfHxcIlwiLHI9ZS5nZXRBdHRyaWJ1dGUoXCJmaWxsXCIpfHxcIlwiO3JldHVybltdLmNvbmNhdCgoMCxvLmRlZmF1bHQpKHQpLFt7cGF0aDpuLnJlcGxhY2UoL1xccysvZyxcIiBcIikudHJpbSgpLGZpbGw6cn1dKX0sW10pfTtlLmRlZmF1bHQ9dX0sZnVuY3Rpb24odCxlLG4pe3QuZXhwb3J0cz17ZGVmYXVsdDpuKDUyKSxfX2VzTW9kdWxlOiEwfX0sZnVuY3Rpb24odCxlLG4pe3QuZXhwb3J0cz17ZGVmYXVsdDpuKDUzKSxfX2VzTW9kdWxlOiEwfX0sZnVuY3Rpb24odCxlLG4pe3QuZXhwb3J0cz17ZGVmYXVsdDpuKDU0KSxfX2VzTW9kdWxlOiEwfX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2UuX19lc01vZHVsZT0hMDt2YXIgcj1uKDQ4KSxvPWZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX0ocik7ZS5kZWZhdWx0PWZ1bmN0aW9uKHQpe2lmKEFycmF5LmlzQXJyYXkodCkpe2Zvcih2YXIgZT0wLG49QXJyYXkodC5sZW5ndGgpO2U8dC5sZW5ndGg7ZSsrKW5bZV09dFtlXTtyZXR1cm4gbn1yZXR1cm4oMCxvLmRlZmF1bHQpKHQpfX0sZnVuY3Rpb24odCxlLG4pe24oNDIpLG4oNzkpLHQuZXhwb3J0cz1uKDIpLkFycmF5LmZyb219LGZ1bmN0aW9uKHQsZSxuKXtuKDgxKSx0LmV4cG9ydHM9bigyKS5PYmplY3QuYXNzaWdufSxmdW5jdGlvbih0LGUsbil7big4Miksbig0Miksbig4Niksbig4Myksbig4NCksbig4NSksdC5leHBvcnRzPW4oMikuUHJvbWlzZX0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ZnVuY3Rpb24oKXt9fSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0LGUsbixyKXtpZighKHQgaW5zdGFuY2VvZiBlKXx8dm9pZCAwIT09ciYmciBpbiB0KXRocm93IFR5cGVFcnJvcihuK1wiOiBpbmNvcnJlY3QgaW52b2NhdGlvbiFcIik7cmV0dXJuIHR9fSxmdW5jdGlvbih0LGUsbil7dmFyIHI9bigyMyksbz1uKDI0KSxpPW4oNzYpO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oZSxuLHUpe3ZhciBhLGM9cihlKSxzPW8oYy5sZW5ndGgpLGY9aSh1LHMpO2lmKHQmJm4hPW4pe2Zvcig7cz5mOylpZigoYT1jW2YrK10pIT1hKXJldHVybiEwfWVsc2UgZm9yKDtzPmY7ZisrKWlmKCh0fHxmIGluIGMpJiZjW2ZdPT09bilyZXR1cm4gdHx8Znx8MDtyZXR1cm4hdCYmLTF9fX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO3ZhciByPW4oMTApLG89bigxOSk7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxuKXtlIGluIHQ/ci5mKHQsZSxvKDAsbikpOnRbZV09bn19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKDcpLG89bigzMSksaT1uKDMwKSx1PW4oMyksYT1uKDI0KSxjPW4oNDEpLHM9e30sZj17fSxlPXQuZXhwb3J0cz1mdW5jdGlvbih0LGUsbixsLHApe3ZhciB2LGQsaCx5LG09cD9mdW5jdGlvbigpe3JldHVybiB0fTpjKHQpLHg9cihuLGwsZT8yOjEpLGc9MDtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBtKXRocm93IFR5cGVFcnJvcih0K1wiIGlzIG5vdCBpdGVyYWJsZSFcIik7aWYoaShtKSl7Zm9yKHY9YSh0Lmxlbmd0aCk7dj5nO2crKylpZigoeT1lP3godShkPXRbZ10pWzBdLGRbMV0pOngodFtnXSkpPT09c3x8eT09PWYpcmV0dXJuIHl9ZWxzZSBmb3IoaD1tLmNhbGwodCk7IShkPWgubmV4dCgpKS5kb25lOylpZigoeT1vKGgseCxkLnZhbHVlLGUpKT09PXN8fHk9PT1mKXJldHVybiB5fTtlLkJSRUFLPXMsZS5SRVRVUk49Zn0sZnVuY3Rpb24odCxlLG4pe3QuZXhwb3J0cz0hbig0KSYmIW4oMTYpKGZ1bmN0aW9uKCl7cmV0dXJuIDchPU9iamVjdC5kZWZpbmVQcm9wZXJ0eShuKDE1KShcImRpdlwiKSxcImFcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIDd9fSkuYX0pfSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0LGUsbil7dmFyIHI9dm9pZCAwPT09bjtzd2l0Y2goZS5sZW5ndGgpe2Nhc2UgMDpyZXR1cm4gcj90KCk6dC5jYWxsKG4pO2Nhc2UgMTpyZXR1cm4gcj90KGVbMF0pOnQuY2FsbChuLGVbMF0pO2Nhc2UgMjpyZXR1cm4gcj90KGVbMF0sZVsxXSk6dC5jYWxsKG4sZVswXSxlWzFdKTtjYXNlIDM6cmV0dXJuIHI/dChlWzBdLGVbMV0sZVsyXSk6dC5jYWxsKG4sZVswXSxlWzFdLGVbMl0pO2Nhc2UgNDpyZXR1cm4gcj90KGVbMF0sZVsxXSxlWzJdLGVbM10pOnQuY2FsbChuLGVbMF0sZVsxXSxlWzJdLGVbM10pfXJldHVybiB0LmFwcGx5KG4sZSl9fSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9big2Niksbz1uKDE5KSxpPW4oMjApLHU9e307big2KSh1LG4oMSkoXCJpdGVyYXRvclwiKSxmdW5jdGlvbigpe3JldHVybiB0aGlzfSksdC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxuKXt0LnByb3RvdHlwZT1yKHUse25leHQ6bygxLG4pfSksaSh0LGUrXCIgSXRlcmF0b3JcIil9fSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe3JldHVybnt2YWx1ZTplLGRvbmU6ISF0fX19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKDApLG89bigzOSkuc2V0LGk9ci5NdXRhdGlvbk9ic2VydmVyfHxyLldlYktpdE11dGF0aW9uT2JzZXJ2ZXIsdT1yLnByb2Nlc3MsYT1yLlByb21pc2UsYz1cInByb2Nlc3NcIj09bigxMikodSk7dC5leHBvcnRzPWZ1bmN0aW9uKCl7dmFyIHQsZSxuLHM9ZnVuY3Rpb24oKXt2YXIgcixvO2ZvcihjJiYocj11LmRvbWFpbikmJnIuZXhpdCgpO3Q7KXtvPXQuZm4sdD10Lm5leHQ7dHJ5e28oKX1jYXRjaChyKXt0aHJvdyB0P24oKTplPXZvaWQgMCxyfX1lPXZvaWQgMCxyJiZyLmVudGVyKCl9O2lmKGMpbj1mdW5jdGlvbigpe3UubmV4dFRpY2socyl9O2Vsc2UgaWYoIWl8fHIubmF2aWdhdG9yJiZyLm5hdmlnYXRvci5zdGFuZGFsb25lKWlmKGEmJmEucmVzb2x2ZSl7dmFyIGY9YS5yZXNvbHZlKHZvaWQgMCk7bj1mdW5jdGlvbigpe2YudGhlbihzKX19ZWxzZSBuPWZ1bmN0aW9uKCl7by5jYWxsKHIscyl9O2Vsc2V7dmFyIGw9ITAscD1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIlwiKTtuZXcgaShzKS5vYnNlcnZlKHAse2NoYXJhY3RlckRhdGE6ITB9KSxuPWZ1bmN0aW9uKCl7cC5kYXRhPWw9IWx9fXJldHVybiBmdW5jdGlvbihyKXt2YXIgbz17Zm46cixuZXh0OnZvaWQgMH07ZSYmKGUubmV4dD1vKSx0fHwodD1vLG4oKSksZT1vfX19LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1uKDQpLG89bigzNCksaT1uKDY4KSx1PW4oNzEpLGE9bigyNSksYz1uKDI5KSxzPU9iamVjdC5hc3NpZ247dC5leHBvcnRzPSFzfHxuKDE2KShmdW5jdGlvbigpe3ZhciB0PXt9LGU9e30sbj1TeW1ib2woKSxyPVwiYWJjZGVmZ2hpamtsbW5vcHFyc3RcIjtyZXR1cm4gdFtuXT03LHIuc3BsaXQoXCJcIikuZm9yRWFjaChmdW5jdGlvbih0KXtlW3RdPXR9KSw3IT1zKHt9LHQpW25dfHxPYmplY3Qua2V5cyhzKHt9LGUpKS5qb2luKFwiXCIpIT1yfSk/ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49YSh0KSxzPWFyZ3VtZW50cy5sZW5ndGgsZj0xLGw9aS5mLHA9dS5mO3M+ZjspZm9yKHZhciB2LGQ9Yyhhcmd1bWVudHNbZisrXSksaD1sP28oZCkuY29uY2F0KGwoZCkpOm8oZCkseT1oLmxlbmd0aCxtPTA7eT5tOyl2PWhbbSsrXSxyJiYhcC5jYWxsKGQsdil8fChuW3ZdPWRbdl0pO3JldHVybiBufTpzfSxmdW5jdGlvbih0LGUsbil7dmFyIHI9bigzKSxvPW4oNjcpLGk9bigyNyksdT1uKDIxKShcIklFX1BST1RPXCIpLGE9ZnVuY3Rpb24oKXt9LGM9ZnVuY3Rpb24oKXt2YXIgdCxlPW4oMTUpKFwiaWZyYW1lXCIpLHI9aS5sZW5ndGg7Zm9yKGUuc3R5bGUuZGlzcGxheT1cIm5vbmVcIixuKDI4KS5hcHBlbmRDaGlsZChlKSxlLnNyYz1cImphdmFzY3JpcHQ6XCIsdD1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQsdC5vcGVuKCksdC53cml0ZShcIjxzY3JpcHQ+ZG9jdW1lbnQuRj1PYmplY3Q8XFwvc2NyaXB0PlwiKSx0LmNsb3NlKCksYz10LkY7ci0tOylkZWxldGUgYy5wcm90b3R5cGVbaVtyXV07cmV0dXJuIGMoKX07dC5leHBvcnRzPU9iamVjdC5jcmVhdGV8fGZ1bmN0aW9uKHQsZSl7dmFyIG47cmV0dXJuIG51bGwhPT10PyhhLnByb3RvdHlwZT1yKHQpLG49bmV3IGEsYS5wcm90b3R5cGU9bnVsbCxuW3VdPXQpOm49YygpLHZvaWQgMD09PWU/bjpvKG4sZSl9fSxmdW5jdGlvbih0LGUsbil7dmFyIHI9bigxMCksbz1uKDMpLGk9bigzNCk7dC5leHBvcnRzPW4oNCk/T2JqZWN0LmRlZmluZVByb3BlcnRpZXM6ZnVuY3Rpb24odCxlKXtvKHQpO2Zvcih2YXIgbix1PWkoZSksYT11Lmxlbmd0aCxjPTA7YT5jOylyLmYodCxuPXVbYysrXSxlW25dKTtyZXR1cm4gdH19LGZ1bmN0aW9uKHQsZSl7ZS5mPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHN9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKDEzKSxvPW4oMjUpLGk9bigyMSkoXCJJRV9QUk9UT1wiKSx1PU9iamVjdC5wcm90b3R5cGU7dC5leHBvcnRzPU9iamVjdC5nZXRQcm90b3R5cGVPZnx8ZnVuY3Rpb24odCl7cmV0dXJuIHQ9byh0KSxyKHQsaSk/dFtpXTpcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LmNvbnN0cnVjdG9yJiZ0IGluc3RhbmNlb2YgdC5jb25zdHJ1Y3Rvcj90LmNvbnN0cnVjdG9yLnByb3RvdHlwZTp0IGluc3RhbmNlb2YgT2JqZWN0P3U6bnVsbH19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKDEzKSxvPW4oMjMpLGk9big1NykoITEpLHU9bigyMSkoXCJJRV9QUk9UT1wiKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXt2YXIgbixhPW8odCksYz0wLHM9W107Zm9yKG4gaW4gYSluIT11JiZyKGEsbikmJnMucHVzaChuKTtmb3IoO2UubGVuZ3RoPmM7KXIoYSxuPWVbYysrXSkmJih+aShzLG4pfHxzLnB1c2gobikpO3JldHVybiBzfX0sZnVuY3Rpb24odCxlKXtlLmY9e30ucHJvcGVydHlJc0VudW1lcmFibGV9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKDYpO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUsbil7Zm9yKHZhciBvIGluIGUpbiYmdFtvXT90W29dPWVbb106cih0LG8sZVtvXSk7cmV0dXJuIHR9fSxmdW5jdGlvbih0LGUsbil7dC5leHBvcnRzPW4oNil9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1uKDApLG89bigyKSxpPW4oMTApLHU9big0KSxhPW4oMSkoXCJzcGVjaWVzXCIpO3QuZXhwb3J0cz1mdW5jdGlvbih0KXt2YXIgZT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBvW3RdP29bdF06clt0XTt1JiZlJiYhZVthXSYmaS5mKGUsYSx7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzfX0pfX0sZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oMjIpLG89bigxNCk7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihlLG4pe3ZhciBpLHUsYT1TdHJpbmcobyhlKSksYz1yKG4pLHM9YS5sZW5ndGg7cmV0dXJuIGM8MHx8Yz49cz90P1wiXCI6dm9pZCAwOihpPWEuY2hhckNvZGVBdChjKSxpPDU1Mjk2fHxpPjU2MzE5fHxjKzE9PT1zfHwodT1hLmNoYXJDb2RlQXQoYysxKSk8NTYzMjB8fHU+NTczNDM/dD9hLmNoYXJBdChjKTppOnQ/YS5zbGljZShjLGMrMik6dS01NjMyMCsoaS01NTI5Njw8MTApKzY1NTM2KX19fSxmdW5jdGlvbih0LGUsbil7dmFyIHI9bigyMiksbz1NYXRoLm1heCxpPU1hdGgubWluO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe3JldHVybiB0PXIodCksdDwwP28odCtlLDApOmkodCxlKX19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKDgpO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe2lmKCFyKHQpKXJldHVybiB0O3ZhciBuLG87aWYoZSYmXCJmdW5jdGlvblwiPT10eXBlb2Yobj10LnRvU3RyaW5nKSYmIXIobz1uLmNhbGwodCkpKXJldHVybiBvO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mKG49dC52YWx1ZU9mKSYmIXIobz1uLmNhbGwodCkpKXJldHVybiBvO2lmKCFlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZihuPXQudG9TdHJpbmcpJiYhcihvPW4uY2FsbCh0KSkpcmV0dXJuIG87dGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpfX0sZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oMCksbz1yLm5hdmlnYXRvcjt0LmV4cG9ydHM9byYmby51c2VyQWdlbnR8fFwiXCJ9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1uKDcpLG89big1KSxpPW4oMjUpLHU9bigzMSksYT1uKDMwKSxjPW4oMjQpLHM9big1OCksZj1uKDQxKTtvKG8uUytvLkYqIW4oMzMpKGZ1bmN0aW9uKHQpe0FycmF5LmZyb20odCl9KSxcIkFycmF5XCIse2Zyb206ZnVuY3Rpb24odCl7dmFyIGUsbixvLGwscD1pKHQpLHY9XCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcz90aGlzOkFycmF5LGQ9YXJndW1lbnRzLmxlbmd0aCxoPWQ+MT9hcmd1bWVudHNbMV06dm9pZCAwLHk9dm9pZCAwIT09aCxtPTAseD1mKHApO2lmKHkmJihoPXIoaCxkPjI/YXJndW1lbnRzWzJdOnZvaWQgMCwyKSksdm9pZCAwPT14fHx2PT1BcnJheSYmYSh4KSlmb3IoZT1jKHAubGVuZ3RoKSxuPW5ldyB2KGUpO2U+bTttKyspcyhuLG0seT9oKHBbbV0sbSk6cFttXSk7ZWxzZSBmb3IobD14LmNhbGwocCksbj1uZXcgdjshKG89bC5uZXh0KCkpLmRvbmU7bSsrKXMobixtLHk/dShsLGgsW28udmFsdWUsbV0sITApOm8udmFsdWUpO3JldHVybiBuLmxlbmd0aD1tLG59fSl9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1uKDU1KSxvPW4oNjMpLGk9big5KSx1PW4oMjMpO3QuZXhwb3J0cz1uKDMyKShBcnJheSxcIkFycmF5XCIsZnVuY3Rpb24odCxlKXt0aGlzLl90PXUodCksdGhpcy5faT0wLHRoaXMuX2s9ZX0sZnVuY3Rpb24oKXt2YXIgdD10aGlzLl90LGU9dGhpcy5fayxuPXRoaXMuX2krKztyZXR1cm4hdHx8bj49dC5sZW5ndGg/KHRoaXMuX3Q9dm9pZCAwLG8oMSkpOlwia2V5c1wiPT1lP28oMCxuKTpcInZhbHVlc1wiPT1lP28oMCx0W25dKTpvKDAsW24sdFtuXV0pfSxcInZhbHVlc1wiKSxpLkFyZ3VtZW50cz1pLkFycmF5LHIoXCJrZXlzXCIpLHIoXCJ2YWx1ZXNcIikscihcImVudHJpZXNcIil9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKDUpO3Ioci5TK3IuRixcIk9iamVjdFwiLHthc3NpZ246big2NSl9KX0sZnVuY3Rpb24odCxlKXt9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcixvLGksdSxhPW4oMTcpLGM9bigwKSxzPW4oNyksZj1uKDI2KSxsPW4oNSkscD1uKDgpLHY9bigxMSksZD1uKDU2KSxoPW4oNTkpLHk9bigzOCksbT1uKDM5KS5zZXQseD1uKDY0KSgpLGc9bigxOCksXz1uKDM1KSxiPW4oNzgpLHc9bigzNiksTT1jLlR5cGVFcnJvcixFPWMucHJvY2VzcyxBPUUmJkUudmVyc2lvbnMsUz1BJiZBLnY4fHxcIlwiLFQ9Yy5Qcm9taXNlLGo9XCJwcm9jZXNzXCI9PWYoRSksTz1mdW5jdGlvbigpe30sUD1vPWcuZixSPSEhZnVuY3Rpb24oKXt0cnl7dmFyIHQ9VC5yZXNvbHZlKDEpLGU9KHQuY29uc3RydWN0b3I9e30pW24oMSkoXCJzcGVjaWVzXCIpXT1mdW5jdGlvbih0KXt0KE8sTyl9O3JldHVybihqfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQpJiZ0LnRoZW4oTylpbnN0YW5jZW9mIGUmJjAhPT1TLmluZGV4T2YoXCI2LjZcIikmJi0xPT09Yi5pbmRleE9mKFwiQ2hyb21lLzY2XCIpfWNhdGNoKHQpe319KCksQz1mdW5jdGlvbih0KXt2YXIgZTtyZXR1cm4hKCFwKHQpfHxcImZ1bmN0aW9uXCIhPXR5cGVvZihlPXQudGhlbikpJiZlfSxGPWZ1bmN0aW9uKHQsZSl7aWYoIXQuX24pe3QuX249ITA7dmFyIG49dC5fYzt4KGZ1bmN0aW9uKCl7Zm9yKHZhciByPXQuX3Ysbz0xPT10Ll9zLGk9MDtuLmxlbmd0aD5pOykhZnVuY3Rpb24oZSl7dmFyIG4saSx1LGE9bz9lLm9rOmUuZmFpbCxjPWUucmVzb2x2ZSxzPWUucmVqZWN0LGY9ZS5kb21haW47dHJ5e2E/KG98fCgyPT10Ll9oJiZIKHQpLHQuX2g9MSksITA9PT1hP249cjooZiYmZi5lbnRlcigpLG49YShyKSxmJiYoZi5leGl0KCksdT0hMCkpLG49PT1lLnByb21pc2U/cyhNKFwiUHJvbWlzZS1jaGFpbiBjeWNsZVwiKSk6KGk9QyhuKSk/aS5jYWxsKG4sYyxzKTpjKG4pKTpzKHIpfWNhdGNoKHQpe2YmJiF1JiZmLmV4aXQoKSxzKHQpfX0obltpKytdKTt0Ll9jPVtdLHQuX249ITEsZSYmIXQuX2gmJkwodCl9KX19LEw9ZnVuY3Rpb24odCl7bS5jYWxsKGMsZnVuY3Rpb24oKXt2YXIgZSxuLHIsbz10Ll92LGk9ayh0KTtpZihpJiYoZT1fKGZ1bmN0aW9uKCl7aj9FLmVtaXQoXCJ1bmhhbmRsZWRSZWplY3Rpb25cIixvLHQpOihuPWMub251bmhhbmRsZWRyZWplY3Rpb24pP24oe3Byb21pc2U6dCxyZWFzb246b30pOihyPWMuY29uc29sZSkmJnIuZXJyb3ImJnIuZXJyb3IoXCJVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb25cIixvKX0pLHQuX2g9anx8ayh0KT8yOjEpLHQuX2E9dm9pZCAwLGkmJmUuZSl0aHJvdyBlLnZ9KX0saz1mdW5jdGlvbih0KXtyZXR1cm4gMSE9PXQuX2gmJjA9PT0odC5fYXx8dC5fYykubGVuZ3RofSxIPWZ1bmN0aW9uKHQpe20uY2FsbChjLGZ1bmN0aW9uKCl7dmFyIGU7aj9FLmVtaXQoXCJyZWplY3Rpb25IYW5kbGVkXCIsdCk6KGU9Yy5vbnJlamVjdGlvbmhhbmRsZWQpJiZlKHtwcm9taXNlOnQscmVhc29uOnQuX3Z9KX0pfSxJPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7ZS5fZHx8KGUuX2Q9ITAsZT1lLl93fHxlLGUuX3Y9dCxlLl9zPTIsZS5fYXx8KGUuX2E9ZS5fYy5zbGljZSgpKSxGKGUsITApKX0sVj1mdW5jdGlvbih0KXt2YXIgZSxuPXRoaXM7aWYoIW4uX2Qpe24uX2Q9ITAsbj1uLl93fHxuO3RyeXtpZihuPT09dCl0aHJvdyBNKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7KGU9Qyh0KSk/eChmdW5jdGlvbigpe3ZhciByPXtfdzpuLF9kOiExfTt0cnl7ZS5jYWxsKHQscyhWLHIsMSkscyhJLHIsMSkpfWNhdGNoKHQpe0kuY2FsbChyLHQpfX0pOihuLl92PXQsbi5fcz0xLEYobiwhMSkpfWNhdGNoKHQpe0kuY2FsbCh7X3c6bixfZDohMX0sdCl9fX07Unx8KFQ9ZnVuY3Rpb24odCl7ZCh0aGlzLFQsXCJQcm9taXNlXCIsXCJfaFwiKSx2KHQpLHIuY2FsbCh0aGlzKTt0cnl7dChzKFYsdGhpcywxKSxzKEksdGhpcywxKSl9Y2F0Y2godCl7SS5jYWxsKHRoaXMsdCl9fSxyPWZ1bmN0aW9uKHQpe3RoaXMuX2M9W10sdGhpcy5fYT12b2lkIDAsdGhpcy5fcz0wLHRoaXMuX2Q9ITEsdGhpcy5fdj12b2lkIDAsdGhpcy5faD0wLHRoaXMuX249ITF9LHIucHJvdG90eXBlPW4oNzIpKFQucHJvdG90eXBlLHt0aGVuOmZ1bmN0aW9uKHQsZSl7dmFyIG49UCh5KHRoaXMsVCkpO3JldHVybiBuLm9rPVwiZnVuY3Rpb25cIiE9dHlwZW9mIHR8fHQsbi5mYWlsPVwiZnVuY3Rpb25cIj09dHlwZW9mIGUmJmUsbi5kb21haW49aj9FLmRvbWFpbjp2b2lkIDAsdGhpcy5fYy5wdXNoKG4pLHRoaXMuX2EmJnRoaXMuX2EucHVzaChuKSx0aGlzLl9zJiZGKHRoaXMsITEpLG4ucHJvbWlzZX0sY2F0Y2g6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhlbih2b2lkIDAsdCl9fSksaT1mdW5jdGlvbigpe3ZhciB0PW5ldyByO3RoaXMucHJvbWlzZT10LHRoaXMucmVzb2x2ZT1zKFYsdCwxKSx0aGlzLnJlamVjdD1zKEksdCwxKX0sZy5mPVA9ZnVuY3Rpb24odCl7cmV0dXJuIHQ9PT1UfHx0PT09dT9uZXcgaSh0KTpvKHQpfSksbChsLkcrbC5XK2wuRiohUix7UHJvbWlzZTpUfSksbigyMCkoVCxcIlByb21pc2VcIiksbig3NCkoXCJQcm9taXNlXCIpLHU9bigyKS5Qcm9taXNlLGwobC5TK2wuRiohUixcIlByb21pc2VcIix7cmVqZWN0OmZ1bmN0aW9uKHQpe3ZhciBlPVAodGhpcyk7cmV0dXJuKDAsZS5yZWplY3QpKHQpLGUucHJvbWlzZX19KSxsKGwuUytsLkYqKGF8fCFSKSxcIlByb21pc2VcIix7cmVzb2x2ZTpmdW5jdGlvbih0KXtyZXR1cm4gdyhhJiZ0aGlzPT09dT9UOnRoaXMsdCl9fSksbChsLlMrbC5GKiEoUiYmbigzMykoZnVuY3Rpb24odCl7VC5hbGwodCkuY2F0Y2goTyl9KSksXCJQcm9taXNlXCIse2FsbDpmdW5jdGlvbih0KXt2YXIgZT10aGlzLG49UChlKSxyPW4ucmVzb2x2ZSxvPW4ucmVqZWN0LGk9XyhmdW5jdGlvbigpe3ZhciBuPVtdLGk9MCx1PTE7aCh0LCExLGZ1bmN0aW9uKHQpe3ZhciBhPWkrKyxjPSExO24ucHVzaCh2b2lkIDApLHUrKyxlLnJlc29sdmUodCkudGhlbihmdW5jdGlvbih0KXtjfHwoYz0hMCxuW2FdPXQsLS11fHxyKG4pKX0sbyl9KSwtLXV8fHIobil9KTtyZXR1cm4gaS5lJiZvKGkudiksbi5wcm9taXNlfSxyYWNlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsbj1QKGUpLHI9bi5yZWplY3Qsbz1fKGZ1bmN0aW9uKCl7aCh0LCExLGZ1bmN0aW9uKHQpe2UucmVzb2x2ZSh0KS50aGVuKG4ucmVzb2x2ZSxyKX0pfSk7cmV0dXJuIG8uZSYmcihvLnYpLG4ucHJvbWlzZX19KX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO3ZhciByPW4oNSksbz1uKDIpLGk9bigwKSx1PW4oMzgpLGE9bigzNik7cihyLlArci5SLFwiUHJvbWlzZVwiLHtmaW5hbGx5OmZ1bmN0aW9uKHQpe3ZhciBlPXUodGhpcyxvLlByb21pc2V8fGkuUHJvbWlzZSksbj1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0O3JldHVybiB0aGlzLnRoZW4obj9mdW5jdGlvbihuKXtyZXR1cm4gYShlLHQoKSkudGhlbihmdW5jdGlvbigpe3JldHVybiBufSl9OnQsbj9mdW5jdGlvbihuKXtyZXR1cm4gYShlLHQoKSkudGhlbihmdW5jdGlvbigpe3Rocm93IG59KX06dCl9fSl9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1uKDUpLG89bigxOCksaT1uKDM1KTtyKHIuUyxcIlByb21pc2VcIix7dHJ5OmZ1bmN0aW9uKHQpe3ZhciBlPW8uZih0aGlzKSxuPWkodCk7cmV0dXJuKG4uZT9lLnJlamVjdDplLnJlc29sdmUpKG4udiksZS5wcm9taXNlfX0pfSxmdW5jdGlvbih0LGUsbil7big4MCk7Zm9yKHZhciByPW4oMCksbz1uKDYpLGk9big5KSx1PW4oMSkoXCJ0b1N0cmluZ1RhZ1wiKSxhPVwiQ1NTUnVsZUxpc3QsQ1NTU3R5bGVEZWNsYXJhdGlvbixDU1NWYWx1ZUxpc3QsQ2xpZW50UmVjdExpc3QsRE9NUmVjdExpc3QsRE9NU3RyaW5nTGlzdCxET01Ub2tlbkxpc3QsRGF0YVRyYW5zZmVySXRlbUxpc3QsRmlsZUxpc3QsSFRNTEFsbENvbGxlY3Rpb24sSFRNTENvbGxlY3Rpb24sSFRNTEZvcm1FbGVtZW50LEhUTUxTZWxlY3RFbGVtZW50LE1lZGlhTGlzdCxNaW1lVHlwZUFycmF5LE5hbWVkTm9kZU1hcCxOb2RlTGlzdCxQYWludFJlcXVlc3RMaXN0LFBsdWdpbixQbHVnaW5BcnJheSxTVkdMZW5ndGhMaXN0LFNWR051bWJlckxpc3QsU1ZHUGF0aFNlZ0xpc3QsU1ZHUG9pbnRMaXN0LFNWR1N0cmluZ0xpc3QsU1ZHVHJhbnNmb3JtTGlzdCxTb3VyY2VCdWZmZXJMaXN0LFN0eWxlU2hlZXRMaXN0LFRleHRUcmFja0N1ZUxpc3QsVGV4dFRyYWNrTGlzdCxUb3VjaExpc3RcIi5zcGxpdChcIixcIiksYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgcz1hW2NdLGY9cltzXSxsPWYmJmYucHJvdG90eXBlO2wmJiFsW3VdJiZvKGwsdSxzKSxpW3NdPWkuQXJyYXl9fSxmdW5jdGlvbih0LGUsbil7KGZ1bmN0aW9uKGUpe3ZhciBuO249XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dm9pZCAwIT09ZT9lOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6e30sdC5leHBvcnRzPW59KS5jYWxsKGUsbig5MSkpfSxmdW5jdGlvbih0LGUsbil7dmFyIHI9big5Mik7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7XCJzdHJpbmdcIj09dHlwZW9mIHQmJih0PXt1cmk6dH0pLHIodCxmdW5jdGlvbih0LG4scil7aWYodClyZXR1cm4gZSh0KTtpZighL14yLy50ZXN0KG4uc3RhdHVzQ29kZSkpcmV0dXJuIGUobmV3IEVycm9yKFwiaHR0cCBzdGF0dXMgY29kZTogXCIrbi5zdGF0dXNDb2RlKSk7dmFyIG89ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtvLmlubmVySFRNTD1yO3ZhciBpPW8ucXVlcnlTZWxlY3RvcihcInN2Z1wiKTtpZighaSlyZXR1cm4gZShuZXcgRXJyb3IoXCJzdmcgbm90IHByZXNlbnQgaW4gcmVzb3VyY2VcIikpO2UobnVsbCxpKX0pfX0sZnVuY3Rpb24odCxlKXtmdW5jdGlvbiBuKHQpe3ZhciBlPSExO3JldHVybiBmdW5jdGlvbigpe2lmKCFlKXJldHVybiBlPSEwLHQuYXBwbHkodGhpcyxhcmd1bWVudHMpfX10LmV4cG9ydHM9bixuLnByb3RvPW4oZnVuY3Rpb24oKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoRnVuY3Rpb24ucHJvdG90eXBlLFwib25jZVwiLHt2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBuKHRoaXMpfSxjb25maWd1cmFibGU6ITB9KX0pfSxmdW5jdGlvbih0LGUpe3ZhciBuPWZ1bmN0aW9uKHQpe3JldHVybiB0LnJlcGxhY2UoL15cXHMrfFxccyskL2csXCJcIil9LHI9ZnVuY3Rpb24odCl7cmV0dXJuXCJbb2JqZWN0IEFycmF5XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpfTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7aWYoIXQpcmV0dXJue307Zm9yKHZhciBlPXt9LG89bih0KS5zcGxpdChcIlxcblwiKSxpPTA7aTxvLmxlbmd0aDtpKyspe3ZhciB1PW9baV0sYT11LmluZGV4T2YoXCI6XCIpLGM9bih1LnNsaWNlKDAsYSkpLnRvTG93ZXJDYXNlKCkscz1uKHUuc2xpY2UoYSsxKSk7dm9pZCAwPT09ZVtjXT9lW2NdPXM6cihlW2NdKT9lW2NdLnB1c2gocyk6ZVtjXT1bZVtjXSxzXX1yZXR1cm4gZX19LGZ1bmN0aW9uKHQsZSl7dmFyIG47bj1mdW5jdGlvbigpe3JldHVybiB0aGlzfSgpO3RyeXtuPW58fEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKXx8KDAsZXZhbCkoXCJ0aGlzXCIpfWNhdGNoKHQpe1wib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3cmJihuPXdpbmRvdyl9dC5leHBvcnRzPW59LGZ1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiByKHQsZSl7ZnVuY3Rpb24gbigpezQ9PT1oLnJlYWR5U3RhdGUmJk0oKX1mdW5jdGlvbiByKCl7dmFyIHQ9bnVsbDtpZihoLnJlc3BvbnNlP3Q9aC5yZXNwb25zZTpcInRleHRcIiE9PWgucmVzcG9uc2VUeXBlJiZoLnJlc3BvbnNlVHlwZXx8KHQ9aC5yZXNwb25zZVRleHR8fGgucmVzcG9uc2VYTUwpLHcpdHJ5e3Q9SlNPTi5wYXJzZSh0KX1jYXRjaCh0KXt9cmV0dXJuIHR9ZnVuY3Rpb24gaSgpe3JldHVybiAxMjIzPT09aC5zdGF0dXM/MjA0Omguc3RhdHVzfWZ1bmN0aW9uIGwodCxlKXt2YXIgbj1udWxsO2lmKDA9PT10fHx0Pj00MDAmJnQ8NjAwKXt2YXIgcj1cInN0cmluZ1wiPT10eXBlb2YgZSYmZXx8Y1tTdHJpbmcodCkuY2hhckF0KDApXTtuPW5ldyBFcnJvcihyKSxuLnN0YXR1c0NvZGU9dH1yZXR1cm4gbn1mdW5jdGlvbiBwKCl7dmFyIHQ9aSgpLG49cigpLG89bCh0LG4pLHU9e2JvZHk6bixzdGF0dXNDb2RlOnQsc3RhdHVzVGV4dDpoLnN0YXR1c1RleHQscmF3Omh9O2guZ2V0QWxsUmVzcG9uc2VIZWFkZXJzP3UuaGVhZGVycz1hKGguZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpOnUuaGVhZGVycz17fSxlKG8sdSx1LmJvZHkpfWZ1bmN0aW9uIHYoKXt2YXIgdD1pKCksbj1sKHQpO2guc3RhdHVzPWguc3RhdHVzQ29kZT10LGguYm9keT1yKCksaC5oZWFkZXJzPWEoaC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSksZShuLGgsaC5ib2R5KX1mdW5jdGlvbiBkKHQpe2UodCxoKX1cInN0cmluZ1wiPT10eXBlb2YgdCYmKHQ9e3VyaTp0fSksdD10fHx7fSxlPXUoZSk7dmFyIGg9dC54aHJ8fG51bGw7aHx8KGg9dC5jb3JzfHx0LnVzZVhEUj9uZXcgZjpuZXcgcyk7dmFyIHksbT1oLnVybD10LnVyaXx8dC51cmwseD1oLm1ldGhvZD10Lm1ldGhvZHx8XCJHRVRcIixnPXQuYm9keXx8dC5kYXRhLF89aC5oZWFkZXJzPXQuaGVhZGVyc3x8e30sYj0hIXQuc3luYyx3PSExLE09dC5yZXNwb25zZT9wOnY7aWYoXCJqc29uXCJpbiB0JiYodz0hMCxfLkFjY2VwdD1cImFwcGxpY2F0aW9uL2pzb25cIixcIkdFVFwiIT09eCYmXCJIRUFEXCIhPT14JiYoX1tcIkNvbnRlbnQtVHlwZVwiXT1cImFwcGxpY2F0aW9uL2pzb25cIixnPUpTT04uc3RyaW5naWZ5KHQuanNvbikpKSxoLm9ucmVhZHlzdGF0ZWNoYW5nZT1uLGgub25sb2FkPU0saC5vbmVycm9yPWQsaC5vbnByb2dyZXNzPWZ1bmN0aW9uKCl7fSxoLm9udGltZW91dD1vLGgub3Blbih4LG0sIWIpLCh0LndpdGhDcmVkZW50aWFsc3x8dC5jb3JzJiYhMSE9PXQud2l0aENyZWRlbnRpYWxzKSYmKGgud2l0aENyZWRlbnRpYWxzPSEwKSxifHwoaC50aW1lb3V0PVwidGltZW91dFwiaW4gdD90LnRpbWVvdXQ6NWUzKSxoLnNldFJlcXVlc3RIZWFkZXIpZm9yKHkgaW4gXylfLmhhc093blByb3BlcnR5KHkpJiZoLnNldFJlcXVlc3RIZWFkZXIoeSxfW3ldKTtlbHNlIGlmKHQuaGVhZGVycyl0aHJvdyBuZXcgRXJyb3IoXCJIZWFkZXJzIGNhbm5vdCBiZSBzZXQgb24gYW4gWERvbWFpblJlcXVlc3Qgb2JqZWN0XCIpO3JldHVyblwicmVzcG9uc2VUeXBlXCJpbiB0JiYoaC5yZXNwb25zZVR5cGU9dC5yZXNwb25zZVR5cGUpLFwiYmVmb3JlU2VuZFwiaW4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgdC5iZWZvcmVTZW5kJiZ0LmJlZm9yZVNlbmQoaCksaC5zZW5kKGcpLGh9ZnVuY3Rpb24gbygpe312YXIgaT1uKDg3KSx1PW4oODkpLGE9big5MCksYz17MDpcIkludGVybmFsIFhNTEh0dHBSZXF1ZXN0IEVycm9yXCIsNDpcIjR4eCBDbGllbnQgRXJyb3JcIiw1OlwiNXh4IFNlcnZlciBFcnJvclwifSxzPWkuWE1MSHR0cFJlcXVlc3R8fG8sZj1cIndpdGhDcmVkZW50aWFsc1wiaW4gbmV3IHM/czppLlhEb21haW5SZXF1ZXN0O3QuZXhwb3J0cz1yfV0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWluLmpzLm1hcCIsImltcG9ydCBiYlBhbm9yYW1hTGlzdCBmcm9tIFwiLi9iYlBhbm9yYW1hLmpzXCI7XG5cbmV4cG9ydCBjb25zdCBwYW5vcmFtYV9saXN0ID0ge1xuICBNUDNfT1ZFUlZJRVc6IHtcbiAgICB2aWV3SWQ6IFwiTVAzX09WRVJWSUVXXCIsXG4gICAgc3JjOiBcImFzc2V0cy9NUDNfT1ZFUlZJRVcuanBnXCIsXG4gICAgcm90YXRpb246IFwiMCA5MCAwXCIsXG4gICAgeHZhbHVlOiAtMC42LFxuICAgIG5leHQ6IG51bGwsXG4gIH0sXG4gIE1QM19URVJfRToge1xuICAgIHZpZXdJZDogXCJNUDNfVEVSX0VcIixcbiAgICBzcmM6IFwiYXNzZXRzL215cGh1b2MvdGVycmFjZS9NUDNfVEVSX0UuanBnXCIsXG4gICAgcm90YXRpb246IFwiMCAxOTUgMFwiLFxuICAgIG5leHQ6IFwiTVAzX1RFUl9DRU5URVJcIixcbiAgICB4dmFsdWU6IG51bGwsXG4gIH0sXG4gIE1QM19URVJfQ0VOVEVSOiB7XG4gICAgdmlld0lkOiBcIk1QM19URVJfQ0VOVEVSXCIsXG4gICAgc3JjOiBcImFzc2V0cy9teXBodW9jL3RlcnJhY2UvTVAzX1RFUl9DRU5URVIuanBnXCIsXG4gICAgcm90YXRpb246IFwiMCAxMDAgMFwiLFxuICAgIG5leHQ6IFwiTVAzX1RFUl9DMVwiLFxuICAgIHh2YWx1ZTogbnVsbCxcbiAgfSxcbiAgTVAzX1RFUl9DMToge1xuICAgIHZpZXdJZDogXCJNUDNfVEVSX0MxXCIsXG4gICAgc3JjOiBcImFzc2V0cy9teXBodW9jL3RlcnJhY2UvTVAzX1RFUl9DMS5qcGdcIixcbiAgICByb3RhdGlvbjogXCIwIDEwMCAwXCIsXG4gICAgbmV4dDogXCJNUDNfVEVSX0MyXCIsXG4gICAgeHZhbHVlOiBudWxsLFxuICB9LFxuICBNUDNfVEVSX0MyOiB7XG4gICAgdmlld0lkOiBcIk1QM19URVJfQzJcIixcbiAgICBzcmM6IFwiYXNzZXRzL215cGh1b2MvdGVycmFjZS9NUDNfVEVSX0MyLmpwZ1wiLFxuICAgIHJvdGF0aW9uOiBcIjAgMTAwIDBcIixcbiAgICBuZXh0OiBcIk1QM19URVJfTzFcIixcbiAgICB4dmFsdWU6IG51bGwsXG4gIH0sXG4gIE1QM19URVJfTzE6IHtcbiAgICB2aWV3SWQ6IFwiTVAzX1RFUl9PMVwiLFxuICAgIHNyYzogXCJhc3NldHMvbXlwaHVvYy90ZXJyYWNlL01QM19URVJfTzEuanBnXCIsXG4gICAgcm90YXRpb246IFwiMCAtOTAgMFwiLFxuICAgIG5leHQ6IFwiTVAzX1RFUl9PMlwiLFxuICAgIHh2YWx1ZTogbnVsbCxcbiAgfSxcbiAgTVAzX1RFUl9PMjoge1xuICAgIHZpZXdJZDogXCJNUDNfVEVSX08yXCIsXG4gICAgc3JjOiBcImFzc2V0cy9teXBodW9jL3RlcnJhY2UvTVAzX1RFUl9PMi5qcGdcIixcbiAgICByb3RhdGlvbjogXCIwIDIxMCAwXCIsXG4gICAgbmV4dDogXCJNUDNfVEVSX0NFTlRFUlwiLFxuICAgIHh2YWx1ZTogbnVsbCxcbiAgfSxcbiAgLy9TRU1JXG4gIE1QM19TRU1JX0U6IHtcbiAgICB2aWV3SWQ6IFwiTVAzX1NFTUlfRVwiLFxuICAgIHNyYzogXCJhc3NldHMvbXlwaHVvYy9zZW1pL01QM19TRU1JX0UuanBnXCIsXG4gICAgcm90YXRpb246IFwiMCAxNDUgMFwiLFxuICAgIG5leHQ6IFwiTVAzX1NFTUlfQ0VOVEVSXCIsXG4gICAgeHZhbHVlOiBudWxsLFxuICB9LFxuICBNUDNfU0VNSV9DRU5URVI6IHtcbiAgICB2aWV3SWQ6IFwiTVAzX1NFTUlfQ0VOVEVSXCIsXG4gICAgc3JjOiBcImFzc2V0cy9teXBodW9jL3NlbWkvTVAzX1NFTUlfQ0VOVEVSLmpwZ1wiLFxuICAgIHJvdGF0aW9uOiBcIjAgMTAwIDBcIixcbiAgICBuZXh0OiBcIk1QM19TRU1JX0MxXCIsXG4gICAgeHZhbHVlOiBudWxsLFxuICB9LFxuICBNUDNfU0VNSV9DMToge1xuICAgIHZpZXdJZDogXCJNUDNfU0VNSV9DMVwiLFxuICAgIHNyYzogXCJhc3NldHMvbXlwaHVvYy9zZW1pL01QM19TRU1JX0MxLmpwZ1wiLFxuICAgIHJvdGF0aW9uOiBcIjAgMTUwIDBcIixcbiAgICBuZXh0OiBcIk1QM19TRU1JX0MyXCIsXG4gICAgeHZhbHVlOiBudWxsLFxuICB9LFxuICBNUDNfU0VNSV9DMjoge1xuICAgIHZpZXdJZDogXCJNUDNfU0VNSV9DMlwiLFxuICAgIHNyYzogXCJhc3NldHMvbXlwaHVvYy9zZW1pL01QM19TRU1JX0MyLmpwZ1wiLFxuICAgIHJvdGF0aW9uOiBcIjAgMTAwIDBcIixcbiAgICBuZXh0OiBcIk1QM19TRU1JX08xXCIsXG4gICAgeHZhbHVlOiBudWxsLFxuICB9LFxuICBNUDNfU0VNSV9PMToge1xuICAgIHZpZXdJZDogXCJNUDNfU0VNSV9PMVwiLFxuICAgIHNyYzogXCJhc3NldHMvbXlwaHVvYy9zZW1pL01QM19TRU1JX08xLmpwZ1wiLFxuICAgIHJvdGF0aW9uOiBcIjAgMCAwXCIsXG4gICAgbmV4dDogXCJNUDNfU0VNSV9PMlwiLFxuICAgIHh2YWx1ZTogbnVsbCxcbiAgfSxcbiAgTVAzX1NFTUlfTzI6IHtcbiAgICB2aWV3SWQ6IFwiTVAzX1NFTUlfTzJcIixcbiAgICBzcmM6IFwiYXNzZXRzL215cGh1b2Mvc2VtaS9NUDNfU0VNSV9PMi5qcGdcIixcbiAgICByb3RhdGlvbjogXCIwIDE4MCAwXCIsXG4gICAgbmV4dDogXCJNUDNfU0VNSV9DRU5URVJcIixcbiAgICB4dmFsdWU6IG51bGwsXG4gIH0sXG4gIC8vIGRldFxuICBNUDNfREVUX0U6IHtcbiAgICB2aWV3SWQ6IFwiTVAzX0RFVF9FXCIsXG4gICAgc3JjOiBcImFzc2V0cy9teXBodW9jL2RldC9NUDNfREVUX0UuanBnXCIsXG4gICAgcm90YXRpb246IFwiMCAxMDAgMFwiLFxuICAgIG5leHQ6IFwiTVAzX0RFVF9DRU5URVJcIixcbiAgICB4dmFsdWU6IG51bGwsXG4gIH0sXG4gIE1QM19ERVRfQ0VOVEVSOiB7XG4gICAgdmlld0lkOiBcIk1QM19ERVRfQ0VOVEVSXCIsXG4gICAgc3JjOiBcImFzc2V0cy9teXBodW9jL2RldC9NUDNfREVUX0NFTlRFUi5qcGdcIixcbiAgICByb3RhdGlvbjogXCIwIDUzIDBcIixcbiAgICBuZXh0OiBcIk1QM19ERVRfTzFcIixcbiAgICB4dmFsdWU6IG51bGwsXG4gIH0sXG4gIE1QM19ERVRfTzE6IHtcbiAgICB2aWV3SWQ6IFwiTVAzX0RFVF9PMVwiLFxuICAgIHNyYzogXCJhc3NldHMvbXlwaHVvYy9kZXQvTVAzX0RFVF9PMS5qcGdcIixcbiAgICByb3RhdGlvbjogXCIwIC0yNSAwXCIsXG4gICAgbmV4dDogXCJNUDNfREVUX08yXCIsXG4gICAgeHZhbHVlOiBudWxsLFxuICB9LFxuICBNUDNfREVUX08yOiB7XG4gICAgdmlld0lkOiBcIk1QM19ERVRfTzJcIixcbiAgICBzcmM6IFwiYXNzZXRzL215cGh1b2MvZGV0L01QM19ERVRfTzIuanBnXCIsXG4gICAgcm90YXRpb246IFwiMCAxODAgMFwiLFxuICAgIG5leHQ6IFwiTVAzX0RFVF9DRU5URVJcIixcbiAgICB4dmFsdWU6IG51bGwsXG4gIH0sXG4gIC8vIG91dGRvb3JcbiAgTVAzX09VVERPT1JfMToge1xuICAgIHZpZXdJZDogXCJNUDNfT1VURE9PUl8xXCIsXG4gICAgc3JjOiBcImFzc2V0cy9vdXRkb29yL01QM19WSUVXMS5qcGdcIixcbiAgICByb3RhdGlvbjogXCIwIC0xMDAgMFwiLFxuICAgIHh2YWx1ZTogbnVsbCxcbiAgICBuZXh0OiBcIk1QM19PVVRET09SXzJcIixcbiAgfSxcbiAgTVAzX09VVERPT1JfMjoge1xuICAgIHZpZXdJZDogXCJNUDNfT1VURE9PUl8yXCIsXG4gICAgc3JjOiBcImFzc2V0cy9vdXRkb29yL01QM19WSUVXMi5qcGdcIixcbiAgICByb3RhdGlvbjogXCIwIDkwIDBcIixcbiAgICB4dmFsdWU6IC0wLjIsXG4gICAgbmV4dDogXCJNUDNfT1VURE9PUl8zXCIsXG4gIH0sXG4gIE1QM19PVVRET09SXzM6IHtcbiAgICB2aWV3SWQ6IFwiTVAzX09VVERPT1JfM1wiLFxuICAgIHNyYzogXCJhc3NldHMvb3V0ZG9vci9NUDNfVklFVzMuanBnXCIsXG4gICAgcm90YXRpb246IFwiMCA4NSAwXCIsXG4gICAgeHZhbHVlOiAtMC4yLFxuICAgIG5leHQ6IFwiTVAzX09VVERPT1JfNFwiLFxuICB9LFxuICBNUDNfT1VURE9PUl80OiB7XG4gICAgdmlld0lkOiBcIk1QM19PVVRET09SXzRcIixcbiAgICBzcmM6IFwiYXNzZXRzL291dGRvb3IvTVAzX1ZJRVc0LmpwZ1wiLFxuICAgIHJvdGF0aW9uOiBcIjAgOTAgMFwiLFxuICAgIHh2YWx1ZTogLTAuMixcbiAgICBuZXh0OiBcIk1QM19PVVRET09SXzVcIixcbiAgfSxcbiAgTVAzX09VVERPT1JfNToge1xuICAgIHZpZXdJZDogXCJNUDNfT1VURE9PUl81XCIsXG4gICAgc3JjOiBcImFzc2V0cy9vdXRkb29yL01QM19WSUVXNS5qcGdcIixcbiAgICByb3RhdGlvbjogXCIwIDkwIDBcIixcbiAgICB4dmFsdWU6IC0wLjMsXG4gICAgbmV4dDogXCJNUDNfT1VURE9PUl82XCIsXG4gIH0sXG4gIE1QM19PVVRET09SXzY6IHtcbiAgICB2aWV3SWQ6IFwiTVAzX09VVERPT1JfNlwiLFxuICAgIHNyYzogXCJhc3NldHMvb3V0ZG9vci9NUDNfVklFVzYuanBnXCIsXG4gICAgcm90YXRpb246IFwiMCA5MCAwXCIsXG4gICAgeHZhbHVlOiAtMC4zLFxuICAgIG5leHQ6IFwiTVAzX09VVERPT1JfN1wiLFxuICB9LFxuICBNUDNfT1VURE9PUl83OiB7XG4gICAgdmlld0lkOiBcIk1QM19PVVRET09SXzdcIixcbiAgICBzcmM6IFwiYXNzZXRzL291dGRvb3IvTVAzX1ZJRVc3LmpwZ1wiLFxuICAgIHJvdGF0aW9uOiBcIjAgLTE3NSAwXCIsXG4gICAgeHZhbHVlOiAtMC41LFxuICAgIG5leHQ6IFwiTVAzX09VVERPT1JfOFwiLFxuICB9LFxuICBNUDNfT1VURE9PUl84OiB7XG4gICAgdmlld0lkOiBcIk1QM19PVVRET09SXzhcIixcbiAgICBzcmM6IFwiYXNzZXRzL291dGRvb3IvTVAzX1ZJRVc4LmpwZ1wiLFxuICAgIHJvdGF0aW9uOiBcIjAgOTUgMFwiLFxuICAgIHh2YWx1ZTogLTAuNSxcbiAgICBuZXh0OiBcIk1QM19PVVRET09SXzlcIixcbiAgfSxcbiAgTVAzX09VVERPT1JfOToge1xuICAgIHZpZXdJZDogXCJNUDNfT1VURE9PUl85XCIsXG4gICAgc3JjOiBcImFzc2V0cy9vdXRkb29yL01QM19WSUVXOS5qcGdcIixcbiAgICByb3RhdGlvbjogXCIwIDgwIDBcIixcbiAgICB4dmFsdWU6IC0wLjUsXG4gICAgbmV4dDogXCJNUDNfT1VURE9PUl8xXCIsXG4gIH0sXG4gIC4uLmJiUGFub3JhbWFMaXN0LFxufTtcbiIsImNvbnN0IGJiUGFub3JhbWFMaXN0ID0ge1xuICBCQl9PVkVSVklFVzoge1xuICAgIHZpZXdJZDogXCJCQl9PVkVSVklFV1wiLFxuICAgIHNyYzogXCJhc3NldHMvYmF1YmFuZy9CQl9PVkVSVklFVy5qcGdcIixcbiAgICByb3RhdGlvbjogXCIwIDEwMCAwXCIsXG4gICAgeHZhbHVlOiAtMC42LFxuICAgIG5leHQ6IG51bGwsXG4gIH0sXG4gIC8vIERFVFxuICBCQl9ERVRfRToge1xuICAgIHZpZXdJZDogXCJCQl9ERVRfRVwiLFxuICAgIHNyYzogXCJhc3NldHMvYmF1YmFuZy9CQl9ERVRfRS5qcGdcIixcbiAgICByb3RhdGlvbjogXCIwIDEyMCAwXCIsXG4gICAgbmV4dDogXCJCQl9ERVRfQ0VOVEVSXCIsXG4gICAgeHZhbHVlOiBudWxsLFxuICB9LFxuICBCQl9ERVRfQ0VOVEVSOiB7XG4gICAgdmlld0lkOiBcIkJCX0RFVF9DRU5URVJcIixcbiAgICBzcmM6IFwiYXNzZXRzL2JhdWJhbmcvQkJfREVUX0NFTlRFUi5qcGdcIixcbiAgICByb3RhdGlvbjogXCIwIDAgMFwiLFxuICAgIG5leHQ6IFwiQkJfREVUX09cIixcbiAgICB4dmFsdWU6IG51bGwsXG4gIH0sXG4gIEJCX0RFVF9POiB7XG4gICAgdmlld0lkOiBcIkJCX0RFVF9PXCIsXG4gICAgc3JjOiBcImFzc2V0cy9iYXViYW5nL0JCX0RFVF9PLmpwZ1wiLFxuICAgIHJvdGF0aW9uOiBcIjAgMCAwXCIsXG4gICAgbmV4dDogXCJCQl9ERVRfQ0VOVEVSXCIsXG4gICAgeHZhbHVlOiBudWxsLFxuICB9LFxuICAvL1RFUlxuICBCQl9URVJfRTE6IHtcbiAgICB2aWV3SWQ6IFwiQkJfVEVSX0UxXCIsXG4gICAgc3JjOiBcImFzc2V0cy9iYXViYW5nL0JCX1RFUl9FMS5qcGdcIixcbiAgICByb3RhdGlvbjogXCIwIDk1IDBcIixcbiAgICBuZXh0OiBcIkJCX1RFUl9DRU5URVJcIixcbiAgICB4dmFsdWU6IG51bGwsXG4gIH0sXG4gIEJCX1RFUl9FMjoge1xuICAgIHZpZXdJZDogXCJCQl9URVJfRTJcIixcbiAgICBzcmM6IFwiYXNzZXRzL2JhdWJhbmcvQkJfVEVSX0UyLmpwZ1wiLFxuICAgIHJvdGF0aW9uOiBcIjAgMTMwIDBcIixcbiAgICBuZXh0OiBcIkJCX1RFUl9DRU5URVJcIixcbiAgICB4dmFsdWU6IG51bGwsXG4gIH0sXG4gIEJCX1RFUl9DRU5URVI6IHtcbiAgICB2aWV3SWQ6IFwiQkJfVEVSX0NFTlRFUlwiLFxuICAgIHNyYzogXCJhc3NldHMvYmF1YmFuZy9CQl9URVJfQ0VOVEVSLmpwZ1wiLFxuICAgIHJvdGF0aW9uOiBcIjAgLTQwIDBcIixcbiAgICBuZXh0OiBcIkJCX1RFUl9DMVwiLFxuICAgIHh2YWx1ZTogbnVsbCxcbiAgfSxcbiAgQkJfVEVSX0MxOiB7XG4gICAgdmlld0lkOiBcIkJCX1RFUl9DMVwiLFxuICAgIHNyYzogXCJhc3NldHMvYmF1YmFuZy9CQl9URVJfQzEuanBnXCIsXG4gICAgcm90YXRpb246IFwiMCAwIDBcIixcbiAgICBuZXh0OiBcIkJCX1RFUl9DMlwiLFxuICAgIHh2YWx1ZTogbnVsbCxcbiAgfSxcbiAgQkJfVEVSX0MyOiB7XG4gICAgdmlld0lkOiBcIkJCX1RFUl9DMlwiLFxuICAgIHNyYzogXCJhc3NldHMvYmF1YmFuZy9CQl9URVJfQzIuanBnXCIsXG4gICAgcm90YXRpb246IFwiMCAtNzAgMFwiLFxuICAgIG5leHQ6IFwiQkJfVEVSX0MzXCIsXG4gICAgeHZhbHVlOiBudWxsLFxuICB9LFxuICBCQl9URVJfQzM6IHtcbiAgICB2aWV3SWQ6IFwiQkJfVEVSX0MzXCIsXG4gICAgc3JjOiBcImFzc2V0cy9iYXViYW5nL0JCX1RFUl9DMy5qcGdcIixcbiAgICByb3RhdGlvbjogXCIwIDAgMFwiLFxuICAgIG5leHQ6IFwiQkJfVEVSX08xXCIsXG4gICAgeHZhbHVlOiBudWxsLFxuICB9LFxuICBCQl9URVJfTzE6IHtcbiAgICB2aWV3SWQ6IFwiQkJfVEVSX08xXCIsXG4gICAgc3JjOiBcImFzc2V0cy9iYXViYW5nL0JCX1RFUl9PMS5qcGdcIixcbiAgICByb3RhdGlvbjogXCIwIDE5NSAwXCIsXG4gICAgbmV4dDogXCJCQl9URVJfTzJcIixcbiAgICB4dmFsdWU6IG51bGwsXG4gIH0sXG4gIEJCX1RFUl9PMjoge1xuICAgIHZpZXdJZDogXCJCQl9URVJfTzJcIixcbiAgICBzcmM6IFwiYXNzZXRzL2JhdWJhbmcvQkJfVEVSX08yLmpwZ1wiLFxuICAgIHJvdGF0aW9uOiBcIjAgMzAgMFwiLFxuICAgIG5leHQ6IFwiQkJfVEVSX0NFTlRFUlwiLFxuICAgIHh2YWx1ZTogbnVsbCxcbiAgfSxcbiAgLy8gU0VNSVxuICBCQl9TRU1JX0UxOiB7XG4gICAgdmlld0lkOiBcIkJCX1NFTUlfRTFcIixcbiAgICBzcmM6IFwiYXNzZXRzL2JhdWJhbmcvQkJfU0VNSV9FMS5qcGdcIixcbiAgICByb3RhdGlvbjogXCIwIDEwMiAwXCIsXG4gICAgbmV4dDogXCJCQl9TRU1JX0NFTlRFUlwiLFxuICAgIHh2YWx1ZTogbnVsbCxcbiAgfSxcbiAgQkJfU0VNSV9FMjoge1xuICAgIHZpZXdJZDogXCJCQl9TRU1JX0UyXCIsXG4gICAgc3JjOiBcImFzc2V0cy9iYXViYW5nL0JCX1NFTUlfRTIuanBnXCIsXG4gICAgcm90YXRpb246IFwiMCAxMzAgMFwiLFxuICAgIG5leHQ6IFwiQkJfU0VNSV9DRU5URVJcIixcbiAgICB4dmFsdWU6IG51bGwsXG4gIH0sXG4gIEJCX1NFTUlfQ0VOVEVSOiB7XG4gICAgdmlld0lkOiBcIkJCX1NFTUlfQ0VOVEVSXCIsXG4gICAgc3JjOiBcImFzc2V0cy9iYXViYW5nL0JCX1NFTUlfQ0VOVEVSLmpwZ1wiLFxuICAgIHJvdGF0aW9uOiBcIjAgMTYwIDBcIixcbiAgICBuZXh0OiBcIkJCX1NFTUlfQzFcIixcbiAgICB4dmFsdWU6IG51bGwsXG4gIH0sXG4gIEJCX1NFTUlfQzE6IHtcbiAgICB2aWV3SWQ6IFwiQkJfU0VNSV9DMVwiLFxuICAgIHNyYzogXCJhc3NldHMvYmF1YmFuZy9CQl9TRU1JX0MxLmpwZ1wiLFxuICAgIHJvdGF0aW9uOiBcIjAgNzAgMFwiLFxuICAgIG5leHQ6IFwiQkJfU0VNSV9DMlwiLFxuICAgIHh2YWx1ZTogbnVsbCxcbiAgfSxcbiAgQkJfU0VNSV9DMjoge1xuICAgIHZpZXdJZDogXCJCQl9TRU1JX0MyXCIsXG4gICAgc3JjOiBcImFzc2V0cy9iYXViYW5nL0JCX1NFTUlfQzIuanBnXCIsXG4gICAgcm90YXRpb246IFwiMCAxMDAgMFwiLFxuICAgIG5leHQ6IFwiQkJfU0VNSV9DM1wiLFxuICAgIHh2YWx1ZTogbnVsbCxcbiAgfSxcbiAgQkJfU0VNSV9DMzoge1xuICAgIHZpZXdJZDogXCJCQl9TRU1JX0MzXCIsXG4gICAgc3JjOiBcImFzc2V0cy9iYXViYW5nL0JCX1NFTUlfQzMuanBnXCIsXG4gICAgcm90YXRpb246IFwiMCAwIDBcIixcbiAgICBuZXh0OiBcIkJCX1NFTUlfTzFcIixcbiAgICB4dmFsdWU6IG51bGwsXG4gIH0sXG4gIEJCX1NFTUlfTzE6IHtcbiAgICB2aWV3SWQ6IFwiQkJfU0VNSV9PMVwiLFxuICAgIHNyYzogXCJhc3NldHMvYmF1YmFuZy9CQl9TRU1JX08xLmpwZ1wiLFxuICAgIHJvdGF0aW9uOiBcIjAgMTAwIDBcIixcbiAgICBuZXh0OiBcIkJCX1NFTUlfTzJcIixcbiAgICB4dmFsdWU6IG51bGwsXG4gIH0sXG4gIEJCX1NFTUlfTzI6IHtcbiAgICB2aWV3SWQ6IFwiQkJfU0VNSV9PMlwiLFxuICAgIHNyYzogXCJhc3NldHMvYmF1YmFuZy9CQl9TRU1JX08yLmpwZ1wiLFxuICAgIHJvdGF0aW9uOiBcIjAgOTAgMFwiLFxuICAgIG5leHQ6IFwiQkJfU0VNSV9DRU5URVJcIixcbiAgICB4dmFsdWU6IG51bGwsXG4gIH0sXG4gIC8vIG91dGRvb3JcbiAgQkJfT1VURE9PUl8xOiB7XG4gICAgdmlld0lkOiBcIkJCX09VVERPT1JfMVwiLFxuICAgIHNyYzogXCJhc3NldHMvYmF1YmFuZy9CQl9WSUVXMS5qcGdcIixcbiAgICByb3RhdGlvbjogXCIwIDkwIDBcIixcbiAgICB4dmFsdWU6IC0wLjIsXG4gICAgbmV4dDogXCJCQl9PVVRET09SXzJcIixcbiAgfSxcbiAgQkJfT1VURE9PUl8yOiB7XG4gICAgdmlld0lkOiBcIkJCX09VVERPT1JfMlwiLFxuICAgIHNyYzogXCJhc3NldHMvYmF1YmFuZy9CQl9WSUVXMi5qcGdcIixcbiAgICByb3RhdGlvbjogXCIwIDkwIDBcIixcbiAgICB4dmFsdWU6IC0wLjIsXG4gICAgbmV4dDogXCJCQl9PVVRET09SXzNcIixcbiAgfSxcbiAgQkJfT1VURE9PUl8zOiB7XG4gICAgdmlld0lkOiBcIkJCX09VVERPT1JfM1wiLFxuICAgIHNyYzogXCJhc3NldHMvYmF1YmFuZy9CQl9WSUVXMy5qcGdcIixcbiAgICByb3RhdGlvbjogXCIwIDc1IDBcIixcbiAgICB4dmFsdWU6IDAsXG4gICAgbmV4dDogXCJCQl9PVVRET09SXzRcIixcbiAgfSxcbiAgQkJfT1VURE9PUl80OiB7XG4gICAgdmlld0lkOiBcIkJCX09VVERPT1JfNFwiLFxuICAgIHNyYzogXCJhc3NldHMvYmF1YmFuZy9CQl9WSUVXNC5qcGdcIixcbiAgICByb3RhdGlvbjogXCIwIDEwMCAwXCIsXG4gICAgeHZhbHVlOiAtMC4zLFxuICAgIG5leHQ6IFwiQkJfT1VURE9PUl81XCIsXG4gIH0sXG4gIEJCX09VVERPT1JfNToge1xuICAgIHZpZXdJZDogXCJCQl9PVVRET09SXzVcIixcbiAgICBzcmM6IFwiYXNzZXRzL2JhdWJhbmcvQkJfVklFVzUuanBnXCIsXG4gICAgcm90YXRpb246IFwiMCAtMTQwIDBcIixcbiAgICB4dmFsdWU6IC0wLjMsXG4gICAgbmV4dDogXCJCQl9PVVRET09SXzZcIixcbiAgfSxcbiAgQkJfT1VURE9PUl82OiB7XG4gICAgdmlld0lkOiBcIkJCX09VVERPT1JfNlwiLFxuICAgIHNyYzogXCJhc3NldHMvYmF1YmFuZy9CQl9WSUVXNi5qcGdcIixcbiAgICByb3RhdGlvbjogXCIwIC0yNDAgMFwiLFxuICAgIHh2YWx1ZTogLTEsXG4gICAgbmV4dDogXCJCQl9PVVRET09SXzFcIixcbiAgfSxcbn07XG5leHBvcnQgZGVmYXVsdCBiYlBhbm9yYW1hTGlzdDtcbiIsImltcG9ydCBtcDNPdXRkb29ySG90c3BvdHMgZnJvbSBcIi4vaG90c3BvdHMvbXAzT3V0ZG9vcnMuanNcIjtcbmltcG9ydCBtcDNUZXJIb3RzcG90cyBmcm9tIFwiLi9ob3RzcG90cy9tcDNUZXIuanNcIjtcbmltcG9ydCBtcDNTZW1pSG90c3BvdHMgZnJvbSBcIi4vaG90c3BvdHMvbXAzU2VtaS5qc1wiO1xuaW1wb3J0IG1wM0RldEhvdHNwb3RzIGZyb20gXCIuL2hvdHNwb3RzL21wM0RldC5qc1wiO1xuaW1wb3J0IGJiVGVySG90c3BvdHMgZnJvbSBcIi4vaG90c3BvdHMvYmJUZXIuanNcIjtcbmltcG9ydCBiYlNlbWlIb3RzcG90cyBmcm9tIFwiLi9ob3RzcG90cy9iYlNlbWkuanNcIjtcbmltcG9ydCBiYkRldEhvdHNwb3RzIGZyb20gXCIuL2hvdHNwb3RzL2JiRGV0LmpzXCI7XG5pbXBvcnQgYmJPdXRkb29ySG90c3BvdHMgZnJvbSBcIi4vaG90c3BvdHMvYmJPdXRkb29ycy5qc1wiO1xuXG5leHBvcnQgY29uc3QgaG90c3BvdF9saXN0ID0ge1xuICBNUDNfT1ZFUlZJRVc6IFtcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiTVAzX09WRVJWSUVXX1RPX1RFUl9DRU5URVJcIlxuICAgICAgdG89XCJNUDNfVEVSX0NFTlRFUlwiXG4gICAgICBwb3NpdGlvbj1cIi0xNC4zOSAtNC42NSAxLjI0XCJcbiAgICAgIGxvb2stYXQ9XCJbY2FtZXJhXVwiXG4gICAgICBzY2FsZT1cIjMgMyAzXCJcbiAgICA+XG4gICAgICA8YS1zdmdcbiAgICAgICAgc3JjPVwiI2hvdHNwb3QtaWNvbi1zdmdcIlxuICAgICAgICBwcm9wb3J0aW9uYWwtc2NhbGU9XCIwLjc1XCJcbiAgICAgICAgZXh0cnVkZT1cIjFcIlxuICAgICAgICB6LWZhY3Rvcj1cIjBcIlxuICAgICAgPlxuICAgICAgPGEtdGV4dFxuICAgICAgICB2YWx1ZT1cIlRFUlJBQ0VcIlxuICAgICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgIGNvbG9yPVwiIzY5Njk2OVwiXG4gICAgICAgIHBvc2l0aW9uPVwiMCAwLjM4IC0wLjA1XCJcbiAgICAgICAgcm90YXRpb249XCIwIDAgLTIuNVwiXG4gICAgICAgIG1peGluPVwiaG90c3BvdC10b3AtdGV4dFwiXG4gICAgICA+PC9hLXRleHQ+XG4gICAgICA8YS10ZXh0XG4gICAgICAgIHZhbHVlPVwiVEVSUkFDRVwiXG4gICAgICAgIGFsaWduPVwiY2VudGVyXCJcbiAgICAgICAgcm90YXRpb249XCIwIDAgLTIuNVwiXG4gICAgICAgIG1peGluPVwiaG90c3BvdC10b3AtdGV4dFwiXG4gICAgICA+PC9hLXRleHQ+XG4gICAgICA8YS1lbnRpdHlcbiAgICAgICAgcG9zaXRpb249XCIwIC0wLjIgLTAuMlwiXG4gICAgICAgIG1hdGVyaWFsPVwic2lkZTogZG91YmxlOyBjb2xvcjogd2hpdGU7IHNoYWRlcjogZmxhdDsgb3BhY2l0eTogMFwiXG4gICAgICAgIGdlb21ldHJ5PVwicHJpbWl0aXZlOiByaW5nOyByYWRpdXNJbm5lcjogMC40NTsgcmFkaXVzT3V0ZXI6IDAuNVwiXG4gICAgICAgIGFuaW1hdGlvbl9fZ3Jvdz1cInByb3BlcnR5OiBzY2FsZTsgZnJvbTogMCAwIDA7IHRvOiAxIDAuNSAxOyBsb29wOiB0cnVlOyBlYXNpbmc6IGVhc2VJbk91dFF1YWQ7IGR1cjogMTIwMFwiXG4gICAgICAgIGFuaW1hdGlvbl9fZmFkZT1cInByb3BlcnR5OiBtYXRlcmlhbC5vcGFjaXR5OyB0bzogMTsgbG9vcDogdHJ1ZTsgZWFzaW5nOiBlYXNlSW5PdXRRdWFkOyBkaXI6IGFsdGVybmF0ZTsgZHVyOiA2MDBcIlxuICAgICAgPjwvYS1lbnRpdHk+XG4gICAgICA8YS1lbnRpdHlcbiAgICAgICAgcG9zaXRpb249XCIwIC0wLjIgLTAuMlwiXG4gICAgICAgIG1hdGVyaWFsPVwic2lkZTogZG91YmxlOyBjb2xvcjogd2hpdGU7IHNoYWRlcjogZmxhdDsgb3BhY2l0eTogMFwiXG4gICAgICAgIGdlb21ldHJ5PVwicHJpbWl0aXZlOiByaW5nOyByYWRpdXNJbm5lcjogMC40NTsgcmFkaXVzT3V0ZXI6IDAuNVwiXG4gICAgICAgIGFuaW1hdGlvbl9fZ3Jvdz1cInByb3BlcnR5OiBzY2FsZTsgZnJvbTogMCAwIDA7IHRvOiAwLjUgMC4yNSAwLjU7IGxvb3A6IHRydWU7IGVhc2luZzogZWFzZUluT3V0UXVhZDsgZHVyOiAxMjAwXCJcbiAgICAgICAgYW5pbWF0aW9uX19mYWRlPVwicHJvcGVydHk6IG1hdGVyaWFsLm9wYWNpdHk7IHRvOiAxOyBsb29wOiB0cnVlOyBlYXNpbmc6IGVhc2VJbk91dFF1YWQ7IGRpcjogYWx0ZXJuYXRlOyBkdXI6IDYwMFwiXG4gICAgICA+PC9hLWVudGl0eT5cbiAgICAgIDxhLWVudGl0eVxuICAgICAgICBwb3NpdGlvbj1cIjAgMC40IDBcIlxuICAgICAgICBnZW9tZXRyeT1cInByaW1pdGl2ZTogYm94OyB3aWR0aDogMC44OyBoZWlnaHQ6IDAuNTsgZGVwdGg6IDAuNVwiXG4gICAgICAgIG1hdGVyaWFsPVwib3BhY2l0eTogMDtcIlxuICAgICAgPjwvYS1lbnRpdHk+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiTVAzX09WRVJWSUVXX1RPX0RFVEFDSEVEXCJcbiAgICAgIHRvPVwiTVAzX0RFVF9DRU5URVJcIlxuICAgICAgcG9zaXRpb249XCItOC4xMiAtNS40NyAwLjM1XCJcbiAgICAgIGxvb2stYXQ9XCJbY2FtZXJhXVwiXG4gICAgICBzY2FsZT1cIjIuMjUgMi4yNSAyLjI1XCJcbiAgICA+XG4gICAgICA8YS1zdmdcbiAgICAgICAgc3JjPVwiI2hvdHNwb3QtaWNvbi1zdmdcIlxuICAgICAgICBwcm9wb3J0aW9uYWwtc2NhbGU9XCIwLjc1XCJcbiAgICAgICAgZXh0cnVkZT1cIjFcIlxuICAgICAgICB6LWZhY3Rvcj1cIjBcIlxuICAgICAgPlxuICAgICAgPGEtdGV4dFxuICAgICAgICB2YWx1ZT1cIkRFVEFDSEVEXCJcbiAgICAgICAgYWxpZ249XCJjZW50ZXJcIlxuICAgICAgICBjb2xvcj1cIiM2OTY5NjlcIlxuICAgICAgICBwb3NpdGlvbj1cIjAgMC4zOCAtMC4wNVwiXG4gICAgICAgIHJvdGF0aW9uPVwiMCAwIC0yLjVcIlxuICAgICAgICBtaXhpbj1cImhvdHNwb3QtdG9wLXRleHRcIlxuICAgICAgPjwvYS10ZXh0PlxuICAgICAgPGEtdGV4dFxuICAgICAgICB2YWx1ZT1cIkRFVEFDSEVEXCJcbiAgICAgICAgYWxpZ249XCJjZW50ZXJcIlxuICAgICAgICByb3RhdGlvbj1cIjAgMCAtMi41XCJcbiAgICAgICAgbWl4aW49XCJob3RzcG90LXRvcC10ZXh0XCJcbiAgICAgID48L2EtdGV4dD5cbiAgICAgIDxhLWVudGl0eVxuICAgICAgICBwb3NpdGlvbj1cIjAgLTAuMiAtMC4yXCJcbiAgICAgICAgbWF0ZXJpYWw9XCJzaWRlOiBkb3VibGU7IGNvbG9yOiB3aGl0ZTsgc2hhZGVyOiBmbGF0OyBvcGFjaXR5OiAwXCJcbiAgICAgICAgZ2VvbWV0cnk9XCJwcmltaXRpdmU6IHJpbmc7IHJhZGl1c0lubmVyOiAwLjQ1OyByYWRpdXNPdXRlcjogMC41XCJcbiAgICAgICAgYW5pbWF0aW9uX19ncm93PVwicHJvcGVydHk6IHNjYWxlOyBmcm9tOiAwIDAgMDsgdG86IDEgMC41IDE7IGxvb3A6IHRydWU7IGVhc2luZzogZWFzZUluT3V0UXVhZDsgZHVyOiAxMjAwXCJcbiAgICAgICAgYW5pbWF0aW9uX19mYWRlPVwicHJvcGVydHk6IG1hdGVyaWFsLm9wYWNpdHk7IHRvOiAxOyBsb29wOiB0cnVlOyBlYXNpbmc6IGVhc2VJbk91dFF1YWQ7IGRpcjogYWx0ZXJuYXRlOyBkdXI6IDYwMFwiXG4gICAgICA+PC9hLWVudGl0eT5cbiAgICAgIDxhLWVudGl0eVxuICAgICAgICBwb3NpdGlvbj1cIjAgLTAuMiAtMC4yXCJcbiAgICAgICAgbWF0ZXJpYWw9XCJzaWRlOiBkb3VibGU7IGNvbG9yOiB3aGl0ZTsgc2hhZGVyOiBmbGF0OyBvcGFjaXR5OiAwXCJcbiAgICAgICAgZ2VvbWV0cnk9XCJwcmltaXRpdmU6IHJpbmc7IHJhZGl1c0lubmVyOiAwLjQ1OyByYWRpdXNPdXRlcjogMC41XCJcbiAgICAgICAgYW5pbWF0aW9uX19ncm93PVwicHJvcGVydHk6IHNjYWxlOyBmcm9tOiAwIDAgMDsgdG86IDAuNSAwLjI1IDAuNTsgbG9vcDogdHJ1ZTsgZWFzaW5nOiBlYXNlSW5PdXRRdWFkOyBkdXI6IDEyMDBcIlxuICAgICAgICBhbmltYXRpb25fX2ZhZGU9XCJwcm9wZXJ0eTogbWF0ZXJpYWwub3BhY2l0eTsgdG86IDE7IGxvb3A6IHRydWU7IGVhc2luZzogZWFzZUluT3V0UXVhZDsgZGlyOiBhbHRlcm5hdGU7IGR1cjogNjAwXCJcbiAgICAgID48L2EtZW50aXR5PlxuICAgICAgPGEtZW50aXR5XG4gICAgICAgIHBvc2l0aW9uPVwiMCAwLjQgMFwiXG4gICAgICAgIGdlb21ldHJ5PVwicHJpbWl0aXZlOiBib3g7IHdpZHRoOiAwLjg7IGhlaWdodDogMC41OyBkZXB0aDogMC41XCJcbiAgICAgICAgbWF0ZXJpYWw9XCJvcGFjaXR5OiAwO1wiXG4gICAgICA+PC9hLWVudGl0eT5cbiAgICA8L2EtaG90c3BvdD5gLFxuICAgIGA8YS1ob3RzcG90XG4gICAgICB2aXNpYmxlPVwiZmFsc2VcIlxuICAgICAgaWQ9XCJNUDNfT1ZFUlZJRVdfVE9fU0VNSV9DRU5URVJcIlxuICAgICAgbG9vay1hdD1cIltjYW1lcmFdXCJcbiAgICAgIHNjYWxlPVwiMy41IDMuNSAzLjVcIlxuICAgICAgdG89XCJNUDNfU0VNSV9DRU5URVJcIlxuICAgICAgcG9zaXRpb249XCItMTguODYgLTMuOCAtMy42N1wiXG4gICAgICByb3RhdGlvbj1cIjAgOTAgMFwiXG4gICAgPlxuICAgICAgPGEtc3ZnXG4gICAgICAgIHNyYz1cIiNob3RzcG90LWljb24tc3ZnXCJcbiAgICAgICAgcHJvcG9ydGlvbmFsLXNjYWxlPVwiMC43NVwiXG4gICAgICAgIGV4dHJ1ZGU9XCIxXCJcbiAgICAgICAgei1mYWN0b3I9XCIwXCJcbiAgICAgID5cbiAgICAgIDxhLXRleHRcbiAgICAgICAgdmFsdWU9XCJTRU1JIERFVEFDSEVEXCJcbiAgICAgICAgYWxpZ249XCJjZW50ZXJcIlxuICAgICAgICBjb2xvcj1cIiM2OTY5NjlcIlxuICAgICAgICBwb3NpdGlvbj1cIjAgMC4zOCAtMC4wNVwiXG4gICAgICAgIHJvdGF0aW9uPVwiMCAwIDIuNVwiXG4gICAgICAgIG1peGluPVwiaG90c3BvdC10b3AtdGV4dFwiXG4gICAgICA+PC9hLXRleHQ+XG4gICAgICA8YS10ZXh0XG4gICAgICAgIHZhbHVlPVwiU0VNSSBERVRBQ0hFRFwiXG4gICAgICAgIGFsaWduPVwiY2VudGVyXCJcbiAgICAgICAgcm90YXRpb249XCIwIDAgMi41XCJcbiAgICAgICAgbWl4aW49XCJob3RzcG90LXRvcC10ZXh0XCI+XG4gICAgICA8L2EtdGV4dD5cbiAgICAgIDxhLWVudGl0eVxuICAgICAgICBwb3NpdGlvbj1cIjAgLTAuMiAtMC4yXCJcbiAgICAgICAgbWF0ZXJpYWw9XCJzaWRlOiBkb3VibGU7IGNvbG9yOiB3aGl0ZTsgc2hhZGVyOiBmbGF0OyBvcGFjaXR5OiAwXCJcbiAgICAgICAgZ2VvbWV0cnk9XCJwcmltaXRpdmU6IHJpbmc7IHJhZGl1c0lubmVyOiAwLjQ1OyByYWRpdXNPdXRlcjogMC41XCJcbiAgICAgICAgYW5pbWF0aW9uX19ncm93PVwicHJvcGVydHk6IHNjYWxlOyBmcm9tOiAwIDAgMDsgdG86IDEgMC41IDE7IGxvb3A6IHRydWU7IGVhc2luZzogZWFzZUluT3V0UXVhZDsgZHVyOiAxMjAwXCJcbiAgICAgICAgYW5pbWF0aW9uX19mYWRlPVwicHJvcGVydHk6IG1hdGVyaWFsLm9wYWNpdHk7IHRvOiAxOyBsb29wOiB0cnVlOyBlYXNpbmc6IGVhc2VJbk91dFF1YWQ7IGRpcjogYWx0ZXJuYXRlOyBkdXI6IDYwMFwiXG4gICAgICA+PC9hLWVudGl0eT5cbiAgICAgIDxhLWVudGl0eVxuICAgICAgICBwb3NpdGlvbj1cIjAgLTAuMiAtMC4yXCJcbiAgICAgICAgbWF0ZXJpYWw9XCJzaWRlOiBkb3VibGU7IGNvbG9yOiB3aGl0ZTsgc2hhZGVyOiBmbGF0OyBvcGFjaXR5OiAwXCJcbiAgICAgICAgZ2VvbWV0cnk9XCJwcmltaXRpdmU6IHJpbmc7IHJhZGl1c0lubmVyOiAwLjQ1OyByYWRpdXNPdXRlcjogMC41XCJcbiAgICAgICAgYW5pbWF0aW9uX19ncm93PVwicHJvcGVydHk6IHNjYWxlOyBmcm9tOiAwIDAgMDsgdG86IDAuNSAwLjI1IDAuNTsgbG9vcDogdHJ1ZTsgZWFzaW5nOiBlYXNlSW5PdXRRdWFkOyBkdXI6IDEyMDBcIlxuICAgICAgICBhbmltYXRpb25fX2ZhZGU9XCJwcm9wZXJ0eTogbWF0ZXJpYWwub3BhY2l0eTsgdG86IDE7IGxvb3A6IHRydWU7IGVhc2luZzogZWFzZUluT3V0UXVhZDsgZGlyOiBhbHRlcm5hdGU7IGR1cjogNjAwXCJcbiAgICAgID48L2EtZW50aXR5PlxuICAgICAgPGEtZW50aXR5XG4gICAgICAgIHBvc2l0aW9uPVwiMCAwLjQgMFwiXG4gICAgICAgIGdlb21ldHJ5PVwicHJpbWl0aXZlOiBib3g7IHdpZHRoOiAwLjg7IGhlaWdodDogMC41OyBkZXB0aDogMC41XCJcbiAgICAgICAgbWF0ZXJpYWw9XCJvcGFjaXR5OiAwO1wiXG4gICAgICA+PC9hLWVudGl0eT5cbiAgICA8L2EtaG90c3BvdD5gLFxuICAgIGA8YS1lbnRpdHlcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIkhJR0hXQVlcIlxuICAgICAgcG9zaXRpb249XCItMTUuMzkgLTIuNjUgMS4yNFwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIiBzY2FsZT1cIjEuNzUgMS43NSAxLjc1XCJcbiAgICA+XG4gICAgICA8YS1pbWFnZVxuICAgICAgICB3aWR0aD1cIjRcIlxuICAgICAgICBoZWlnaHQ9XCI0XCJcbiAgICAgICAgc3JjPVwiYXNzZXRzL3RhbnZhbmhpZ2h3YXkucG5nXCIgPlxuICAgICAgPC9hLWltYWdlPlxuICAgIDwvYS1lbnRpdHk+YCxcbiAgXSxcbiAgQkJfT1ZFUlZJRVc6IFtcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiQkJfT1ZFUlZJRVdfVE9fVEVSX0NFTlRFUlwiXG4gICAgICB0bz1cIkJCX1RFUl9DRU5URVJcIlxuICAgICAgcG9zaXRpb249XCItNy41IC00Ljg1IDFcIlxuICAgICAgbG9vay1hdD1cIltjYW1lcmFdXCJcbiAgICAgIHNjYWxlPVwiMi41IDIuNSAyLjVcIlxuICAgID5cbiAgICAgIDxhLXN2Z1xuICAgICAgICBzcmM9XCIjaG90c3BvdC1pY29uLXN2Z1wiXG4gICAgICAgIHByb3BvcnRpb25hbC1zY2FsZT1cIjAuNzVcIlxuICAgICAgICBleHRydWRlPVwiMVwiXG4gICAgICAgIHotZmFjdG9yPVwiMFwiXG4gICAgICA+XG4gICAgICA8YS10ZXh0XG4gICAgICAgIHZhbHVlPVwiVEVSUkFDRVwiXG4gICAgICAgIGFsaWduPVwiY2VudGVyXCJcbiAgICAgICAgY29sb3I9XCIjNjk2OTY5XCJcbiAgICAgICAgcG9zaXRpb249XCIwIDAuNDggLTAuMDVcIlxuICAgICAgICBtaXhpbj1cImhvdHNwb3QtdG9wLXRleHRcIlxuICAgICAgPjwvYS10ZXh0PlxuICAgICAgPGEtdGV4dFxuICAgICAgICB2YWx1ZT1cIlRFUlJBQ0VcIlxuICAgICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgIGNvbG9yPVwiI2ZmZmZmZlwiXG4gICAgICAgIG1peGluPVwiaG90c3BvdC10b3AtdGV4dFwiXG4gICAgICA+PC9hLXRleHQ+XG4gICAgICA8YS1lbnRpdHlcbiAgICAgICAgcG9zaXRpb249XCIwIC0wLjIgLTAuMlwiXG4gICAgICAgIG1hdGVyaWFsPVwic2lkZTogZG91YmxlOyBjb2xvcjogd2hpdGU7IHNoYWRlcjogZmxhdDsgb3BhY2l0eTogMFwiXG4gICAgICAgIGdlb21ldHJ5PVwicHJpbWl0aXZlOiByaW5nOyByYWRpdXNJbm5lcjogMC40NTsgcmFkaXVzT3V0ZXI6IDAuNVwiXG4gICAgICAgIGFuaW1hdGlvbl9fZ3Jvdz1cInByb3BlcnR5OiBzY2FsZTsgZnJvbTogMCAwIDA7IHRvOiAwLjc1IDAuNSAwLjc1OyBsb29wOiB0cnVlOyBlYXNpbmc6IGVhc2VJbk91dFF1YWQ7IGR1cjogMTIwMFwiXG4gICAgICAgIGFuaW1hdGlvbl9fZmFkZT1cInByb3BlcnR5OiBtYXRlcmlhbC5vcGFjaXR5OyB0bzogMTsgbG9vcDogdHJ1ZTsgZWFzaW5nOiBlYXNlSW5PdXRRdWFkOyBkaXI6IGFsdGVybmF0ZTsgZHVyOiA2MDBcIlxuICAgICAgPjwvYS1lbnRpdHk+XG4gICAgICA8YS1lbnRpdHlcbiAgICAgICAgcG9zaXRpb249XCIwIC0wLjIgLTAuMlwiXG4gICAgICAgIG1hdGVyaWFsPVwic2lkZTogZG91YmxlOyBjb2xvcjogd2hpdGU7IHNoYWRlcjogZmxhdDsgb3BhY2l0eTogMFwiXG4gICAgICAgIGdlb21ldHJ5PVwicHJpbWl0aXZlOiByaW5nOyByYWRpdXNJbm5lcjogMC40NTsgcmFkaXVzT3V0ZXI6IDAuNVwiXG4gICAgICAgIGFuaW1hdGlvbl9fZ3Jvdz1cInByb3BlcnR5OiBzY2FsZTsgZnJvbTogMCAwIDA7IHRvOiAwLjUgMC4yNSAwLjU7IGxvb3A6IHRydWU7IGVhc2luZzogZWFzZUluT3V0UXVhZDsgZHVyOiAxMjAwXCJcbiAgICAgICAgYW5pbWF0aW9uX19mYWRlPVwicHJvcGVydHk6IG1hdGVyaWFsLm9wYWNpdHk7IHRvOiAxOyBsb29wOiB0cnVlOyBlYXNpbmc6IGVhc2VJbk91dFF1YWQ7IGRpcjogYWx0ZXJuYXRlOyBkdXI6IDYwMFwiXG4gICAgICA+PC9hLWVudGl0eT5cbiAgICAgIDxhLWVudGl0eVxuICAgICAgICBwb3NpdGlvbj1cIjAgMC40IDBcIlxuICAgICAgICBnZW9tZXRyeT1cInByaW1pdGl2ZTogYm94OyB3aWR0aDogMC44OyBoZWlnaHQ6IDAuNTsgZGVwdGg6IDAuNVwiXG4gICAgICAgIG1hdGVyaWFsPVwib3BhY2l0eTogMDtcIlxuICAgICAgPjwvYS1lbnRpdHk+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiQkJfT1ZFUlZJRVdfVE9fREVUX0NFTlRFUlwiXG4gICAgICB0bz1cIkJCX0RFVF9DRU5URVJcIlxuICAgICAgcG9zaXRpb249XCItMTAgLTMuNjUgMS41XCJcbiAgICAgIGxvb2stYXQ9XCJbY2FtZXJhXVwiXG4gICAgICBzY2FsZT1cIjIuMyAyLjMgMi4zXCJcbiAgICA+XG4gICAgICA8YS1zdmdcbiAgICAgICAgc3JjPVwiI2hvdHNwb3QtaWNvbi1zdmdcIlxuICAgICAgICBwcm9wb3J0aW9uYWwtc2NhbGU9XCIwLjc1XCJcbiAgICAgICAgZXh0cnVkZT1cIjFcIlxuICAgICAgICB6LWZhY3Rvcj1cIjBcIlxuICAgICAgPlxuICAgICAgPGEtdGV4dFxuICAgICAgICB2YWx1ZT1cIkRFVEFDSEVEXCJcbiAgICAgICAgYWxpZ249XCJjZW50ZXJcIlxuICAgICAgICBjb2xvcj1cIiM2OTY5NjlcIlxuICAgICAgICBwb3NpdGlvbj1cIjAgMC40OCAtMC4wNVwiXG4gICAgICAgIG1peGluPVwiaG90c3BvdC10b3AtdGV4dFwiXG4gICAgICA+PC9hLXRleHQ+XG4gICAgICA8YS10ZXh0XG4gICAgICAgIHZhbHVlPVwiREVUQUNIRURcIlxuICAgICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgIGNvbG9yPVwiI2ZmZmZmZlwiXG4gICAgICAgIG1peGluPVwiaG90c3BvdC10b3AtdGV4dFwiXG4gICAgICA+PC9hLXRleHQ+XG4gICAgICA8YS1lbnRpdHlcbiAgICAgICAgcG9zaXRpb249XCIwIC0wLjIgLTAuMlwiXG4gICAgICAgIG1hdGVyaWFsPVwic2lkZTogZG91YmxlOyBjb2xvcjogd2hpdGU7IHNoYWRlcjogZmxhdDsgb3BhY2l0eTogMFwiXG4gICAgICAgIGdlb21ldHJ5PVwicHJpbWl0aXZlOiByaW5nOyByYWRpdXNJbm5lcjogMC40NTsgcmFkaXVzT3V0ZXI6IDAuNVwiXG4gICAgICAgIGFuaW1hdGlvbl9fZ3Jvdz1cInByb3BlcnR5OiBzY2FsZTsgZnJvbTogMCAwIDA7IHRvOiAwLjc1IDAuNSAwLjc1OyBsb29wOiB0cnVlOyBlYXNpbmc6IGVhc2VJbk91dFF1YWQ7IGR1cjogMTIwMFwiXG4gICAgICAgIGFuaW1hdGlvbl9fZmFkZT1cInByb3BlcnR5OiBtYXRlcmlhbC5vcGFjaXR5OyB0bzogMTsgbG9vcDogdHJ1ZTsgZWFzaW5nOiBlYXNlSW5PdXRRdWFkOyBkaXI6IGFsdGVybmF0ZTsgZHVyOiA2MDBcIlxuICAgICAgPjwvYS1lbnRpdHk+XG4gICAgICA8YS1lbnRpdHlcbiAgICAgICAgcG9zaXRpb249XCIwIC0wLjIgLTAuMlwiXG4gICAgICAgIG1hdGVyaWFsPVwic2lkZTogZG91YmxlOyBjb2xvcjogd2hpdGU7IHNoYWRlcjogZmxhdDsgb3BhY2l0eTogMFwiXG4gICAgICAgIGdlb21ldHJ5PVwicHJpbWl0aXZlOiByaW5nOyByYWRpdXNJbm5lcjogMC40NTsgcmFkaXVzT3V0ZXI6IDAuNVwiXG4gICAgICAgIGFuaW1hdGlvbl9fZ3Jvdz1cInByb3BlcnR5OiBzY2FsZTsgZnJvbTogMCAwIDA7IHRvOiAwLjUgMC4yNSAwLjU7IGxvb3A6IHRydWU7IGVhc2luZzogZWFzZUluT3V0UXVhZDsgZHVyOiAxMjAwXCJcbiAgICAgICAgYW5pbWF0aW9uX19mYWRlPVwicHJvcGVydHk6IG1hdGVyaWFsLm9wYWNpdHk7IHRvOiAxOyBsb29wOiB0cnVlOyBlYXNpbmc6IGVhc2VJbk91dFF1YWQ7IGRpcjogYWx0ZXJuYXRlOyBkdXI6IDYwMFwiXG4gICAgICA+PC9hLWVudGl0eT5cbiAgICAgIDxhLWVudGl0eVxuICAgICAgICBwb3NpdGlvbj1cIjAgMC40IDBcIlxuICAgICAgICBnZW9tZXRyeT1cInByaW1pdGl2ZTogYm94OyB3aWR0aDogMC44OyBoZWlnaHQ6IDAuNTsgZGVwdGg6IDAuNVwiXG4gICAgICAgIG1hdGVyaWFsPVwib3BhY2l0eTogMDtcIlxuICAgICAgPjwvYS1lbnRpdHk+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiQkJfT1ZFUlZJRVdfVE9fU0VNSV9DRU5URVJcIlxuICAgICAgbG9vay1hdD1cIltjYW1lcmFdXCJcbiAgICAgIHNjYWxlPVwiMi41IDIuNSAyLjVcIlxuICAgICAgdG89XCJCQl9TRU1JX0NFTlRFUlwiXG4gICAgICBwb3NpdGlvbj1cIi0xMC4zOSAtNS42NSA1XCJcbiAgICA+XG4gICAgICA8YS1zdmdcbiAgICAgICAgc3JjPVwiI2hvdHNwb3QtaWNvbi1zdmdcIlxuICAgICAgICBwcm9wb3J0aW9uYWwtc2NhbGU9XCIwLjc1XCJcbiAgICAgICAgZXh0cnVkZT1cIjFcIlxuICAgICAgICB6LWZhY3Rvcj1cIjBcIlxuICAgICAgPlxuICAgICAgPGEtdGV4dFxuICAgICAgICB2YWx1ZT1cIlNFTUkgREVUQUNIRURcIlxuICAgICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgIGNvbG9yPVwiIzY5Njk2OVwiXG4gICAgICAgIHJvdGF0aW9uPVwiMCAwIC02XCJcbiAgICAgICAgcG9zaXRpb249XCIwIDAuNDggLTAuMDVcIlxuICAgICAgICBtaXhpbj1cImhvdHNwb3QtdG9wLXRleHRcIlxuICAgICAgPjwvYS10ZXh0PlxuICAgICAgPGEtdGV4dFxuICAgICAgICB2YWx1ZT1cIlNFTUkgREVUQUNIRURcIlxuICAgICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgIGNvbG9yPVwiI2ZmZmZmZlwiXG4gICAgICAgIHJvdGF0aW9uPVwiMCAwIC02XCJcbiAgICAgICAgbWl4aW49XCJob3RzcG90LXRvcC10ZXh0XCI+XG4gICAgICA8L2EtdGV4dD5cbiAgICAgIDxhLWVudGl0eVxuICAgICAgICBwb3NpdGlvbj1cIjAgLTAuMiAtMC4yXCJcbiAgICAgICAgbWF0ZXJpYWw9XCJzaWRlOiBkb3VibGU7IGNvbG9yOiB3aGl0ZTsgc2hhZGVyOiBmbGF0OyBvcGFjaXR5OiAwXCJcbiAgICAgICAgZ2VvbWV0cnk9XCJwcmltaXRpdmU6IHJpbmc7IHJhZGl1c0lubmVyOiAwLjQ1OyByYWRpdXNPdXRlcjogMC41XCJcbiAgICAgICAgYW5pbWF0aW9uX19ncm93PVwicHJvcGVydHk6IHNjYWxlOyBmcm9tOiAwIDAgMDsgdG86IDAuNzUgMC41IDAuNzU7IGxvb3A6IHRydWU7IGVhc2luZzogZWFzZUluT3V0UXVhZDsgZHVyOiAxMjAwXCJcbiAgICAgICAgYW5pbWF0aW9uX19mYWRlPVwicHJvcGVydHk6IG1hdGVyaWFsLm9wYWNpdHk7IHRvOiAxOyBsb29wOiB0cnVlOyBlYXNpbmc6IGVhc2VJbk91dFF1YWQ7IGRpcjogYWx0ZXJuYXRlOyBkdXI6IDYwMFwiXG4gICAgICA+PC9hLWVudGl0eT5cbiAgICAgIDxhLWVudGl0eVxuICAgICAgICBwb3NpdGlvbj1cIjAgLTAuMiAtMC4yXCJcbiAgICAgICAgbWF0ZXJpYWw9XCJzaWRlOiBkb3VibGU7IGNvbG9yOiB3aGl0ZTsgc2hhZGVyOiBmbGF0OyBvcGFjaXR5OiAwXCJcbiAgICAgICAgZ2VvbWV0cnk9XCJwcmltaXRpdmU6IHJpbmc7IHJhZGl1c0lubmVyOiAwLjQ1OyByYWRpdXNPdXRlcjogMC41XCJcbiAgICAgICAgYW5pbWF0aW9uX19ncm93PVwicHJvcGVydHk6IHNjYWxlOyBmcm9tOiAwIDAgMDsgdG86IDAuNSAwLjI1IDAuNTsgbG9vcDogdHJ1ZTsgZWFzaW5nOiBlYXNlSW5PdXRRdWFkOyBkdXI6IDEyMDBcIlxuICAgICAgICBhbmltYXRpb25fX2ZhZGU9XCJwcm9wZXJ0eTogbWF0ZXJpYWwub3BhY2l0eTsgdG86IDE7IGxvb3A6IHRydWU7IGVhc2luZzogZWFzZUluT3V0UXVhZDsgZGlyOiBhbHRlcm5hdGU7IGR1cjogNjAwXCJcbiAgICAgID48L2EtZW50aXR5PlxuICAgICAgPGEtZW50aXR5XG4gICAgICAgIHBvc2l0aW9uPVwiMCAwLjQgMFwiXG4gICAgICAgIGdlb21ldHJ5PVwicHJpbWl0aXZlOiBib3g7IHdpZHRoOiAwLjg7IGhlaWdodDogMC41OyBkZXB0aDogMC41XCJcbiAgICAgICAgbWF0ZXJpYWw9XCJvcGFjaXR5OiAwO1wiXG4gICAgICA+PC9hLWVudGl0eT5cbiAgICA8L2EtaG90c3BvdD5gLFxuICAgIGA8YS1lbnRpdHlcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIkhJR0hXQVlcIlxuICAgICAgcG9zaXRpb249XCItMTUuMzkgLTIuNjUgMS4yNFwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIiBzY2FsZT1cIjEuNzUgMS43NSAxLjc1XCJcbiAgICA+XG4gICAgICA8YS1pbWFnZVxuICAgICAgICB3aWR0aD1cIjRcIlxuICAgICAgICBoZWlnaHQ9XCI0XCJcbiAgICAgICAgc3JjPVwiYXNzZXRzL3RhbnZhbmhpZ2h3YXlCQi5wbmdcIiA+XG4gICAgICA8L2EtaW1hZ2U+XG4gICAgPC9hLWVudGl0eT5gLFxuICBdLFxuICAuLi5tcDNPdXRkb29ySG90c3BvdHMsXG4gIC4uLm1wM1RlckhvdHNwb3RzLFxuICAuLi5tcDNTZW1pSG90c3BvdHMsXG4gIC4uLm1wM0RldEhvdHNwb3RzLFxuICAuLi5iYlRlckhvdHNwb3RzLFxuICAuLi5iYkRldEhvdHNwb3RzLFxuICAuLi5iYk91dGRvb3JIb3RzcG90cyxcbiAgLi4uYmJTZW1pSG90c3BvdHMsXG59O1xuIiwibGV0IG1wM091dGRvb3JIb3RzcG90cyA9IHtcbiAgTVAzX09VVERPT1JfMTogW1xuICAgIGA8YS1ob3RzcG90XG4gICAgICB2aXNpYmxlPVwiZmFsc2VcIlxuICAgICAgaWQ9XCJNUDNfT1VURE9PUl8xX1RPXzJcIlxuICAgICAgdG89XCJNUDNfT1VURE9PUl8yXCJcbiAgICAgIGxvb2stYXQ9XCJbY2FtZXJhXVwiXG4gICAgICBwb3NpdGlvbj1cIjEyLjc1IDAuNDkgMi40OVwiXG4gICAgICBzY2FsZT1cIjIuNSAyLjUgMi41XCJcbiAgICA+XG4gICAgICA8YS1pbWFnZVxuICAgICAgICB3aWR0aD1cIjAuNVwiXG4gICAgICAgIGhlaWdodD1cIjAuNVwiXG4gICAgICAgIHNyYz1cIiNob3RzcG90LXN0YWlnaHQtaWNvblwiXG4gICAgICAgIHJvdGF0aW9uPVwiLTYwIDAgMFwiXG4gICAgICA+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dFxuICAgICAgICB2YWx1ZT1cIlZpZXcgMlwiXG4gICAgICAgIGFsaWduPVwiY2VudGVyXCJcbiAgICAgICAgbWl4aW49XCJob3RzcG90LWJvdHRvbS10ZXh0XCJcbiAgICAgICAgPjwvYS10ZXh0PlxuICAgIDwvYS1ob3RzcG90PmAsXG4gICAgYDxhLWhvdHNwb3RcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIk1QM19PVVRET09SXzFfVE9fOVwiXG4gICAgICB0bz1cIk1QM19PVVRET09SXzlcIlxuICAgICAgbG9vay1hdD1cIltjYW1lcmFdXCJcbiAgICAgIHBvc2l0aW9uPVwiMi4yOSAwLjA0IC0xMC43NlwiXG4gICAgICBzY2FsZT1cIjIuNSAyLjUgMi41XCJcbiAgICA+XG4gICAgICA8YS1pbWFnZVxuICAgICAgICB3aWR0aD1cIjAuNVwiXG4gICAgICAgIGhlaWdodD1cIjAuNVwiXG4gICAgICAgIHNyYz1cIiNob3RzcG90LXN0YWlnaHQtaWNvblwiXG4gICAgICAgIHJvdGF0aW9uPVwiLTYwIDAgMFwiXG4gICAgICA+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dFxuICAgICAgICB2YWx1ZT1cIlZpZXcgOVwiXG4gICAgICAgIGFsaWduPVwiY2VudGVyXCJcbiAgICAgICAgbWl4aW49XCJob3RzcG90LWJvdHRvbS10ZXh0XCJcbiAgICAgICAgPjwvYS10ZXh0PlxuICAgIDwvYS1ob3RzcG90PmAsXG4gIF0sXG4gIE1QM19PVVRET09SXzI6IFtcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiTVAzX09VVERPT1JfMl9UT18xXCJcbiAgICAgIHRvPVwiTVAzX09VVERPT1JfMVwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgICAgcG9zaXRpb249XCIxLjI0IC0xLjc1IDEwLjAyXCJcbiAgICAgIHNjYWxlPVwiMi41IDIuNSAyLjVcIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgID48L2EtaW1hZ2U+XG4gICAgICA8YS10ZXh0XG4gICAgICAgIHZhbHVlPVwiVmlldyAxXCJcbiAgICAgICAgYWxpZ249XCJjZW50ZXJcIlxuICAgICAgICBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIlxuICAgICAgICA+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiTVAzX09VVERPT1JfMl9UT18zXCJcbiAgICAgIHRvPVwiTVAzX09VVERPT1JfM1wiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgICAgcG9zaXRpb249XCIyLjE3IC0xLjk4IC05LjgyXCJcbiAgICAgIHNjYWxlPVwiMi41IDIuNSAyLjVcIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgID48L2EtaW1hZ2U+XG4gICAgICA8YS10ZXh0XG4gICAgICAgIHZhbHVlPVwiVmlldyAzXCJcbiAgICAgICAgYWxpZ249XCJjZW50ZXJcIlxuICAgICAgICBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIlxuICAgICAgICA+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiTVAzX09VVERPT1JfMl9UT180XCJcbiAgICAgIHRvPVwiTVAzX09VVERPT1JfNFwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgICAgcG9zaXRpb249XCItOS4yNCAtMS44MiAtMC4wNlwiXG4gICAgICBzY2FsZT1cIjIuNSAyLjUgMi41XCJcbiAgICA+XG4gICAgICA8YS1pbWFnZVxuICAgICAgICB3aWR0aD1cIjAuNVwiXG4gICAgICAgIGhlaWdodD1cIjAuNVwiXG4gICAgICAgIHNyYz1cIiNob3RzcG90LXN0YWlnaHQtaWNvblwiXG4gICAgICAgIHJvdGF0aW9uPVwiLTYwIDAgMFwiXG4gICAgICA+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dFxuICAgICAgICB2YWx1ZT1cIlZpZXcgNFwiXG4gICAgICAgIGFsaWduPVwiY2VudGVyXCJcbiAgICAgICAgbWl4aW49XCJob3RzcG90LWJvdHRvbS10ZXh0XCJcbiAgICAgICAgPjwvYS10ZXh0PlxuICAgIDwvYS1ob3RzcG90PmAsXG4gIF0sXG4gIE1QM19PVVRET09SXzM6IFtcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiTVAzX09VVERPT1JfM19UT18yXCJcbiAgICAgIHRvPVwiTVAzX09VVERPT1JfMlwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgICAgcG9zaXRpb249XCItMC41MSAtMi4yOCA5LjQ3XCJcbiAgICAgIHNjYWxlPVwiMi41IDIuNSAyLjVcIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgID48L2EtaW1hZ2U+XG4gICAgICA8YS10ZXh0XG4gICAgICAgIHZhbHVlPVwiVmlldyAyXCJcbiAgICAgICAgYWxpZ249XCJjZW50ZXJcIlxuICAgICAgICBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIlxuICAgICAgICA+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiTVAzX09VVERPT1JfMl9UT183XCJcbiAgICAgIHRvPVwiTVAzX09VVERPT1JfN1wiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgICAgcG9zaXRpb249XCItOS40OSAtMS45OCAtMS4wMFwiXG4gICAgICBzY2FsZT1cIjIuNSAyLjUgMi41XCJcbiAgICA+XG4gICAgICA8YS1pbWFnZVxuICAgICAgICB3aWR0aD1cIjAuNVwiXG4gICAgICAgIGhlaWdodD1cIjAuNVwiXG4gICAgICAgIHNyYz1cIiNob3RzcG90LXN0YWlnaHQtaWNvblwiXG4gICAgICAgIHJvdGF0aW9uPVwiLTYwIDAgMFwiXG4gICAgICA+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dFxuICAgICAgICB2YWx1ZT1cIlZpZXcgN1wiXG4gICAgICAgIGFsaWduPVwiY2VudGVyXCJcbiAgICAgICAgbWl4aW49XCJob3RzcG90LWJvdHRvbS10ZXh0XCJcbiAgICAgICAgPjwvYS10ZXh0PlxuICAgIDwvYS1ob3RzcG90PmAsXG4gIF0sXG4gIE1QM19PVVRET09SXzQ6IFtcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiTVAzX09VVERPT1JfNF9UT18yXCJcbiAgICAgIHRvPVwiTVAzX09VVERPT1JfMlwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgICAgcG9zaXRpb249XCI5LjUwIDAuMDkgMFwiXG4gICAgICBzY2FsZT1cIjIuNSAyLjUgMi41XCJcbiAgICA+XG4gICAgICA8YS1pbWFnZVxuICAgICAgICB3aWR0aD1cIjAuNVwiXG4gICAgICAgIGhlaWdodD1cIjAuNVwiXG4gICAgICAgIHNyYz1cIiNob3RzcG90LXN0YWlnaHQtaWNvblwiXG4gICAgICAgIHJvdGF0aW9uPVwiLTYwIDAgMFwiXG4gICAgICA+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dFxuICAgICAgICB2YWx1ZT1cIlZpZXcgMlwiXG4gICAgICAgIGFsaWduPVwiY2VudGVyXCJcbiAgICAgICAgbWl4aW49XCJob3RzcG90LWJvdHRvbS10ZXh0XCJcbiAgICAgICAgPjwvYS10ZXh0PlxuICAgIDwvYS1ob3RzcG90PmAsXG4gICAgYDxhLWhvdHNwb3RcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIk1QM19PVVRET09SXzRfVE9fNVwiXG4gICAgICB0bz1cIk1QM19PVVRET09SXzVcIlxuICAgICAgbG9vay1hdD1cIltjYW1lcmFdXCJcbiAgICAgIHBvc2l0aW9uPVwiLTkuNDkgLTAuNTEgLTAuMDJcIlxuICAgICAgc2NhbGU9XCIyLjUgMi41IDIuNVwiXG4gICAgPlxuICAgICAgPGEtaW1hZ2VcbiAgICAgICAgd2lkdGg9XCIwLjVcIlxuICAgICAgICBoZWlnaHQ9XCIwLjVcIlxuICAgICAgICBzcmM9XCIjaG90c3BvdC1zdGFpZ2h0LWljb25cIlxuICAgICAgICByb3RhdGlvbj1cIi02MCAwIDBcIlxuICAgICAgPjwvYS1pbWFnZT5cbiAgICAgIDxhLXRleHRcbiAgICAgICAgdmFsdWU9XCJWaWV3IDVcIlxuICAgICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgIG1peGluPVwiaG90c3BvdC1ib3R0b20tdGV4dFwiXG4gICAgICAgID48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICBdLFxuICBNUDNfT1VURE9PUl81OiBbXG4gICAgYDxhLWhvdHNwb3RcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIk1QM19PVVRET09SXzVfVE9fNFwiXG4gICAgICB0bz1cIk1QM19PVVRET09SXzRcIlxuICAgICAgbG9vay1hdD1cIltjYW1lcmFdXCJcbiAgICAgIHBvc2l0aW9uPVwiMTAuOTggLTQuMTAgMC44NVwiXG4gICAgICBzY2FsZT1cIjIuNSAyLjUgMi41XCJcbiAgICA+XG4gICAgICA8YS1pbWFnZVxuICAgICAgICB3aWR0aD1cIjAuNVwiXG4gICAgICAgIGhlaWdodD1cIjAuNVwiXG4gICAgICAgIHNyYz1cIiNob3RzcG90LXN0YWlnaHQtaWNvblwiXG4gICAgICAgIHJvdGF0aW9uPVwiLTYwIDAgMFwiXG4gICAgICA+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dFxuICAgICAgICB2YWx1ZT1cIlZpZXcgNFwiXG4gICAgICAgIGFsaWduPVwiY2VudGVyXCJcbiAgICAgICAgbWl4aW49XCJob3RzcG90LWJvdHRvbS10ZXh0XCJcbiAgICAgICAgPjwvYS10ZXh0PlxuICAgIDwvYS1ob3RzcG90PmAsXG4gICAgYDxhLWhvdHNwb3RcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIk1QM19PVVRET09SXzVfVE9fNlwiXG4gICAgICB0bz1cIk1QM19PVVRET09SXzZcIlxuICAgICAgbG9vay1hdD1cIltjYW1lcmFdXCJcbiAgICAgIHBvc2l0aW9uPVwiLTAuNjEgLTIuMzYgLTkuOTZcIlxuICAgICAgc2NhbGU9XCIyLjUgMi41IDIuNVwiXG4gICAgPlxuICAgICAgPGEtaW1hZ2VcbiAgICAgICAgd2lkdGg9XCIwLjVcIlxuICAgICAgICBoZWlnaHQ9XCIwLjVcIlxuICAgICAgICBzcmM9XCIjaG90c3BvdC1zdGFpZ2h0LWljb25cIlxuICAgICAgICByb3RhdGlvbj1cIi02MCAwIDBcIlxuICAgICAgPjwvYS1pbWFnZT5cbiAgICAgIDxhLXRleHRcbiAgICAgICAgdmFsdWU9XCJWaWV3IDZcIlxuICAgICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgIG1peGluPVwiaG90c3BvdC1ib3R0b20tdGV4dFwiXG4gICAgICAgID48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICBdLFxuICBNUDNfT1VURE9PUl82OiBbXG4gICAgYDxhLWhvdHNwb3RcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIk1QM19PVVRET09SXzZfVE9fMVwiXG4gICAgICB0bz1cIk1QM19PVVRET09SXzFcIlxuICAgICAgbG9vay1hdD1cIltjYW1lcmFdXCJcbiAgICAgIHBvc2l0aW9uPVwiLTAuMDYgLTIuMTMgLTYuOTNcIlxuICAgICAgc2NhbGU9XCIyLjUgMi41IDIuNVwiXG4gICAgPlxuICAgICAgPGEtaW1hZ2VcbiAgICAgICAgd2lkdGg9XCIwLjVcIlxuICAgICAgICBoZWlnaHQ9XCIwLjVcIlxuICAgICAgICBzcmM9XCIjaG90c3BvdC1zdGFpZ2h0LWljb25cIlxuICAgICAgICByb3RhdGlvbj1cIi02MCAwIDBcIlxuICAgICAgPjwvYS1pbWFnZT5cbiAgICAgIDxhLXRleHRcbiAgICAgICAgdmFsdWU9XCJWaWV3IDFcIlxuICAgICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgIG1peGluPVwiaG90c3BvdC1ib3R0b20tdGV4dFwiXG4gICAgICAgID48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICAgIGAgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiTVAzX09VVERPT1JfNl9UT181XCJcbiAgICAgIHRvPVwiTVAzX09VVERPT1JfNVwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgICAgcG9zaXRpb249XCItOC41OCAtMi43MyAtMC4wMFwiXG4gICAgICBzY2FsZT1cIjIuNSAyLjUgMi41XCJcbiAgICA+XG4gICAgICA8YS1pbWFnZVxuICAgICAgICB3aWR0aD1cIjAuNVwiXG4gICAgICAgIGhlaWdodD1cIjAuNVwiXG4gICAgICAgIHNyYz1cIiNob3RzcG90LXN0YWlnaHQtaWNvblwiXG4gICAgICAgIHJvdGF0aW9uPVwiLTYwIDAgMFwiXG4gICAgICA+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dFxuICAgICAgICB2YWx1ZT1cIlZpZXcgNVwiXG4gICAgICAgIGFsaWduPVwiY2VudGVyXCJcbiAgICAgICAgbWl4aW49XCJob3RzcG90LWJvdHRvbS10ZXh0XCJcbiAgICAgICAgPjwvYS10ZXh0PlxuICAgIDwvYS1ob3RzcG90PmAsXG4gICAgYDxhLWhvdHNwb3RcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIk1QM19PVVRET09SXzZfVE9fOVwiXG4gICAgICB0bz1cIk1QM19PVVRET09SXzlcIlxuICAgICAgbG9vay1hdD1cIltjYW1lcmFdXCJcbiAgICAgIHBvc2l0aW9uPVwiLTAuMDEgLTIuNjMgOS4xM1wiXG4gICAgICBzY2FsZT1cIjIuNSAyLjUgMi41XCJcbiAgICA+XG4gICAgICA8YS1pbWFnZVxuICAgICAgICB3aWR0aD1cIjAuNVwiXG4gICAgICAgIGhlaWdodD1cIjAuNVwiXG4gICAgICAgIHNyYz1cIiNob3RzcG90LXN0YWlnaHQtaWNvblwiXG4gICAgICAgIHJvdGF0aW9uPVwiLTYwIDAgMFwiXG4gICAgICA+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dFxuICAgICAgICB2YWx1ZT1cIlZpZXcgOVwiXG4gICAgICAgIGFsaWduPVwiY2VudGVyXCJcbiAgICAgICAgbWl4aW49XCJob3RzcG90LWJvdHRvbS10ZXh0XCJcbiAgICAgICAgPjwvYS10ZXh0PlxuICAgIDwvYS1ob3RzcG90PmAsXG4gIF0sXG4gIE1QM19PVVRET09SXzc6IFtcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiTVAzX09VVERPT1JfN19UT18zXCJcbiAgICAgIHRvPVwiTVAzX09VVERPT1JfM1wiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgICAgcG9zaXRpb249XCI5LjA4IC0zLjQ3IC0wLjc3XCJcbiAgICAgIHNjYWxlPVwiMi41IDIuNSAyLjVcIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgID48L2EtaW1hZ2U+XG4gICAgICA8YS10ZXh0XG4gICAgICAgIHZhbHVlPVwiVmlldyAzXCJcbiAgICAgICAgYWxpZ249XCJjZW50ZXJcIlxuICAgICAgICBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIlxuICAgICAgICA+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiTVAzX09VVERPT1JfN19UT184XCJcbiAgICAgIHRvPVwiTVAzX09VVERPT1JfOFwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgICAgcG9zaXRpb249XCItOC40MyAtMy4wOSAwLjY0XCJcbiAgICAgIHNjYWxlPVwiMi41IDIuNSAyLjVcIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgID48L2EtaW1hZ2U+XG4gICAgICA8YS10ZXh0XG4gICAgICAgIHZhbHVlPVwiVmlldyA4XCJcbiAgICAgICAgYWxpZ249XCJjZW50ZXJcIlxuICAgICAgICBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIlxuICAgICAgICA+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgXSxcbiAgTVAzX09VVERPT1JfODogW1xuICAgIGA8YS1ob3RzcG90XG4gICAgICB2aXNpYmxlPVwiZmFsc2VcIlxuICAgICAgaWQ9XCJNUDNfT1VURE9PUl84X1RPXzdcIlxuICAgICAgdG89XCJNUDNfT1VURE9PUl83XCJcbiAgICAgIGxvb2stYXQ9XCJbY2FtZXJhXVwiXG4gICAgICBwb3NpdGlvbj1cIi05LjUyIC00Ljk2IDAuNTFcIlxuICAgICAgc2NhbGU9XCIyLjUgMi41IDIuNVwiXG4gICAgPlxuICAgICAgPGEtaW1hZ2VcbiAgICAgICAgd2lkdGg9XCIwLjVcIlxuICAgICAgICBoZWlnaHQ9XCIwLjVcIlxuICAgICAgICBzcmM9XCIjaG90c3BvdC1zdGFpZ2h0LWljb25cIlxuICAgICAgICByb3RhdGlvbj1cIi02MCAwIDBcIlxuICAgICAgPjwvYS1pbWFnZT5cbiAgICAgIDxhLXRleHRcbiAgICAgICAgdmFsdWU9XCJWaWV3IDdcIlxuICAgICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgIG1peGluPVwiaG90c3BvdC1ib3R0b20tdGV4dFwiXG4gICAgICAgID48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICAgIGA8YS1ob3RzcG90XG4gICAgICB2aXNpYmxlPVwiZmFsc2VcIlxuICAgICAgaWQ9XCJNUDNfT1VURE9PUl84X1RPXzlcIlxuICAgICAgdG89XCJNUDNfT1VURE9PUl85XCJcbiAgICAgIGxvb2stYXQ9XCJbY2FtZXJhXVwiXG4gICAgICBwb3NpdGlvbj1cIi0wLjY0IC00LjExIC05LjkxXCJcbiAgICAgIHNjYWxlPVwiMi41IDIuNSAyLjVcIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgID48L2EtaW1hZ2U+XG4gICAgICA8YS10ZXh0XG4gICAgICAgIHZhbHVlPVwiVmlldyA5XCJcbiAgICAgICAgYWxpZ249XCJjZW50ZXJcIlxuICAgICAgICBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIlxuICAgICAgICA+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgXSxcbiAgTVAzX09VVERPT1JfOTogW1xuICAgIGA8YS1ob3RzcG90XG4gICAgICB2aXNpYmxlPVwiZmFsc2VcIlxuICAgICAgaWQ9XCJNUDNfT1VURE9PUl85X1RPXzFcIlxuICAgICAgdG89XCJNUDNfT1VURE9PUl8xXCJcbiAgICAgIGxvb2stYXQ9XCJbY2FtZXJhXVwiXG4gICAgICBwb3NpdGlvbj1cIi0xMS4wOCAtNS4zMiAtMi4yOFwiXG4gICAgICBzY2FsZT1cIjIuNSAyLjUgMi41XCJcbiAgICA+XG4gICAgICA8YS1pbWFnZVxuICAgICAgICB3aWR0aD1cIjAuNVwiXG4gICAgICAgIGhlaWdodD1cIjAuNVwiXG4gICAgICAgIHNyYz1cIiNob3RzcG90LXN0YWlnaHQtaWNvblwiXG4gICAgICAgIHJvdGF0aW9uPVwiLTYwIDAgLTIwXCJcbiAgICAgID48L2EtaW1hZ2U+XG4gICAgICA8YS10ZXh0XG4gICAgICAgIHZhbHVlPVwiVmlldyAxXCJcbiAgICAgICAgYWxpZ249XCJjZW50ZXJcIlxuICAgICAgICBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIlxuICAgICAgICA+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiTVAzX09VVERPT1JfOV9UT184XCJcbiAgICAgIHRvPVwiTVAzX09VVERPT1JfOFwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgICAgcG9zaXRpb249XCItOS4wNCAtNC44NCA3LjE1XCJcbiAgICAgIHNjYWxlPVwiMi41IDIuNSAyLjVcIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAyMFwiXG4gICAgICA+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dFxuICAgICAgICB2YWx1ZT1cIlZpZXcgOFwiXG4gICAgICAgIGFsaWduPVwiY2VudGVyXCJcbiAgICAgICAgbWl4aW49XCJob3RzcG90LWJvdHRvbS10ZXh0XCJcbiAgICAgICAgPjwvYS10ZXh0PlxuICAgIDwvYS1ob3RzcG90PmAsXG4gIF0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBtcDNPdXRkb29ySG90c3BvdHM7XG4iLCJsZXQgbXAzVGVySG90c3BvdHMgPSB7XG4gIE1QM19URVJfRTogW1xuICAgIGA8YS1ob3RzcG90XG4gICAgICB2aXNpYmxlPVwiZmFsc2VcIlxuICAgICAgaWQ9XCJNUDNfVEVSX0VfVE9fQ0VOVEVSXCIgdG89XCJNUDNfVEVSX0NFTlRFUlwiIGxvb2stYXQ9XCJbY2FtZXJhXVwiXG4gICAgICBwb3NpdGlvbj1cIjIuMiAxIDEwXCIgc2NhbGU9XCIyLjUgMi41IDIuNVwiXG4gICAgPlxuICAgICAgPGEtaW1hZ2Ugd2lkdGg9XCIwLjVcIiBoZWlnaHQ9XCIwLjVcIiBzcmM9XCIjaG90c3BvdC1zdGFpZ2h0LWljb25cIiByb3RhdGlvbj1cIi02MCAwIDBcIj48L2EtaW1hZ2U+XG4gICAgICA8YS10ZXh0IHZhbHVlPVwiRmFjdG9yeSBDZW50ZXJcIiBhbGlnbj1cImNlbnRlclwiIG1peGluPVwiaG90c3BvdC1ib3R0b20tdGV4dFwiPjwvYS10ZXh0PlxuICAgIDwvYS1ob3RzcG90PmAsXG4gIF0sXG4gIE1QM19URVJfQ0VOVEVSOiBbXG4gICAgYDxhLWhvdHNwb3RcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIk1QM19URVJfQ0VOVEVSX1RPX0VcIiB0bz1cIk1QM19URVJfRVwiIHBvc2l0aW9uPVwiLTYgMC41IDFcIiBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgID5cbiAgICAgIDxhLWltYWdlIHdpZHRoPVwiMC41XCIgaGVpZ2h0PVwiMC41XCIgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCIgcm90YXRpb249XCItNjAgMCAwXCIgc2NhbGU9XCIxLjUgMS41IDEuNVwiPjwvYS1pbWFnZT5cbiAgICAgIDxhLXRleHQgdmFsdWU9XCJFbnRyYW5jZVwiIGFsaWduPVwiY2VudGVyXCIgbWl4aW49XCJob3RzcG90LWJvdHRvbS10ZXh0XCI+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiTVAzX1RFUl9DRU5URVJfVE9fQzFcIlxuICAgICAgdG89XCJNUDNfVEVSX0MxXCJcbiAgICAgIHBvc2l0aW9uPVwiMSAwLjUgNlwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgICAgc2NhbGU9XCIyIDIgMlwiXG4gICAgICA+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dCB2YWx1ZT1cIkNvcm5lciAxXCIgYWxpZ249XCJjZW50ZXJcIiBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIj48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICAgIGA8YS1ob3RzcG90XG4gICAgICB2aXNpYmxlPVwiZmFsc2VcIlxuICAgICAgaWQ9XCJNUDNfVEVSX0NFTlRFUl9UT19DMlwiXG4gICAgICB0bz1cIk1QM19URVJfQzJcIlxuICAgICAgcG9zaXRpb249XCItMS4zIDAuNSAtOFwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgICAgc2NhbGU9XCIxLjUgMS41IDEuNVwiXG4gICAgICA+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dCB2YWx1ZT1cIkNvcm5lciAyXCIgYWxpZ249XCJjZW50ZXJcIiBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIj48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICAgIGA8YS1ob3RzcG90XG4gICAgICB2aXNpYmxlPVwiZmFsc2VcIlxuICAgICAgaWQ9XCJNUDNfVEVSX0NFTlRFUl9UT19PMVwiXG4gICAgICB0bz1cIk1QM19URVJfTzFcIlxuICAgICAgcG9zaXRpb249XCItOCAxIC0zXCJcbiAgICAgIGxvb2stYXQ9XCJbY2FtZXJhXVwiXG4gICAgPlxuICAgICAgPGEtaW1hZ2VcbiAgICAgICAgd2lkdGg9XCIwLjVcIlxuICAgICAgICBoZWlnaHQ9XCIwLjVcIlxuICAgICAgICBzcmM9XCIjaG90c3BvdC1zdGFpZ2h0LWljb25cIlxuICAgICAgICByb3RhdGlvbj1cIi02MCAwIDBcIlxuICAgICAgICBzY2FsZT1cIjEuNSAxLjUgMS41XCJcbiAgICAgID48L2EtaW1hZ2U+XG4gICAgICA8YS10ZXh0IHZhbHVlPVwiT2ZmaWNlIDFcIiBhbGlnbj1cImNlbnRlclwiIG1peGluPVwiaG90c3BvdC1ib3R0b20tdGV4dFwiPjwvYS10ZXh0PlxuICAgIDwvYS1ob3RzcG90PmAsXG4gICAgYDxhLWhvdHNwb3RcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIk1QM19URVJfQ0VOVEVSX1RPX08yXCJcbiAgICAgIHRvPVwiTVAzX1RFUl9PMlwiXG4gICAgICBwb3NpdGlvbj1cIi03LjIgMC43MyA2XCJcblxuICAgICAgbG9vay1hdD1cIltjYW1lcmFdXCJcbiAgICA+XG4gICAgICA8YS1pbWFnZVxuICAgICAgICB3aWR0aD1cIjAuNVwiXG4gICAgICAgIGhlaWdodD1cIjAuNVwiXG4gICAgICAgIHNyYz1cIiNob3RzcG90LXN0YWlnaHQtaWNvblwiXG4gICAgICAgIHJvdGF0aW9uPVwiLTYwIDAgMFwiXG4gICAgICAgIHNjYWxlPVwiMS43IDEuNyAxLjdcIlxuICAgICAgPjwvYS1pbWFnZT5cbiAgICAgIDxhLXRleHQgdmFsdWU9XCJPZmZpY2UgMlwiIGFsaWduPVwiY2VudGVyXCIgbWl4aW49XCJob3RzcG90LWJvdHRvbS10ZXh0XCI+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgXSxcbiAgTVAzX1RFUl9DMTogW1xuICAgIGA8YS1ob3RzcG90XG4gICAgICB2aXNpYmxlPVwiZmFsc2VcIlxuICAgICAgaWQ9XCJNUDNfVEVSX0MxX1RPX0NFTlRFUlwiXG4gICAgICB0bz1cIk1QM19URVJfQ0VOVEVSXCJcbiAgICAgIHBvc2l0aW9uPVwiLTYuMzcgMC40NSAtMTAuNzRcIlxuICAgICAgc2NhbGU9XCIyLjUgMi41IDIuNVwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgID48L2EtaW1hZ2U+XG4gICAgICA8YS10ZXh0XG4gICAgICAgIHZhbHVlPVwiRmFjdG9yeSBDZW50ZXJcIlxuICAgICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgIG1peGluPVwiaG90c3BvdC1ib3R0b20tdGV4dFwiXG4gICAgICA+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiTVAzX1RFUl9DMV9UT19PMVwiXG4gICAgICB0bz1cIk1QM19URVJfTzFcIlxuICAgICAgcG9zaXRpb249XCItMTIuMjUgMC40NyAtMi40NVwiXG4gICAgICBzY2FsZT1cIjIuNSAyLjUgMi41XCJcbiAgICAgIGxvb2stYXQ9XCJbY2FtZXJhXVwiXG4gICAgPlxuICAgICAgPGEtaW1hZ2VcbiAgICAgICAgd2lkdGg9XCIwLjVcIlxuICAgICAgICBoZWlnaHQ9XCIwLjVcIlxuICAgICAgICBzcmM9XCIjaG90c3BvdC1zdGFpZ2h0LWljb25cIlxuICAgICAgICByb3RhdGlvbj1cIi02MCAwIDBcIlxuICAgICAgPjwvYS1pbWFnZT5cbiAgICAgIDxhLXRleHRcbiAgICAgICAgdmFsdWU9XCJPZmZpY2UgMVwiXG4gICAgICAgIGFsaWduPVwiY2VudGVyXCJcbiAgICAgICAgbWl4aW49XCJob3RzcG90LWJvdHRvbS10ZXh0XCJcbiAgICAgID48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICBdLFxuICBNUDNfVEVSX0MyOiBbXG4gICAgYDxhLWhvdHNwb3RcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIk1QM19URVJfQzJfVE9fQ0VOVEVSXCJcbiAgICAgIHRvPVwiTVAzX1RFUl9DRU5URVJcIlxuICAgICAgcG9zaXRpb249XCItMi4xNyAwLjQyIDEyLjA1XCJcbiAgICAgIHNjYWxlPVwiMi41IDIuNSAyLjVcIlxuICAgICAgbG9vay1hdD1cIltjYW1lcmFdXCJcbiAgICA+XG4gICAgICA8YS1pbWFnZVxuICAgICAgICB3aWR0aD1cIjAuNVwiXG4gICAgICAgIGhlaWdodD1cIjAuNVwiXG4gICAgICAgIHNyYz1cIiNob3RzcG90LXN0YWlnaHQtaWNvblwiXG4gICAgICAgIHJvdGF0aW9uPVwiLTYwIDAgMFwiXG4gICAgICA+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dFxuICAgICAgICB2YWx1ZT1cIkZhY3RvcnkgQ2VudGVyXCJcbiAgICAgICAgYWxpZ249XCJjZW50ZXJcIlxuICAgICAgICBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIlxuICAgICAgPjwvYS10ZXh0PlxuICAgIDwvYS1ob3RzcG90PmAsXG4gICAgYDxhLWhvdHNwb3RcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIk1QM19URVJfQzFfVE9fTzJcIlxuICAgICAgdG89XCJNUDNfVEVSX08yXCJcbiAgICAgIHBvc2l0aW9uPVwiLTEwLjg1IDAuNTEgNS42NlwiXG4gICAgICBzY2FsZT1cIjIuNSAyLjUgMi41XCJcbiAgICAgIGxvb2stYXQ9XCJbY2FtZXJhXVwiXG4gICAgPlxuICAgICAgPGEtaW1hZ2VcbiAgICAgICAgd2lkdGg9XCIwLjVcIlxuICAgICAgICBoZWlnaHQ9XCIwLjVcIlxuICAgICAgICBzcmM9XCIjaG90c3BvdC1zdGFpZ2h0LWljb25cIlxuICAgICAgICByb3RhdGlvbj1cIi02MCAwIDBcIlxuICAgICAgPjwvYS1pbWFnZT5cbiAgICAgIDxhLXRleHRcbiAgICAgICAgdmFsdWU9XCJPZmZpY2UgMlwiXG4gICAgICAgIGFsaWduPVwiY2VudGVyXCJcbiAgICAgICAgbWl4aW49XCJob3RzcG90LWJvdHRvbS10ZXh0XCJcbiAgICAgID48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICBdLFxuICBNUDNfVEVSX08xOiBbXG4gICAgYDxhLWhvdHNwb3RcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIk1QM19URVJfTzFfVE9fQ0VOVEVSXCJcbiAgICAgIHRvPVwiTVAzX1RFUl9DRU5URVJcIlxuICAgICAgcG9zaXRpb249XCI3IDAgMFwiXG4gICAgICBzY2FsZT1cIjIuNSAyLjUgMi41XCJcbiAgICAgIGxvb2stYXQ9XCJbY2FtZXJhXVwiXG4gICAgPlxuICAgICAgPGEtaW1hZ2VcbiAgICAgICAgd2lkdGg9XCIwLjVcIlxuICAgICAgICBoZWlnaHQ9XCIwLjVcIlxuICAgICAgICBzcmM9XCIjaG90c3BvdC1zdGFpZ2h0LWljb25cIlxuICAgICAgICByb3RhdGlvbj1cIi02MCAwIDBcIlxuICAgICAgPjwvYS1pbWFnZT5cbiAgICAgIDxhLXRleHRcbiAgICAgICAgdmFsdWU9XCJGYWN0b3J5IENlbnRlclwiXG4gICAgICAgIGFsaWduPVwiY2VudGVyXCJcbiAgICAgICAgbWl4aW49XCJob3RzcG90LWJvdHRvbS10ZXh0XCJcbiAgICAgID48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICBdLFxuICBNUDNfVEVSX08yOiBbXG4gICAgYFxuICAgIDxhLWhvdHNwb3RcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIk1QM19URVJfTzJfVE9fQ0VOVEVSXCJcbiAgICAgIHRvPVwiTVAzX1RFUl9DRU5URVJcIlxuICAgICAgcG9zaXRpb249XCIyIDAgN1wic1xuICAgICAgc2NhbGU9XCIyLjUgMi41IDIuNVwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgID48L2EtaW1hZ2U+XG4gICAgICA8YS10ZXh0XG4gICAgICAgIHZhbHVlPVwiRmFjdG9yeSBDZW50ZXJcIlxuICAgICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgIG1peGluPVwiaG90c3BvdC1ib3R0b20tdGV4dFwiXG4gICAgICA+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgXSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1wM1RlckhvdHNwb3RzO1xuIiwibGV0IG1wM1NlbWlIb3RzcG90cyA9IHtcbiAgTVAzX1NFTUlfRTogW1xuICAgIGA8YS1ob3RzcG90XG4gICAgICB2aXNpYmxlPVwiZmFsc2VcIlxuICAgICAgaWQ9XCJNUDNfU0VNSV9FX1RPX0NFTlRFUlwiXG4gICAgICB0bz1cIk1QM19TRU1JX0NFTlRFUlwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgICAgcG9zaXRpb249XCItMy44NyAtMC4wMSA1LjUzXCJcbiAgICAgIHNjYWxlPVwiMi41IDIuNSAyLjVcIlxuICAgID5cbiAgICAgIDxhLWltYWdlIHdpZHRoPVwiMC41XCIgaGVpZ2h0PVwiMC41XCIgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCIgcm90YXRpb249XCItNjAgMCAwXCI+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dCB2YWx1ZT1cIkZhY3RvcnkgQ2VudGVyXCIgYWxpZ249XCJjZW50ZXJcIiBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIj48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICBdLFxuICBNUDNfU0VNSV9DRU5URVI6IFtcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiTVAzX1NFTUlfQ0VOVEVSX1RPX0VcIlxuICAgICAgdG89XCJNUDNfU0VNSV9FXCJcbiAgICAgIHBvc2l0aW9uPVwiLTE2LjA0IDAuODEgMi41MFwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgICAgc2NhbGU9XCIyIDIgMlwiXG4gICAgPlxuICAgICAgPGEtaW1hZ2Ugd2lkdGg9XCIwLjVcIiBoZWlnaHQ9XCIwLjVcIiBzcmM9XCIjaG90c3BvdC1zdGFpZ2h0LWljb25cIiByb3RhdGlvbj1cIi02MCAwIDBcIiBzY2FsZT1cIjEuNSAxLjUgMS41XCI+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dCB2YWx1ZT1cIkVudHJhbmNlXCIgYWxpZ249XCJjZW50ZXJcIiBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIj48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICAgIGA8YS1ob3RzcG90XG4gICAgICB2aXNpYmxlPVwiZmFsc2VcIlxuICAgICAgaWQ9XCJNUDNfU0VNSV9DRU5URVJfVE9fQzFcIlxuICAgICAgdG89XCJNUDNfU0VNSV9DMVwiXG4gICAgICBwb3NpdGlvbj1cIi03LjAxIDAuNzAgMTMuNTJcIlxuICAgICAgbG9vay1hdD1cIltjYW1lcmFdXCJcbiAgICAgIHNjYWxlPVwiMS41IDEuNSAxLjVcIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgICAgc2NhbGU9XCIyIDIgMlwiXG4gICAgICA+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dCB2YWx1ZT1cIkNvcm5lciAxXCIgYWxpZ249XCJjZW50ZXJcIiBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIj48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICAgIGA8YS1ob3RzcG90XG4gICAgICB2aXNpYmxlPVwiZmFsc2VcIlxuICAgICAgaWQ9XCJNUDNfU0VNSV9DRU5URVJfVE9fQzJcIlxuICAgICAgdG89XCJNUDNfU0VNSV9DMlwiXG4gICAgICBwb3NpdGlvbj1cIjEzLjQwIDAuMDYgLTYuNzRcIlxuICAgICAgc2NhbGU9XCIyIDIgMlwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgICAgc2NhbGU9XCIxLjUgMS41IDEuNVwiXG4gICAgICA+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dCB2YWx1ZT1cIkNvcm5lciAyXCIgYWxpZ249XCJjZW50ZXJcIiBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIj48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICAgIGA8YS1ob3RzcG90XG4gICAgICB2aXNpYmxlPVwiZmFsc2VcIlxuICAgICAgaWQ9XCJNUDNfU0VNSV9DRU5URVJfVE9fTzFcIlxuICAgICAgdG89XCJNUDNfU0VNSV9PMVwiXG4gICAgICBwb3NpdGlvbj1cIi0xOS45MiAwLjg1IDkuODhcIlxuICAgICAgc2NhbGU9XCIyIDIgMlwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgICAgc2NhbGU9XCIxLjUgMS41IDEuNVwiXG4gICAgICA+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dCB2YWx1ZT1cIk9mZmljZSAxXCIgYWxpZ249XCJjZW50ZXJcIiBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIj48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICAgIGA8YS1ob3RzcG90XG4gICAgICB2aXNpYmxlPVwiZmFsc2VcIlxuICAgICAgaWQ9XCJNUDNfU0VNSV9DRU5URVJfVE9fTzJcIlxuICAgICAgdG89XCJNUDNfU0VNSV9PMlwiXG4gICAgICBwb3NpdGlvbj1cIi0yMi41MCAwLjY0IC00Ljc0XCJcbiAgICAgIHNjYWxlPVwiMiAyIDJcIlxuICAgICAgbG9vay1hdD1cIltjYW1lcmFdXCJcbiAgICA+XG4gICAgICA8YS1pbWFnZVxuICAgICAgICB3aWR0aD1cIjAuNVwiXG4gICAgICAgIGhlaWdodD1cIjAuNVwiXG4gICAgICAgIHNyYz1cIiNob3RzcG90LXN0YWlnaHQtaWNvblwiXG4gICAgICAgIHJvdGF0aW9uPVwiLTYwIDAgMFwiXG4gICAgICAgIHNjYWxlPVwiMS43IDEuNyAxLjdcIlxuICAgICAgPjwvYS1pbWFnZT5cbiAgICAgIDxhLXRleHQgdmFsdWU9XCJPZmZpY2UgMlwiIGFsaWduPVwiY2VudGVyXCIgbWl4aW49XCJob3RzcG90LWJvdHRvbS10ZXh0XCI+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgXSxcbiAgTVAzX1NFTUlfQzE6IFtcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiTVAzX1NFTUlfQzFfVE9fRVwiXG4gICAgICB0bz1cIk1QM19TRU1JX0VcIlxuICAgICAgbG9vay1hdD1cIltjYW1lcmFdXCJcbiAgICAgIHBvc2l0aW9uPVwiLTEwLjYzIDAuNzcgNC45NFwiXG4gICAgICBzY2FsZT1cIjIuNSAyLjUgMi41XCJcbiAgICA+XG4gICAgICA8YS1pbWFnZSB3aWR0aD1cIjAuNVwiIGhlaWdodD1cIjAuNVwiIHNyYz1cIiNob3RzcG90LXN0YWlnaHQtaWNvblwiIHJvdGF0aW9uPVwiLTYwIDAgMFwiPjwvYS1pbWFnZT5cbiAgICAgIDxhLXRleHQgdmFsdWU9XCJFbnRyYW5jZVwiIGFsaWduPVwiY2VudGVyXCIgbWl4aW49XCJob3RzcG90LWJvdHRvbS10ZXh0XCI+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiTVAzX1NFTUlfQzFfVE9fTzFcIlxuICAgICAgdG89XCJNUDNfU0VNSV9PMVwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgICAgcG9zaXRpb249XCItNy4xMyAwLjA5IDkuMzRcIlxuICAgICAgc2NhbGU9XCIyLjUgMi41IDIuNVwiXG4gICAgPlxuICAgICAgPGEtaW1hZ2Ugd2lkdGg9XCIwLjVcIiBoZWlnaHQ9XCIwLjVcIiBzcmM9XCIjaG90c3BvdC1zdGFpZ2h0LWljb25cIiByb3RhdGlvbj1cIi02MCAwIDBcIj48L2EtaW1hZ2U+XG4gICAgICA8YS10ZXh0IHZhbHVlPVwiT2ZmaWNlIDFcIiBhbGlnbj1cImNlbnRlclwiIG1peGluPVwiaG90c3BvdC1ib3R0b20tdGV4dFwiPjwvYS10ZXh0PlxuICAgIDwvYS1ob3RzcG90PmAsXG4gICAgYDxhLWhvdHNwb3RcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIk1QM19TRU1JX0MxX1RPX0NFTlRFUlwiXG4gICAgICB0bz1cIk1QM19TRU1JX0NFTlRFUlwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgICAgcG9zaXRpb249XCItNy43NCAwLjM1IC04LjgzXCJcbiAgICAgIHNjYWxlPVwiMi41IDIuNSAyLjVcIlxuICAgID5cbiAgICAgIDxhLWltYWdlIHdpZHRoPVwiMC41XCIgaGVpZ2h0PVwiMC41XCIgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCIgcm90YXRpb249XCItNjAgMCAwXCI+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dCB2YWx1ZT1cIkZhY3RvcnkgQ2VudGVyXCIgYWxpZ249XCJjZW50ZXJcIiBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIj48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICBdLFxuICBNUDNfU0VNSV9DMjogW1xuICAgIGA8YS1ob3RzcG90XG4gICAgICB2aXNpYmxlPVwiZmFsc2VcIlxuICAgICAgaWQ9XCJNUDNfU0VNSV9DMl9UT19DRU5URVJcIlxuICAgICAgdG89XCJNUDNfU0VNSV9DRU5URVJcIlxuICAgICAgcG9zaXRpb249XCItOS40MCAwLjYxIDguNTlcIlxuICAgICAgc2NhbGU9XCIyLjUgMi41IDIuNVwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgID48L2EtaW1hZ2U+XG4gICAgICA8YS10ZXh0XG4gICAgICAgIHZhbHVlPVwiRmFjdG9yeSBDZW50ZXJcIlxuICAgICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgIG1peGluPVwiaG90c3BvdC1ib3R0b20tdGV4dFwiXG4gICAgICA+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgXSxcbiAgTVAzX1NFTUlfTzE6IFtcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiTVAzX1NFTUlfTzFfVE9fQ0VOVEVSXCJcbiAgICAgIHRvPVwiTVAzX1NFTUlfQ0VOVEVSXCJcbiAgICAgIHBvc2l0aW9uPVwiMC4xOSAwLjQ2IDcuMjNcIlxuICAgICAgc2NhbGU9XCIyLjUgMi41IDIuNVwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgID48L2EtaW1hZ2U+XG4gICAgICA8YS10ZXh0XG4gICAgICAgIHZhbHVlPVwiRmFjdG9yeSBDZW50ZXJcIlxuICAgICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgIG1peGluPVwiaG90c3BvdC1ib3R0b20tdGV4dFwiXG4gICAgICA+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgXSxcbiAgTVAzX1NFTUlfTzI6IFtcbiAgICBgXG4gICAgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiTVAzX1NFTUlfTzJfVE9fQ0VOVEVSXCJcbiAgICAgIHRvPVwiTVAzX1NFTUlfQ0VOVEVSXCJcbiAgICAgIHBvc2l0aW9uPVwiLTAuMjcgMC4wOCAtOC41MFwiXG4gICAgICBzY2FsZT1cIjIuNSAyLjUgMi41XCJcbiAgICAgIGxvb2stYXQ9XCJbY2FtZXJhXVwiXG4gICAgPlxuICAgICAgPGEtaW1hZ2VcbiAgICAgICAgd2lkdGg9XCIwLjVcIlxuICAgICAgICBoZWlnaHQ9XCIwLjVcIlxuICAgICAgICBzcmM9XCIjaG90c3BvdC1zdGFpZ2h0LWljb25cIlxuICAgICAgICByb3RhdGlvbj1cIi02MCAwIDBcIlxuICAgICAgPjwvYS1pbWFnZT5cbiAgICAgIDxhLXRleHRcbiAgICAgICAgdmFsdWU9XCJGYWN0b3J5IENlbnRlclwiXG4gICAgICAgIGFsaWduPVwiY2VudGVyXCJcbiAgICAgICAgbWl4aW49XCJob3RzcG90LWJvdHRvbS10ZXh0XCJcbiAgICAgID48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICBdLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgbXAzU2VtaUhvdHNwb3RzO1xuIiwibGV0IG1wM0RldEhvdHNwb3RzID0ge1xuICBNUDNfREVUX0U6IFtcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiTVAzX0RFVF9FX1RPX0NFTlRFUlwiXG4gICAgICB0bz1cIk1QM19ERVRfQ0VOVEVSXCJcbiAgICAgIGxvb2stYXQ9XCJbY2FtZXJhXVwiXG4gICAgICBwb3NpdGlvbj1cIi05LjYwIC0wLjAwIDEuNjlcIlxuICAgICAgc2NhbGU9XCIyLjUgMi41IDIuNVwiXG4gICAgPlxuICAgICAgPGEtaW1hZ2Ugd2lkdGg9XCIwLjVcIiBoZWlnaHQ9XCIwLjVcIiBzcmM9XCIjaG90c3BvdC1zdGFpZ2h0LWljb25cIiByb3RhdGlvbj1cIi02MCAwIDBcIj48L2EtaW1hZ2U+XG4gICAgICA8YS10ZXh0IHZhbHVlPVwiRmFjdG9yeSBDZW50ZXJcIiBhbGlnbj1cImNlbnRlclwiIG1peGluPVwiaG90c3BvdC1ib3R0b20tdGV4dFwiPjwvYS10ZXh0PlxuICAgIDwvYS1ob3RzcG90PmAsXG4gIF0sXG4gIE1QM19ERVRfQ0VOVEVSOiBbXG4gICAgYDxhLWhvdHNwb3RcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIk1QM19ERVRfQ0VOVEVSX1RPX0VcIlxuICAgICAgdG89XCJNUDNfREVUX0VcIlxuICAgICAgcG9zaXRpb249XCItMTMuOTggMC4wMCAtOS42OFwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgICAgc2NhbGU9XCIyIDIgMlwiXG4gICAgPlxuICAgICAgPGEtaW1hZ2Ugd2lkdGg9XCIwLjVcIiBoZWlnaHQ9XCIwLjVcIiBzcmM9XCIjaG90c3BvdC1zdGFpZ2h0LWljb25cIiByb3RhdGlvbj1cIi02MCAwIDBcIiBzY2FsZT1cIjEuNSAxLjUgMS41XCI+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dCB2YWx1ZT1cIkVudHJhbmNlXCIgYWxpZ249XCJjZW50ZXJcIiBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIj48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICAgIGA8YS1ob3RzcG90XG4gICAgICB2aXNpYmxlPVwiZmFsc2VcIlxuICAgICAgaWQ9XCJNUDNfREVUX0NFTlRFUl9UT19PMVwiXG4gICAgICB0bz1cIk1QM19ERVRfTzFcIlxuICAgICAgcG9zaXRpb249XCItMTEuMTIgMC4zNyAtMTIuODZcIlxuICAgICAgc2NhbGU9XCIyIDIgMlwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgICAgc2NhbGU9XCIxLjUgMS41IDEuNVwiXG4gICAgICA+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dCB2YWx1ZT1cIk9mZmljZSAxXCIgYWxpZ249XCJjZW50ZXJcIiBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIj48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICBdLFxuICBNUDNfREVUX08xOiBbXG4gICAgYDxhLWhvdHNwb3RcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIk1QM19ERVRfTzFfVE9fQ0VOVEVSXCJcbiAgICAgIHRvPVwiTVAzX0RFVF9DRU5URVJcIlxuICAgICAgcG9zaXRpb249XCItMC44NyAwLjE1IDQuOTJcIlxuICAgICAgc2NhbGU9XCIyLjUgMi41IDIuNVwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgID48L2EtaW1hZ2U+XG4gICAgICA8YS10ZXh0XG4gICAgICAgIHZhbHVlPVwiRmFjdG9yeSBDZW50ZXJcIlxuICAgICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgIG1peGluPVwiaG90c3BvdC1ib3R0b20tdGV4dFwiXG4gICAgICA+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiTVAzX0RFVF9PMV9UT19PMlwiXG4gICAgICB0bz1cIk1QM19ERVRfTzJcIlxuICAgICAgcG9zaXRpb249XCIzLjU2IC0wLjA3IC02LjMxXCJcbiAgICAgIHNjYWxlPVwiMi41IDIuNSAyLjVcIlxuICAgICAgbG9vay1hdD1cIltjYW1lcmFdXCJcbiAgICA+XG4gICAgICA8YS1pbWFnZVxuICAgICAgICB3aWR0aD1cIjAuNVwiXG4gICAgICAgIGhlaWdodD1cIjAuNVwiXG4gICAgICAgIHNyYz1cIiNob3RzcG90LXN0YWlnaHQtaWNvblwiXG4gICAgICAgIHJvdGF0aW9uPVwiLTYwIDAgMFwiXG4gICAgICA+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dFxuICAgICAgICB2YWx1ZT1cIk9mZmljZSAyXCJcbiAgICAgICAgYWxpZ249XCJjZW50ZXJcIlxuICAgICAgICBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIlxuICAgICAgPjwvYS10ZXh0PlxuICAgIDwvYS1ob3RzcG90PmAsXG4gIF0sXG4gIE1QM19ERVRfTzI6IFtcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiTVAzX0RFVF9PMl9UT19DRU5URVJcIlxuICAgICAgdG89XCJNUDNfREVUX0NFTlRFUlwiXG4gICAgICBwb3NpdGlvbj1cIjEwLjIzIC0wLjQ3IDkuMTdcIlxuICAgICAgc2NhbGU9XCIyLjUgMi41IDIuNVwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgID48L2EtaW1hZ2U+XG4gICAgICA8YS10ZXh0XG4gICAgICAgIHZhbHVlPVwiRmFjdG9yeSBDZW50ZXJcIlxuICAgICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgIG1peGluPVwiaG90c3BvdC1ib3R0b20tdGV4dFwiXG4gICAgICA+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiTVAzX0RFVF9PMl9UT19PMVwiXG4gICAgICB0bz1cIk1QM19ERVRfTzFcIlxuICAgICAgcG9zaXRpb249XCIzLjY5IC0wLjA1IDQuNzNcIlxuICAgICAgc2NhbGU9XCIyLjUgMi41IDIuNVwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgID48L2EtaW1hZ2U+XG4gICAgICA8YS10ZXh0XG4gICAgICAgIHZhbHVlPVwiT2ZmaWNlIDFcIlxuICAgICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgIG1peGluPVwiaG90c3BvdC1ib3R0b20tdGV4dFwiXG4gICAgICA+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgXSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1wM0RldEhvdHNwb3RzO1xuIiwibGV0IGJiVGVySG90c3BvdHMgPSB7XG4gIEJCX1RFUl9FMTogW1xuICAgIGA8YS1ob3RzcG90XG4gICAgICB2aXNpYmxlPVwiZmFsc2VcIlxuICAgICAgaWQ9XCJCQl9URVJfRTFfVE9fQ0VOVEVSXCIgdG89XCJCQl9URVJfQ0VOVEVSXCIgbG9vay1hdD1cIltjYW1lcmFdXCJcbiAgICAgIHBvc2l0aW9uPVwiLTEyLjQzIC0wLjEwIDEuMzZcIiBzY2FsZT1cIjIuNSAyLjUgMi41XCJcbiAgICA+XG4gICAgICA8YS1pbWFnZSB3aWR0aD1cIjAuNVwiIGhlaWdodD1cIjAuNVwiIHNyYz1cIiNob3RzcG90LXN0YWlnaHQtaWNvblwiIHJvdGF0aW9uPVwiLTYwIDAgMFwiPjwvYS1pbWFnZT5cbiAgICAgIDxhLXRleHQgdmFsdWU9XCJGYWN0b3J5IENlbnRlclwiIGFsaWduPVwiY2VudGVyXCIgbWl4aW49XCJob3RzcG90LWJvdHRvbS10ZXh0XCI+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiQkJfVEVSX0UxX1RPX0UyXCIgdG89XCJCQl9URVJfRTJcIiBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgICAgcG9zaXRpb249XCIwLjM3IDAuNjUgMTEuOThcIiBzY2FsZT1cIjIuNSAyLjUgMi41XCJcbiAgICA+XG4gICAgICA8YS1pbWFnZSB3aWR0aD1cIjAuNVwiIGhlaWdodD1cIjAuNVwiIHNyYz1cIiNob3RzcG90LXN0YWlnaHQtaWNvblwiIHJvdGF0aW9uPVwiLTYwIDAgMFwiPjwvYS1pbWFnZT5cbiAgICAgIDxhLXRleHQgdmFsdWU9XCJFbnRyYW5jZSAyXCIgYWxpZ249XCJjZW50ZXJcIiBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIj48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICBdLFxuICBCQl9URVJfRTI6IFtcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiQkJfVEVSX0UyX1RPX0NFTlRFUlwiIHRvPVwiQkJfVEVSX0NFTlRFUlwiIGxvb2stYXQ9XCJbY2FtZXJhXVwiXG4gICAgICBwb3NpdGlvbj1cIi05LjU1IDAuMzEgNy4yNlwiIHNjYWxlPVwiMi41IDIuNSAyLjVcIlxuICAgID5cbiAgICAgIDxhLWltYWdlIHdpZHRoPVwiMC41XCIgaGVpZ2h0PVwiMC41XCIgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCIgcm90YXRpb249XCItNjAgMCAwXCI+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dCB2YWx1ZT1cIkZhY3RvcnkgQ2VudGVyXCIgYWxpZ249XCJjZW50ZXJcIiBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIj48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICAgIGA8YS1ob3RzcG90XG4gICAgICB2aXNpYmxlPVwiZmFsc2VcIlxuICAgICAgaWQ9XCJCQl9URVJfRTJfVE9fRTFcIiB0bz1cIkJCX1RFUl9FMVwiIGxvb2stYXQ9XCJbY2FtZXJhXVwiXG4gICAgICBwb3NpdGlvbj1cIi03LjMzIDAuNDEgLTkuNTBcIiBzY2FsZT1cIjIuNSAyLjUgMi41XCJcbiAgICA+XG4gICAgICA8YS1pbWFnZSB3aWR0aD1cIjAuNVwiIGhlaWdodD1cIjAuNVwiIHNyYz1cIiNob3RzcG90LXN0YWlnaHQtaWNvblwiIHJvdGF0aW9uPVwiLTYwIDAgMFwiPjwvYS1pbWFnZT5cbiAgICAgIDxhLXRleHQgdmFsdWU9XCJFbnRyYW5jZSAxXCIgYWxpZ249XCJjZW50ZXJcIiBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIj48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICBdLFxuICBCQl9URVJfQ0VOVEVSOiBbXG4gICAgYDxhLWhvdHNwb3RcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIkJCX1RFUl9DRU5URVJfVE9fRTFcIiB0bz1cIkJCX1RFUl9FMVwiIHBvc2l0aW9uPVwiMTIuMDMgMC44OSAtNC4xMlwiIGxvb2stYXQ9XCJbY2FtZXJhXVwiXG4gICAgPlxuICAgICAgPGEtaW1hZ2Ugd2lkdGg9XCIwLjVcIiBoZWlnaHQ9XCIwLjVcIiBzcmM9XCIjaG90c3BvdC1zdGFpZ2h0LWljb25cIiByb3RhdGlvbj1cIi02MCAwIDBcIiBzY2FsZT1cIjEuNSAxLjUgMS41XCI+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dCB2YWx1ZT1cIkVudHJhbmNlIDFcIiBhbGlnbj1cImNlbnRlclwiIG1peGluPVwiaG90c3BvdC1ib3R0b20tdGV4dFwiPjwvYS10ZXh0PlxuICAgIDwvYS1ob3RzcG90PmAsXG4gICAgYDxhLWhvdHNwb3RcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIkJCX1RFUl9DRU5URVJfVE9fRTJcIlxuICAgICAgdG89XCJCQl9URVJfRTJcIlxuICAgICAgcG9zaXRpb249XCIxLjI1IDAuNjkgMTIuNjdcIlxuICAgICAgbG9vay1hdD1cIltjYW1lcmFdXCJcbiAgICA+XG4gICAgICA8YS1pbWFnZVxuICAgICAgICB3aWR0aD1cIjAuNVwiXG4gICAgICAgIGhlaWdodD1cIjAuNVwiXG4gICAgICAgIHNyYz1cIiNob3RzcG90LXN0YWlnaHQtaWNvblwiXG4gICAgICAgIHJvdGF0aW9uPVwiLTYwIDAgMFwiXG4gICAgICAgIHNjYWxlPVwiMiAyIDJcIlxuICAgICAgPjwvYS1pbWFnZT5cbiAgICAgIDxhLXRleHQgdmFsdWU9XCJFbnRyYW5jZSAyXCIgYWxpZ249XCJjZW50ZXJcIiBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIj48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICAgIGA8YS1ob3RzcG90XG4gICAgICB2aXNpYmxlPVwiZmFsc2VcIlxuICAgICAgaWQ9XCJCQl9URVJfQ0VOVEVSX1RPX0MxXCJcbiAgICAgIHRvPVwiQkJfVEVSX0MxXCJcbiAgICAgIHBvc2l0aW9uPVwiMy42MCAwLjY5IC0xMi4yMVwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgICAgc2NhbGU9XCIyIDIgMlwiXG4gICAgICA+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dCB2YWx1ZT1cIkNvcm5lciAxXCIgYWxpZ249XCJjZW50ZXJcIiBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIj48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICAgIGA8YS1ob3RzcG90XG4gICAgICB2aXNpYmxlPVwiZmFsc2VcIlxuICAgICAgaWQ9XCJCQl9URVJfQ0VOVEVSX1RPX0MzXCJcbiAgICAgIHRvPVwiQkJfVEVSX0MzXCJcbiAgICAgIHBvc2l0aW9uPVwiLTUuOTUgMC43MSAxMS4yNVwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgICAgc2NhbGU9XCIxLjUgMS41IDEuNVwiXG4gICAgICA+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dCB2YWx1ZT1cIkNvcm5lciAzXCIgYWxpZ249XCJjZW50ZXJcIiBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIj48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICAgIGA8YS1ob3RzcG90XG4gICAgICB2aXNpYmxlPVwiZmFsc2VcIlxuICAgICAgaWQ9XCJCQl9URVJfQ0VOVEVSX1RPX08yXCJcbiAgICAgIHRvPVwiQkJfVEVSX08yXCJcbiAgICAgIHBvc2l0aW9uPVwiOS40MiAwLjQ5IDEwLjAwXCJcblxuICAgICAgbG9vay1hdD1cIltjYW1lcmFdXCJcbiAgICA+XG4gICAgICA8YS1pbWFnZVxuICAgICAgICB3aWR0aD1cIjAuNVwiXG4gICAgICAgIGhlaWdodD1cIjAuNVwiXG4gICAgICAgIHNyYz1cIiNob3RzcG90LXN0YWlnaHQtaWNvblwiXG4gICAgICAgIHJvdGF0aW9uPVwiLTYwIDAgMFwiXG4gICAgICAgIHNjYWxlPVwiMS43IDEuNyAxLjdcIlxuICAgICAgPjwvYS1pbWFnZT5cbiAgICAgIDxhLXRleHQgdmFsdWU9XCJPZmZpY2UgMlwiIGFsaWduPVwiY2VudGVyXCIgbWl4aW49XCJob3RzcG90LWJvdHRvbS10ZXh0XCI+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgXSxcbiAgQkJfVEVSX0MxOiBbXG4gICAgYDxhLWhvdHNwb3RcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIkJCX1RFUl9DMV9UT19DRU5URVJcIlxuICAgICAgdG89XCJCQl9URVJfQ0VOVEVSXCJcbiAgICAgIHBvc2l0aW9uPVwiMC4yOCAwLjgwIDEyLjQ3XCJcbiAgICAgIHNjYWxlPVwiMi41IDIuNSAyLjVcIlxuICAgICAgbG9vay1hdD1cIltjYW1lcmFdXCJcbiAgICA+XG4gICAgICA8YS1pbWFnZVxuICAgICAgICB3aWR0aD1cIjAuNVwiXG4gICAgICAgIGhlaWdodD1cIjAuNVwiXG4gICAgICAgIHNyYz1cIiNob3RzcG90LXN0YWlnaHQtaWNvblwiXG4gICAgICAgIHJvdGF0aW9uPVwiLTYwIDAgMFwiXG4gICAgICA+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dFxuICAgICAgICB2YWx1ZT1cIkZhY3RvcnkgQ2VudGVyXCJcbiAgICAgICAgYWxpZ249XCJjZW50ZXJcIlxuICAgICAgICBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIlxuICAgICAgPjwvYS10ZXh0PlxuICAgIDwvYS1ob3RzcG90PmAsXG4gICAgYDxhLWhvdHNwb3RcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIkJCX1RFUl9DMV9UT19PMVwiXG4gICAgICB0bz1cIkJCX1RFUl9PMVwiXG4gICAgICBwb3NpdGlvbj1cIjExLjQzIDAuNjEgLTUuNjJcIlxuICAgICAgc2NhbGU9XCIyLjUgMi41IDIuNVwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgID48L2EtaW1hZ2U+XG4gICAgICA8YS10ZXh0XG4gICAgICAgIHZhbHVlPVwiT2ZmaWNlIDFcIlxuICAgICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgIG1peGluPVwiaG90c3BvdC1ib3R0b20tdGV4dFwiXG4gICAgICA+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiQkJfVEVSX0MxX1RPX0UxXCJcbiAgICAgIHRvPVwiQkJfVEVSX0UxXCJcbiAgICAgIHBvc2l0aW9uPVwiMTIuMDMgMC44NCA0LjE0XCJcbiAgICAgIHNjYWxlPVwiMi41IDIuNSAyLjVcIlxuICAgICAgbG9vay1hdD1cIltjYW1lcmFdXCJcbiAgICA+XG4gICAgICA8YS1pbWFnZVxuICAgICAgICB3aWR0aD1cIjAuNVwiXG4gICAgICAgIGhlaWdodD1cIjAuNVwiXG4gICAgICAgIHNyYz1cIiNob3RzcG90LXN0YWlnaHQtaWNvblwiXG4gICAgICAgIHJvdGF0aW9uPVwiLTYwIDAgMFwiXG4gICAgICA+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dFxuICAgICAgICB2YWx1ZT1cIkVudHJhbmNlIDFcIlxuICAgICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgIG1peGluPVwiaG90c3BvdC1ib3R0b20tdGV4dFwiXG4gICAgICA+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiQkJfVEVSX0MxX1RPX0MyXCJcbiAgICAgIHRvPVwiQkJfVEVSX0MyXCJcbiAgICAgIHBvc2l0aW9uPVwiLTAuNDEgMC42OSAtMTIuNzJcIlxuICAgICAgc2NhbGU9XCIyLjUgMi41IDIuNVwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgID48L2EtaW1hZ2U+XG4gICAgICA8YS10ZXh0XG4gICAgICAgIHZhbHVlPVwiQ29ybmVyIDJcIlxuICAgICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgIG1peGluPVwiaG90c3BvdC1ib3R0b20tdGV4dFwiXG4gICAgICA+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgXSxcbiAgQkJfVEVSX0MyOiBbXG4gICAgYDxhLWhvdHNwb3RcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIkJCX1RFUl9DM19UT19DMVwiXG4gICAgICB0bz1cIkJCX1RFUl9DMVwiXG4gICAgICBwb3NpdGlvbj1cIjAuMjkgMC41NiAxMS4yM1wiXG4gICAgICBzY2FsZT1cIjIuNSAyLjUgMi41XCJcbiAgICAgIGxvb2stYXQ9XCJbY2FtZXJhXVwiXG4gICAgPlxuICAgICAgPGEtaW1hZ2VcbiAgICAgICAgd2lkdGg9XCIwLjVcIlxuICAgICAgICBoZWlnaHQ9XCIwLjVcIlxuICAgICAgICBzcmM9XCIjaG90c3BvdC1zdGFpZ2h0LWljb25cIlxuICAgICAgICByb3RhdGlvbj1cIi02MCAwIDBcIlxuICAgICAgPjwvYS1pbWFnZT5cbiAgICAgIDxhLXRleHRcbiAgICAgICAgdmFsdWU9XCJDb3JuZXIgMVwiXG4gICAgICAgIGFsaWduPVwiY2VudGVyXCJcbiAgICAgICAgbWl4aW49XCJob3RzcG90LWJvdHRvbS10ZXh0XCJcbiAgICAgID48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICBdLFxuICBCQl9URVJfQzM6IFtcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiQkJfVEVSX0MyX1RPX0NFTlRFUlwiXG4gICAgICB0bz1cIkJCX1RFUl9DRU5URVJcIlxuICAgICAgcG9zaXRpb249XCItMi40MyAwLjY2IC0xMS45OVwiXG4gICAgICBzY2FsZT1cIjIuNSAyLjUgMi41XCJcbiAgICAgIGxvb2stYXQ9XCJbY2FtZXJhXVwiXG4gICAgPlxuICAgICAgPGEtaW1hZ2VcbiAgICAgICAgd2lkdGg9XCIwLjVcIlxuICAgICAgICBoZWlnaHQ9XCIwLjVcIlxuICAgICAgICBzcmM9XCIjaG90c3BvdC1zdGFpZ2h0LWljb25cIlxuICAgICAgICByb3RhdGlvbj1cIi02MCAwIDBcIlxuICAgICAgPjwvYS1pbWFnZT5cbiAgICAgIDxhLXRleHRcbiAgICAgICAgdmFsdWU9XCJGYWN0b3J5IENlbnRlclwiXG4gICAgICAgIGFsaWduPVwiY2VudGVyXCJcbiAgICAgICAgbWl4aW49XCJob3RzcG90LWJvdHRvbS10ZXh0XCJcbiAgICAgID48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICAgIGA8YS1ob3RzcG90XG4gICAgICB2aXNpYmxlPVwiZmFsc2VcIlxuICAgICAgaWQ9XCJCQl9URVJfQzJfVE9fRTJcIlxuICAgICAgdG89XCJCQl9URVJfRTJcIlxuICAgICAgcG9zaXRpb249XCIxMi4xOCAwLjY0IDEuMTlcIlxuICAgICAgc2NhbGU9XCIyLjUgMi41IDIuNVwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgID48L2EtaW1hZ2U+XG4gICAgICA8YS10ZXh0XG4gICAgICAgIHZhbHVlPVwiRW50cmFuY2UgMlwiXG4gICAgICAgIGFsaWduPVwiY2VudGVyXCJcbiAgICAgICAgbWl4aW49XCJob3RzcG90LWJvdHRvbS10ZXh0XCJcbiAgICAgID48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICAgIGA8YS1ob3RzcG90XG4gICAgICB2aXNpYmxlPVwiZmFsc2VcIlxuICAgICAgaWQ9XCJCQl9URVJfQzJfVE9fTzJcIlxuICAgICAgdG89XCJCQl9URVJfTzJcIlxuICAgICAgcG9zaXRpb249XCI5LjYwIDAuNDcgLTcuNTlcIlxuICAgICAgc2NhbGU9XCIyLjUgMi41IDIuNVwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgID48L2EtaW1hZ2U+XG4gICAgICA8YS10ZXh0XG4gICAgICAgIHZhbHVlPVwiT2ZmaWNlIDJcIlxuICAgICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgIG1peGluPVwiaG90c3BvdC1ib3R0b20tdGV4dFwiXG4gICAgICA+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgXSxcbiAgQkJfVEVSX08xOiBbXG4gICAgYDxhLWhvdHNwb3RcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIkJCX1RFUl9PMV9UT19DRU5URVJcIlxuICAgICAgdG89XCJCQl9URVJfQ0VOVEVSXCJcbiAgICAgIHBvc2l0aW9uPVwiLTUuOTEgLTEuMDUgLTQuNTBcIlxuICAgICAgc2NhbGU9XCIyLjUgMi41IDIuNVwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgID48L2EtaW1hZ2U+XG4gICAgICA8YS10ZXh0XG4gICAgICAgIHZhbHVlPVwiRmFjdG9yeSBDZW50ZXJcIlxuICAgICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgIG1peGluPVwiaG90c3BvdC1ib3R0b20tdGV4dFwiXG4gICAgICA+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgXSxcbiAgQkJfVEVSX08yOiBbXG4gICAgYFxuICAgIDxhLWhvdHNwb3RcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIkJCX1RFUl9PMl9UT19DRU5URVJcIlxuICAgICAgdG89XCJCQl9URVJfQ0VOVEVSXCJcbiAgICAgIHBvc2l0aW9uPVwiLTcuMTUgMC4yMCAtMTIuMzNcIlxuICAgICAgc2NhbGU9XCIyLjUgMi41IDIuNVwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgID48L2EtaW1hZ2U+XG4gICAgICA8YS10ZXh0XG4gICAgICAgIHZhbHVlPVwiRmFjdG9yeSBDZW50ZXJcIlxuICAgICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgIG1peGluPVwiaG90c3BvdC1ib3R0b20tdGV4dFwiXG4gICAgICA+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgXSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGJiVGVySG90c3BvdHM7XG4iLCJsZXQgYmJEZXRIb3RzcG90cyA9IHtcbiAgQkJfREVUX0U6IFtcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiQkJfREVUX0VfVE9fQ0VOVEVSXCJcbiAgICAgIHRvPVwiQkJfREVUX0NFTlRFUlwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgICAgcG9zaXRpb249XCItMTAuMjYgMC4xOCA3Ljk5XCJcbiAgICAgIHNjYWxlPVwiMi41IDIuNSAyLjVcIlxuICAgID5cbiAgICAgIDxhLWltYWdlIHdpZHRoPVwiMC41XCIgaGVpZ2h0PVwiMC41XCIgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCIgcm90YXRpb249XCItNjAgMCAwXCI+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dCB2YWx1ZT1cIkZhY3RvcnkgQ2VudGVyXCIgYWxpZ249XCJjZW50ZXJcIiBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIj48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICBdLFxuICBCQl9ERVRfQ0VOVEVSOiBbXG4gICAgYDxhLWhvdHNwb3RcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIkJCX0RFVF9DRU5URVJfVE9fRVwiXG4gICAgICB0bz1cIkJCX0RFVF9FXCJcbiAgICAgIHBvc2l0aW9uPVwiNi44NSAwLjYzIC0xMi40OFwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgICAgc2NhbGU9XCIyIDIgMlwiXG4gICAgPlxuICAgICAgPGEtaW1hZ2Ugd2lkdGg9XCIwLjVcIiBoZWlnaHQ9XCIwLjVcIiBzcmM9XCIjaG90c3BvdC1zdGFpZ2h0LWljb25cIiByb3RhdGlvbj1cIi02MCAwIDBcIiBzY2FsZT1cIjEuNSAxLjUgMS41XCI+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dCB2YWx1ZT1cIkVudHJhbmNlXCIgYWxpZ249XCJjZW50ZXJcIiBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIj48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICAgIGA8YS1ob3RzcG90XG4gICAgICB2aXNpYmxlPVwiZmFsc2VcIlxuICAgICAgaWQ9XCJCQl9ERVRfQ0VOVEVSX1RPX09cIlxuICAgICAgdG89XCJCQl9ERVRfT1wiXG4gICAgICBwb3NpdGlvbj1cIi01LjU3IDAuNjMgLTEzLjEwXCJcbiAgICAgIHNjYWxlPVwiMiAyIDJcIlxuICAgICAgbG9vay1hdD1cIltjYW1lcmFdXCJcbiAgICA+XG4gICAgICA8YS1pbWFnZVxuICAgICAgICB3aWR0aD1cIjAuNVwiXG4gICAgICAgIGhlaWdodD1cIjAuNVwiXG4gICAgICAgIHNyYz1cIiNob3RzcG90LXN0YWlnaHQtaWNvblwiXG4gICAgICAgIHJvdGF0aW9uPVwiLTYwIDAgMFwiXG4gICAgICAgIHNjYWxlPVwiMS41IDEuNSAxLjVcIlxuICAgICAgPjwvYS1pbWFnZT5cbiAgICAgIDxhLXRleHQgdmFsdWU9XCJPZmZpY2VcIiBhbGlnbj1cImNlbnRlclwiIG1peGluPVwiaG90c3BvdC1ib3R0b20tdGV4dFwiPjwvYS10ZXh0PlxuICAgIDwvYS1ob3RzcG90PmAsXG4gIF0sXG4gIEJCX0RFVF9POiBbXG4gICAgYDxhLWhvdHNwb3RcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIkJCX0RFVF9PMV9UT19DRU5URVJcIlxuICAgICAgdG89XCJCQl9ERVRfQ0VOVEVSXCJcbiAgICAgIHBvc2l0aW9uPVwiLTUuMDAgLTAuODUgLTExLjQzXCJcbiAgICAgIHNjYWxlPVwiMi41IDIuNSAyLjVcIlxuICAgICAgbG9vay1hdD1cIltjYW1lcmFdXCJcbiAgICA+XG4gICAgICA8YS1pbWFnZVxuICAgICAgICB3aWR0aD1cIjAuNVwiXG4gICAgICAgIGhlaWdodD1cIjAuNVwiXG4gICAgICAgIHNyYz1cIiNob3RzcG90LXN0YWlnaHQtaWNvblwiXG4gICAgICAgIHJvdGF0aW9uPVwiLTYwIDAgMFwiXG4gICAgICA+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dFxuICAgICAgICB2YWx1ZT1cIkZhY3RvcnkgQ2VudGVyXCJcbiAgICAgICAgYWxpZ249XCJjZW50ZXJcIlxuICAgICAgICBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIlxuICAgICAgPjwvYS10ZXh0PlxuICAgIDwvYS1ob3RzcG90PmAsXG4gICAgYDxhLWhvdHNwb3RcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIkJCX0RFVF9PMV9UT19FXCJcbiAgICAgIHRvPVwiQkJfREVUX0VcIlxuICAgICAgcG9zaXRpb249XCI1LjUxIC0wLjk3IDkuNDdcIlxuICAgICAgc2NhbGU9XCIyLjUgMi41IDIuNVwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgID48L2EtaW1hZ2U+XG4gICAgICA8YS10ZXh0XG4gICAgICAgIHZhbHVlPVwiRW50cmFuY2VcIlxuICAgICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgIG1peGluPVwiaG90c3BvdC1ib3R0b20tdGV4dFwiXG4gICAgICA+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgXSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGJiRGV0SG90c3BvdHM7XG4iLCJsZXQgYmJPdXRkb29ySG90c3BvdHMgPSB7XG4gIEJCX09VVERPT1JfMTogW1xuICAgIGA8YS1ob3RzcG90XG4gICAgICB2aXNpYmxlPVwiZmFsc2VcIlxuICAgICAgaWQ9XCJCQl9PVVRET09SXzFfVE9fMlwiXG4gICAgICB0bz1cIkJCX09VVERPT1JfMlwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgICAgcG9zaXRpb249XCItMTEuOTQgLTEuMTAgLTAuNDNcIlxuICAgICAgc2NhbGU9XCIyLjUgMi41IDIuNVwiXG4gICAgPlxuICAgICAgPGEtaW1hZ2VcbiAgICAgICAgd2lkdGg9XCIwLjVcIlxuICAgICAgICBoZWlnaHQ9XCIwLjVcIlxuICAgICAgICBzcmM9XCIjaG90c3BvdC1zdGFpZ2h0LWljb25cIlxuICAgICAgICByb3RhdGlvbj1cIi02MCAwIDBcIlxuICAgICAgPjwvYS1pbWFnZT5cbiAgICAgIDxhLXRleHRcbiAgICAgICAgdmFsdWU9XCJWaWV3IDJcIlxuICAgICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgIG1peGluPVwiaG90c3BvdC1ib3R0b20tdGV4dFwiXG4gICAgICAgID48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICBdLFxuICBCQl9PVVRET09SXzI6IFtcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiQkJfT1VURE9PUl8yX1RPXzFcIlxuICAgICAgdG89XCJCQl9PVVRET09SXzFcIlxuICAgICAgbG9vay1hdD1cIltjYW1lcmFdXCJcbiAgICAgIHBvc2l0aW9uPVwiMTIuMjMgLTAuNjYgMC4zNVwiXG4gICAgICBzY2FsZT1cIjIuNSAyLjUgMi41XCJcbiAgICA+XG4gICAgICA8YS1pbWFnZVxuICAgICAgICB3aWR0aD1cIjAuNVwiXG4gICAgICAgIGhlaWdodD1cIjAuNVwiXG4gICAgICAgIHNyYz1cIiNob3RzcG90LXN0YWlnaHQtaWNvblwiXG4gICAgICAgIHJvdGF0aW9uPVwiLTYwIDAgMFwiXG4gICAgICA+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dFxuICAgICAgICB2YWx1ZT1cIlZpZXcgMVwiXG4gICAgICAgIGFsaWduPVwiY2VudGVyXCJcbiAgICAgICAgbWl4aW49XCJob3RzcG90LWJvdHRvbS10ZXh0XCJcbiAgICAgICAgPjwvYS10ZXh0PlxuICAgIDwvYS1ob3RzcG90PmAsXG4gICAgYDxhLWhvdHNwb3RcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIkJCX09VVERPT1JfMl9UT18zXCJcbiAgICAgIHRvPVwiQkJfT1VURE9PUl8zXCJcbiAgICAgIGxvb2stYXQ9XCJbY2FtZXJhXVwiXG4gICAgICBwb3NpdGlvbj1cIjAuMDYgLTAuNTQgLTEyLjI0XCJcbiAgICAgIHNjYWxlPVwiMi41IDIuNSAyLjVcIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgID48L2EtaW1hZ2U+XG4gICAgICA8YS10ZXh0XG4gICAgICAgIHZhbHVlPVwiVmlldyAzXCJcbiAgICAgICAgYWxpZ249XCJjZW50ZXJcIlxuICAgICAgICBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIlxuICAgICAgICA+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiQkJfT1VURE9PUl8yX1RPXzVcIlxuICAgICAgdG89XCJCQl9PVVRET09SXzVcIlxuICAgICAgbG9vay1hdD1cIltjYW1lcmFdXCJcbiAgICAgIHBvc2l0aW9uPVwiLTEyLjI1IC0wLjE1IC0wLjEyXCJcbiAgICAgIHNjYWxlPVwiMi41IDIuNSAyLjVcIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgID48L2EtaW1hZ2U+XG4gICAgICA8YS10ZXh0XG4gICAgICAgIHZhbHVlPVwiVmlldyA1XCJcbiAgICAgICAgYWxpZ249XCJjZW50ZXJcIlxuICAgICAgICBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIlxuICAgICAgICA+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgXSxcbiAgQkJfT1VURE9PUl8zOiBbXG4gICAgYDxhLWhvdHNwb3RcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIkJCX09VVERPT1JfM19UT182XCJcbiAgICAgIHRvPVwiQkJfT1VURE9PUl82XCJcbiAgICAgIGxvb2stYXQ9XCJbY2FtZXJhXVwiXG4gICAgICBwb3NpdGlvbj1cIi0xMS44OCAwLjY0IC0yLjkxXCJcbiAgICAgIHNjYWxlPVwiMi41IDIuNSAyLjVcIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgID48L2EtaW1hZ2U+XG4gICAgICA8YS10ZXh0XG4gICAgICAgIHZhbHVlPVwiVmlldyA2XCJcbiAgICAgICAgYWxpZ249XCJjZW50ZXJcIlxuICAgICAgICBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIlxuICAgICAgICA+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgXSxcbiAgQkJfT1VURE9PUl80OiBbXG4gICAgYDxhLWhvdHNwb3RcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIkJCX09VVERPT1JfNF9UT182XCJcbiAgICAgIHRvPVwiQkJfT1VURE9PUl82XCJcbiAgICAgIGxvb2stYXQ9XCJbY2FtZXJhXVwiXG4gICAgICBwb3NpdGlvbj1cIi0xMi4xMiAtMS4zNSAyLjc3XCJcbiAgICAgIHNjYWxlPVwiMi41IDIuNSAyLjVcIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgID48L2EtaW1hZ2U+XG4gICAgICA8YS10ZXh0XG4gICAgICAgIHZhbHVlPVwiVmlldyA2XCJcbiAgICAgICAgYWxpZ249XCJjZW50ZXJcIlxuICAgICAgICBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIlxuICAgICAgICA+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgXSxcbiAgQkJfT1VURE9PUl81OiBbXG4gICAgYDxhLWhvdHNwb3RcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIkJCX09VVERPT1JfNV9UT18yXCJcbiAgICAgIHRvPVwiQkJfT1VURE9PUl8yXCJcbiAgICAgIGxvb2stYXQ9XCJbY2FtZXJhXVwiXG4gICAgICBwb3NpdGlvbj1cIi04LjcyIC0xLjQ1IDguODRcIlxuICAgICAgc2NhbGU9XCIyLjUgMi41IDIuNVwiXG4gICAgPlxuICAgICAgPGEtaW1hZ2VcbiAgICAgICAgd2lkdGg9XCIwLjVcIlxuICAgICAgICBoZWlnaHQ9XCIwLjVcIlxuICAgICAgICBzcmM9XCIjaG90c3BvdC1zdGFpZ2h0LWljb25cIlxuICAgICAgICByb3RhdGlvbj1cIi02MCAwIDBcIlxuICAgICAgPjwvYS1pbWFnZT5cbiAgICAgIDxhLXRleHRcbiAgICAgICAgdmFsdWU9XCJWaWV3IDJcIlxuICAgICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgIG1peGluPVwiaG90c3BvdC1ib3R0b20tdGV4dFwiXG4gICAgICAgID48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICAgIGA8YS1ob3RzcG90XG4gICAgICB2aXNpYmxlPVwiZmFsc2VcIlxuICAgICAgaWQ9XCJCQl9PVVRET09SXzVfVE9fNlwiXG4gICAgICB0bz1cIkJCX09VVERPT1JfNlwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgICAgcG9zaXRpb249XCI4Ljk2IC0xLjU3IDguNTdcIlxuICAgICAgc2NhbGU9XCIyLjUgMi41IDIuNVwiXG4gICAgPlxuICAgICAgPGEtaW1hZ2VcbiAgICAgICAgd2lkdGg9XCIwLjVcIlxuICAgICAgICBoZWlnaHQ9XCIwLjVcIlxuICAgICAgICBzcmM9XCIjaG90c3BvdC1zdGFpZ2h0LWljb25cIlxuICAgICAgICByb3RhdGlvbj1cIi02MCAwIDBcIlxuICAgICAgPjwvYS1pbWFnZT5cbiAgICAgIDxhLXRleHRcbiAgICAgICAgdmFsdWU9XCJWaWV3IDZcIlxuICAgICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgIG1peGluPVwiaG90c3BvdC1ib3R0b20tdGV4dFwiXG4gICAgICAgID48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICBdLFxuICBCQl9PVVRET09SXzY6IFtcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiQkJfT1VURE9PUl82X1RPXzNcIlxuICAgICAgdG89XCJCQl9PVVRET09SXzNcIlxuICAgICAgbG9vay1hdD1cIltjYW1lcmFdXCJcbiAgICAgIHBvc2l0aW9uPVwiLTEwLjIxIC03LjE5IDEwLjAxXCJcbiAgICAgIHNjYWxlPVwiMi41IDIuNSAyLjVcIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgID48L2EtaW1hZ2U+XG4gICAgICA8YS10ZXh0XG4gICAgICAgIHZhbHVlPVwiVmlldyAzXCJcbiAgICAgICAgYWxpZ249XCJjZW50ZXJcIlxuICAgICAgICBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIlxuICAgICAgICA+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiQkJfT1VURE9PUl82X1RPXzVcIlxuICAgICAgdG89XCJCQl9PVVRET09SXzVcIlxuICAgICAgbG9vay1hdD1cIltjYW1lcmFdXCJcbiAgICAgIHBvc2l0aW9uPVwiLTkuMjIgLTkuNDAgLTkuMDlcIlxuICAgICAgc2NhbGU9XCIyLjUgMi41IDIuNVwiXG4gICAgPlxuICAgICAgPGEtaW1hZ2VcbiAgICAgICAgd2lkdGg9XCIwLjVcIlxuICAgICAgICBoZWlnaHQ9XCIwLjVcIlxuICAgICAgICBzcmM9XCIjaG90c3BvdC1zdGFpZ2h0LWljb25cIlxuICAgICAgICByb3RhdGlvbj1cIi02MCAwIDBcIlxuICAgICAgPjwvYS1pbWFnZT5cbiAgICAgIDxhLXRleHRcbiAgICAgICAgdmFsdWU9XCJWaWV3IDVcIlxuICAgICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgIG1peGluPVwiaG90c3BvdC1ib3R0b20tdGV4dFwiXG4gICAgICAgID48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICAgIGA8YS1ob3RzcG90XG4gICAgICB2aXNpYmxlPVwiZmFsc2VcIlxuICAgICAgaWQ9XCJCQl9PVVRET09SXzZfVE9fNFwiXG4gICAgICB0bz1cIkJCX09VVERPT1JfNFwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgICAgcG9zaXRpb249XCI5LjkzIC03LjcwIDkuOTBcIlxuICAgICAgc2NhbGU9XCIyLjUgMi41IDIuNVwiXG4gICAgPlxuICAgICAgPGEtaW1hZ2VcbiAgICAgICAgd2lkdGg9XCIwLjVcIlxuICAgICAgICBoZWlnaHQ9XCIwLjVcIlxuICAgICAgICBzcmM9XCIjaG90c3BvdC1zdGFpZ2h0LWljb25cIlxuICAgICAgICByb3RhdGlvbj1cIi02MCAwIDBcIlxuICAgICAgPjwvYS1pbWFnZT5cbiAgICAgIDxhLXRleHRcbiAgICAgICAgdmFsdWU9XCJWaWV3IDRcIlxuICAgICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgIG1peGluPVwiaG90c3BvdC1ib3R0b20tdGV4dFwiXG4gICAgICAgID48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICBdLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgYmJPdXRkb29ySG90c3BvdHM7XG4iLCJsZXQgYmJTZW1pSG90c3BvdHMgPSB7XG4gIEJCX1NFTUlfRTE6IFtcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiQkJfU0VNSV9FMV9UT19DRU5URVJcIiB0bz1cIkJCX1NFTUlfQ0VOVEVSXCIgbG9vay1hdD1cIltjYW1lcmFdXCJcbiAgICAgIHBvc2l0aW9uPVwiLTExLjkxIDAuMTAgMi44NlwiIHNjYWxlPVwiMi41IDIuNSAyLjVcIlxuICAgID5cbiAgICAgIDxhLWltYWdlIHdpZHRoPVwiMC41XCIgaGVpZ2h0PVwiMC41XCIgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCIgcm90YXRpb249XCItNjAgMCAwXCI+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dCB2YWx1ZT1cIkZhY3RvcnkgQ2VudGVyXCIgYWxpZ249XCJjZW50ZXJcIiBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIj48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICAgIGA8YS1ob3RzcG90XG4gICAgICB2aXNpYmxlPVwiZmFsc2VcIlxuICAgICAgaWQ9XCJCQl9TRU1JX0UxX1RPX0UyXCIgdG89XCJCQl9TRU1JX0UyXCIgbG9vay1hdD1cIltjYW1lcmFdXCJcbiAgICAgIHBvc2l0aW9uPVwiLTIuODQgMC4zOSAtMTEuOTFcIiBzY2FsZT1cIjIuNSAyLjUgMi41XCJcbiAgICA+XG4gICAgICA8YS1pbWFnZSB3aWR0aD1cIjAuNVwiIGhlaWdodD1cIjAuNVwiIHNyYz1cIiNob3RzcG90LXN0YWlnaHQtaWNvblwiIHJvdGF0aW9uPVwiLTYwIDAgMFwiPjwvYS1pbWFnZT5cbiAgICAgIDxhLXRleHQgdmFsdWU9XCJFbnRyYW5jZSAyXCIgYWxpZ249XCJjZW50ZXJcIiBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIj48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICBdLFxuICBCQl9TRU1JX0UyOiBbXG4gICAgYDxhLWhvdHNwb3RcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIkJCX1NFTUlfRTJfVE9fQ0VOVEVSXCIgdG89XCJCQl9TRU1JX0NFTlRFUlwiIGxvb2stYXQ9XCJbY2FtZXJhXVwiXG4gICAgICBwb3NpdGlvbj1cIi0xMC4zOCAwLjM5IDIuNzYgIFwiIHNjYWxlPVwiMi41IDIuNSAyLjVcIlxuICAgID5cbiAgICAgIDxhLWltYWdlIHdpZHRoPVwiMC41XCIgaGVpZ2h0PVwiMC41XCIgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCIgcm90YXRpb249XCItNjAgMCAwXCI+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dCB2YWx1ZT1cIkZhY3RvcnkgQ2VudGVyXCIgYWxpZ249XCJjZW50ZXJcIiBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIj48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICAgIGA8YS1ob3RzcG90XG4gICAgICB2aXNpYmxlPVwiZmFsc2VcIlxuICAgICAgaWQ9XCJCQl9TRU1JX0UyX1RPX0UxXCIgdG89XCJCQl9TRU1JX0UxXCIgbG9vay1hdD1cIltjYW1lcmFdXCJcbiAgICAgIHBvc2l0aW9uPVwiLTguNzggMC40NSA3LjgwXCIgc2NhbGU9XCIyLjUgMi41IDIuNVwiXG4gICAgPlxuICAgICAgPGEtaW1hZ2Ugd2lkdGg9XCIwLjVcIiBoZWlnaHQ9XCIwLjVcIiBzcmM9XCIjaG90c3BvdC1zdGFpZ2h0LWljb25cIiByb3RhdGlvbj1cIi02MCAwIDBcIj48L2EtaW1hZ2U+XG4gICAgICA8YS10ZXh0IHZhbHVlPVwiRW50cmFuY2UgMVwiIGFsaWduPVwiY2VudGVyXCIgbWl4aW49XCJob3RzcG90LWJvdHRvbS10ZXh0XCI+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgXSxcbiAgQkJfU0VNSV9DRU5URVI6IFtcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiQkJfU0VNSV9DRU5URVJfVE9fRTFcIlxuICAgICAgdG89XCJCQl9TRU1JX0UxXCJcbiAgICAgIHBvc2l0aW9uPVwiMC40NCAwLjUzIDkuNDdcIlxuICAgICAgbG9vay1hdD1cIltjYW1lcmFdXCJcbiAgICA+XG4gICAgICA8YS1pbWFnZSB3aWR0aD1cIjAuNVwiIGhlaWdodD1cIjAuNVwiIHNyYz1cIiNob3RzcG90LXN0YWlnaHQtaWNvblwiIHJvdGF0aW9uPVwiLTYwIDAgMFwiIHNjYWxlPVwiMS41IDEuNSAxLjVcIj48L2EtaW1hZ2U+XG4gICAgICA8YS10ZXh0IHZhbHVlPVwiRW50cmFuY2UgMVwiIGFsaWduPVwiY2VudGVyXCIgbWl4aW49XCJob3RzcG90LWJvdHRvbS10ZXh0XCI+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiQkJfU0VNSV9DRU5URVJfVE9fQzFcIlxuICAgICAgdG89XCJCQl9TRU1JX0MxXCJcbiAgICAgIHBvc2l0aW9uPVwiLTguNDUgMC4yMiAzLjc2XCJcbiAgICAgIGxvb2stYXQ9XCJbY2FtZXJhXVwiXG4gICAgPlxuICAgICAgPGEtaW1hZ2VcbiAgICAgICAgd2lkdGg9XCIwLjVcIlxuICAgICAgICBoZWlnaHQ9XCIwLjVcIlxuICAgICAgICBzcmM9XCIjaG90c3BvdC1zdGFpZ2h0LWljb25cIlxuICAgICAgICByb3RhdGlvbj1cIi02MCAwIDBcIlxuICAgICAgICBzY2FsZT1cIjIgMiAyXCJcbiAgICAgID48L2EtaW1hZ2U+XG4gICAgICA8YS10ZXh0IHZhbHVlPVwiQ29ybmVyIDFcIiBhbGlnbj1cImNlbnRlclwiIG1peGluPVwiaG90c3BvdC1ib3R0b20tdGV4dFwiPjwvYS10ZXh0PlxuICAgIDwvYS1ob3RzcG90PmAsXG4gICAgYDxhLWhvdHNwb3RcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIkJCX1NFTUlfQ0VOVEVSX1RPX0MzXCJcbiAgICAgIHRvPVwiQkJfU0VNSV9DM1wiXG4gICAgICBwb3NpdGlvbj1cIjguNTQgMC4zNSAtMy41M1wiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgICAgc2NhbGU9XCIxLjUgMS41IDEuNVwiXG4gICAgICA+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dCB2YWx1ZT1cIkNvcm5lciAzXCIgYWxpZ249XCJjZW50ZXJcIiBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIj48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICAgIGA8YS1ob3RzcG90XG4gICAgICB2aXNpYmxlPVwiZmFsc2VcIlxuICAgICAgaWQ9XCJCQl9TRU1JX0NFTlRFUl9UT19PMlwiXG4gICAgICB0bz1cIkJCX1NFTUlfTzJcIlxuICAgICAgcG9zaXRpb249XCI2Ljc3IDAuNjUgNi4yN1wiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgICAgc2NhbGU9XCIxLjUgMS41IDEuNVwiXG4gICAgICA+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dCB2YWx1ZT1cIk9mZmljZSAyXCIgYWxpZ249XCJjZW50ZXJcIiBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIj48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICBdLFxuICBCQl9TRU1JX0MxOiBbXG4gICAgYDxhLWhvdHNwb3RcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIkJCX1NFTUlfQzFfVE9fQ0VOVEVSXCJcbiAgICAgIHRvPVwiQkJfU0VNSV9DRU5URVJcIlxuICAgICAgcG9zaXRpb249XCItNC4wNyAwLjYyIDEwLjIwXCJcbiAgICAgIHNjYWxlPVwiMiAyIDJcIlxuICAgICAgbG9vay1hdD1cIltjYW1lcmFdXCJcbiAgICA+XG4gICAgICA8YS1pbWFnZVxuICAgICAgICB3aWR0aD1cIjAuNVwiXG4gICAgICAgIGhlaWdodD1cIjAuNVwiXG4gICAgICAgIHNyYz1cIiNob3RzcG90LXN0YWlnaHQtaWNvblwiXG4gICAgICAgIHJvdGF0aW9uPVwiLTYwIDAgMFwiXG4gICAgICA+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dFxuICAgICAgICB2YWx1ZT1cIkZhY3RvcnkgQ2VudGVyXCJcbiAgICAgICAgYWxpZ249XCJjZW50ZXJcIlxuICAgICAgICBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIlxuICAgICAgPjwvYS10ZXh0PlxuICAgIDwvYS1ob3RzcG90PmAsXG4gICAgYDxhLWhvdHNwb3RcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIkJCX1NFTUlfQzFfVE9fTzFcIlxuICAgICAgdG89XCJCQl9TRU1JX08xXCJcbiAgICAgIHBvc2l0aW9uPVwiLTcuNjggMC40MiAtNy44NlwiXG4gICAgICBzY2FsZT1cIjIgMiAyXCJcbiAgICAgIGxvb2stYXQ9XCJbY2FtZXJhXVwiXG4gICAgPlxuICAgICAgPGEtaW1hZ2VcbiAgICAgICAgd2lkdGg9XCIwLjVcIlxuICAgICAgICBoZWlnaHQ9XCIwLjVcIlxuICAgICAgICBzcmM9XCIjaG90c3BvdC1zdGFpZ2h0LWljb25cIlxuICAgICAgICByb3RhdGlvbj1cIi02MCAwIDBcIlxuICAgICAgPjwvYS1pbWFnZT5cbiAgICAgIDxhLXRleHRcbiAgICAgICAgdmFsdWU9XCJPZmZpY2UgMVwiXG4gICAgICAgIGFsaWduPVwiY2VudGVyXCJcbiAgICAgICAgbWl4aW49XCJob3RzcG90LWJvdHRvbS10ZXh0XCJcbiAgICAgID48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICAgIGA8YS1ob3RzcG90XG4gICAgICB2aXNpYmxlPVwiZmFsc2VcIlxuICAgICAgaWQ9XCJCQl9TRU1JX0MxX1RPX0MyXCJcbiAgICAgIHRvPVwiQkJfU0VNSV9DMlwiXG4gICAgICBwb3NpdGlvbj1cIjMuODkgMC40NiAtMTAuMjhcIlxuICAgICAgc2NhbGU9XCIyIDIgMlwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgID48L2EtaW1hZ2U+XG4gICAgICA8YS10ZXh0XG4gICAgICAgIHZhbHVlPVwiQ29ybmVyIDJcIlxuICAgICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgIG1peGluPVwiaG90c3BvdC1ib3R0b20tdGV4dFwiXG4gICAgICA+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgXSxcbiAgQkJfU0VNSV9DMjogW1xuICAgIGA8YS1ob3RzcG90XG4gICAgICB2aXNpYmxlPVwiZmFsc2VcIlxuICAgICAgaWQ9XCJCQl9TRU1JX0MzX1RPX0MxXCJcbiAgICAgIHRvPVwiQkJfU0VNSV9DMVwiXG4gICAgICBwb3NpdGlvbj1cIi04LjgzIDAuOTAgNS4xMlwiXG4gICAgICBzY2FsZT1cIjIuNSAyLjUgMi41XCJcbiAgICAgIGxvb2stYXQ9XCJbY2FtZXJhXVwiXG4gICAgPlxuICAgICAgPGEtaW1hZ2VcbiAgICAgICAgd2lkdGg9XCIwLjVcIlxuICAgICAgICBoZWlnaHQ9XCIwLjVcIlxuICAgICAgICBzcmM9XCIjaG90c3BvdC1zdGFpZ2h0LWljb25cIlxuICAgICAgICByb3RhdGlvbj1cIi02MCAwIDBcIlxuICAgICAgPjwvYS1pbWFnZT5cbiAgICAgIDxhLXRleHRcbiAgICAgICAgdmFsdWU9XCJDb3JuZXIgMVwiXG4gICAgICAgIGFsaWduPVwiY2VudGVyXCJcbiAgICAgICAgbWl4aW49XCJob3RzcG90LWJvdHRvbS10ZXh0XCJcbiAgICAgID48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICBdLFxuICBCQl9TRU1JX0MzOiBbXG4gICAgYDxhLWhvdHNwb3RcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIkJCX1NFTUlfQzJfVE9fQ0VOVEVSXCJcbiAgICAgIHRvPVwiQkJfU0VNSV9DRU5URVJcIlxuICAgICAgcG9zaXRpb249XCItMy41MCAwLjcwIC05LjM0XCJcbiAgICAgIHNjYWxlPVwiMiAyIDJcIlxuICAgICAgbG9vay1hdD1cIltjYW1lcmFdXCJcbiAgICA+XG4gICAgICA8YS1pbWFnZVxuICAgICAgICB3aWR0aD1cIjAuNVwiXG4gICAgICAgIGhlaWdodD1cIjAuNVwiXG4gICAgICAgIHNyYz1cIiNob3RzcG90LXN0YWlnaHQtaWNvblwiXG4gICAgICAgIHJvdGF0aW9uPVwiLTYwIDAgMFwiXG4gICAgICA+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dFxuICAgICAgICB2YWx1ZT1cIkZhY3RvcnkgQ2VudGVyXCJcbiAgICAgICAgYWxpZ249XCJjZW50ZXJcIlxuICAgICAgICBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIlxuICAgICAgPjwvYS10ZXh0PlxuICAgIDwvYS1ob3RzcG90PmAsXG4gICAgYDxhLWhvdHNwb3RcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIkJCX1NFTUlfQzJfVE9fRTJcIlxuICAgICAgdG89XCJCQl9TRU1JX0UyXCJcbiAgICAgIHBvc2l0aW9uPVwiLTcuNjIgMC42MiA2LjQ1XCJcbiAgICAgIHNjYWxlPVwiMS41IDEuNSAxLjVcIlxuICAgICAgbG9vay1hdD1cIltjYW1lcmFdXCJcbiAgICA+XG4gICAgICA8YS1pbWFnZVxuICAgICAgICB3aWR0aD1cIjAuNVwiXG4gICAgICAgIGhlaWdodD1cIjAuNVwiXG4gICAgICAgIHNyYz1cIiNob3RzcG90LXN0YWlnaHQtaWNvblwiXG4gICAgICAgIHJvdGF0aW9uPVwiLTYwIDAgMFwiXG4gICAgICA+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dFxuICAgICAgICB2YWx1ZT1cIkVudHJhbmNlIDJcIlxuICAgICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgIG1peGluPVwiaG90c3BvdC1ib3R0b20tdGV4dFwiXG4gICAgICA+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiQkJfU0VNSV9DMl9UT19PMlwiXG4gICAgICB0bz1cIkJCX1NFTUlfTzJcIlxuICAgICAgcG9zaXRpb249XCItOS45MSAwLjgwIC0xLjA2XCJcbiAgICAgIHNjYWxlPVwiMS41IDEuNSAxLjVcIlxuICAgICAgbG9vay1hdD1cIltjYW1lcmFdXCJcbiAgICA+XG4gICAgICA8YS1pbWFnZVxuICAgICAgICB3aWR0aD1cIjAuNVwiXG4gICAgICAgIGhlaWdodD1cIjAuNVwiXG4gICAgICAgIHNyYz1cIiNob3RzcG90LXN0YWlnaHQtaWNvblwiXG4gICAgICAgIHJvdGF0aW9uPVwiLTYwIDAgMFwiXG4gICAgICA+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dFxuICAgICAgICB2YWx1ZT1cIk9mZmljZSAyXCJcbiAgICAgICAgYWxpZ249XCJjZW50ZXJcIlxuICAgICAgICBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIlxuICAgICAgPjwvYS10ZXh0PlxuICAgIDwvYS1ob3RzcG90PmAsXG4gIF0sXG4gIEJCX1NFTUlfTzE6IFtcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiQkJfU0VNSV9PMV9UT19DMVwiXG4gICAgICB0bz1cIkJCX1NFTUlfQzFcIlxuICAgICAgcG9zaXRpb249XCItMTAuMDkgMC4yOSAyLjg5XCJcbiAgICAgIHNjYWxlPVwiMi41IDIuNSAyLjVcIlxuICAgICAgbG9vay1hdD1cIltjYW1lcmFdXCJcbiAgICA+XG4gICAgICA8YS1pbWFnZVxuICAgICAgICB3aWR0aD1cIjAuNVwiXG4gICAgICAgIGhlaWdodD1cIjAuNVwiXG4gICAgICAgIHNyYz1cIiNob3RzcG90LXN0YWlnaHQtaWNvblwiXG4gICAgICAgIHJvdGF0aW9uPVwiLTYwIDAgMFwiXG4gICAgICA+PC9hLWltYWdlPlxuICAgICAgPGEtdGV4dFxuICAgICAgICB2YWx1ZT1cIkNvcm5lciAxXCJcbiAgICAgICAgYWxpZ249XCJjZW50ZXJcIlxuICAgICAgICBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIlxuICAgICAgPjwvYS10ZXh0PlxuICAgIDwvYS1ob3RzcG90PmAsXG4gICAgYDxhLWhvdHNwb3RcbiAgICAgIHZpc2libGU9XCJmYWxzZVwiXG4gICAgICBpZD1cIkJCX1NFTUlfTzFfVE9fRTFcIlxuICAgICAgdG89XCJCQl9TRU1JX0UxXCJcbiAgICAgIHBvc2l0aW9uPVwiOS43MSAtMC44MiAtMy45MVwiXG4gICAgICBzY2FsZT1cIjIuNSAyLjUgMi41XCJcbiAgICAgIGxvb2stYXQ9XCJbY2FtZXJhXVwiXG4gICAgPlxuICAgICAgPGEtaW1hZ2VcbiAgICAgICAgd2lkdGg9XCIwLjVcIlxuICAgICAgICBoZWlnaHQ9XCIwLjVcIlxuICAgICAgICBzcmM9XCIjaG90c3BvdC1zdGFpZ2h0LWljb25cIlxuICAgICAgICByb3RhdGlvbj1cIi02MCAwIDBcIlxuICAgICAgPjwvYS1pbWFnZT5cbiAgICAgIDxhLXRleHRcbiAgICAgICAgdmFsdWU9XCJFbnRyYW5jZSAxXCJcbiAgICAgICAgYWxpZ249XCJjZW50ZXJcIlxuICAgICAgICBtaXhpbj1cImhvdHNwb3QtYm90dG9tLXRleHRcIlxuICAgICAgPjwvYS10ZXh0PlxuICAgIDwvYS1ob3RzcG90PmAsXG4gIF0sXG4gIEJCX1NFTUlfTzI6IFtcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiQkJfU0VNSV9PMl9UT19DMlwiXG4gICAgICB0bz1cIkJCX1NFTUlfQzJcIlxuICAgICAgcG9zaXRpb249XCIxMC45MCAwLjA3IDEuNTBcIlxuICAgICAgc2NhbGU9XCIyLjUgMi41IDIuNVwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgID48L2EtaW1hZ2U+XG4gICAgICA8YS10ZXh0XG4gICAgICAgIHZhbHVlPVwiQ29ybmVyIDJcIlxuICAgICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgIG1peGluPVwiaG90c3BvdC1ib3R0b20tdGV4dFwiXG4gICAgICA+PC9hLXRleHQ+XG4gICAgPC9hLWhvdHNwb3Q+YCxcbiAgICBgPGEtaG90c3BvdFxuICAgICAgdmlzaWJsZT1cImZhbHNlXCJcbiAgICAgIGlkPVwiQkJfU0VNSV9PMl9UT19FMlwiXG4gICAgICB0bz1cIkJCX1NFTUlfRTJcIlxuICAgICAgcG9zaXRpb249XCItMTAuNzcgLTAuMzEgLTIuMjJcIlxuICAgICAgc2NhbGU9XCIyLjUgMi41IDIuNVwiXG4gICAgICBsb29rLWF0PVwiW2NhbWVyYV1cIlxuICAgID5cbiAgICAgIDxhLWltYWdlXG4gICAgICAgIHdpZHRoPVwiMC41XCJcbiAgICAgICAgaGVpZ2h0PVwiMC41XCJcbiAgICAgICAgc3JjPVwiI2hvdHNwb3Qtc3RhaWdodC1pY29uXCJcbiAgICAgICAgcm90YXRpb249XCItNjAgMCAwXCJcbiAgICAgID48L2EtaW1hZ2U+XG4gICAgICA8YS10ZXh0XG4gICAgICAgIHZhbHVlPVwiRW50cmFuY2UgMlwiXG4gICAgICAgIGFsaWduPVwiY2VudGVyXCJcbiAgICAgICAgbWl4aW49XCJob3RzcG90LWJvdHRvbS10ZXh0XCJcbiAgICAgID48L2EtdGV4dD5cbiAgICA8L2EtaG90c3BvdD5gLFxuICBdLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgYmJTZW1pSG90c3BvdHM7XG4iLCIvKiEgQGxpY2Vuc2UgaXMtZG9tLW5vZGUgdjEuMC40XG5cblx0Q29weXJpZ2h0IDIwMTggRmlzc3Npb24gTExDLlxuXG5cdFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcblx0b2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuXHRpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG5cdHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcblx0Y29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5cdGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblx0VGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5cdGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblx0VEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuXHRJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcblx0RklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5cdEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcblx0TElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcblx0T1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblx0U09GVFdBUkUuXG5cbiovXG5mdW5jdGlvbiBpc0RvbU5vZGUoeCkge1xuXHRyZXR1cm4gdHlwZW9mIHdpbmRvdy5Ob2RlID09PSAnb2JqZWN0J1xuXHRcdD8geCBpbnN0YW5jZW9mIHdpbmRvdy5Ob2RlXG5cdFx0OiB4ICE9PSBudWxsICYmXG5cdFx0XHRcdHR5cGVvZiB4ID09PSAnb2JqZWN0JyAmJlxuXHRcdFx0XHR0eXBlb2YgeC5ub2RlVHlwZSA9PT0gJ251bWJlcicgJiZcblx0XHRcdFx0dHlwZW9mIHgubm9kZU5hbWUgPT09ICdzdHJpbmcnXG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzRG9tTm9kZTtcbiIsIi8qISBAbGljZW5zZSBpcy1kb20tbm9kZS1saXN0IHYxLjIuMVxuXG5cdENvcHlyaWdodCAyMDE4IEZpc3NzaW9uIExMQy5cblxuXHRQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5cdG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcblx0aW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuXHR0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5cdGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuXHRmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5cdFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuXHRjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5cdFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcblx0SU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5cdEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuXHRBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5cdExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5cdE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5cdFNPRlRXQVJFLlxuXG4qL1xuaW1wb3J0IGlzRG9tTm9kZSBmcm9tICdpcy1kb20tbm9kZSc7XG5cbmZ1bmN0aW9uIGlzRG9tTm9kZUxpc3QoeCkge1xuXHR2YXIgcHJvdG90eXBlVG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoeCk7XG5cdHZhciByZWdleCA9IC9eXFxbb2JqZWN0IChIVE1MQ29sbGVjdGlvbnxOb2RlTGlzdHxPYmplY3QpXFxdJC87XG5cblx0cmV0dXJuIHR5cGVvZiB3aW5kb3cuTm9kZUxpc3QgPT09ICdvYmplY3QnXG5cdFx0PyB4IGluc3RhbmNlb2Ygd2luZG93Lk5vZGVMaXN0XG5cdFx0OiB4ICE9PSBudWxsICYmXG5cdFx0XHRcdHR5cGVvZiB4ID09PSAnb2JqZWN0JyAmJlxuXHRcdFx0XHR0eXBlb2YgeC5sZW5ndGggPT09ICdudW1iZXInICYmXG5cdFx0XHRcdHJlZ2V4LnRlc3QocHJvdG90eXBlVG9TdHJpbmcpICYmXG5cdFx0XHRcdCh4Lmxlbmd0aCA9PT0gMCB8fCBpc0RvbU5vZGUoeFswXSkpXG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzRG9tTm9kZUxpc3Q7XG4iLCIvKiEgQGxpY2Vuc2UgVGVhbGlnaHQgdjAuMy42XG5cblx0Q29weXJpZ2h0IDIwMTggRmlzc3Npb24gTExDLlxuXG5cdFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcblx0b2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuXHRpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG5cdHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcblx0Y29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5cdGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblx0VGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5cdGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblx0VEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuXHRJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcblx0RklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5cdEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcblx0TElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcblx0T1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblx0U09GVFdBUkUuXG5cbiovXG5pbXBvcnQgaXNEb21Ob2RlIGZyb20gJ2lzLWRvbS1ub2RlJztcbmltcG9ydCBpc0RvbU5vZGVMaXN0IGZyb20gJ2lzLWRvbS1ub2RlLWxpc3QnO1xuXG5mdW5jdGlvbiB0ZWFsaWdodCh0YXJnZXQsIGNvbnRleHQpIHtcbiAgaWYgKCBjb250ZXh0ID09PSB2b2lkIDAgKSBjb250ZXh0ID0gZG9jdW1lbnQ7XG5cbiAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIEFycmF5KSB7IHJldHVybiB0YXJnZXQuZmlsdGVyKGlzRG9tTm9kZSk7IH1cbiAgaWYgKGlzRG9tTm9kZSh0YXJnZXQpKSB7IHJldHVybiBbdGFyZ2V0XTsgfVxuICBpZiAoaXNEb21Ob2RlTGlzdCh0YXJnZXQpKSB7IHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0YXJnZXQpOyB9XG4gIGlmICh0eXBlb2YgdGFyZ2V0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBxdWVyeSA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCh0YXJnZXQpO1xuICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHF1ZXJ5KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFtdO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0ZWFsaWdodDtcbiIsIi8qISBAbGljZW5zZSBSZW1hdHJpeCB2MC4zLjBcblxuXHRDb3B5cmlnaHQgMjAxOCBKdWxpYW4gTGxveWQuXG5cblx0UGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuXHRvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5cdGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcblx0dG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuXHRjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcblx0ZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuXHRUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuXHRhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuXHRUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5cdElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuXHRGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcblx0QVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuXHRMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuXHRPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG5cdFRIRSBTT0ZUV0FSRS5cbiovXG4vKipcbiAqIEBtb2R1bGUgUmVtYXRyaXhcbiAqL1xuXG4vKipcbiAqIFRyYW5zZm9ybWF0aW9uIG1hdHJpY2VzIGluIHRoZSBicm93c2VyIGNvbWUgaW4gdHdvIGZsYXZvcnM6XG4gKlxuICogIC0gYG1hdHJpeGAgdXNpbmcgNiB2YWx1ZXMgKHNob3J0KVxuICogIC0gYG1hdHJpeDNkYCB1c2luZyAxNiB2YWx1ZXMgKGxvbmcpXG4gKlxuICogVGhpcyB1dGlsaXR5IGZvbGxvd3MgdGhpcyBbY29udmVyc2lvbiBndWlkZV0oaHR0cHM6Ly9nb28uZ2wvRUpsVVExKVxuICogdG8gZXhwYW5kIHNob3J0IGZvcm0gbWF0cmljZXMgdG8gdGhlaXIgZXF1aXZhbGVudCBsb25nIGZvcm0uXG4gKlxuICogQHBhcmFtICB7YXJyYXl9IHNvdXJjZSAtIEFjY2VwdHMgYm90aCBzaG9ydCBhbmQgbG9uZyBmb3JtIG1hdHJpY2VzLlxuICogQHJldHVybiB7YXJyYXl9XG4gKi9cbmZ1bmN0aW9uIGZvcm1hdChzb3VyY2UpIHtcblx0aWYgKHNvdXJjZS5jb25zdHJ1Y3RvciAhPT0gQXJyYXkpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhcnJheS4nKVxuXHR9XG5cdGlmIChzb3VyY2UubGVuZ3RoID09PSAxNikge1xuXHRcdHJldHVybiBzb3VyY2Vcblx0fVxuXHRpZiAoc291cmNlLmxlbmd0aCA9PT0gNikge1xuXHRcdHZhciBtYXRyaXggPSBpZGVudGl0eSgpO1xuXHRcdG1hdHJpeFswXSA9IHNvdXJjZVswXTtcblx0XHRtYXRyaXhbMV0gPSBzb3VyY2VbMV07XG5cdFx0bWF0cml4WzRdID0gc291cmNlWzJdO1xuXHRcdG1hdHJpeFs1XSA9IHNvdXJjZVszXTtcblx0XHRtYXRyaXhbMTJdID0gc291cmNlWzRdO1xuXHRcdG1hdHJpeFsxM10gPSBzb3VyY2VbNV07XG5cdFx0cmV0dXJuIG1hdHJpeFxuXHR9XG5cdHRocm93IG5ldyBSYW5nZUVycm9yKCdFeHBlY3RlZCBhcnJheSB3aXRoIGVpdGhlciA2IG9yIDE2IHZhbHVlcy4nKVxufVxuXG4vKipcbiAqIFJldHVybnMgYSBtYXRyaXggcmVwcmVzZW50aW5nIG5vIHRyYW5zZm9ybWF0aW9uLiBUaGUgcHJvZHVjdCBvZiBhbnkgbWF0cml4XG4gKiBtdWx0aXBsaWVkIGJ5IHRoZSBpZGVudGl0eSBtYXRyaXggd2lsbCBiZSB0aGUgb3JpZ2luYWwgbWF0cml4LlxuICpcbiAqID4gKipUaXA6KiogU2ltaWxhciB0byBob3cgYDUgKiAxID09PSA1YCwgd2hlcmUgYDFgIGlzIHRoZSBpZGVudGl0eS5cbiAqXG4gKiBAcmV0dXJuIHthcnJheX1cbiAqL1xuZnVuY3Rpb24gaWRlbnRpdHkoKSB7XG5cdHZhciBtYXRyaXggPSBbXTtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG5cdFx0aSAlIDUgPT0gMCA/IG1hdHJpeC5wdXNoKDEpIDogbWF0cml4LnB1c2goMCk7XG5cdH1cblx0cmV0dXJuIG1hdHJpeFxufVxuXG4vKipcbiAqIFJldHVybnMgYSBtYXRyaXggZGVzY3JpYmluZyB0aGUgaW52ZXJzZSB0cmFuc2Zvcm1hdGlvbiBvZiB0aGUgc291cmNlXG4gKiBtYXRyaXguIFRoZSBwcm9kdWN0IG9mIGFueSBtYXRyaXggbXVsdGlwbGllZCBieSBpdHMgaW52ZXJzZSB3aWxsIGJlIHRoZVxuICogaWRlbnRpdHkgbWF0cml4LlxuICpcbiAqID4gKipUaXA6KiogU2ltaWxhciB0byBob3cgYDUgKiAoMS81KSA9PT0gMWAsIHdoZXJlIGAxLzVgIGlzIHRoZSBpbnZlcnNlLlxuICpcbiAqIEBwYXJhbSAge2FycmF5fSBzb3VyY2UgLSBBY2NlcHRzIGJvdGggc2hvcnQgYW5kIGxvbmcgZm9ybSBtYXRyaWNlcy5cbiAqIEByZXR1cm4ge2FycmF5fVxuICovXG5mdW5jdGlvbiBpbnZlcnNlKHNvdXJjZSkge1xuXHR2YXIgbSA9IGZvcm1hdChzb3VyY2UpO1xuXG5cdHZhciBzMCA9IG1bMF0gKiBtWzVdIC0gbVs0XSAqIG1bMV07XG5cdHZhciBzMSA9IG1bMF0gKiBtWzZdIC0gbVs0XSAqIG1bMl07XG5cdHZhciBzMiA9IG1bMF0gKiBtWzddIC0gbVs0XSAqIG1bM107XG5cdHZhciBzMyA9IG1bMV0gKiBtWzZdIC0gbVs1XSAqIG1bMl07XG5cdHZhciBzNCA9IG1bMV0gKiBtWzddIC0gbVs1XSAqIG1bM107XG5cdHZhciBzNSA9IG1bMl0gKiBtWzddIC0gbVs2XSAqIG1bM107XG5cblx0dmFyIGM1ID0gbVsxMF0gKiBtWzE1XSAtIG1bMTRdICogbVsxMV07XG5cdHZhciBjNCA9IG1bOV0gKiBtWzE1XSAtIG1bMTNdICogbVsxMV07XG5cdHZhciBjMyA9IG1bOV0gKiBtWzE0XSAtIG1bMTNdICogbVsxMF07XG5cdHZhciBjMiA9IG1bOF0gKiBtWzE1XSAtIG1bMTJdICogbVsxMV07XG5cdHZhciBjMSA9IG1bOF0gKiBtWzE0XSAtIG1bMTJdICogbVsxMF07XG5cdHZhciBjMCA9IG1bOF0gKiBtWzEzXSAtIG1bMTJdICogbVs5XTtcblxuXHR2YXIgZGV0ZXJtaW5hbnQgPSAxIC8gKHMwICogYzUgLSBzMSAqIGM0ICsgczIgKiBjMyArIHMzICogYzIgLSBzNCAqIGMxICsgczUgKiBjMCk7XG5cblx0aWYgKGlzTmFOKGRldGVybWluYW50KSB8fCBkZXRlcm1pbmFudCA9PT0gSW5maW5pdHkpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ0ludmVyc2UgZGV0ZXJtaW5hbnQgYXR0ZW1wdGVkIHRvIGRpdmlkZSBieSB6ZXJvLicpXG5cdH1cblxuXHRyZXR1cm4gW1xuXHRcdChtWzVdICogYzUgLSBtWzZdICogYzQgKyBtWzddICogYzMpICogZGV0ZXJtaW5hbnQsXG5cdFx0KC1tWzFdICogYzUgKyBtWzJdICogYzQgLSBtWzNdICogYzMpICogZGV0ZXJtaW5hbnQsXG5cdFx0KG1bMTNdICogczUgLSBtWzE0XSAqIHM0ICsgbVsxNV0gKiBzMykgKiBkZXRlcm1pbmFudCxcblx0XHQoLW1bOV0gKiBzNSArIG1bMTBdICogczQgLSBtWzExXSAqIHMzKSAqIGRldGVybWluYW50LFxuXG5cdFx0KC1tWzRdICogYzUgKyBtWzZdICogYzIgLSBtWzddICogYzEpICogZGV0ZXJtaW5hbnQsXG5cdFx0KG1bMF0gKiBjNSAtIG1bMl0gKiBjMiArIG1bM10gKiBjMSkgKiBkZXRlcm1pbmFudCxcblx0XHQoLW1bMTJdICogczUgKyBtWzE0XSAqIHMyIC0gbVsxNV0gKiBzMSkgKiBkZXRlcm1pbmFudCxcblx0XHQobVs4XSAqIHM1IC0gbVsxMF0gKiBzMiArIG1bMTFdICogczEpICogZGV0ZXJtaW5hbnQsXG5cblx0XHQobVs0XSAqIGM0IC0gbVs1XSAqIGMyICsgbVs3XSAqIGMwKSAqIGRldGVybWluYW50LFxuXHRcdCgtbVswXSAqIGM0ICsgbVsxXSAqIGMyIC0gbVszXSAqIGMwKSAqIGRldGVybWluYW50LFxuXHRcdChtWzEyXSAqIHM0IC0gbVsxM10gKiBzMiArIG1bMTVdICogczApICogZGV0ZXJtaW5hbnQsXG5cdFx0KC1tWzhdICogczQgKyBtWzldICogczIgLSBtWzExXSAqIHMwKSAqIGRldGVybWluYW50LFxuXG5cdFx0KC1tWzRdICogYzMgKyBtWzVdICogYzEgLSBtWzZdICogYzApICogZGV0ZXJtaW5hbnQsXG5cdFx0KG1bMF0gKiBjMyAtIG1bMV0gKiBjMSArIG1bMl0gKiBjMCkgKiBkZXRlcm1pbmFudCxcblx0XHQoLW1bMTJdICogczMgKyBtWzEzXSAqIHMxIC0gbVsxNF0gKiBzMCkgKiBkZXRlcm1pbmFudCxcblx0XHQobVs4XSAqIHMzIC0gbVs5XSAqIHMxICsgbVsxMF0gKiBzMCkgKiBkZXRlcm1pbmFudFxuXHRdXG59XG5cbi8qKlxuICogUmV0dXJucyBhIDR4NCBtYXRyaXggZGVzY3JpYmluZyB0aGUgY29tYmluZWQgdHJhbnNmb3JtYXRpb25zXG4gKiBvZiBib3RoIGFyZ3VtZW50cy5cbiAqXG4gKiA+ICoqTm90ZToqKiBPcmRlciBpcyB2ZXJ5IGltcG9ydGFudC4gRm9yIGV4YW1wbGUsIHJvdGF0aW5nIDQ1wrBcbiAqIGFsb25nIHRoZSBaLWF4aXMsIGZvbGxvd2VkIGJ5IHRyYW5zbGF0aW5nIDUwMCBwaXhlbHMgYWxvbmcgdGhlXG4gKiBZLWF4aXMuLi4gaXMgbm90IHRoZSBzYW1lIGFzIHRyYW5zbGF0aW5nIDUwMCBwaXhlbHMgYWxvbmcgdGhlXG4gKiBZLWF4aXMsIGZvbGxvd2VkIGJ5IHJvdGF0aW5nIDQ1wrAgYWxvbmcgb24gdGhlIFotYXhpcy5cbiAqXG4gKiBAcGFyYW0gIHthcnJheX0gbSAtIEFjY2VwdHMgYm90aCBzaG9ydCBhbmQgbG9uZyBmb3JtIG1hdHJpY2VzLlxuICogQHBhcmFtICB7YXJyYXl9IHggLSBBY2NlcHRzIGJvdGggc2hvcnQgYW5kIGxvbmcgZm9ybSBtYXRyaWNlcy5cbiAqIEByZXR1cm4ge2FycmF5fVxuICovXG5mdW5jdGlvbiBtdWx0aXBseShtLCB4KSB7XG5cdHZhciBmbSA9IGZvcm1hdChtKTtcblx0dmFyIGZ4ID0gZm9ybWF0KHgpO1xuXHR2YXIgcHJvZHVjdCA9IFtdO1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG5cdFx0dmFyIHJvdyA9IFtmbVtpXSwgZm1baSArIDRdLCBmbVtpICsgOF0sIGZtW2kgKyAxMl1dO1xuXHRcdGZvciAodmFyIGogPSAwOyBqIDwgNDsgaisrKSB7XG5cdFx0XHR2YXIgayA9IGogKiA0O1xuXHRcdFx0dmFyIGNvbCA9IFtmeFtrXSwgZnhbayArIDFdLCBmeFtrICsgMl0sIGZ4W2sgKyAzXV07XG5cdFx0XHR2YXIgcmVzdWx0ID1cblx0XHRcdFx0cm93WzBdICogY29sWzBdICsgcm93WzFdICogY29sWzFdICsgcm93WzJdICogY29sWzJdICsgcm93WzNdICogY29sWzNdO1xuXG5cdFx0XHRwcm9kdWN0W2kgKyBrXSA9IHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcHJvZHVjdFxufVxuXG4vKipcbiAqIEF0dGVtcHRzIHRvIHJldHVybiBhIDR4NCBtYXRyaXggZGVzY3JpYmluZyB0aGUgQ1NTIHRyYW5zZm9ybVxuICogbWF0cml4IHBhc3NlZCBpbiwgYnV0IHdpbGwgcmV0dXJuIHRoZSBpZGVudGl0eSBtYXRyaXggYXMgYVxuICogZmFsbGJhY2suXG4gKlxuICogPiAqKlRpcDoqKiBUaGlzIG1ldGhvZCBpcyB1c2VkIHRvIGNvbnZlcnQgYSBDU1MgbWF0cml4IChyZXRyaWV2ZWQgYXMgYVxuICogYHN0cmluZ2AgZnJvbSBjb21wdXRlZCBzdHlsZXMpIHRvIGl0cyBlcXVpdmFsZW50IGFycmF5IGZvcm1hdC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHNvdXJjZSAtIGBtYXRyaXhgIG9yIGBtYXRyaXgzZGAgQ1NTIFRyYW5zZm9ybSB2YWx1ZS5cbiAqIEByZXR1cm4ge2FycmF5fVxuICovXG5mdW5jdGlvbiBwYXJzZShzb3VyY2UpIHtcblx0aWYgKHR5cGVvZiBzb3VyY2UgPT09ICdzdHJpbmcnKSB7XG5cdFx0dmFyIG1hdGNoID0gc291cmNlLm1hdGNoKC9tYXRyaXgoM2QpP1xcKChbXildKylcXCkvKTtcblx0XHRpZiAobWF0Y2gpIHtcblx0XHRcdHZhciByYXcgPSBtYXRjaFsyXS5zcGxpdCgnLCAnKS5tYXAocGFyc2VGbG9hdCk7XG5cdFx0XHRyZXR1cm4gZm9ybWF0KHJhdylcblx0XHR9XG5cdH1cblx0cmV0dXJuIGlkZW50aXR5KClcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgNHg0IG1hdHJpeCBkZXNjcmliaW5nIFotYXhpcyByb3RhdGlvbi5cbiAqXG4gKiA+ICoqVGlwOioqIFRoaXMgaXMganVzdCBhbiBhbGlhcyBmb3IgYFJlbWF0cml4LnJvdGF0ZVpgIGZvciBwYXJpdHkgd2l0aCBDU1NcbiAqXG4gKiBAcGFyYW0gIHtudW1iZXJ9IGFuZ2xlIC0gTWVhc3VyZWQgaW4gZGVncmVlcy5cbiAqIEByZXR1cm4ge2FycmF5fVxuICovXG5mdW5jdGlvbiByb3RhdGUoYW5nbGUpIHtcblx0cmV0dXJuIHJvdGF0ZVooYW5nbGUpXG59XG5cbi8qKlxuICogUmV0dXJucyBhIDR4NCBtYXRyaXggZGVzY3JpYmluZyBYLWF4aXMgcm90YXRpb24uXG4gKlxuICogQHBhcmFtICB7bnVtYmVyfSBhbmdsZSAtIE1lYXN1cmVkIGluIGRlZ3JlZXMuXG4gKiBAcmV0dXJuIHthcnJheX1cbiAqL1xuZnVuY3Rpb24gcm90YXRlWChhbmdsZSkge1xuXHR2YXIgdGhldGEgPSBNYXRoLlBJIC8gMTgwICogYW5nbGU7XG5cdHZhciBtYXRyaXggPSBpZGVudGl0eSgpO1xuXG5cdG1hdHJpeFs1XSA9IG1hdHJpeFsxMF0gPSBNYXRoLmNvcyh0aGV0YSk7XG5cdG1hdHJpeFs2XSA9IG1hdHJpeFs5XSA9IE1hdGguc2luKHRoZXRhKTtcblx0bWF0cml4WzldICo9IC0xO1xuXG5cdHJldHVybiBtYXRyaXhcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgNHg0IG1hdHJpeCBkZXNjcmliaW5nIFktYXhpcyByb3RhdGlvbi5cbiAqXG4gKiBAcGFyYW0gIHtudW1iZXJ9IGFuZ2xlIC0gTWVhc3VyZWQgaW4gZGVncmVlcy5cbiAqIEByZXR1cm4ge2FycmF5fVxuICovXG5mdW5jdGlvbiByb3RhdGVZKGFuZ2xlKSB7XG5cdHZhciB0aGV0YSA9IE1hdGguUEkgLyAxODAgKiBhbmdsZTtcblx0dmFyIG1hdHJpeCA9IGlkZW50aXR5KCk7XG5cblx0bWF0cml4WzBdID0gbWF0cml4WzEwXSA9IE1hdGguY29zKHRoZXRhKTtcblx0bWF0cml4WzJdID0gbWF0cml4WzhdID0gTWF0aC5zaW4odGhldGEpO1xuXHRtYXRyaXhbMl0gKj0gLTE7XG5cblx0cmV0dXJuIG1hdHJpeFxufVxuXG4vKipcbiAqIFJldHVybnMgYSA0eDQgbWF0cml4IGRlc2NyaWJpbmcgWi1heGlzIHJvdGF0aW9uLlxuICpcbiAqIEBwYXJhbSAge251bWJlcn0gYW5nbGUgLSBNZWFzdXJlZCBpbiBkZWdyZWVzLlxuICogQHJldHVybiB7YXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHJvdGF0ZVooYW5nbGUpIHtcblx0dmFyIHRoZXRhID0gTWF0aC5QSSAvIDE4MCAqIGFuZ2xlO1xuXHR2YXIgbWF0cml4ID0gaWRlbnRpdHkoKTtcblxuXHRtYXRyaXhbMF0gPSBtYXRyaXhbNV0gPSBNYXRoLmNvcyh0aGV0YSk7XG5cdG1hdHJpeFsxXSA9IG1hdHJpeFs0XSA9IE1hdGguc2luKHRoZXRhKTtcblx0bWF0cml4WzRdICo9IC0xO1xuXG5cdHJldHVybiBtYXRyaXhcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgNHg0IG1hdHJpeCBkZXNjcmliaW5nIDJEIHNjYWxpbmcuIFRoZSBmaXJzdCBhcmd1bWVudFxuICogaXMgdXNlZCBmb3IgYm90aCBYIGFuZCBZLWF4aXMgc2NhbGluZywgdW5sZXNzIGFuIG9wdGlvbmFsXG4gKiBzZWNvbmQgYXJndW1lbnQgaXMgcHJvdmlkZWQgdG8gZXhwbGljaXRseSBkZWZpbmUgWS1heGlzIHNjYWxpbmcuXG4gKlxuICogQHBhcmFtICB7bnVtYmVyfSBzY2FsYXIgICAgLSBEZWNpbWFsIG11bHRpcGxpZXIuXG4gKiBAcGFyYW0gIHtudW1iZXJ9IFtzY2FsYXJZXSAtIERlY2ltYWwgbXVsdGlwbGllci5cbiAqIEByZXR1cm4ge2FycmF5fVxuICovXG5mdW5jdGlvbiBzY2FsZShzY2FsYXIsIHNjYWxhclkpIHtcblx0dmFyIG1hdHJpeCA9IGlkZW50aXR5KCk7XG5cblx0bWF0cml4WzBdID0gc2NhbGFyO1xuXHRtYXRyaXhbNV0gPSB0eXBlb2Ygc2NhbGFyWSA9PT0gJ251bWJlcicgPyBzY2FsYXJZIDogc2NhbGFyO1xuXG5cdHJldHVybiBtYXRyaXhcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgNHg0IG1hdHJpeCBkZXNjcmliaW5nIFgtYXhpcyBzY2FsaW5nLlxuICpcbiAqIEBwYXJhbSAge251bWJlcn0gc2NhbGFyIC0gRGVjaW1hbCBtdWx0aXBsaWVyLlxuICogQHJldHVybiB7YXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHNjYWxlWChzY2FsYXIpIHtcblx0dmFyIG1hdHJpeCA9IGlkZW50aXR5KCk7XG5cdG1hdHJpeFswXSA9IHNjYWxhcjtcblx0cmV0dXJuIG1hdHJpeFxufVxuXG4vKipcbiAqIFJldHVybnMgYSA0eDQgbWF0cml4IGRlc2NyaWJpbmcgWS1heGlzIHNjYWxpbmcuXG4gKlxuICogQHBhcmFtICB7bnVtYmVyfSBzY2FsYXIgLSBEZWNpbWFsIG11bHRpcGxpZXIuXG4gKiBAcmV0dXJuIHthcnJheX1cbiAqL1xuZnVuY3Rpb24gc2NhbGVZKHNjYWxhcikge1xuXHR2YXIgbWF0cml4ID0gaWRlbnRpdHkoKTtcblx0bWF0cml4WzVdID0gc2NhbGFyO1xuXHRyZXR1cm4gbWF0cml4XG59XG5cbi8qKlxuICogUmV0dXJucyBhIDR4NCBtYXRyaXggZGVzY3JpYmluZyBaLWF4aXMgc2NhbGluZy5cbiAqXG4gKiBAcGFyYW0gIHtudW1iZXJ9IHNjYWxhciAtIERlY2ltYWwgbXVsdGlwbGllci5cbiAqIEByZXR1cm4ge2FycmF5fVxuICovXG5mdW5jdGlvbiBzY2FsZVooc2NhbGFyKSB7XG5cdHZhciBtYXRyaXggPSBpZGVudGl0eSgpO1xuXHRtYXRyaXhbMTBdID0gc2NhbGFyO1xuXHRyZXR1cm4gbWF0cml4XG59XG5cbi8qKlxuICogUmV0dXJucyBhIDR4NCBtYXRyaXggZGVzY3JpYmluZyBzaGVhci4gVGhlIGZpcnN0IGFyZ3VtZW50XG4gKiBkZWZpbmVzIFgtYXhpcyBzaGVhcmluZywgYW5kIGFuIG9wdGlvbmFsIHNlY29uZCBhcmd1bWVudFxuICogZGVmaW5lcyBZLWF4aXMgc2hlYXJpbmcuXG4gKlxuICogQHBhcmFtICB7bnVtYmVyfSBhbmdsZVggICAtIE1lYXN1cmVkIGluIGRlZ3JlZXMuXG4gKiBAcGFyYW0gIHtudW1iZXJ9IFthbmdsZVldIC0gTWVhc3VyZWQgaW4gZGVncmVlcy5cbiAqIEByZXR1cm4ge2FycmF5fVxuICovXG5mdW5jdGlvbiBza2V3KGFuZ2xlWCwgYW5nbGVZKSB7XG5cdHZhciB0aGV0YVggPSBNYXRoLlBJIC8gMTgwICogYW5nbGVYO1xuXHR2YXIgbWF0cml4ID0gaWRlbnRpdHkoKTtcblxuXHRtYXRyaXhbNF0gPSBNYXRoLnRhbih0aGV0YVgpO1xuXG5cdGlmIChhbmdsZVkpIHtcblx0XHR2YXIgdGhldGFZID0gTWF0aC5QSSAvIDE4MCAqIGFuZ2xlWTtcblx0XHRtYXRyaXhbMV0gPSBNYXRoLnRhbih0aGV0YVkpO1xuXHR9XG5cblx0cmV0dXJuIG1hdHJpeFxufVxuXG4vKipcbiAqIFJldHVybnMgYSA0eDQgbWF0cml4IGRlc2NyaWJpbmcgWC1heGlzIHNoZWFyLlxuICpcbiAqIEBwYXJhbSAge251bWJlcn0gYW5nbGUgLSBNZWFzdXJlZCBpbiBkZWdyZWVzLlxuICogQHJldHVybiB7YXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHNrZXdYKGFuZ2xlKSB7XG5cdHZhciB0aGV0YSA9IE1hdGguUEkgLyAxODAgKiBhbmdsZTtcblx0dmFyIG1hdHJpeCA9IGlkZW50aXR5KCk7XG5cblx0bWF0cml4WzRdID0gTWF0aC50YW4odGhldGEpO1xuXG5cdHJldHVybiBtYXRyaXhcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgNHg0IG1hdHJpeCBkZXNjcmliaW5nIFktYXhpcyBzaGVhci5cbiAqXG4gKiBAcGFyYW0gIHtudW1iZXJ9IGFuZ2xlIC0gTWVhc3VyZWQgaW4gZGVncmVlc1xuICogQHJldHVybiB7YXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHNrZXdZKGFuZ2xlKSB7XG5cdHZhciB0aGV0YSA9IE1hdGguUEkgLyAxODAgKiBhbmdsZTtcblx0dmFyIG1hdHJpeCA9IGlkZW50aXR5KCk7XG5cblx0bWF0cml4WzFdID0gTWF0aC50YW4odGhldGEpO1xuXG5cdHJldHVybiBtYXRyaXhcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgQ1NTIFRyYW5zZm9ybSBwcm9wZXJ0eSB2YWx1ZSBlcXVpdmFsZW50IHRvIHRoZSBzb3VyY2UgbWF0cml4LlxuICpcbiAqIEBwYXJhbSAge2FycmF5fSBzb3VyY2UgLSBBY2NlcHRzIGJvdGggc2hvcnQgYW5kIGxvbmcgZm9ybSBtYXRyaWNlcy5cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcoc291cmNlKSB7XG5cdHJldHVybiAoXCJtYXRyaXgzZChcIiArIChmb3JtYXQoc291cmNlKS5qb2luKCcsICcpKSArIFwiKVwiKVxufVxuXG4vKipcbiAqIFJldHVybnMgYSA0eDQgbWF0cml4IGRlc2NyaWJpbmcgMkQgdHJhbnNsYXRpb24uIFRoZSBmaXJzdFxuICogYXJndW1lbnQgZGVmaW5lcyBYLWF4aXMgdHJhbnNsYXRpb24sIGFuZCBhbiBvcHRpb25hbCBzZWNvbmRcbiAqIGFyZ3VtZW50IGRlZmluZXMgWS1heGlzIHRyYW5zbGF0aW9uLlxuICpcbiAqIEBwYXJhbSAge251bWJlcn0gZGlzdGFuY2VYICAgLSBNZWFzdXJlZCBpbiBwaXhlbHMuXG4gKiBAcGFyYW0gIHtudW1iZXJ9IFtkaXN0YW5jZVldIC0gTWVhc3VyZWQgaW4gcGl4ZWxzLlxuICogQHJldHVybiB7YXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHRyYW5zbGF0ZShkaXN0YW5jZVgsIGRpc3RhbmNlWSkge1xuXHR2YXIgbWF0cml4ID0gaWRlbnRpdHkoKTtcblx0bWF0cml4WzEyXSA9IGRpc3RhbmNlWDtcblxuXHRpZiAoZGlzdGFuY2VZKSB7XG5cdFx0bWF0cml4WzEzXSA9IGRpc3RhbmNlWTtcblx0fVxuXG5cdHJldHVybiBtYXRyaXhcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgNHg0IG1hdHJpeCBkZXNjcmliaW5nIFgtYXhpcyB0cmFuc2xhdGlvbi5cbiAqXG4gKiBAcGFyYW0gIHtudW1iZXJ9IGRpc3RhbmNlIC0gTWVhc3VyZWQgaW4gcGl4ZWxzLlxuICogQHJldHVybiB7YXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHRyYW5zbGF0ZVgoZGlzdGFuY2UpIHtcblx0dmFyIG1hdHJpeCA9IGlkZW50aXR5KCk7XG5cdG1hdHJpeFsxMl0gPSBkaXN0YW5jZTtcblx0cmV0dXJuIG1hdHJpeFxufVxuXG4vKipcbiAqIFJldHVybnMgYSA0eDQgbWF0cml4IGRlc2NyaWJpbmcgWS1heGlzIHRyYW5zbGF0aW9uLlxuICpcbiAqIEBwYXJhbSAge251bWJlcn0gZGlzdGFuY2UgLSBNZWFzdXJlZCBpbiBwaXhlbHMuXG4gKiBAcmV0dXJuIHthcnJheX1cbiAqL1xuZnVuY3Rpb24gdHJhbnNsYXRlWShkaXN0YW5jZSkge1xuXHR2YXIgbWF0cml4ID0gaWRlbnRpdHkoKTtcblx0bWF0cml4WzEzXSA9IGRpc3RhbmNlO1xuXHRyZXR1cm4gbWF0cml4XG59XG5cbi8qKlxuICogUmV0dXJucyBhIDR4NCBtYXRyaXggZGVzY3JpYmluZyBaLWF4aXMgdHJhbnNsYXRpb24uXG4gKlxuICogQHBhcmFtICB7bnVtYmVyfSBkaXN0YW5jZSAtIE1lYXN1cmVkIGluIHBpeGVscy5cbiAqIEByZXR1cm4ge2FycmF5fVxuICovXG5mdW5jdGlvbiB0cmFuc2xhdGVaKGRpc3RhbmNlKSB7XG5cdHZhciBtYXRyaXggPSBpZGVudGl0eSgpO1xuXHRtYXRyaXhbMTRdID0gZGlzdGFuY2U7XG5cdHJldHVybiBtYXRyaXhcbn1cblxuZXhwb3J0IHsgZm9ybWF0LCBpZGVudGl0eSwgaW52ZXJzZSwgbXVsdGlwbHksIHBhcnNlLCByb3RhdGUsIHJvdGF0ZVgsIHJvdGF0ZVksIHJvdGF0ZVosIHNjYWxlLCBzY2FsZVgsIHNjYWxlWSwgc2NhbGVaLCBza2V3LCBza2V3WCwgc2tld1ksIHRvU3RyaW5nLCB0cmFuc2xhdGUsIHRyYW5zbGF0ZVgsIHRyYW5zbGF0ZVksIHRyYW5zbGF0ZVogfTtcbiIsIi8qISBAbGljZW5zZSBtaW5pcmFmIHYxLjAuMFxuXG5cdENvcHlyaWdodCAyMDE4IEZpc3NzaW9uIExMQy5cblxuXHRQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5cdG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcblx0aW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuXHR0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5cdGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuXHRmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5cdFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuXHRjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5cdFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcblx0SU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5cdEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuXHRBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5cdExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5cdE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5cdFNPRlRXQVJFLlxuXG4qL1xudmFyIHBvbHlmaWxsID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIGNsb2NrID0gRGF0ZS5ub3coKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cdFx0dmFyIGN1cnJlbnRUaW1lID0gRGF0ZS5ub3coKTtcblx0XHRpZiAoY3VycmVudFRpbWUgLSBjbG9jayA+IDE2KSB7XG5cdFx0XHRjbG9jayA9IGN1cnJlbnRUaW1lO1xuXHRcdFx0Y2FsbGJhY2soY3VycmVudFRpbWUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBvbHlmaWxsKGNhbGxiYWNrKTsgfSwgMCk7XG5cdFx0fVxuXHR9XG59KSgpO1xuXG52YXIgaW5kZXggPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG5cdHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcblx0d2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuXHRwb2x5ZmlsbDtcblxuZXhwb3J0IGRlZmF1bHQgaW5kZXg7XG4iLCIvKiEgQGxpY2Vuc2UgU2Nyb2xsUmV2ZWFsIHY0LjAuNlxuXG5cdENvcHlyaWdodCAyMDIwIEZpc3NzaW9uIExMQy5cblxuXHRMaWNlbnNlZCB1bmRlciB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgMy4wIGZvclxuXHRjb21wYXRpYmxlIG9wZW4gc291cmNlIHByb2plY3RzIGFuZCBub24tY29tbWVyY2lhbCB1c2UuXG5cblx0Rm9yIGNvbW1lcmNpYWwgc2l0ZXMsIHRoZW1lcywgcHJvamVjdHMsIGFuZCBhcHBsaWNhdGlvbnMsXG5cdGtlZXAgeW91ciBzb3VyY2UgY29kZSBwcml2YXRlL3Byb3ByaWV0YXJ5IGJ5IHB1cmNoYXNpbmdcblx0YSBjb21tZXJjaWFsIGxpY2Vuc2UgZnJvbSBodHRwczovL3Njcm9sbHJldmVhbGpzLm9yZy9cbiovXG5pbXBvcnQgJCBmcm9tICd0ZWFsaWdodCc7XG5pbXBvcnQgeyB0cmFuc2xhdGVZLCB0cmFuc2xhdGVYLCByb3RhdGVYLCByb3RhdGVZLCByb3RhdGVaLCBzY2FsZSwgcGFyc2UsIG11bHRpcGx5IH0gZnJvbSAncmVtYXRyaXgnO1xuaW1wb3J0IHJhZiBmcm9tICdtaW5pcmFmJztcblxudmFyIGRlZmF1bHRzID0ge1xuXHRkZWxheTogMCxcblx0ZGlzdGFuY2U6ICcwJyxcblx0ZHVyYXRpb246IDYwMCxcblx0ZWFzaW5nOiAnY3ViaWMtYmV6aWVyKDAuNSwgMCwgMCwgMSknLFxuXHRpbnRlcnZhbDogMCxcblx0b3BhY2l0eTogMCxcblx0b3JpZ2luOiAnYm90dG9tJyxcblx0cm90YXRlOiB7XG5cdFx0eDogMCxcblx0XHR5OiAwLFxuXHRcdHo6IDBcblx0fSxcblx0c2NhbGU6IDEsXG5cdGNsZWFudXA6IGZhbHNlLFxuXHRjb250YWluZXI6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcblx0ZGVza3RvcDogdHJ1ZSxcblx0bW9iaWxlOiB0cnVlLFxuXHRyZXNldDogZmFsc2UsXG5cdHVzZURlbGF5OiAnYWx3YXlzJyxcblx0dmlld0ZhY3RvcjogMC4wLFxuXHR2aWV3T2Zmc2V0OiB7XG5cdFx0dG9wOiAwLFxuXHRcdHJpZ2h0OiAwLFxuXHRcdGJvdHRvbTogMCxcblx0XHRsZWZ0OiAwXG5cdH0sXG5cdGFmdGVyUmVzZXQ6IGZ1bmN0aW9uIGFmdGVyUmVzZXQoKSB7fSxcblx0YWZ0ZXJSZXZlYWw6IGZ1bmN0aW9uIGFmdGVyUmV2ZWFsKCkge30sXG5cdGJlZm9yZVJlc2V0OiBmdW5jdGlvbiBiZWZvcmVSZXNldCgpIHt9LFxuXHRiZWZvcmVSZXZlYWw6IGZ1bmN0aW9uIGJlZm9yZVJldmVhbCgpIHt9XG59O1xuXG5mdW5jdGlvbiBmYWlsdXJlKCkge1xuXHRkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnc3InKTtcblxuXHRyZXR1cm4ge1xuXHRcdGNsZWFuOiBmdW5jdGlvbiBjbGVhbigpIHt9LFxuXHRcdGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7fSxcblx0XHRyZXZlYWw6IGZ1bmN0aW9uIHJldmVhbCgpIHt9LFxuXHRcdHN5bmM6IGZ1bmN0aW9uIHN5bmMoKSB7fSxcblx0XHRnZXQgbm9vcCgpIHtcblx0XHRcdHJldHVybiB0cnVlXG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHN1Y2Nlc3MoKSB7XG5cdGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdzcicpO1xuXG5cdGlmIChkb2N1bWVudC5ib2R5KSB7XG5cdFx0ZG9jdW1lbnQuYm9keS5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XG5cdH0gZWxzZSB7XG5cdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uICgpIHtcblx0XHRcdGRvY3VtZW50LmJvZHkuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xuXHRcdH0pO1xuXHR9XG59XG5cbnZhciBtb3VudCA9IHsgc3VjY2Vzczogc3VjY2VzcywgZmFpbHVyZTogZmFpbHVyZSB9O1xuXG5mdW5jdGlvbiBpc09iamVjdCh4KSB7XG5cdHJldHVybiAoXG5cdFx0eCAhPT0gbnVsbCAmJlxuXHRcdHggaW5zdGFuY2VvZiBPYmplY3QgJiZcblx0XHQoeC5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0IHx8XG5cdFx0XHRPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoeCkgPT09ICdbb2JqZWN0IE9iamVjdF0nKVxuXHQpXG59XG5cbmZ1bmN0aW9uIGVhY2goY29sbGVjdGlvbiwgY2FsbGJhY2spIHtcblx0aWYgKGlzT2JqZWN0KGNvbGxlY3Rpb24pKSB7XG5cdFx0dmFyIGtleXMgPSBPYmplY3Qua2V5cyhjb2xsZWN0aW9uKTtcblx0XHRyZXR1cm4ga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGNhbGxiYWNrKGNvbGxlY3Rpb25ba2V5XSwga2V5LCBjb2xsZWN0aW9uKTsgfSlcblx0fVxuXHRpZiAoY29sbGVjdGlvbiBpbnN0YW5jZW9mIEFycmF5KSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaSkgeyByZXR1cm4gY2FsbGJhY2soaXRlbSwgaSwgY29sbGVjdGlvbik7IH0pXG5cdH1cblx0dGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgZWl0aGVyIGFuIGFycmF5IG9yIG9iamVjdCBsaXRlcmFsLicpXG59XG5cbmZ1bmN0aW9uIGxvZ2dlcihtZXNzYWdlKSB7XG5cdHZhciBkZXRhaWxzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAxO1xuXHR3aGlsZSAoIGxlbi0tID4gMCApIGRldGFpbHNbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gKyAxIF07XG5cblx0aWYgKHRoaXMuY29uc3RydWN0b3IuZGVidWcgJiYgY29uc29sZSkge1xuXHRcdHZhciByZXBvcnQgPSBcIiVjU2Nyb2xsUmV2ZWFsOiBcIiArIG1lc3NhZ2U7XG5cdFx0ZGV0YWlscy5mb3JFYWNoKGZ1bmN0aW9uIChkZXRhaWwpIHsgcmV0dXJuIChyZXBvcnQgKz0gXCJcXG4g4oCUIFwiICsgZGV0YWlsKTsgfSk7XG5cdFx0Y29uc29sZS5sb2cocmVwb3J0LCAnY29sb3I6ICNlYTY1NGI7Jyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuXHR9XG59XG5cbmZ1bmN0aW9uIHJpbnNlKCkge1xuXHR2YXIgdGhpcyQxID0gdGhpcztcblxuXHR2YXIgc3RydWN0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHtcblx0XHRhY3RpdmU6IFtdLFxuXHRcdHN0YWxlOiBbXVxuXHR9KTsgfTtcblxuXHR2YXIgZWxlbWVudElkcyA9IHN0cnVjdCgpO1xuXHR2YXIgc2VxdWVuY2VJZHMgPSBzdHJ1Y3QoKTtcblx0dmFyIGNvbnRhaW5lcklkcyA9IHN0cnVjdCgpO1xuXG5cdC8qKlxuXHQgKiBUYWtlIHN0b2NrIG9mIGFjdGl2ZSBlbGVtZW50IElEcy5cblx0ICovXG5cdHRyeSB7XG5cdFx0ZWFjaCgkKCdbZGF0YS1zci1pZF0nKSwgZnVuY3Rpb24gKG5vZGUpIHtcblx0XHRcdHZhciBpZCA9IHBhcnNlSW50KG5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLXNyLWlkJykpO1xuXHRcdFx0ZWxlbWVudElkcy5hY3RpdmUucHVzaChpZCk7XG5cdFx0fSk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHR0aHJvdyBlXG5cdH1cblx0LyoqXG5cdCAqIERlc3Ryb3kgc3RhbGUgZWxlbWVudHMuXG5cdCAqL1xuXHRlYWNoKHRoaXMuc3RvcmUuZWxlbWVudHMsIGZ1bmN0aW9uIChlbGVtZW50KSB7XG5cdFx0aWYgKGVsZW1lbnRJZHMuYWN0aXZlLmluZGV4T2YoZWxlbWVudC5pZCkgPT09IC0xKSB7XG5cdFx0XHRlbGVtZW50SWRzLnN0YWxlLnB1c2goZWxlbWVudC5pZCk7XG5cdFx0fVxuXHR9KTtcblxuXHRlYWNoKGVsZW1lbnRJZHMuc3RhbGUsIGZ1bmN0aW9uIChzdGFsZUlkKSB7IHJldHVybiBkZWxldGUgdGhpcyQxLnN0b3JlLmVsZW1lbnRzW3N0YWxlSWRdOyB9KTtcblxuXHQvKipcblx0ICogVGFrZSBzdG9jayBvZiBhY3RpdmUgY29udGFpbmVyIGFuZCBzZXF1ZW5jZSBJRHMuXG5cdCAqL1xuXHRlYWNoKHRoaXMuc3RvcmUuZWxlbWVudHMsIGZ1bmN0aW9uIChlbGVtZW50KSB7XG5cdFx0aWYgKGNvbnRhaW5lcklkcy5hY3RpdmUuaW5kZXhPZihlbGVtZW50LmNvbnRhaW5lcklkKSA9PT0gLTEpIHtcblx0XHRcdGNvbnRhaW5lcklkcy5hY3RpdmUucHVzaChlbGVtZW50LmNvbnRhaW5lcklkKTtcblx0XHR9XG5cdFx0aWYgKGVsZW1lbnQuaGFzT3duUHJvcGVydHkoJ3NlcXVlbmNlJykpIHtcblx0XHRcdGlmIChzZXF1ZW5jZUlkcy5hY3RpdmUuaW5kZXhPZihlbGVtZW50LnNlcXVlbmNlLmlkKSA9PT0gLTEpIHtcblx0XHRcdFx0c2VxdWVuY2VJZHMuYWN0aXZlLnB1c2goZWxlbWVudC5zZXF1ZW5jZS5pZCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHQvKipcblx0ICogRGVzdHJveSBzdGFsZSBjb250YWluZXJzLlxuXHQgKi9cblx0ZWFjaCh0aGlzLnN0b3JlLmNvbnRhaW5lcnMsIGZ1bmN0aW9uIChjb250YWluZXIpIHtcblx0XHRpZiAoY29udGFpbmVySWRzLmFjdGl2ZS5pbmRleE9mKGNvbnRhaW5lci5pZCkgPT09IC0xKSB7XG5cdFx0XHRjb250YWluZXJJZHMuc3RhbGUucHVzaChjb250YWluZXIuaWQpO1xuXHRcdH1cblx0fSk7XG5cblx0ZWFjaChjb250YWluZXJJZHMuc3RhbGUsIGZ1bmN0aW9uIChzdGFsZUlkKSB7XG5cdFx0dmFyIHN0YWxlID0gdGhpcyQxLnN0b3JlLmNvbnRhaW5lcnNbc3RhbGVJZF0ubm9kZTtcblx0XHRzdGFsZS5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzJDEuZGVsZWdhdGUpO1xuXHRcdHN0YWxlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMkMS5kZWxlZ2F0ZSk7XG5cdFx0ZGVsZXRlIHRoaXMkMS5zdG9yZS5jb250YWluZXJzW3N0YWxlSWRdO1xuXHR9KTtcblxuXHQvKipcblx0ICogRGVzdHJveSBzdGFsZSBzZXF1ZW5jZXMuXG5cdCAqL1xuXHRlYWNoKHRoaXMuc3RvcmUuc2VxdWVuY2VzLCBmdW5jdGlvbiAoc2VxdWVuY2UpIHtcblx0XHRpZiAoc2VxdWVuY2VJZHMuYWN0aXZlLmluZGV4T2Yoc2VxdWVuY2UuaWQpID09PSAtMSkge1xuXHRcdFx0c2VxdWVuY2VJZHMuc3RhbGUucHVzaChzZXF1ZW5jZS5pZCk7XG5cdFx0fVxuXHR9KTtcblxuXHRlYWNoKHNlcXVlbmNlSWRzLnN0YWxlLCBmdW5jdGlvbiAoc3RhbGVJZCkgeyByZXR1cm4gZGVsZXRlIHRoaXMkMS5zdG9yZS5zZXF1ZW5jZXNbc3RhbGVJZF07IH0pO1xufVxuXG5mdW5jdGlvbiBjbGVhbih0YXJnZXQpIHtcblx0dmFyIHRoaXMkMSA9IHRoaXM7XG5cblx0dmFyIGRpcnR5O1xuXHR0cnkge1xuXHRcdGVhY2goJCh0YXJnZXQpLCBmdW5jdGlvbiAobm9kZSkge1xuXHRcdFx0dmFyIGlkID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3ItaWQnKTtcblx0XHRcdGlmIChpZCAhPT0gbnVsbCkge1xuXHRcdFx0XHRkaXJ0eSA9IHRydWU7XG5cdFx0XHRcdHZhciBlbGVtZW50ID0gdGhpcyQxLnN0b3JlLmVsZW1lbnRzW2lkXTtcblx0XHRcdFx0aWYgKGVsZW1lbnQuY2FsbGJhY2tUaW1lcikge1xuXHRcdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoZWxlbWVudC5jYWxsYmFja1RpbWVyLmNsb2NrKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRub2RlLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBlbGVtZW50LnN0eWxlcy5pbmxpbmUuZ2VuZXJhdGVkKTtcblx0XHRcdFx0bm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtc3ItaWQnKTtcblx0XHRcdFx0ZGVsZXRlIHRoaXMkMS5zdG9yZS5lbGVtZW50c1tpZF07XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gbG9nZ2VyLmNhbGwodGhpcywgJ0NsZWFuIGZhaWxlZC4nLCBlLm1lc3NhZ2UpXG5cdH1cblxuXHRpZiAoZGlydHkpIHtcblx0XHR0cnkge1xuXHRcdFx0cmluc2UuY2FsbCh0aGlzKTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRyZXR1cm4gbG9nZ2VyLmNhbGwodGhpcywgJ0NsZWFuIGZhaWxlZC4nLCBlLm1lc3NhZ2UpXG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlc3Ryb3koKSB7XG5cdHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cdC8qKlxuXHQgKiBSZW1vdmUgYWxsIGdlbmVyYXRlZCBzdHlsZXMgYW5kIGVsZW1lbnQgaWRzXG5cdCAqL1xuXHRlYWNoKHRoaXMuc3RvcmUuZWxlbWVudHMsIGZ1bmN0aW9uIChlbGVtZW50KSB7XG5cdFx0ZWxlbWVudC5ub2RlLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBlbGVtZW50LnN0eWxlcy5pbmxpbmUuZ2VuZXJhdGVkKTtcblx0XHRlbGVtZW50Lm5vZGUucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXNyLWlkJyk7XG5cdH0pO1xuXG5cdC8qKlxuXHQgKiBSZW1vdmUgYWxsIGV2ZW50IGxpc3RlbmVycy5cblx0ICovXG5cdGVhY2godGhpcy5zdG9yZS5jb250YWluZXJzLCBmdW5jdGlvbiAoY29udGFpbmVyKSB7XG5cdFx0dmFyIHRhcmdldCA9XG5cdFx0XHRjb250YWluZXIubm9kZSA9PT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ID8gd2luZG93IDogY29udGFpbmVyLm5vZGU7XG5cdFx0dGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMkMS5kZWxlZ2F0ZSk7XG5cdFx0dGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMkMS5kZWxlZ2F0ZSk7XG5cdH0pO1xuXG5cdC8qKlxuXHQgKiBDbGVhciBhbGwgZGF0YSBmcm9tIHRoZSBzdG9yZVxuXHQgKi9cblx0dGhpcy5zdG9yZSA9IHtcblx0XHRjb250YWluZXJzOiB7fSxcblx0XHRlbGVtZW50czoge30sXG5cdFx0aGlzdG9yeTogW10sXG5cdFx0c2VxdWVuY2VzOiB7fVxuXHR9O1xufVxuXG52YXIgZ2V0UHJlZml4ZWRDc3NQcm9wID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHByb3BlcnRpZXMgPSB7fTtcblx0dmFyIHN0eWxlID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlO1xuXG5cdGZ1bmN0aW9uIGdldFByZWZpeGVkQ3NzUHJvcGVydHkobmFtZSwgc291cmNlKSB7XG5cdFx0aWYgKCBzb3VyY2UgPT09IHZvaWQgMCApIHNvdXJjZSA9IHN0eWxlO1xuXG5cdFx0aWYgKG5hbWUgJiYgdHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRpZiAocHJvcGVydGllc1tuYW1lXSkge1xuXHRcdFx0XHRyZXR1cm4gcHJvcGVydGllc1tuYW1lXVxuXHRcdFx0fVxuXHRcdFx0aWYgKHR5cGVvZiBzb3VyY2VbbmFtZV0gPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdHJldHVybiAocHJvcGVydGllc1tuYW1lXSA9IG5hbWUpXG5cdFx0XHR9XG5cdFx0XHRpZiAodHlwZW9mIHNvdXJjZVsoXCItd2Via2l0LVwiICsgbmFtZSldID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRyZXR1cm4gKHByb3BlcnRpZXNbbmFtZV0gPSBcIi13ZWJraXQtXCIgKyBuYW1lKVxuXHRcdFx0fVxuXHRcdFx0dGhyb3cgbmV3IFJhbmdlRXJyb3IoKFwiVW5hYmxlIHRvIGZpbmQgXFxcIlwiICsgbmFtZSArIFwiXFxcIiBzdHlsZSBwcm9wZXJ0eS5cIikpXG5cdFx0fVxuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGEgc3RyaW5nLicpXG5cdH1cblxuXHRnZXRQcmVmaXhlZENzc1Byb3BlcnR5LmNsZWFyQ2FjaGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAocHJvcGVydGllcyA9IHt9KTsgfTtcblxuXHRyZXR1cm4gZ2V0UHJlZml4ZWRDc3NQcm9wZXJ0eVxufSkoKTtcblxuZnVuY3Rpb24gc3R5bGUoZWxlbWVudCkge1xuXHR2YXIgY29tcHV0ZWQgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50Lm5vZGUpO1xuXHR2YXIgcG9zaXRpb24gPSBjb21wdXRlZC5wb3NpdGlvbjtcblx0dmFyIGNvbmZpZyA9IGVsZW1lbnQuY29uZmlnO1xuXG5cdC8qKlxuXHQgKiBHZW5lcmF0ZSBpbmxpbmUgc3R5bGVzXG5cdCAqL1xuXHR2YXIgaW5saW5lID0ge307XG5cdHZhciBpbmxpbmVTdHlsZSA9IGVsZW1lbnQubm9kZS5nZXRBdHRyaWJ1dGUoJ3N0eWxlJykgfHwgJyc7XG5cdHZhciBpbmxpbmVNYXRjaCA9IGlubGluZVN0eWxlLm1hdGNoKC9bXFx3LV0rXFxzKjpcXHMqW147XStcXHMqL2dpKSB8fCBbXTtcblxuXHRpbmxpbmUuY29tcHV0ZWQgPSBpbmxpbmVNYXRjaCA/IGlubGluZU1hdGNoLm1hcChmdW5jdGlvbiAobSkgeyByZXR1cm4gbS50cmltKCk7IH0pLmpvaW4oJzsgJykgKyAnOycgOiAnJztcblxuXHRpbmxpbmUuZ2VuZXJhdGVkID0gaW5saW5lTWF0Y2guc29tZShmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5tYXRjaCgvdmlzaWJpbGl0eVxccz86XFxzP3Zpc2libGUvaSk7IH0pXG5cdFx0PyBpbmxpbmUuY29tcHV0ZWRcblx0XHQ6IGlubGluZU1hdGNoLmNvbmNhdCggWyd2aXNpYmlsaXR5OiB2aXNpYmxlJ10pLm1hcChmdW5jdGlvbiAobSkgeyByZXR1cm4gbS50cmltKCk7IH0pLmpvaW4oJzsgJykgKyAnOyc7XG5cblx0LyoqXG5cdCAqIEdlbmVyYXRlIG9wYWNpdHkgc3R5bGVzXG5cdCAqL1xuXHR2YXIgY29tcHV0ZWRPcGFjaXR5ID0gcGFyc2VGbG9hdChjb21wdXRlZC5vcGFjaXR5KTtcblx0dmFyIGNvbmZpZ09wYWNpdHkgPSAhaXNOYU4ocGFyc2VGbG9hdChjb25maWcub3BhY2l0eSkpXG5cdFx0PyBwYXJzZUZsb2F0KGNvbmZpZy5vcGFjaXR5KVxuXHRcdDogcGFyc2VGbG9hdChjb21wdXRlZC5vcGFjaXR5KTtcblxuXHR2YXIgb3BhY2l0eSA9IHtcblx0XHRjb21wdXRlZDogY29tcHV0ZWRPcGFjaXR5ICE9PSBjb25maWdPcGFjaXR5ID8gKFwib3BhY2l0eTogXCIgKyBjb21wdXRlZE9wYWNpdHkgKyBcIjtcIikgOiAnJyxcblx0XHRnZW5lcmF0ZWQ6IGNvbXB1dGVkT3BhY2l0eSAhPT0gY29uZmlnT3BhY2l0eSA/IChcIm9wYWNpdHk6IFwiICsgY29uZmlnT3BhY2l0eSArIFwiO1wiKSA6ICcnXG5cdH07XG5cblx0LyoqXG5cdCAqIEdlbmVyYXRlIHRyYW5zZm9ybWF0aW9uIHN0eWxlc1xuXHQgKi9cblx0dmFyIHRyYW5zZm9ybWF0aW9ucyA9IFtdO1xuXG5cdGlmIChwYXJzZUZsb2F0KGNvbmZpZy5kaXN0YW5jZSkpIHtcblx0XHR2YXIgYXhpcyA9IGNvbmZpZy5vcmlnaW4gPT09ICd0b3AnIHx8IGNvbmZpZy5vcmlnaW4gPT09ICdib3R0b20nID8gJ1knIDogJ1gnO1xuXG5cdFx0LyoqXG5cdFx0ICogTGV04oCZcyBtYWtlIHN1cmUgb3VyIG91ciBwaXhlbCBkaXN0YW5jZXMgYXJlIG5lZ2F0aXZlIGZvciB0b3AgYW5kIGxlZnQuXG5cdFx0ICogZS5nLiB7IG9yaWdpbjogJ3RvcCcsIGRpc3RhbmNlOiAnMjVweCcgfSBzdGFydHMgYXQgYHRvcDogLTI1cHhgIGluIENTUy5cblx0XHQgKi9cblx0XHR2YXIgZGlzdGFuY2UgPSBjb25maWcuZGlzdGFuY2U7XG5cdFx0aWYgKGNvbmZpZy5vcmlnaW4gPT09ICd0b3AnIHx8IGNvbmZpZy5vcmlnaW4gPT09ICdsZWZ0Jykge1xuXHRcdFx0ZGlzdGFuY2UgPSAvXi0vLnRlc3QoZGlzdGFuY2UpID8gZGlzdGFuY2Uuc3Vic3RyKDEpIDogKFwiLVwiICsgZGlzdGFuY2UpO1xuXHRcdH1cblxuXHRcdHZhciByZWYgPSBkaXN0YW5jZS5tYXRjaCgvKF4tP1xcZCtcXC4/XFxkPyl8KGVtJHxweCR8JSQpL2cpO1xuXHRcdHZhciB2YWx1ZSA9IHJlZlswXTtcblx0XHR2YXIgdW5pdCA9IHJlZlsxXTtcblxuXHRcdHN3aXRjaCAodW5pdCkge1xuXHRcdFx0Y2FzZSAnZW0nOlxuXHRcdFx0XHRkaXN0YW5jZSA9IHBhcnNlSW50KGNvbXB1dGVkLmZvbnRTaXplKSAqIHZhbHVlO1xuXHRcdFx0XHRicmVha1xuXHRcdFx0Y2FzZSAncHgnOlxuXHRcdFx0XHRkaXN0YW5jZSA9IHZhbHVlO1xuXHRcdFx0XHRicmVha1xuXHRcdFx0Y2FzZSAnJSc6XG5cdFx0XHRcdC8qKlxuXHRcdFx0XHQgKiBIZXJlIHdlIHVzZSBgZ2V0Qm91bmRpbmdDbGllbnRSZWN0YCBpbnN0ZWFkIG9mXG5cdFx0XHRcdCAqIHRoZSBleGlzdGluZyBkYXRhIGF0dGFjaGVkIHRvIGBlbGVtZW50Lmdlb21ldHJ5YFxuXHRcdFx0XHQgKiBiZWNhdXNlIG9ubHkgdGhlIGZvcm1lciBpbmNsdWRlcyBhbnkgdHJhbnNmb3JtYXRpb25zXG5cdFx0XHRcdCAqIGN1cnJlbnQgYXBwbGllZCB0byB0aGUgZWxlbWVudC5cblx0XHRcdFx0ICpcblx0XHRcdFx0ICogSWYgdGhhdCBiZWhhdmlvciBlbmRzIHVwIGJlaW5nIHVuaW50dWl0aXZlLCB0aGlzXG5cdFx0XHRcdCAqIGxvZ2ljIGNvdWxkIGluc3RlYWQgdXRpbGl6ZSBgZWxlbWVudC5nZW9tZXRyeS5oZWlnaHRgXG5cdFx0XHRcdCAqIGFuZCBgZWxlbWVudC5nZW9lbWV0cnkud2lkdGhgIGZvciB0aGUgZGlzdGFuY2UgY2FsY3VsYXRpb25cblx0XHRcdFx0ICovXG5cdFx0XHRcdGRpc3RhbmNlID1cblx0XHRcdFx0XHRheGlzID09PSAnWSdcblx0XHRcdFx0XHRcdD8gKGVsZW1lbnQubm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQgKiB2YWx1ZSkgLyAxMDBcblx0XHRcdFx0XHRcdDogKGVsZW1lbnQubm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCAqIHZhbHVlKSAvIDEwMDtcblx0XHRcdFx0YnJlYWtcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHRocm93IG5ldyBSYW5nZUVycm9yKCdVbnJlY29nbml6ZWQgb3IgbWlzc2luZyBkaXN0YW5jZSB1bml0LicpXG5cdFx0fVxuXG5cdFx0aWYgKGF4aXMgPT09ICdZJykge1xuXHRcdFx0dHJhbnNmb3JtYXRpb25zLnB1c2godHJhbnNsYXRlWShkaXN0YW5jZSkpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0cmFuc2Zvcm1hdGlvbnMucHVzaCh0cmFuc2xhdGVYKGRpc3RhbmNlKSk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKGNvbmZpZy5yb3RhdGUueCkgeyB0cmFuc2Zvcm1hdGlvbnMucHVzaChyb3RhdGVYKGNvbmZpZy5yb3RhdGUueCkpOyB9XG5cdGlmIChjb25maWcucm90YXRlLnkpIHsgdHJhbnNmb3JtYXRpb25zLnB1c2gocm90YXRlWShjb25maWcucm90YXRlLnkpKTsgfVxuXHRpZiAoY29uZmlnLnJvdGF0ZS56KSB7IHRyYW5zZm9ybWF0aW9ucy5wdXNoKHJvdGF0ZVooY29uZmlnLnJvdGF0ZS56KSk7IH1cblx0aWYgKGNvbmZpZy5zY2FsZSAhPT0gMSkge1xuXHRcdGlmIChjb25maWcuc2NhbGUgPT09IDApIHtcblx0XHRcdC8qKlxuXHRcdFx0ICogVGhlIENTUyBUcmFuc2Zvcm1zIG1hdHJpeCBpbnRlcnBvbGF0aW9uIHNwZWNpZmljYXRpb25cblx0XHRcdCAqIGJhc2ljYWxseSBkaXNhbGxvd3MgdHJhbnNpdGlvbnMgb2Ygbm9uLWludmVydGlibGVcblx0XHRcdCAqIG1hdHJpeGVzLCB3aGljaCBtZWFucyBicm93c2VycyB3b24ndCB0cmFuc2l0aW9uXG5cdFx0XHQgKiBlbGVtZW50cyB3aXRoIHplcm8gc2NhbGUuXG5cdFx0XHQgKlxuXHRcdFx0ICogVGhhdOKAmXMgaW5jb252ZW5pZW50IGZvciB0aGUgQVBJIGFuZCBkZXZlbG9wZXJcblx0XHRcdCAqIGV4cGVyaWVuY2UsIHNvIHdlIHNpbXBseSBudWRnZSB0aGVpciB2YWx1ZVxuXHRcdFx0ICogc2xpZ2h0bHkgYWJvdmUgemVybzsgdGhpcyBhbGxvd3MgYnJvd3NlcnNcblx0XHRcdCAqIHRvIHRyYW5zaXRpb24gb3VyIGVsZW1lbnQgYXMgZXhwZWN0ZWQuXG5cdFx0XHQgKlxuXHRcdFx0ICogYDAuMDAwMmAgd2FzIHRoZSBzbWFsbGVzdCBudW1iZXJcblx0XHRcdCAqIHRoYXQgcGVyZm9ybWVkIGFjcm9zcyBicm93c2Vycy5cblx0XHRcdCAqL1xuXHRcdFx0dHJhbnNmb3JtYXRpb25zLnB1c2goc2NhbGUoMC4wMDAyKSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRyYW5zZm9ybWF0aW9ucy5wdXNoKHNjYWxlKGNvbmZpZy5zY2FsZSkpO1xuXHRcdH1cblx0fVxuXG5cdHZhciB0cmFuc2Zvcm0gPSB7fTtcblx0aWYgKHRyYW5zZm9ybWF0aW9ucy5sZW5ndGgpIHtcblx0XHR0cmFuc2Zvcm0ucHJvcGVydHkgPSBnZXRQcmVmaXhlZENzc1Byb3AoJ3RyYW5zZm9ybScpO1xuXHRcdC8qKlxuXHRcdCAqIFRoZSBkZWZhdWx0IGNvbXB1dGVkIHRyYW5zZm9ybSB2YWx1ZSBzaG91bGQgYmUgb25lIG9mOlxuXHRcdCAqIHVuZGVmaW5lZCB8fCAnbm9uZScgfHwgJ21hdHJpeCgpJyB8fCAnbWF0cml4M2QoKSdcblx0XHQgKi9cblx0XHR0cmFuc2Zvcm0uY29tcHV0ZWQgPSB7XG5cdFx0XHRyYXc6IGNvbXB1dGVkW3RyYW5zZm9ybS5wcm9wZXJ0eV0sXG5cdFx0XHRtYXRyaXg6IHBhcnNlKGNvbXB1dGVkW3RyYW5zZm9ybS5wcm9wZXJ0eV0pXG5cdFx0fTtcblxuXHRcdHRyYW5zZm9ybWF0aW9ucy51bnNoaWZ0KHRyYW5zZm9ybS5jb21wdXRlZC5tYXRyaXgpO1xuXHRcdHZhciBwcm9kdWN0ID0gdHJhbnNmb3JtYXRpb25zLnJlZHVjZShtdWx0aXBseSk7XG5cblx0XHR0cmFuc2Zvcm0uZ2VuZXJhdGVkID0ge1xuXHRcdFx0aW5pdGlhbDogKCh0cmFuc2Zvcm0ucHJvcGVydHkpICsgXCI6IG1hdHJpeDNkKFwiICsgKHByb2R1Y3Quam9pbignLCAnKSkgKyBcIik7XCIpLFxuXHRcdFx0ZmluYWw6ICgodHJhbnNmb3JtLnByb3BlcnR5KSArIFwiOiBtYXRyaXgzZChcIiArICh0cmFuc2Zvcm0uY29tcHV0ZWQubWF0cml4LmpvaW4oJywgJykpICsgXCIpO1wiKVxuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0dHJhbnNmb3JtLmdlbmVyYXRlZCA9IHtcblx0XHRcdGluaXRpYWw6ICcnLFxuXHRcdFx0ZmluYWw6ICcnXG5cdFx0fTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZW5lcmF0ZSB0cmFuc2l0aW9uIHN0eWxlc1xuXHQgKi9cblx0dmFyIHRyYW5zaXRpb24gPSB7fTtcblx0aWYgKG9wYWNpdHkuZ2VuZXJhdGVkIHx8IHRyYW5zZm9ybS5nZW5lcmF0ZWQuaW5pdGlhbCkge1xuXHRcdHRyYW5zaXRpb24ucHJvcGVydHkgPSBnZXRQcmVmaXhlZENzc1Byb3AoJ3RyYW5zaXRpb24nKTtcblx0XHR0cmFuc2l0aW9uLmNvbXB1dGVkID0gY29tcHV0ZWRbdHJhbnNpdGlvbi5wcm9wZXJ0eV07XG5cdFx0dHJhbnNpdGlvbi5mcmFnbWVudHMgPSBbXTtcblxuXHRcdHZhciBkZWxheSA9IGNvbmZpZy5kZWxheTtcblx0XHR2YXIgZHVyYXRpb24gPSBjb25maWcuZHVyYXRpb247XG5cdFx0dmFyIGVhc2luZyA9IGNvbmZpZy5lYXNpbmc7XG5cblx0XHRpZiAob3BhY2l0eS5nZW5lcmF0ZWQpIHtcblx0XHRcdHRyYW5zaXRpb24uZnJhZ21lbnRzLnB1c2goe1xuXHRcdFx0XHRkZWxheWVkOiAoXCJvcGFjaXR5IFwiICsgKGR1cmF0aW9uIC8gMTAwMCkgKyBcInMgXCIgKyBlYXNpbmcgKyBcIiBcIiArIChkZWxheSAvIDEwMDApICsgXCJzXCIpLFxuXHRcdFx0XHRpbnN0YW50OiAoXCJvcGFjaXR5IFwiICsgKGR1cmF0aW9uIC8gMTAwMCkgKyBcInMgXCIgKyBlYXNpbmcgKyBcIiAwc1wiKVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKHRyYW5zZm9ybS5nZW5lcmF0ZWQuaW5pdGlhbCkge1xuXHRcdFx0dHJhbnNpdGlvbi5mcmFnbWVudHMucHVzaCh7XG5cdFx0XHRcdGRlbGF5ZWQ6ICgodHJhbnNmb3JtLnByb3BlcnR5KSArIFwiIFwiICsgKGR1cmF0aW9uIC8gMTAwMCkgKyBcInMgXCIgKyBlYXNpbmcgKyBcIiBcIiArIChkZWxheSAvIDEwMDApICsgXCJzXCIpLFxuXHRcdFx0XHRpbnN0YW50OiAoKHRyYW5zZm9ybS5wcm9wZXJ0eSkgKyBcIiBcIiArIChkdXJhdGlvbiAvIDEwMDApICsgXCJzIFwiICsgZWFzaW5nICsgXCIgMHNcIilcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBkZWZhdWx0IGNvbXB1dGVkIHRyYW5zaXRpb24gcHJvcGVydHkgc2hvdWxkIGJlIHVuZGVmaW5lZCwgb3Igb25lIG9mOlxuXHRcdCAqICcnIHx8ICdub25lIDBzIGVhc2UgMHMnIHx8ICdhbGwgMHMgZWFzZSAwcycgfHwgJ2FsbCAwcyAwcyBjdWJpYy1iZXppZXIoKSdcblx0XHQgKi9cblx0XHR2YXIgaGFzQ3VzdG9tVHJhbnNpdGlvbiA9XG5cdFx0XHR0cmFuc2l0aW9uLmNvbXB1dGVkICYmICF0cmFuc2l0aW9uLmNvbXB1dGVkLm1hdGNoKC9hbGwgMHN8bm9uZSAwcy8pO1xuXG5cdFx0aWYgKGhhc0N1c3RvbVRyYW5zaXRpb24pIHtcblx0XHRcdHRyYW5zaXRpb24uZnJhZ21lbnRzLnVuc2hpZnQoe1xuXHRcdFx0XHRkZWxheWVkOiB0cmFuc2l0aW9uLmNvbXB1dGVkLFxuXHRcdFx0XHRpbnN0YW50OiB0cmFuc2l0aW9uLmNvbXB1dGVkXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHR2YXIgY29tcG9zZWQgPSB0cmFuc2l0aW9uLmZyYWdtZW50cy5yZWR1Y2UoXG5cdFx0XHRmdW5jdGlvbiAoY29tcG9zaXRpb24sIGZyYWdtZW50LCBpKSB7XG5cdFx0XHRcdGNvbXBvc2l0aW9uLmRlbGF5ZWQgKz0gaSA9PT0gMCA/IGZyYWdtZW50LmRlbGF5ZWQgOiAoXCIsIFwiICsgKGZyYWdtZW50LmRlbGF5ZWQpKTtcblx0XHRcdFx0Y29tcG9zaXRpb24uaW5zdGFudCArPSBpID09PSAwID8gZnJhZ21lbnQuaW5zdGFudCA6IChcIiwgXCIgKyAoZnJhZ21lbnQuaW5zdGFudCkpO1xuXHRcdFx0XHRyZXR1cm4gY29tcG9zaXRpb25cblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGRlbGF5ZWQ6ICcnLFxuXHRcdFx0XHRpbnN0YW50OiAnJ1xuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHR0cmFuc2l0aW9uLmdlbmVyYXRlZCA9IHtcblx0XHRcdGRlbGF5ZWQ6ICgodHJhbnNpdGlvbi5wcm9wZXJ0eSkgKyBcIjogXCIgKyAoY29tcG9zZWQuZGVsYXllZCkgKyBcIjtcIiksXG5cdFx0XHRpbnN0YW50OiAoKHRyYW5zaXRpb24ucHJvcGVydHkpICsgXCI6IFwiICsgKGNvbXBvc2VkLmluc3RhbnQpICsgXCI7XCIpXG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHR0cmFuc2l0aW9uLmdlbmVyYXRlZCA9IHtcblx0XHRcdGRlbGF5ZWQ6ICcnLFxuXHRcdFx0aW5zdGFudDogJydcblx0XHR9O1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRpbmxpbmU6IGlubGluZSxcblx0XHRvcGFjaXR5OiBvcGFjaXR5LFxuXHRcdHBvc2l0aW9uOiBwb3NpdGlvbixcblx0XHR0cmFuc2Zvcm06IHRyYW5zZm9ybSxcblx0XHR0cmFuc2l0aW9uOiB0cmFuc2l0aW9uXG5cdH1cbn1cblxuZnVuY3Rpb24gYW5pbWF0ZShlbGVtZW50LCBmb3JjZSkge1xuXHRpZiAoIGZvcmNlID09PSB2b2lkIDAgKSBmb3JjZSA9IHt9O1xuXG5cdHZhciBwcmlzdGluZSA9IGZvcmNlLnByaXN0aW5lIHx8IHRoaXMucHJpc3RpbmU7XG5cdHZhciBkZWxheWVkID1cblx0XHRlbGVtZW50LmNvbmZpZy51c2VEZWxheSA9PT0gJ2Fsd2F5cycgfHxcblx0XHQoZWxlbWVudC5jb25maWcudXNlRGVsYXkgPT09ICdvbmxvYWQnICYmIHByaXN0aW5lKSB8fFxuXHRcdChlbGVtZW50LmNvbmZpZy51c2VEZWxheSA9PT0gJ29uY2UnICYmICFlbGVtZW50LnNlZW4pO1xuXG5cdHZhciBzaG91bGRSZXZlYWwgPSBlbGVtZW50LnZpc2libGUgJiYgIWVsZW1lbnQucmV2ZWFsZWQ7XG5cdHZhciBzaG91bGRSZXNldCA9ICFlbGVtZW50LnZpc2libGUgJiYgZWxlbWVudC5yZXZlYWxlZCAmJiBlbGVtZW50LmNvbmZpZy5yZXNldDtcblxuXHRpZiAoZm9yY2UucmV2ZWFsIHx8IHNob3VsZFJldmVhbCkge1xuXHRcdHJldHVybiB0cmlnZ2VyUmV2ZWFsLmNhbGwodGhpcywgZWxlbWVudCwgZGVsYXllZClcblx0fVxuXG5cdGlmIChmb3JjZS5yZXNldCB8fCBzaG91bGRSZXNldCkge1xuXHRcdHJldHVybiB0cmlnZ2VyUmVzZXQuY2FsbCh0aGlzLCBlbGVtZW50KVxuXHR9XG59XG5cbmZ1bmN0aW9uIHRyaWdnZXJSZXZlYWwoZWxlbWVudCwgZGVsYXllZCkge1xuXHR2YXIgc3R5bGVzID0gW1xuXHRcdGVsZW1lbnQuc3R5bGVzLmlubGluZS5nZW5lcmF0ZWQsXG5cdFx0ZWxlbWVudC5zdHlsZXMub3BhY2l0eS5jb21wdXRlZCxcblx0XHRlbGVtZW50LnN0eWxlcy50cmFuc2Zvcm0uZ2VuZXJhdGVkLmZpbmFsXG5cdF07XG5cdGlmIChkZWxheWVkKSB7XG5cdFx0c3R5bGVzLnB1c2goZWxlbWVudC5zdHlsZXMudHJhbnNpdGlvbi5nZW5lcmF0ZWQuZGVsYXllZCk7XG5cdH0gZWxzZSB7XG5cdFx0c3R5bGVzLnB1c2goZWxlbWVudC5zdHlsZXMudHJhbnNpdGlvbi5nZW5lcmF0ZWQuaW5zdGFudCk7XG5cdH1cblx0ZWxlbWVudC5yZXZlYWxlZCA9IGVsZW1lbnQuc2VlbiA9IHRydWU7XG5cdGVsZW1lbnQubm9kZS5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgc3R5bGVzLmZpbHRlcihmdW5jdGlvbiAocykgeyByZXR1cm4gcyAhPT0gJyc7IH0pLmpvaW4oJyAnKSk7XG5cdHJlZ2lzdGVyQ2FsbGJhY2tzLmNhbGwodGhpcywgZWxlbWVudCwgZGVsYXllZCk7XG59XG5cbmZ1bmN0aW9uIHRyaWdnZXJSZXNldChlbGVtZW50KSB7XG5cdHZhciBzdHlsZXMgPSBbXG5cdFx0ZWxlbWVudC5zdHlsZXMuaW5saW5lLmdlbmVyYXRlZCxcblx0XHRlbGVtZW50LnN0eWxlcy5vcGFjaXR5LmdlbmVyYXRlZCxcblx0XHRlbGVtZW50LnN0eWxlcy50cmFuc2Zvcm0uZ2VuZXJhdGVkLmluaXRpYWwsXG5cdFx0ZWxlbWVudC5zdHlsZXMudHJhbnNpdGlvbi5nZW5lcmF0ZWQuaW5zdGFudFxuXHRdO1xuXHRlbGVtZW50LnJldmVhbGVkID0gZmFsc2U7XG5cdGVsZW1lbnQubm9kZS5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgc3R5bGVzLmZpbHRlcihmdW5jdGlvbiAocykgeyByZXR1cm4gcyAhPT0gJyc7IH0pLmpvaW4oJyAnKSk7XG5cdHJlZ2lzdGVyQ2FsbGJhY2tzLmNhbGwodGhpcywgZWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyQ2FsbGJhY2tzKGVsZW1lbnQsIGlzRGVsYXllZCkge1xuXHR2YXIgdGhpcyQxID0gdGhpcztcblxuXHR2YXIgZHVyYXRpb24gPSBpc0RlbGF5ZWRcblx0XHQ/IGVsZW1lbnQuY29uZmlnLmR1cmF0aW9uICsgZWxlbWVudC5jb25maWcuZGVsYXlcblx0XHQ6IGVsZW1lbnQuY29uZmlnLmR1cmF0aW9uO1xuXG5cdHZhciBiZWZvcmVDYWxsYmFjayA9IGVsZW1lbnQucmV2ZWFsZWRcblx0XHQ/IGVsZW1lbnQuY29uZmlnLmJlZm9yZVJldmVhbFxuXHRcdDogZWxlbWVudC5jb25maWcuYmVmb3JlUmVzZXQ7XG5cblx0dmFyIGFmdGVyQ2FsbGJhY2sgPSBlbGVtZW50LnJldmVhbGVkXG5cdFx0PyBlbGVtZW50LmNvbmZpZy5hZnRlclJldmVhbFxuXHRcdDogZWxlbWVudC5jb25maWcuYWZ0ZXJSZXNldDtcblxuXHR2YXIgZWxhcHNlZCA9IDA7XG5cdGlmIChlbGVtZW50LmNhbGxiYWNrVGltZXIpIHtcblx0XHRlbGFwc2VkID0gRGF0ZS5ub3coKSAtIGVsZW1lbnQuY2FsbGJhY2tUaW1lci5zdGFydDtcblx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KGVsZW1lbnQuY2FsbGJhY2tUaW1lci5jbG9jayk7XG5cdH1cblxuXHRiZWZvcmVDYWxsYmFjayhlbGVtZW50Lm5vZGUpO1xuXG5cdGVsZW1lbnQuY2FsbGJhY2tUaW1lciA9IHtcblx0XHRzdGFydDogRGF0ZS5ub3coKSxcblx0XHRjbG9jazogd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXHRcdFx0YWZ0ZXJDYWxsYmFjayhlbGVtZW50Lm5vZGUpO1xuXHRcdFx0ZWxlbWVudC5jYWxsYmFja1RpbWVyID0gbnVsbDtcblx0XHRcdGlmIChlbGVtZW50LnJldmVhbGVkICYmICFlbGVtZW50LmNvbmZpZy5yZXNldCAmJiBlbGVtZW50LmNvbmZpZy5jbGVhbnVwKSB7XG5cdFx0XHRcdGNsZWFuLmNhbGwodGhpcyQxLCBlbGVtZW50Lm5vZGUpO1xuXHRcdFx0fVxuXHRcdH0sIGR1cmF0aW9uIC0gZWxhcHNlZClcblx0fTtcbn1cblxudmFyIG5leHRVbmlxdWVJZCA9IChmdW5jdGlvbiAoKSB7XG5cdHZhciB1aWQgPSAwO1xuXHRyZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gdWlkKys7IH1cbn0pKCk7XG5cbmZ1bmN0aW9uIHNlcXVlbmNlKGVsZW1lbnQsIHByaXN0aW5lKSB7XG5cdGlmICggcHJpc3RpbmUgPT09IHZvaWQgMCApIHByaXN0aW5lID0gdGhpcy5wcmlzdGluZTtcblxuXHQvKipcblx0ICogV2UgZmlyc3QgY2hlY2sgaWYgdGhlIGVsZW1lbnQgc2hvdWxkIHJlc2V0LlxuXHQgKi9cblx0aWYgKCFlbGVtZW50LnZpc2libGUgJiYgZWxlbWVudC5yZXZlYWxlZCAmJiBlbGVtZW50LmNvbmZpZy5yZXNldCkge1xuXHRcdHJldHVybiBhbmltYXRlLmNhbGwodGhpcywgZWxlbWVudCwgeyByZXNldDogdHJ1ZSB9KVxuXHR9XG5cblx0dmFyIHNlcSA9IHRoaXMuc3RvcmUuc2VxdWVuY2VzW2VsZW1lbnQuc2VxdWVuY2UuaWRdO1xuXHR2YXIgaSA9IGVsZW1lbnQuc2VxdWVuY2UuaW5kZXg7XG5cblx0aWYgKHNlcSkge1xuXHRcdHZhciB2aXNpYmxlID0gbmV3IFNlcXVlbmNlTW9kZWwoc2VxLCAndmlzaWJsZScsIHRoaXMuc3RvcmUpO1xuXHRcdHZhciByZXZlYWxlZCA9IG5ldyBTZXF1ZW5jZU1vZGVsKHNlcSwgJ3JldmVhbGVkJywgdGhpcy5zdG9yZSk7XG5cblx0XHRzZXEubW9kZWxzID0geyB2aXNpYmxlOiB2aXNpYmxlLCByZXZlYWxlZDogcmV2ZWFsZWQgfTtcblxuXHRcdC8qKlxuXHRcdCAqIElmIHRoZSBzZXF1ZW5jZSBoYXMgbm8gcmV2ZWFsZWQgbWVtYmVycyxcblx0XHQgKiB0aGVuIHdlIHJldmVhbCB0aGUgZmlyc3QgdmlzaWJsZSBlbGVtZW50XG5cdFx0ICogd2l0aGluIHRoYXQgc2VxdWVuY2UuXG5cdFx0ICpcblx0XHQgKiBUaGUgc2VxdWVuY2UgdGhlbiBjdWVzIGEgcmVjdXJzaXZlIGNhbGxcblx0XHQgKiBpbiBib3RoIGRpcmVjdGlvbnMuXG5cdFx0ICovXG5cdFx0aWYgKCFyZXZlYWxlZC5ib2R5Lmxlbmd0aCkge1xuXHRcdFx0dmFyIG5leHRJZCA9IHNlcS5tZW1iZXJzW3Zpc2libGUuYm9keVswXV07XG5cdFx0XHR2YXIgbmV4dEVsZW1lbnQgPSB0aGlzLnN0b3JlLmVsZW1lbnRzW25leHRJZF07XG5cblx0XHRcdGlmIChuZXh0RWxlbWVudCkge1xuXHRcdFx0XHRjdWUuY2FsbCh0aGlzLCBzZXEsIHZpc2libGUuYm9keVswXSwgLTEsIHByaXN0aW5lKTtcblx0XHRcdFx0Y3VlLmNhbGwodGhpcywgc2VxLCB2aXNpYmxlLmJvZHlbMF0sICsxLCBwcmlzdGluZSk7XG5cdFx0XHRcdHJldHVybiBhbmltYXRlLmNhbGwodGhpcywgbmV4dEVsZW1lbnQsIHsgcmV2ZWFsOiB0cnVlLCBwcmlzdGluZTogcHJpc3RpbmUgfSlcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvKipcblx0XHQgKiBJZiBvdXIgZWxlbWVudCBpc27igJl0IHJlc2V0dGluZywgd2UgY2hlY2sgdGhlXG5cdFx0ICogZWxlbWVudCBzZXF1ZW5jZSBpbmRleCBhZ2FpbnN0IHRoZSBoZWFkLCBhbmRcblx0XHQgKiB0aGVuIHRoZSBmb290IG9mIHRoZSBzZXF1ZW5jZS5cblx0XHQgKi9cblx0XHRpZiAoXG5cdFx0XHQhc2VxLmJsb2NrZWQuaGVhZCAmJlxuXHRcdFx0aSA9PT0gW10uY29uY2F0KCByZXZlYWxlZC5oZWFkICkucG9wKCkgJiZcblx0XHRcdGkgPj0gW10uY29uY2F0KCB2aXNpYmxlLmJvZHkgKS5zaGlmdCgpXG5cdFx0KSB7XG5cdFx0XHRjdWUuY2FsbCh0aGlzLCBzZXEsIGksIC0xLCBwcmlzdGluZSk7XG5cdFx0XHRyZXR1cm4gYW5pbWF0ZS5jYWxsKHRoaXMsIGVsZW1lbnQsIHsgcmV2ZWFsOiB0cnVlLCBwcmlzdGluZTogcHJpc3RpbmUgfSlcblx0XHR9XG5cblx0XHRpZiAoXG5cdFx0XHQhc2VxLmJsb2NrZWQuZm9vdCAmJlxuXHRcdFx0aSA9PT0gW10uY29uY2F0KCByZXZlYWxlZC5mb290ICkuc2hpZnQoKSAmJlxuXHRcdFx0aSA8PSBbXS5jb25jYXQoIHZpc2libGUuYm9keSApLnBvcCgpXG5cdFx0KSB7XG5cdFx0XHRjdWUuY2FsbCh0aGlzLCBzZXEsIGksICsxLCBwcmlzdGluZSk7XG5cdFx0XHRyZXR1cm4gYW5pbWF0ZS5jYWxsKHRoaXMsIGVsZW1lbnQsIHsgcmV2ZWFsOiB0cnVlLCBwcmlzdGluZTogcHJpc3RpbmUgfSlcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gU2VxdWVuY2UoaW50ZXJ2YWwpIHtcblx0dmFyIGkgPSBNYXRoLmFicyhpbnRlcnZhbCk7XG5cdGlmICghaXNOYU4oaSkpIHtcblx0XHR0aGlzLmlkID0gbmV4dFVuaXF1ZUlkKCk7XG5cdFx0dGhpcy5pbnRlcnZhbCA9IE1hdGgubWF4KGksIDE2KTtcblx0XHR0aGlzLm1lbWJlcnMgPSBbXTtcblx0XHR0aGlzLm1vZGVscyA9IHt9O1xuXHRcdHRoaXMuYmxvY2tlZCA9IHtcblx0XHRcdGhlYWQ6IGZhbHNlLFxuXHRcdFx0Zm9vdDogZmFsc2Vcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHNlcXVlbmNlIGludGVydmFsLicpXG5cdH1cbn1cblxuZnVuY3Rpb24gU2VxdWVuY2VNb2RlbChzZXEsIHByb3AsIHN0b3JlKSB7XG5cdHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cdHRoaXMuaGVhZCA9IFtdO1xuXHR0aGlzLmJvZHkgPSBbXTtcblx0dGhpcy5mb290ID0gW107XG5cblx0ZWFjaChzZXEubWVtYmVycywgZnVuY3Rpb24gKGlkLCBpbmRleCkge1xuXHRcdHZhciBlbGVtZW50ID0gc3RvcmUuZWxlbWVudHNbaWRdO1xuXHRcdGlmIChlbGVtZW50ICYmIGVsZW1lbnRbcHJvcF0pIHtcblx0XHRcdHRoaXMkMS5ib2R5LnB1c2goaW5kZXgpO1xuXHRcdH1cblx0fSk7XG5cblx0aWYgKHRoaXMuYm9keS5sZW5ndGgpIHtcblx0XHRlYWNoKHNlcS5tZW1iZXJzLCBmdW5jdGlvbiAoaWQsIGluZGV4KSB7XG5cdFx0XHR2YXIgZWxlbWVudCA9IHN0b3JlLmVsZW1lbnRzW2lkXTtcblx0XHRcdGlmIChlbGVtZW50ICYmICFlbGVtZW50W3Byb3BdKSB7XG5cdFx0XHRcdGlmIChpbmRleCA8IHRoaXMkMS5ib2R5WzBdKSB7XG5cdFx0XHRcdFx0dGhpcyQxLmhlYWQucHVzaChpbmRleCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcyQxLmZvb3QucHVzaChpbmRleCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fVxufVxuXG5mdW5jdGlvbiBjdWUoc2VxLCBpLCBkaXJlY3Rpb24sIHByaXN0aW5lKSB7XG5cdHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cdHZhciBibG9ja2VkID0gWydoZWFkJywgbnVsbCwgJ2Zvb3QnXVsxICsgZGlyZWN0aW9uXTtcblx0dmFyIG5leHRJZCA9IHNlcS5tZW1iZXJzW2kgKyBkaXJlY3Rpb25dO1xuXHR2YXIgbmV4dEVsZW1lbnQgPSB0aGlzLnN0b3JlLmVsZW1lbnRzW25leHRJZF07XG5cblx0c2VxLmJsb2NrZWRbYmxvY2tlZF0gPSB0cnVlO1xuXG5cdHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXHRcdHNlcS5ibG9ja2VkW2Jsb2NrZWRdID0gZmFsc2U7XG5cdFx0aWYgKG5leHRFbGVtZW50KSB7XG5cdFx0XHRzZXF1ZW5jZS5jYWxsKHRoaXMkMSwgbmV4dEVsZW1lbnQsIHByaXN0aW5lKTtcblx0XHR9XG5cdH0sIHNlcS5pbnRlcnZhbCk7XG59XG5cbmZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG5cdHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cdHJpbnNlLmNhbGwodGhpcyk7XG5cblx0ZWFjaCh0aGlzLnN0b3JlLmVsZW1lbnRzLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuXHRcdHZhciBzdHlsZXMgPSBbZWxlbWVudC5zdHlsZXMuaW5saW5lLmdlbmVyYXRlZF07XG5cblx0XHRpZiAoZWxlbWVudC52aXNpYmxlKSB7XG5cdFx0XHRzdHlsZXMucHVzaChlbGVtZW50LnN0eWxlcy5vcGFjaXR5LmNvbXB1dGVkKTtcblx0XHRcdHN0eWxlcy5wdXNoKGVsZW1lbnQuc3R5bGVzLnRyYW5zZm9ybS5nZW5lcmF0ZWQuZmluYWwpO1xuXHRcdFx0ZWxlbWVudC5yZXZlYWxlZCA9IHRydWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHN0eWxlcy5wdXNoKGVsZW1lbnQuc3R5bGVzLm9wYWNpdHkuZ2VuZXJhdGVkKTtcblx0XHRcdHN0eWxlcy5wdXNoKGVsZW1lbnQuc3R5bGVzLnRyYW5zZm9ybS5nZW5lcmF0ZWQuaW5pdGlhbCk7XG5cdFx0XHRlbGVtZW50LnJldmVhbGVkID0gZmFsc2U7XG5cdFx0fVxuXG5cdFx0ZWxlbWVudC5ub2RlLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBzdHlsZXMuZmlsdGVyKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzICE9PSAnJzsgfSkuam9pbignICcpKTtcblx0fSk7XG5cblx0ZWFjaCh0aGlzLnN0b3JlLmNvbnRhaW5lcnMsIGZ1bmN0aW9uIChjb250YWluZXIpIHtcblx0XHR2YXIgdGFyZ2V0ID1cblx0XHRcdGNvbnRhaW5lci5ub2RlID09PSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgPyB3aW5kb3cgOiBjb250YWluZXIubm9kZTtcblx0XHR0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcyQxLmRlbGVnYXRlKTtcblx0XHR0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcyQxLmRlbGVnYXRlKTtcblx0fSk7XG5cblx0LyoqXG5cdCAqIE1hbnVhbGx5IGludm9rZSBkZWxlZ2F0ZSBvbmNlIHRvIGNhcHR1cmVcblx0ICogZWxlbWVudCBhbmQgY29udGFpbmVyIGRpbWVuc2lvbnMsIGNvbnRhaW5lclxuXHQgKiBzY3JvbGwgcG9zaXRpb24sIGFuZCB0cmlnZ2VyIGFueSB2YWxpZCByZXZlYWxzXG5cdCAqL1xuXHR0aGlzLmRlbGVnYXRlKCk7XG5cblx0LyoqXG5cdCAqIFdpcGUgYW55IGV4aXN0aW5nIGBzZXRUaW1lb3V0YCBub3dcblx0ICogdGhhdCBpbml0aWFsaXphdGlvbiBoYXMgY29tcGxldGVkLlxuXHQgKi9cblx0dGhpcy5pbml0VGltZW91dCA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzTW9iaWxlKGFnZW50KSB7XG5cdGlmICggYWdlbnQgPT09IHZvaWQgMCApIGFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudDtcblxuXHRyZXR1cm4gL0FuZHJvaWR8aVBob25lfGlQYWR8aVBvZC9pLnRlc3QoYWdlbnQpXG59XG5cbmZ1bmN0aW9uIGRlZXBBc3NpZ24odGFyZ2V0KSB7XG5cdHZhciBzb3VyY2VzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAxO1xuXHR3aGlsZSAoIGxlbi0tID4gMCApIHNvdXJjZXNbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gKyAxIF07XG5cblx0aWYgKGlzT2JqZWN0KHRhcmdldCkpIHtcblx0XHRlYWNoKHNvdXJjZXMsIGZ1bmN0aW9uIChzb3VyY2UpIHtcblx0XHRcdGVhY2goc291cmNlLCBmdW5jdGlvbiAoZGF0YSwga2V5KSB7XG5cdFx0XHRcdGlmIChpc09iamVjdChkYXRhKSkge1xuXHRcdFx0XHRcdGlmICghdGFyZ2V0W2tleV0gfHwgIWlzT2JqZWN0KHRhcmdldFtrZXldKSkge1xuXHRcdFx0XHRcdFx0dGFyZ2V0W2tleV0gPSB7fTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGVlcEFzc2lnbih0YXJnZXRba2V5XSwgZGF0YSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGFyZ2V0W2tleV0gPSBkYXRhO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0XHRyZXR1cm4gdGFyZ2V0XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignVGFyZ2V0IG11c3QgYmUgYW4gb2JqZWN0IGxpdGVyYWwuJylcblx0fVxufVxuXG5mdW5jdGlvbiByZXZlYWwodGFyZ2V0LCBvcHRpb25zLCBzeW5jaW5nKSB7XG5cdHZhciB0aGlzJDEgPSB0aGlzO1xuXHRpZiAoIG9wdGlvbnMgPT09IHZvaWQgMCApIG9wdGlvbnMgPSB7fTtcblx0aWYgKCBzeW5jaW5nID09PSB2b2lkIDAgKSBzeW5jaW5nID0gZmFsc2U7XG5cblx0dmFyIGNvbnRhaW5lckJ1ZmZlciA9IFtdO1xuXHR2YXIgc2VxdWVuY2UkJDE7XG5cdHZhciBpbnRlcnZhbCA9IG9wdGlvbnMuaW50ZXJ2YWwgfHwgZGVmYXVsdHMuaW50ZXJ2YWw7XG5cblx0dHJ5IHtcblx0XHRpZiAoaW50ZXJ2YWwpIHtcblx0XHRcdHNlcXVlbmNlJCQxID0gbmV3IFNlcXVlbmNlKGludGVydmFsKTtcblx0XHR9XG5cblx0XHR2YXIgbm9kZXMgPSAkKHRhcmdldCk7XG5cdFx0aWYgKCFub2Rlcy5sZW5ndGgpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignSW52YWxpZCByZXZlYWwgdGFyZ2V0LicpXG5cdFx0fVxuXG5cdFx0dmFyIGVsZW1lbnRzID0gbm9kZXMucmVkdWNlKGZ1bmN0aW9uIChlbGVtZW50QnVmZmVyLCBlbGVtZW50Tm9kZSkge1xuXHRcdFx0dmFyIGVsZW1lbnQgPSB7fTtcblx0XHRcdHZhciBleGlzdGluZ0lkID0gZWxlbWVudE5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLXNyLWlkJyk7XG5cblx0XHRcdGlmIChleGlzdGluZ0lkKSB7XG5cdFx0XHRcdGRlZXBBc3NpZ24oZWxlbWVudCwgdGhpcyQxLnN0b3JlLmVsZW1lbnRzW2V4aXN0aW5nSWRdKTtcblxuXHRcdFx0XHQvKipcblx0XHRcdFx0ICogSW4gb3JkZXIgdG8gcHJldmVudCBwcmV2aW91c2x5IGdlbmVyYXRlZCBzdHlsZXNcblx0XHRcdFx0ICogZnJvbSB0aHJvd2luZyBvZmYgdGhlIG5ldyBzdHlsZXMsIHRoZSBzdHlsZSB0YWdcblx0XHRcdFx0ICogaGFzIHRvIGJlIHJldmVydGVkIHRvIGl0cyBwcmUtcmV2ZWFsIHN0YXRlLlxuXHRcdFx0XHQgKi9cblx0XHRcdFx0ZWxlbWVudC5ub2RlLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBlbGVtZW50LnN0eWxlcy5pbmxpbmUuY29tcHV0ZWQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudC5pZCA9IG5leHRVbmlxdWVJZCgpO1xuXHRcdFx0XHRlbGVtZW50Lm5vZGUgPSBlbGVtZW50Tm9kZTtcblx0XHRcdFx0ZWxlbWVudC5zZWVuID0gZmFsc2U7XG5cdFx0XHRcdGVsZW1lbnQucmV2ZWFsZWQgPSBmYWxzZTtcblx0XHRcdFx0ZWxlbWVudC52aXNpYmxlID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBjb25maWcgPSBkZWVwQXNzaWduKHt9LCBlbGVtZW50LmNvbmZpZyB8fCB0aGlzJDEuZGVmYXVsdHMsIG9wdGlvbnMpO1xuXG5cdFx0XHRpZiAoKCFjb25maWcubW9iaWxlICYmIGlzTW9iaWxlKCkpIHx8ICghY29uZmlnLmRlc2t0b3AgJiYgIWlzTW9iaWxlKCkpKSB7XG5cdFx0XHRcdGlmIChleGlzdGluZ0lkKSB7XG5cdFx0XHRcdFx0Y2xlYW4uY2FsbCh0aGlzJDEsIGVsZW1lbnQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBlbGVtZW50QnVmZmVyIC8vIHNraXAgZWxlbWVudHMgdGhhdCBhcmUgZGlzYWJsZWRcblx0XHRcdH1cblxuXHRcdFx0dmFyIGNvbnRhaW5lck5vZGUgPSAkKGNvbmZpZy5jb250YWluZXIpWzBdO1xuXHRcdFx0aWYgKCFjb250YWluZXJOb2RlKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb250YWluZXIuJylcblx0XHRcdH1cblx0XHRcdGlmICghY29udGFpbmVyTm9kZS5jb250YWlucyhlbGVtZW50Tm9kZSkpIHtcblx0XHRcdFx0cmV0dXJuIGVsZW1lbnRCdWZmZXIgLy8gc2tpcCBlbGVtZW50cyBmb3VuZCBvdXRzaWRlIHRoZSBjb250YWluZXJcblx0XHRcdH1cblxuXHRcdFx0dmFyIGNvbnRhaW5lcklkO1xuXHRcdFx0e1xuXHRcdFx0XHRjb250YWluZXJJZCA9IGdldENvbnRhaW5lcklkKFxuXHRcdFx0XHRcdGNvbnRhaW5lck5vZGUsXG5cdFx0XHRcdFx0Y29udGFpbmVyQnVmZmVyLFxuXHRcdFx0XHRcdHRoaXMkMS5zdG9yZS5jb250YWluZXJzXG5cdFx0XHRcdCk7XG5cdFx0XHRcdGlmIChjb250YWluZXJJZCA9PT0gbnVsbCkge1xuXHRcdFx0XHRcdGNvbnRhaW5lcklkID0gbmV4dFVuaXF1ZUlkKCk7XG5cdFx0XHRcdFx0Y29udGFpbmVyQnVmZmVyLnB1c2goeyBpZDogY29udGFpbmVySWQsIG5vZGU6IGNvbnRhaW5lck5vZGUgfSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0ZWxlbWVudC5jb25maWcgPSBjb25maWc7XG5cdFx0XHRlbGVtZW50LmNvbnRhaW5lcklkID0gY29udGFpbmVySWQ7XG5cdFx0XHRlbGVtZW50LnN0eWxlcyA9IHN0eWxlKGVsZW1lbnQpO1xuXG5cdFx0XHRpZiAoc2VxdWVuY2UkJDEpIHtcblx0XHRcdFx0ZWxlbWVudC5zZXF1ZW5jZSA9IHtcblx0XHRcdFx0XHRpZDogc2VxdWVuY2UkJDEuaWQsXG5cdFx0XHRcdFx0aW5kZXg6IHNlcXVlbmNlJCQxLm1lbWJlcnMubGVuZ3RoXG5cdFx0XHRcdH07XG5cdFx0XHRcdHNlcXVlbmNlJCQxLm1lbWJlcnMucHVzaChlbGVtZW50LmlkKTtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbWVudEJ1ZmZlci5wdXNoKGVsZW1lbnQpO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRCdWZmZXJcblx0XHR9LCBbXSk7XG5cblx0XHQvKipcblx0XHQgKiBNb2RpZnlpbmcgdGhlIERPTSB2aWEgc2V0QXR0cmlidXRlIG5lZWRzIHRvIGJlIGhhbmRsZWRcblx0XHQgKiBzZXBhcmF0ZWx5IGZyb20gcmVhZGluZyBjb21wdXRlZCBzdHlsZXMgaW4gdGhlIG1hcCBhYm92ZVxuXHRcdCAqIGZvciB0aGUgYnJvd3NlciB0byBiYXRjaCBET00gY2hhbmdlcyAobGltaXRpbmcgcmVmbG93cylcblx0XHQgKi9cblx0XHRlYWNoKGVsZW1lbnRzLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuXHRcdFx0dGhpcyQxLnN0b3JlLmVsZW1lbnRzW2VsZW1lbnQuaWRdID0gZWxlbWVudDtcblx0XHRcdGVsZW1lbnQubm9kZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3ItaWQnLCBlbGVtZW50LmlkKTtcblx0XHR9KTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBsb2dnZXIuY2FsbCh0aGlzLCAnUmV2ZWFsIGZhaWxlZC4nLCBlLm1lc3NhZ2UpXG5cdH1cblxuXHQvKipcblx0ICogTm93IHRoYXQgZWxlbWVudCBzZXQtdXAgaXMgY29tcGxldGUuLi5cblx0ICogTGV04oCZcyBjb21taXQgYW55IGNvbnRhaW5lciBhbmQgc2VxdWVuY2UgZGF0YSB3ZSBoYXZlIHRvIHRoZSBzdG9yZS5cblx0ICovXG5cdGVhY2goY29udGFpbmVyQnVmZmVyLCBmdW5jdGlvbiAoY29udGFpbmVyKSB7XG5cdFx0dGhpcyQxLnN0b3JlLmNvbnRhaW5lcnNbY29udGFpbmVyLmlkXSA9IHtcblx0XHRcdGlkOiBjb250YWluZXIuaWQsXG5cdFx0XHRub2RlOiBjb250YWluZXIubm9kZVxuXHRcdH07XG5cdH0pO1xuXHRpZiAoc2VxdWVuY2UkJDEpIHtcblx0XHR0aGlzLnN0b3JlLnNlcXVlbmNlc1tzZXF1ZW5jZSQkMS5pZF0gPSBzZXF1ZW5jZSQkMTtcblx0fVxuXG5cdC8qKlxuXHQgKiBJZiByZXZlYWwgd2Fzbid0IGludm9rZWQgYnkgc3luYywgd2Ugd2FudCB0b1xuXHQgKiBtYWtlIHN1cmUgdG8gYWRkIHRoaXMgY2FsbCB0byB0aGUgaGlzdG9yeS5cblx0ICovXG5cdGlmIChzeW5jaW5nICE9PSB0cnVlKSB7XG5cdFx0dGhpcy5zdG9yZS5oaXN0b3J5LnB1c2goeyB0YXJnZXQ6IHRhcmdldCwgb3B0aW9uczogb3B0aW9ucyB9KTtcblxuXHRcdC8qKlxuXHRcdCAqIFB1c2ggaW5pdGlhbGl6YXRpb24gdG8gdGhlIGV2ZW50IHF1ZXVlLCBnaXZpbmdcblx0XHQgKiBtdWx0aXBsZSByZXZlYWwgY2FsbHMgdGltZSB0byBiZSBpbnRlcnByZXRlZC5cblx0XHQgKi9cblx0XHRpZiAodGhpcy5pbml0VGltZW91dCkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCh0aGlzLmluaXRUaW1lb3V0KTtcblx0XHR9XG5cdFx0dGhpcy5pbml0VGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KGluaXRpYWxpemUuYmluZCh0aGlzKSwgMCk7XG5cdH1cbn1cblxuZnVuY3Rpb24gZ2V0Q29udGFpbmVySWQobm9kZSkge1xuXHR2YXIgY29sbGVjdGlvbnMgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7XG5cdHdoaWxlICggbGVuLS0gPiAwICkgY29sbGVjdGlvbnNbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gKyAxIF07XG5cblx0dmFyIGlkID0gbnVsbDtcblx0ZWFjaChjb2xsZWN0aW9ucywgZnVuY3Rpb24gKGNvbGxlY3Rpb24pIHtcblx0XHRlYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uIChjb250YWluZXIpIHtcblx0XHRcdGlmIChpZCA9PT0gbnVsbCAmJiBjb250YWluZXIubm9kZSA9PT0gbm9kZSkge1xuXHRcdFx0XHRpZCA9IGNvbnRhaW5lci5pZDtcblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG5cdHJldHVybiBpZFxufVxuXG4vKipcbiAqIFJlLXJ1bnMgdGhlIHJldmVhbCBtZXRob2QgZm9yIGVhY2ggcmVjb3JkIHN0b3JlZCBpbiBoaXN0b3J5LFxuICogZm9yIGNhcHR1cmluZyBuZXcgY29udGVudCBhc3luY2hyb25vdXNseSBsb2FkZWQgaW50byB0aGUgRE9NLlxuICovXG5mdW5jdGlvbiBzeW5jKCkge1xuXHR2YXIgdGhpcyQxID0gdGhpcztcblxuXHRlYWNoKHRoaXMuc3RvcmUuaGlzdG9yeSwgZnVuY3Rpb24gKHJlY29yZCkge1xuXHRcdHJldmVhbC5jYWxsKHRoaXMkMSwgcmVjb3JkLnRhcmdldCwgcmVjb3JkLm9wdGlvbnMsIHRydWUpO1xuXHR9KTtcblxuXHRpbml0aWFsaXplLmNhbGwodGhpcyk7XG59XG5cbnZhciBwb2x5ZmlsbCA9IGZ1bmN0aW9uICh4KSB7IHJldHVybiAoeCA+IDApIC0gKHggPCAwKSB8fCAreDsgfTtcbnZhciBtYXRoU2lnbiA9IE1hdGguc2lnbiB8fCBwb2x5ZmlsbDtcblxuZnVuY3Rpb24gZ2V0R2VvbWV0cnkodGFyZ2V0LCBpc0NvbnRhaW5lcikge1xuXHQvKipcblx0ICogV2Ugd2FudCB0byBpZ25vcmUgcGFkZGluZyBhbmQgc2Nyb2xsYmFycyBmb3IgY29udGFpbmVyIGVsZW1lbnRzLlxuXHQgKiBNb3JlIGluZm9ybWF0aW9uIGhlcmU6IGh0dHBzOi8vZ29vLmdsL3ZPWnBielxuXHQgKi9cblx0dmFyIGhlaWdodCA9IGlzQ29udGFpbmVyID8gdGFyZ2V0Lm5vZGUuY2xpZW50SGVpZ2h0IDogdGFyZ2V0Lm5vZGUub2Zmc2V0SGVpZ2h0O1xuXHR2YXIgd2lkdGggPSBpc0NvbnRhaW5lciA/IHRhcmdldC5ub2RlLmNsaWVudFdpZHRoIDogdGFyZ2V0Lm5vZGUub2Zmc2V0V2lkdGg7XG5cblx0dmFyIG9mZnNldFRvcCA9IDA7XG5cdHZhciBvZmZzZXRMZWZ0ID0gMDtcblx0dmFyIG5vZGUgPSB0YXJnZXQubm9kZTtcblxuXHRkbyB7XG5cdFx0aWYgKCFpc05hTihub2RlLm9mZnNldFRvcCkpIHtcblx0XHRcdG9mZnNldFRvcCArPSBub2RlLm9mZnNldFRvcDtcblx0XHR9XG5cdFx0aWYgKCFpc05hTihub2RlLm9mZnNldExlZnQpKSB7XG5cdFx0XHRvZmZzZXRMZWZ0ICs9IG5vZGUub2Zmc2V0TGVmdDtcblx0XHR9XG5cdFx0bm9kZSA9IG5vZGUub2Zmc2V0UGFyZW50O1xuXHR9IHdoaWxlIChub2RlKVxuXG5cdHJldHVybiB7XG5cdFx0Ym91bmRzOiB7XG5cdFx0XHR0b3A6IG9mZnNldFRvcCxcblx0XHRcdHJpZ2h0OiBvZmZzZXRMZWZ0ICsgd2lkdGgsXG5cdFx0XHRib3R0b206IG9mZnNldFRvcCArIGhlaWdodCxcblx0XHRcdGxlZnQ6IG9mZnNldExlZnRcblx0XHR9LFxuXHRcdGhlaWdodDogaGVpZ2h0LFxuXHRcdHdpZHRoOiB3aWR0aFxuXHR9XG59XG5cbmZ1bmN0aW9uIGdldFNjcm9sbGVkKGNvbnRhaW5lcikge1xuXHR2YXIgdG9wLCBsZWZ0O1xuXHRpZiAoY29udGFpbmVyLm5vZGUgPT09IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuXHRcdHRvcCA9IHdpbmRvdy5wYWdlWU9mZnNldDtcblx0XHRsZWZ0ID0gd2luZG93LnBhZ2VYT2Zmc2V0O1xuXHR9IGVsc2Uge1xuXHRcdHRvcCA9IGNvbnRhaW5lci5ub2RlLnNjcm9sbFRvcDtcblx0XHRsZWZ0ID0gY29udGFpbmVyLm5vZGUuc2Nyb2xsTGVmdDtcblx0fVxuXHRyZXR1cm4geyB0b3A6IHRvcCwgbGVmdDogbGVmdCB9XG59XG5cbmZ1bmN0aW9uIGlzRWxlbWVudFZpc2libGUoZWxlbWVudCkge1xuXHRpZiAoIGVsZW1lbnQgPT09IHZvaWQgMCApIGVsZW1lbnQgPSB7fTtcblxuXHR2YXIgY29udGFpbmVyID0gdGhpcy5zdG9yZS5jb250YWluZXJzW2VsZW1lbnQuY29udGFpbmVySWRdO1xuXHRpZiAoIWNvbnRhaW5lcikgeyByZXR1cm4gfVxuXG5cdHZhciB2aWV3RmFjdG9yID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgZWxlbWVudC5jb25maWcudmlld0ZhY3RvcikpO1xuXHR2YXIgdmlld09mZnNldCA9IGVsZW1lbnQuY29uZmlnLnZpZXdPZmZzZXQ7XG5cblx0dmFyIGVsZW1lbnRCb3VuZHMgPSB7XG5cdFx0dG9wOiBlbGVtZW50Lmdlb21ldHJ5LmJvdW5kcy50b3AgKyBlbGVtZW50Lmdlb21ldHJ5LmhlaWdodCAqIHZpZXdGYWN0b3IsXG5cdFx0cmlnaHQ6IGVsZW1lbnQuZ2VvbWV0cnkuYm91bmRzLnJpZ2h0IC0gZWxlbWVudC5nZW9tZXRyeS53aWR0aCAqIHZpZXdGYWN0b3IsXG5cdFx0Ym90dG9tOiBlbGVtZW50Lmdlb21ldHJ5LmJvdW5kcy5ib3R0b20gLSBlbGVtZW50Lmdlb21ldHJ5LmhlaWdodCAqIHZpZXdGYWN0b3IsXG5cdFx0bGVmdDogZWxlbWVudC5nZW9tZXRyeS5ib3VuZHMubGVmdCArIGVsZW1lbnQuZ2VvbWV0cnkud2lkdGggKiB2aWV3RmFjdG9yXG5cdH07XG5cblx0dmFyIGNvbnRhaW5lckJvdW5kcyA9IHtcblx0XHR0b3A6IGNvbnRhaW5lci5nZW9tZXRyeS5ib3VuZHMudG9wICsgY29udGFpbmVyLnNjcm9sbC50b3AgKyB2aWV3T2Zmc2V0LnRvcCxcblx0XHRyaWdodDogY29udGFpbmVyLmdlb21ldHJ5LmJvdW5kcy5yaWdodCArIGNvbnRhaW5lci5zY3JvbGwubGVmdCAtIHZpZXdPZmZzZXQucmlnaHQsXG5cdFx0Ym90dG9tOlxuXHRcdFx0Y29udGFpbmVyLmdlb21ldHJ5LmJvdW5kcy5ib3R0b20gKyBjb250YWluZXIuc2Nyb2xsLnRvcCAtIHZpZXdPZmZzZXQuYm90dG9tLFxuXHRcdGxlZnQ6IGNvbnRhaW5lci5nZW9tZXRyeS5ib3VuZHMubGVmdCArIGNvbnRhaW5lci5zY3JvbGwubGVmdCArIHZpZXdPZmZzZXQubGVmdFxuXHR9O1xuXG5cdHJldHVybiAoXG5cdFx0KGVsZW1lbnRCb3VuZHMudG9wIDwgY29udGFpbmVyQm91bmRzLmJvdHRvbSAmJlxuXHRcdFx0ZWxlbWVudEJvdW5kcy5yaWdodCA+IGNvbnRhaW5lckJvdW5kcy5sZWZ0ICYmXG5cdFx0XHRlbGVtZW50Qm91bmRzLmJvdHRvbSA+IGNvbnRhaW5lckJvdW5kcy50b3AgJiZcblx0XHRcdGVsZW1lbnRCb3VuZHMubGVmdCA8IGNvbnRhaW5lckJvdW5kcy5yaWdodCkgfHxcblx0XHRlbGVtZW50LnN0eWxlcy5wb3NpdGlvbiA9PT0gJ2ZpeGVkJ1xuXHQpXG59XG5cbmZ1bmN0aW9uIGRlbGVnYXRlKFxuXHRldmVudCxcblx0ZWxlbWVudHNcbikge1xuXHR2YXIgdGhpcyQxID0gdGhpcztcblx0aWYgKCBldmVudCA9PT0gdm9pZCAwICkgZXZlbnQgPSB7IHR5cGU6ICdpbml0JyB9O1xuXHRpZiAoIGVsZW1lbnRzID09PSB2b2lkIDAgKSBlbGVtZW50cyA9IHRoaXMuc3RvcmUuZWxlbWVudHM7XG5cblx0cmFmKGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgc3RhbGUgPSBldmVudC50eXBlID09PSAnaW5pdCcgfHwgZXZlbnQudHlwZSA9PT0gJ3Jlc2l6ZSc7XG5cblx0XHRlYWNoKHRoaXMkMS5zdG9yZS5jb250YWluZXJzLCBmdW5jdGlvbiAoY29udGFpbmVyKSB7XG5cdFx0XHRpZiAoc3RhbGUpIHtcblx0XHRcdFx0Y29udGFpbmVyLmdlb21ldHJ5ID0gZ2V0R2VvbWV0cnkuY2FsbCh0aGlzJDEsIGNvbnRhaW5lciwgdHJ1ZSk7XG5cdFx0XHR9XG5cdFx0XHR2YXIgc2Nyb2xsID0gZ2V0U2Nyb2xsZWQuY2FsbCh0aGlzJDEsIGNvbnRhaW5lcik7XG5cdFx0XHRpZiAoY29udGFpbmVyLnNjcm9sbCkge1xuXHRcdFx0XHRjb250YWluZXIuZGlyZWN0aW9uID0ge1xuXHRcdFx0XHRcdHg6IG1hdGhTaWduKHNjcm9sbC5sZWZ0IC0gY29udGFpbmVyLnNjcm9sbC5sZWZ0KSxcblx0XHRcdFx0XHR5OiBtYXRoU2lnbihzY3JvbGwudG9wIC0gY29udGFpbmVyLnNjcm9sbC50b3ApXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHRjb250YWluZXIuc2Nyb2xsID0gc2Nyb2xsO1xuXHRcdH0pO1xuXG5cdFx0LyoqXG5cdFx0ICogRHVlIHRvIGhvdyB0aGUgc2VxdWVuY2VyIGlzIGltcGxlbWVudGVkLCBpdOKAmXNcblx0XHQgKiBpbXBvcnRhbnQgdGhhdCB3ZSB1cGRhdGUgdGhlIHN0YXRlIG9mIGFsbFxuXHRcdCAqIGVsZW1lbnRzLCBiZWZvcmUgYW55IGFuaW1hdGlvbiBsb2dpYyBpc1xuXHRcdCAqIGV2YWx1YXRlZCAoaW4gdGhlIHNlY29uZCBsb29wIGJlbG93KS5cblx0XHQgKi9cblx0XHRlYWNoKGVsZW1lbnRzLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuXHRcdFx0aWYgKHN0YWxlKSB7XG5cdFx0XHRcdGVsZW1lbnQuZ2VvbWV0cnkgPSBnZXRHZW9tZXRyeS5jYWxsKHRoaXMkMSwgZWxlbWVudCk7XG5cdFx0XHR9XG5cdFx0XHRlbGVtZW50LnZpc2libGUgPSBpc0VsZW1lbnRWaXNpYmxlLmNhbGwodGhpcyQxLCBlbGVtZW50KTtcblx0XHR9KTtcblxuXHRcdGVhY2goZWxlbWVudHMsIGZ1bmN0aW9uIChlbGVtZW50KSB7XG5cdFx0XHRpZiAoZWxlbWVudC5zZXF1ZW5jZSkge1xuXHRcdFx0XHRzZXF1ZW5jZS5jYWxsKHRoaXMkMSwgZWxlbWVudCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRhbmltYXRlLmNhbGwodGhpcyQxLCBlbGVtZW50KTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHRoaXMkMS5wcmlzdGluZSA9IGZhbHNlO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gaXNUcmFuc2Zvcm1TdXBwb3J0ZWQoKSB7XG5cdHZhciBzdHlsZSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZTtcblx0cmV0dXJuICd0cmFuc2Zvcm0nIGluIHN0eWxlIHx8ICdXZWJraXRUcmFuc2Zvcm0nIGluIHN0eWxlXG59XG5cbmZ1bmN0aW9uIGlzVHJhbnNpdGlvblN1cHBvcnRlZCgpIHtcblx0dmFyIHN0eWxlID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlO1xuXHRyZXR1cm4gJ3RyYW5zaXRpb24nIGluIHN0eWxlIHx8ICdXZWJraXRUcmFuc2l0aW9uJyBpbiBzdHlsZVxufVxuXG52YXIgdmVyc2lvbiA9IFwiNC4wLjZcIjtcblxudmFyIGJvdW5kRGVsZWdhdGU7XG52YXIgYm91bmREZXN0cm95O1xudmFyIGJvdW5kUmV2ZWFsO1xudmFyIGJvdW5kQ2xlYW47XG52YXIgYm91bmRTeW5jO1xudmFyIGNvbmZpZztcbnZhciBkZWJ1ZztcbnZhciBpbnN0YW5jZTtcblxuZnVuY3Rpb24gU2Nyb2xsUmV2ZWFsKG9wdGlvbnMpIHtcblx0aWYgKCBvcHRpb25zID09PSB2b2lkIDAgKSBvcHRpb25zID0ge307XG5cblx0dmFyIGludm9rZWRXaXRob3V0TmV3ID1cblx0XHR0eXBlb2YgdGhpcyA9PT0gJ3VuZGVmaW5lZCcgfHxcblx0XHRPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykgIT09IFNjcm9sbFJldmVhbC5wcm90b3R5cGU7XG5cblx0aWYgKGludm9rZWRXaXRob3V0TmV3KSB7XG5cdFx0cmV0dXJuIG5ldyBTY3JvbGxSZXZlYWwob3B0aW9ucylcblx0fVxuXG5cdGlmICghU2Nyb2xsUmV2ZWFsLmlzU3VwcG9ydGVkKCkpIHtcblx0XHRsb2dnZXIuY2FsbCh0aGlzLCAnSW5zdGFudGlhdGlvbiBmYWlsZWQuJywgJ1RoaXMgYnJvd3NlciBpcyBub3Qgc3VwcG9ydGVkLicpO1xuXHRcdHJldHVybiBtb3VudC5mYWlsdXJlKClcblx0fVxuXG5cdHZhciBidWZmZXI7XG5cdHRyeSB7XG5cdFx0YnVmZmVyID0gY29uZmlnXG5cdFx0XHQ/IGRlZXBBc3NpZ24oe30sIGNvbmZpZywgb3B0aW9ucylcblx0XHRcdDogZGVlcEFzc2lnbih7fSwgZGVmYXVsdHMsIG9wdGlvbnMpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0bG9nZ2VyLmNhbGwodGhpcywgJ0ludmFsaWQgY29uZmlndXJhdGlvbi4nLCBlLm1lc3NhZ2UpO1xuXHRcdHJldHVybiBtb3VudC5mYWlsdXJlKClcblx0fVxuXG5cdHRyeSB7XG5cdFx0dmFyIGNvbnRhaW5lciA9ICQoYnVmZmVyLmNvbnRhaW5lcilbMF07XG5cdFx0aWYgKCFjb250YWluZXIpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb250YWluZXIuJylcblx0XHR9XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRsb2dnZXIuY2FsbCh0aGlzLCBlLm1lc3NhZ2UpO1xuXHRcdHJldHVybiBtb3VudC5mYWlsdXJlKClcblx0fVxuXG5cdGNvbmZpZyA9IGJ1ZmZlcjtcblxuXHRpZiAoKCFjb25maWcubW9iaWxlICYmIGlzTW9iaWxlKCkpIHx8ICghY29uZmlnLmRlc2t0b3AgJiYgIWlzTW9iaWxlKCkpKSB7XG5cdFx0bG9nZ2VyLmNhbGwoXG5cdFx0XHR0aGlzLFxuXHRcdFx0J1RoaXMgZGV2aWNlIGlzIGRpc2FibGVkLicsXG5cdFx0XHQoXCJkZXNrdG9wOiBcIiArIChjb25maWcuZGVza3RvcCkpLFxuXHRcdFx0KFwibW9iaWxlOiBcIiArIChjb25maWcubW9iaWxlKSlcblx0XHQpO1xuXHRcdHJldHVybiBtb3VudC5mYWlsdXJlKClcblx0fVxuXG5cdG1vdW50LnN1Y2Nlc3MoKTtcblxuXHR0aGlzLnN0b3JlID0ge1xuXHRcdGNvbnRhaW5lcnM6IHt9LFxuXHRcdGVsZW1lbnRzOiB7fSxcblx0XHRoaXN0b3J5OiBbXSxcblx0XHRzZXF1ZW5jZXM6IHt9XG5cdH07XG5cblx0dGhpcy5wcmlzdGluZSA9IHRydWU7XG5cblx0Ym91bmREZWxlZ2F0ZSA9IGJvdW5kRGVsZWdhdGUgfHwgZGVsZWdhdGUuYmluZCh0aGlzKTtcblx0Ym91bmREZXN0cm95ID0gYm91bmREZXN0cm95IHx8IGRlc3Ryb3kuYmluZCh0aGlzKTtcblx0Ym91bmRSZXZlYWwgPSBib3VuZFJldmVhbCB8fCByZXZlYWwuYmluZCh0aGlzKTtcblx0Ym91bmRDbGVhbiA9IGJvdW5kQ2xlYW4gfHwgY2xlYW4uYmluZCh0aGlzKTtcblx0Ym91bmRTeW5jID0gYm91bmRTeW5jIHx8IHN5bmMuYmluZCh0aGlzKTtcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2RlbGVnYXRlJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJvdW5kRGVsZWdhdGU7IH0gfSk7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnZGVzdHJveScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBib3VuZERlc3Ryb3k7IH0gfSk7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAncmV2ZWFsJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJvdW5kUmV2ZWFsOyB9IH0pO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2NsZWFuJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJvdW5kQ2xlYW47IH0gfSk7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnc3luYycsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBib3VuZFN5bmM7IH0gfSk7XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdkZWZhdWx0cycsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25maWc7IH0gfSk7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAndmVyc2lvbicsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB2ZXJzaW9uOyB9IH0pO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ25vb3AnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFsc2U7IH0gfSk7XG5cblx0cmV0dXJuIGluc3RhbmNlID8gaW5zdGFuY2UgOiAoaW5zdGFuY2UgPSB0aGlzKVxufVxuXG5TY3JvbGxSZXZlYWwuaXNTdXBwb3J0ZWQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBpc1RyYW5zZm9ybVN1cHBvcnRlZCgpICYmIGlzVHJhbnNpdGlvblN1cHBvcnRlZCgpOyB9O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoU2Nyb2xsUmV2ZWFsLCAnZGVidWcnLCB7XG5cdGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVidWcgfHwgZmFsc2U7IH0sXG5cdHNldDogZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiAoZGVidWcgPSB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyA/IHZhbHVlIDogZGVidWcpOyB9XG59KTtcblxuU2Nyb2xsUmV2ZWFsKCk7XG5cbmV4cG9ydCBkZWZhdWx0IFNjcm9sbFJldmVhbDtcbiIsImltcG9ydCB7IHBhbm9yYW1hX2xpc3QgfSBmcm9tIFwiLi9kYXRhL3BhcmFub21hLmpzXCI7XG5pbXBvcnQgeyBob3RzcG90X2xpc3QgfSBmcm9tIFwiLi9kYXRhL2hvdHNwb3RzLmpzXCI7XG5pbXBvcnQgeyB2aWV3RGF0YSB9IGZyb20gXCIuL3ZpZXdEYXRhLmpzXCI7XG5pbXBvcnQgU2Nyb2xsUmV2ZWFsIGZyb20gXCJzY3JvbGxyZXZlYWxcIjtcbmltcG9ydCB7IHByb3h5IH0gZnJvbSBcImpxdWVyeVwiO1xud2luZG93LnNyID0gU2Nyb2xsUmV2ZWFsKCk7XG5cbndpbmRvdy4kID0gcmVxdWlyZShcImpxdWVyeVwiKTtcbmNvbnN0IGZlYXRoZXIgPSByZXF1aXJlKFwiZmVhdGhlci1pY29uc1wiKTtcblxuLy9Ub3VyXG5cbkFGUkFNRS5yZWdpc3RlclByaW1pdGl2ZShcImEtdG91clwiLCB7XG4gIGRlZmF1bHRDb21wb25lbnRzOiB7XG4gICAgdG91cjoge30sXG4gIH0sXG59KTtcblxuQUZSQU1FLnJlZ2lzdGVyQ29tcG9uZW50KFwidG91clwiLCB7XG4gIHNjaGVtYToge1xuICAgIGN1cnJlbnRfcGFub19pZDogeyB0eXBlOiBcInN0cmluZ1wiIH0sXG4gICAgcHJldmlvdXNfcGFub19pZHM6IHsgdHlwZTogXCJhcnJheVwiIH0sXG4gIH0sXG5cbiAgaW5pdDogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuc2t5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImEtc2t5XCIpO1xuICAgIHRoaXMuc2t5LnNldEF0dHJpYnV0ZShcImlkXCIsIFwic2t5XCIpO1xuICAgIC8vIHRoaXMuc2t5MiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhLXNreVwiKTtcbiAgICAvLyB0aGlzLnNreTIuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJza3kyXCIpO1xuICAgIC8vIHRoaXMuc2t5Mi5zZXRBdHRyaWJ1dGUoXCJvcGFjaXR5XCIsIDApO1xuICAgIHRoaXMuc2t5LnNldEF0dHJpYnV0ZShcbiAgICAgIFwiYW5pbWF0aW9uX19mYWRlaW5cIixcbiAgICAgIFwicHJvcGVydHk6bWF0ZXJpYWwub3BhY2l0eTt0bzoxO2R1cjo1MDA7c3RhcnRFdmVudHM6c2t5RmFkZUluXCJcbiAgICApO1xuICAgIHRoaXMuc2t5LnNldEF0dHJpYnV0ZShcbiAgICAgIFwiYW5pbWF0aW9uX19mYWRlb3V0XCIsXG4gICAgICBcInByb3BlcnR5Om1hdGVyaWFsLm9wYWNpdHk7dG86MDtkdXI6MTAwMDtzdGFydEV2ZW50czpza3lGYWRlT3V0XCJcbiAgICApO1xuICAgIC8vIHRoaXMuZWwuYXBwZW5kQ2hpbGQodGhpcy5za3kyKTtcbiAgICB0aGlzLmVsLmFwcGVuZENoaWxkKHRoaXMuc2t5KTtcbiAgICB2YXIgY2FtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW1lcmFcIik7XG4gICAgdmFyIHNldENhbWVyYSA9IHRoaXMuc2V0Q2FtZXJhLmJpbmQodGhpcyk7XG4gICAgdmFyIHNldEhvdHNwb3RzID0gdGhpcy5zZXRIb3RzcG90cy5iaW5kKHRoaXMpO1xuICAgIHZhciBzZXRIb3RzcG90c1Zpc2libGUgPSB0aGlzLnNldEhvdHNwb3RzVmlzaWJsZS5iaW5kKHRoaXMpO1xuXG4gICAgY2FtLmFkZEV2ZW50TGlzdGVuZXIoXCJhbmltYXRpb25jb21wbGV0ZVwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKGUuZGV0YWlsLm5hbWUgPT0gXCJhbmltYXRpb25fX3pvb21pblwiKSB7XG4gICAgICAgIGxldCB0b3VyQ29tcG9uZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImEtdG91clwiKS5jb21wb25lbnRzW1widG91clwiXTtcbiAgICAgICAgdG91ckNvbXBvbmVudC51cGRhdGVTa3lJbWFnZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuc2t5LmFkZEV2ZW50TGlzdGVuZXIoXCJtYXRlcmlhbHRleHR1cmVsb2FkZWRcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIC8vIGxvYWRlZF9zcmMgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJzcmNcIik7XG4gICAgICAvLyBpZiAobG9hZGVkX3NyYy5zdWJzdHIoLTgpID09IFwiX3ByZS5qcGdcIikge1xuICAgICAgLy8gY2FtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW1lcmFcIik7XG4gICAgICAvLyBza3kuZW1pdChcInNreUZhZGVJblwiKTtcbiAgICAgIC8vIGNhbS5lbWl0KFwiem9vbW91dFwiKTtcbiAgICAgIC8vIHNldENhbWVyYSgpO1xuICAgICAgLy8gc2V0SG90c3BvdHMoKTtcbiAgICAgIC8vIGUudGFyZ2V0LnNldEF0dHJpYnV0ZShcInNyY1wiLCBsb2FkZWRfc3JjLnNsaWNlKDAsIC04KSArIFwiLmpwZ1wiKTtcbiAgICAgIC8vIH1cbiAgICAgIC8vIHZhciBza3kyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImEtc2t5XCIpO1xuICAgICAgLy8gc2t5Mi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcInNreTJcIik7XG4gICAgICAvLyBza3kyLnNldEF0dHJpYnV0ZSgnc3JjJywgJ2Fzc2V0cy9teXBodW9jL3RlcnJhY2UvTVAzX1RFUl9FLmpwZycpXG4gICAgICBjYW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbWVyYVwiKTtcbiAgICAgIGNhbS5lbWl0KFwiem9vbW91dFwiKTtcbiAgICAgIHNreS5lbWl0KFwic2t5RmFkZUluXCIpO1xuICAgICAgc2V0Q2FtZXJhKCk7XG4gICAgICBzZXRIb3RzcG90cygpO1xuICAgICAgaWYgKCEkKFwiLmludHJvXCIpLmlzKFwiOnZpc2libGVcIikpIHtcbiAgICAgICAgc2V0VGltZW91dChzZXRIb3RzcG90c1Zpc2libGUsIDIwMDApO1xuICAgICAgfVxuICAgICAgd2luZG93LnNyLnJldmVhbChcIi5oZWFkaW5nLWNvbnRlbnRcIiwge1xuICAgICAgICBkZWxheTogMTAwLFxuICAgICAgICBpbnRlcnZhbDogNTAsXG4gICAgICAgIG9yaWdpbjogXCJsZWZ0XCIsXG4gICAgICAgIGRpc3RhbmNlOiBcIjUwcHhcIixcbiAgICAgIH0pO1xuICAgICAgd2luZG93LnNyLnJldmVhbChcIi5zY3JvbGxkb3duLWluZGljYXRvciAuc3ZcIiwge1xuICAgICAgICBkZWxheTogMTUwLFxuICAgICAgICBpbnRlcnZhbDogNTAsXG4gICAgICAgIG9yaWdpbjogXCJsZWZ0XCIsXG4gICAgICAgIGRpc3RhbmNlOiBcIjUwcHhcIixcbiAgICAgIH0pO1xuICAgICAgd2luZG93LnNyLnJldmVhbChcIi5oaWdobGlnaHQgLnBvaW50XCIsIHtcbiAgICAgICAgaW50ZXJ2YWw6IDUwLFxuICAgICAgICBvcmlnaW46IFwiYm90dG9tXCIsXG4gICAgICAgIGRpc3RhbmNlOiBcIjUwcHhcIixcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGhpcy5sb2FkU2NlbmVJZCh0aGlzLmdldEluaXRpYWxWaWV3SWQoKSwgdHJ1ZSk7XG4gICAgLy8gdGhpcy5sb2FkU2NlbmVJZChcIkJCX0RFVF9PXCIsIHRydWUpO1xuICB9LFxuXG4gIGdldEluaXRpYWxWaWV3SWQ6IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgaW5pdElkID1cbiAgICAgIHRoaXMuZWwuZ2V0QXR0cmlidXRlKFwibmFtZVwiKSA9PSBcIm15cGh1b2NcIlxuICAgICAgICA/IFwiTVAzX09WRVJWSUVXXCJcbiAgICAgICAgOiBcIkJCX09WRVJWSUVXXCI7XG4gICAgcmV0dXJuIGluaXRJZDtcbiAgfSxcblxuICBsb2FkU2NlbmVJZDogZnVuY3Rpb24gKGlkLCBpc0ZpcnN0TG9hZCkge1xuICAgIGNvbnN0IGltYWdlUGFubyA9IHRoaXMuZWwucXVlcnlTZWxlY3RvcihcImEtcGFub3JhbWEjbWFpblwiKTtcbiAgICAvLyBsZXQgY3VycmVudFZpZXdJZCA9IGltYWdlUGFuby5jb21wb25lbnRzW1wicGFub3JhbWFcIl0uZGF0YS52aWV3SWQ7XG4gICAgLy8gaWYgKGN1cnJlbnRWaWV3SWQgIT09IFwiXCIpIHtcbiAgICAvLyAgIGhpc3RvcnkucHVzaFN0YXRlKHsgdmlld0lkOiBjdXJyZW50Vmlld0lkIH0sIFwiXCIpO1xuICAgIC8vIH1cbiAgICBpbWFnZVBhbm8uY29tcG9uZW50c1tcInBhbm9yYW1hXCJdLnVwZGF0ZURhdGEoaWQpO1xuICAgIHRoaXMuY2xlYXJIb3RzcG90cygpO1xuICAgIHRoaXMuZWwuc2V0QXR0cmlidXRlKFxuICAgICAgXCJ0b3VyXCIsXG4gICAgICBcImN1cnJlbnRfcGFub19pZFwiLFxuICAgICAgaW1hZ2VQYW5vLmdldEF0dHJpYnV0ZShcInZpZXctaWRcIilcbiAgICApO1xuICAgIHRoaXMubG9hZEltYWdlKGlzRmlyc3RMb2FkKTtcbiAgICBpZiAoIWlzRmlyc3RMb2FkKSB7XG4gICAgICBpZiAoaWQgIT09IFwiTVAzX09WRVJWSUVXXCIpIHtcbiAgICAgICAgJChcIi5hbWVuaXRpZXNcIikuaGlkZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJChcIi5hbWVuaXRpZXNcIikuZmFkZUluKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlkID09PSBcIk1QM19TRU1JX0RFVEFDSEVEXCIpIHtcbiAgICAgIFNjcm9sbFJldmVhbCgpLnJldmVhbChcIi5za2lwLXZpZGVvLWJ1dHRvblwiLCB7XG4gICAgICAgIHNjYWxlOiAwLjUsXG4gICAgICAgIHJlc2V0OiB0cnVlLFxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIGxvYWRJbWFnZTogZnVuY3Rpb24gKGlzRmlyc3RMb2FkKSB7XG4gICAgbGV0IHNreSA9IHRoaXMuc2t5O1xuICAgIGxldCBjYW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbWVyYVwiKTtcbiAgICBpZiAoIWlzRmlyc3RMb2FkKSB7XG4gICAgICBjYW0uZW1pdChcInpvb21pblwiKTtcbiAgICAgIHNreS5lbWl0KFwic2t5RmFkZU91dFwiKTtcbiAgICAgICQoXCIuc3Bpbm5lclwiKS5zaG93KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudXBkYXRlU2t5SW1hZ2UoKTtcbiAgICB9XG4gIH0sXG5cbiAgdXBkYXRlU2t5SW1hZ2U6IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgcGFub0lkID0gdGhpcy5kYXRhLmN1cnJlbnRfcGFub19pZDtcbiAgICBsZXQgaW1hZ2VQYW5vID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yKFwiYS1wYW5vcmFtYSNtYWluXCIpO1xuICAgIGxldCBzcmMgPSBpbWFnZVBhbm8uY29tcG9uZW50c1tcInBhbm9yYW1hXCJdLmRhdGEuc3JjO1xuICAgIC8vIGlmICghVEhSRUUuQ2FjaGUuZmlsZXNbc3JjXSAmJiBzcmMuc3Vic3RyKC00KSA9PSAnLmpwZycpIHsgLy9jaGVjayBpZiBpbWcgaXMgYWxlYWR5IGNhY2hlZFxuICAgIC8vICAgc3JjID0gc3JjLnN1YnN0cmluZygwLCBzcmMubGVuZ3RoIC0gNCkgKyAnX3ByZS5qcGcnXG4gICAgLy8gfVxuICAgIC8vIGNvbnNvbGUubG9nKFwic3JjOiBcIiwgc3JjKVxuICAgIHRoaXMuc2t5LnNldEF0dHJpYnV0ZShcInNyY1wiLCBzcmMpO1xuICAgIHdpbmRvdy5kaXNwbGF5RGltZW50aW9uKHBhbm9JZCk7XG4gICAgd2luZG93LmNoYW5nZVZpZXdOYW1lKHBhbm9JZCk7XG4gIH0sXG5cbiAgc2V0SG90c3BvdHM6IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgaWQgPSB0aGlzLmRhdGEuY3VycmVudF9wYW5vX2lkO1xuICAgIGxldCBob3RzcG90RGF0YSA9IGhvdHNwb3RfbGlzdFtpZF07XG5cbiAgICBob3RzcG90RGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChob3RzcG90KSB7XG4gICAgICAkKGhvdHNwb3QpLmFwcGVuZFRvKFwiI2hvdHNwb3QtZ3JvdXBcIik7XG4gICAgfSk7XG4gIH0sXG4gIHNldEhvdHNwb3RzVmlzaWJsZTogZnVuY3Rpb24gKCkge1xuICAgICQoXCIjaG90c3BvdC1ncm91cFwiKS5jaGlsZHJlbigpLmF0dHIoXCJ2aXNpYmxlXCIsIHRydWUpO1xuICB9LFxuXG4gIGNsZWFySG90c3BvdHM6IGZ1bmN0aW9uICgpIHtcbiAgICAkKFwiI2hvdHNwb3QtZ3JvdXBcIikuZW1wdHkoKTtcbiAgfSxcblxuICBzZXRDYW1lcmE6IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgcGFub0lkID0gdGhpcy5kYXRhLmN1cnJlbnRfcGFub19pZDtcbiAgICBsZXQgaW1hZ2VQYW5vRGF0YSA9IHRoaXMuZWwucXVlcnlTZWxlY3RvcihcImEtcGFub3JhbWEjbWFpblwiKS5jb21wb25lbnRzW1xuICAgICAgXCJwYW5vcmFtYVwiXG4gICAgXS5kYXRhO1xuICAgIGxldCBjYW1lcmEgPSB0aGlzLmVsLnNjZW5lRWwuY2FtZXJhLmVsO1xuICAgIC8vIHNreS5zZXRBdHRyaWJ1dGUoJ3JvdGF0aW9uJywgaW1hZ2UuZ2V0QXR0cmlidXRlKCdyb3RhdGlvbicpKVxuICAgIGNhbWVyYS5wYXJlbnRFbC5zZXRBdHRyaWJ1dGUoXCJyb3RhdGlvblwiLCBpbWFnZVBhbm9EYXRhLnJvdGF0aW9uKTtcbiAgICBjYW1lcmEucGFyZW50RWwuc2V0QXR0cmlidXRlKFwicG9zaXRpb25cIiwgaW1hZ2VQYW5vRGF0YS5wb3NpdGlvbik7XG4gICAgbGV0IHhSb3RhdGlvbiA9IGltYWdlUGFub0RhdGEueHZhbHVlID8gcGFyc2VGbG9hdChpbWFnZVBhbm9EYXRhLnh2YWx1ZSkgOiAwO1xuICAgIGNhbWVyYS5jb21wb25lbnRzW1wibG9vay1jb250cm9sc1wiXS5waXRjaE9iamVjdC5yb3RhdGlvbi54ID0geFJvdGF0aW9uO1xuICAgIGNhbWVyYS5jb21wb25lbnRzW1wibG9vay1jb250cm9sc1wiXS55YXdPYmplY3Qucm90YXRpb24ueSA9IDA7XG4gIH0sXG5cbiAgcHVzaFByZXZpb3VzUGFub0lkczogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmRhdGEuY3VycmVudF9wYW5vX2lkICE9IFwiXCIpIHtcbiAgICAgIHRoaXMuZWwuc2V0QXR0cmlidXRlKFwidG91clwiLCBcInByZXZpb3VzX3Bhbm9faWRzXCIsIFtcbiAgICAgICAgLi4udGhpcy5kYXRhLnByZXZpb3VzX3Bhbm9faWRzLFxuICAgICAgICB0aGlzLmRhdGEuY3VycmVudF9wYW5vX2lkLFxuICAgICAgXSk7XG4gICAgfVxuICB9LFxufSk7XG5cbi8vIFBhbm9yYW1hXG5cbkFGUkFNRS5yZWdpc3RlclByaW1pdGl2ZShcImEtcGFub3JhbWFcIiwge1xuICBkZWZhdWx0Q29tcG9uZW50czoge1xuICAgIHBhbm9yYW1hOiB7fSxcbiAgfSxcbn0pO1xuXG5BRlJBTUUucmVnaXN0ZXJDb21wb25lbnQoXCJwYW5vcmFtYVwiLCB7XG4gIHNjaGVtYToge1xuICAgIHJvdGF0aW9uOiB7IHR5cGU6IFwidmVjM1wiIH0sXG4gICAgcG9zaXRpb246IHsgdHlwZTogXCJ2ZWMzXCIgfSxcbiAgICB4dmFsdWU6IHsgdHlwZTogXCJudW1iZXJcIiwgZGVmYXVsdDogMCB9LFxuICAgIHNyYzogeyB0eXBlOiBcInN0cmluZ1wiIH0sXG4gICAgbmV4dDogeyB0eXBlOiBcInN0cmluZ1wiLCBkZWZhdWx0OiBcIlwiIH0sXG4gICAgdmlld0lkOiB7IHR5cGU6IFwic3RyaW5nXCIgfSxcbiAgfSxcblxuICB1cGRhdGVEYXRhOiBmdW5jdGlvbiAodmlld0lkKSB7XG4gICAgbGV0IHBhbm9EYXRhID0gcGFub3JhbWFfbGlzdFt2aWV3SWRdO1xuICAgIHRoaXMuZWwuc2V0QXR0cmlidXRlKFwicGFub3JhbWFcIiwgcGFub0RhdGEpO1xuICAgIHRoaXMuZWwuc2V0QXR0cmlidXRlKFwidmlldy1pZFwiLCB2aWV3SWQpO1xuICB9LFxufSk7XG5cbi8vIEhvdHNwb3RcblxuQUZSQU1FLnJlZ2lzdGVyUHJpbWl0aXZlKFwiYS1ob3RzcG90XCIsIHtcbiAgZGVmYXVsdENvbXBvbmVudHM6IHtcbiAgICBob3RzcG90OiB7fSxcbiAgfSxcbiAgbWFwcGluZ3M6IHtcbiAgICBmb3I6IFwiaG90c3BvdC5mb3JcIixcbiAgICB0bzogXCJob3RzcG90LnRvXCIsXG4gICAgY2xpY2thYmxlOiBcImhvdHNwb3QuY2xpY2thYmxlXCIsXG4gICAgXCJlbmFibGUtdmlkZW9cIjogXCJob3RzcG90LmVuYWJsZS12aWRlb1wiLFxuICB9LFxufSk7XG5cbkFGUkFNRS5yZWdpc3RlckNvbXBvbmVudChcImhvdHNwb3RcIiwge1xuICBzY2hlbWE6IHtcbiAgICBmb3I6IHsgdHlwZTogXCJzdHJpbmdcIiB9LFxuICAgIHRvOiB7IHR5cGU6IFwic3RyaW5nXCIgfSxcbiAgICBcImVuYWJsZS12aWRlb1wiOiB7IHR5cGU6IFwiYm9vbGVhblwiLCBkZWZhdWx0OiBmYWxzZSB9LFxuICAgIGNsaWNrYWJsZTogeyB0eXBlOiBcImJvb2xlYW5cIiwgZGVmYXVsdDogdHJ1ZSB9LFxuICAgIGVuYWJsZTogeyB0eXBlOiBcImJvb2xlYW5cIiwgZGVmYXVsdDogZmFsc2UgfSxcbiAgICBwb3NpdGlvbmluZzogeyB0eXBlOiBcImJvb2xlYW5cIiwgZGVmYXVsdDogZmFsc2UgfSxcbiAgfSxcblxuICBpbml0OiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy50b3VyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImEtdG91clwiKTtcbiAgICBpZiAodGhpcy5kYXRhLmNsaWNrYWJsZSkge1xuICAgICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5oYW5kbGVDbGljay5iaW5kKHRoaXMpKTtcbiAgICB9XG4gIH0sXG5cbiAgaGFuZGxlQ2xpY2s6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5kYXRhLnBvc2l0aW9uaW5nKSByZXR1cm47XG4gICAgdmFyIHRvdXIgPSB0aGlzLnRvdXIuY29tcG9uZW50c1tcInRvdXJcIl07XG4gICAgdG91ci5wdXNoUHJldmlvdXNQYW5vSWRzKCk7XG4gICAgdG91ci5sb2FkU2NlbmVJZCh0aGlzLmRhdGEudG8sIGZhbHNlKTtcbiAgfSxcbn0pO1xuXG4kKGZ1bmN0aW9uICgpIHtcbiAgZmVhdGhlci5yZXBsYWNlKCk7XG4gIHZhciBtZW51SG92ZXJUaW1lcjtcbiAgJChcIi5uYXYgLm1lbnUtdG9nZ2xlclwiKS5tb3VzZWVudGVyKGZ1bmN0aW9uICgpIHtcbiAgICAkKFwiLmV4dGVuZGVkLW5hdlwiKS5jc3MoXCJkaXNwbGF5XCIsIFwiZmxleFwiKTtcbiAgICAkKFwiI292ZXJsYXlcIikuc2hvdygpO1xuICB9KTtcbiAgJChcIi5leHRlbmRlZC1uYXYgLm1lbnUtdG9nZ2xlciwgI292ZXJsYXksIC5pbnRyb1wiKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgJChcIi5leHRlbmRlZC1uYXZcIikuY3NzKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XG4gICAgJChcIiNvdmVybGF5XCIpLmhpZGUoKTtcbiAgfSk7XG5cbiAgJChcIi5leHRlbmRlZC1uYXZcIilcbiAgICAubW91c2VvdmVyKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNsZWFyVGltZW91dChtZW51SG92ZXJUaW1lcik7XG4gICAgfSlcbiAgICAubW91c2VsZWF2ZShmdW5jdGlvbiAoKSB7XG4gICAgICBtZW51SG92ZXJUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAkKFwiLmV4dGVuZGVkLW5hdlwiKS5jc3MoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcbiAgICAgICAgJChcIiNvdmVybGF5XCIpLmhpZGUoKTtcbiAgICAgIH0sIDUwMCk7XG4gICAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=
